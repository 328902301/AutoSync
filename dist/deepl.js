(function () {
	'use strict';

	var n$1,l$2,u$2,t$2,o$3,r$3,f$2={},e$3=[],c$2=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function s$2(n,l){for(var u in l)n[u]=l[u];return n}function a$2(n){var l=n.parentNode;l&&l.removeChild(n);}function h$1(l,u,i){var t,o,r,f={};for(r in u)"key"==r?t=u[r]:"ref"==r?o=u[r]:f[r]=u[r];if(arguments.length>2&&(f.children=arguments.length>3?n$1.call(arguments,2):i),"function"==typeof l&&null!=l.defaultProps)for(r in l.defaultProps)void 0===f[r]&&(f[r]=l.defaultProps[r]);return v$1(l,f,t,o,null)}function v$1(n,i,t,o,r){var f={type:n,props:i,key:t,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==r?++u$2:r};return null==r&&null!=l$2.vnode&&l$2.vnode(f),f}function y$1(){return {current:null}}function p$2(n){return n.children}function d$2(n,l){this.props=n,this.context=l;}function _$2(n,l){if(null==l)return n.__?_$2(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return "function"==typeof n.type?_$2(n):null}function k$2(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break}return k$2(n)}}function b$2(n){(!n.__d&&(n.__d=!0)&&t$2.push(n)&&!g$3.__r++||o$3!==l$2.debounceRendering)&&((o$3=l$2.debounceRendering)||setTimeout)(g$3);}function g$3(){for(var n;g$3.__r=t$2.length;)n=t$2.sort(function(n,l){return n.__v.__b-l.__v.__b}),t$2=[],n.some(function(n){var l,u,i,t,o,r;n.__d&&(o=(t=(l=n).__v).__e,(r=l.__P)&&(u=[],(i=s$2({},t)).__v=t.__v+1,j$2(r,t,i,l.__n,void 0!==r.ownerSVGElement,null!=t.__h?[o]:null,u,null==o?_$2(t):o,t.__h),z$2(u,t),t.__e!=o&&k$2(t)));});}function w$2(n,l,u,i,t,o,r,c,s,a){var h,y,d,k,b,g,w,x=i&&i.__k||e$3,C=x.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(k=u.__k[h]=null==(k=l[h])||"boolean"==typeof k?null:"string"==typeof k||"number"==typeof k||"bigint"==typeof k?v$1(null,k,null,null,k):Array.isArray(k)?v$1(p$2,{children:k},null,null,null):k.__b>0?v$1(k.type,k.props,k.key,k.ref?k.ref:null,k.__v):k)){if(k.__=u,k.__b=u.__b+1,null===(d=x[h])||d&&k.key==d.key&&k.type===d.type)x[h]=void 0;else for(y=0;y<C;y++){if((d=x[y])&&k.key==d.key&&k.type===d.type){x[y]=void 0;break}d=null;}j$2(n,k,d=d||f$2,t,o,r,c,s,a),b=k.__e,(y=k.ref)&&d.ref!=y&&(w||(w=[]),d.ref&&w.push(d.ref,null,k),w.push(y,k.__c||b,k)),null!=b?(null==g&&(g=b),"function"==typeof k.type&&k.__k===d.__k?k.__d=s=m$1(k,s,n):s=A$2(n,k,d,x,b,s),"function"==typeof u.type&&(u.__d=s)):s&&d.__e==s&&s.parentNode!=n&&(s=_$2(d));}for(u.__e=g,h=C;h--;)null!=x[h]&&N$1(x[h],x[h]);if(w)for(h=0;h<w.length;h++)M$1(w[h],w[++h],w[++h]);}function m$1(n,l,u){for(var i,t=n.__k,o=0;t&&o<t.length;o++)(i=t[o])&&(i.__=n,l="function"==typeof i.type?m$1(i,l,u):A$2(u,i,i,t,i.__e,l));return l}function x$2(n,l){return l=l||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some(function(n){x$2(n,l);}):l.push(n)),l}function A$2(n,l,u,i,t,o){var r,f,e;if(void 0!==l.__d)r=l.__d,l.__d=void 0;else if(null==u||t!=o||null==t.parentNode)n:if(null==o||o.parentNode!==n)n.appendChild(t),r=null;else {for(f=o,e=0;(f=f.nextSibling)&&e<i.length;e+=1)if(f==t)break n;n.insertBefore(t,o),r=o;}return void 0!==r?r:t.nextSibling}function C$1(n,l,u,i,t){var o;for(o in u)"children"===o||"key"===o||o in l||H$1(n,o,null,u[o],i);for(o in l)t&&"function"!=typeof l[o]||"children"===o||"key"===o||"value"===o||"checked"===o||u[o]===l[o]||H$1(n,o,l[o],u[o],i);}function $$1(n,l,u){"-"===l[0]?n.setProperty(l,u):n[l]=null==u?"":"number"!=typeof u||c$2.test(l)?u:u+"px";}function H$1(n,l,u,i,t){var o;n:if("style"===l)if("string"==typeof u)n.style.cssText=u;else {if("string"==typeof i&&(n.style.cssText=i=""),i)for(l in i)u&&l in u||$$1(n.style,l,"");if(u)for(l in u)i&&u[l]===i[l]||$$1(n.style,l,u[l]);}else if("o"===l[0]&&"n"===l[1])o=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?i||n.addEventListener(l,o?T$2:I$1,o):n.removeEventListener(l,o?T$2:I$1,o);else if("dangerouslySetInnerHTML"!==l){if(t)l=l.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n}catch(n){}"function"==typeof u||(null==u||!1===u&&-1==l.indexOf("-")?n.removeAttribute(l):n.setAttribute(l,u));}}function I$1(n){this.l[n.type+!1](l$2.event?l$2.event(n):n);}function T$2(n){this.l[n.type+!0](l$2.event?l$2.event(n):n);}function j$2(n,u,i,t,o,r,f,e,c){var a,h,v,y,_,k,b,g,m,x,A,C,$,H,I,T=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(c=i.__h,e=u.__e=i.__e,u.__h=null,r=[e]),(a=l$2.__b)&&a(u);try{n:if("function"==typeof T){if(g=u.props,m=(a=T.contextType)&&t[a.__c],x=a?m?m.props.value:a.__:t,i.__c?b=(h=u.__c=i.__c).__=h.__E:("prototype"in T&&T.prototype.render?u.__c=h=new T(g,x):(u.__c=h=new d$2(g,x),h.constructor=T,h.render=O$1),m&&m.sub(h),h.props=g,h.state||(h.state={}),h.context=x,h.__n=t,v=h.__d=!0,h.__h=[],h._sb=[]),null==h.__s&&(h.__s=h.state),null!=T.getDerivedStateFromProps&&(h.__s==h.state&&(h.__s=s$2({},h.__s)),s$2(h.__s,T.getDerivedStateFromProps(g,h.__s))),y=h.props,_=h.state,v)null==T.getDerivedStateFromProps&&null!=h.componentWillMount&&h.componentWillMount(),null!=h.componentDidMount&&h.__h.push(h.componentDidMount);else {if(null==T.getDerivedStateFromProps&&g!==y&&null!=h.componentWillReceiveProps&&h.componentWillReceiveProps(g,x),!h.__e&&null!=h.shouldComponentUpdate&&!1===h.shouldComponentUpdate(g,h.__s,x)||u.__v===i.__v){for(h.props=g,h.state=h.__s,u.__v!==i.__v&&(h.__d=!1),h.__v=u,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u);}),A=0;A<h._sb.length;A++)h.__h.push(h._sb[A]);h._sb=[],h.__h.length&&f.push(h);break n}null!=h.componentWillUpdate&&h.componentWillUpdate(g,h.__s,x),null!=h.componentDidUpdate&&h.__h.push(function(){h.componentDidUpdate(y,_,k);});}if(h.context=x,h.props=g,h.__v=u,h.__P=n,C=l$2.__r,$=0,"prototype"in T&&T.prototype.render){for(h.state=h.__s,h.__d=!1,C&&C(u),a=h.render(h.props,h.state,h.context),H=0;H<h._sb.length;H++)h.__h.push(h._sb[H]);h._sb=[];}else do{h.__d=!1,C&&C(u),a=h.render(h.props,h.state,h.context),h.state=h.__s;}while(h.__d&&++$<25);h.state=h.__s,null!=h.getChildContext&&(t=s$2(s$2({},t),h.getChildContext())),v||null==h.getSnapshotBeforeUpdate||(k=h.getSnapshotBeforeUpdate(y,_)),I=null!=a&&a.type===p$2&&null==a.key?a.props.children:a,w$2(n,Array.isArray(I)?I:[I],u,i,t,o,r,f,e,c),h.base=u.__e,u.__h=null,h.__h.length&&f.push(h),b&&(h.__E=h.__=null),h.__e=!1;}else null==r&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=L$1(i.__e,u,i,t,o,r,f,c);(a=l$2.diffed)&&a(u);}catch(n){u.__v=null,(c||null!=r)&&(u.__e=e,u.__h=!!c,r[r.indexOf(e)]=null),l$2.__e(n,u,i);}}function z$2(n,u){l$2.__c&&l$2.__c(u,n),n.some(function(u){try{n=u.__h,u.__h=[],n.some(function(n){n.call(u);});}catch(n){l$2.__e(n,u.__v);}});}function L$1(l,u,i,t,o,r,e,c){var s,h,v,y=i.props,p=u.props,d=u.type,k=0;if("svg"===d&&(o=!0),null!=r)for(;k<r.length;k++)if((s=r[k])&&"setAttribute"in s==!!d&&(d?s.localName===d:3===s.nodeType)){l=s,r[k]=null;break}if(null==l){if(null===d)return document.createTextNode(p);l=o?document.createElementNS("http://www.w3.org/2000/svg",d):document.createElement(d,p.is&&p),r=null,c=!1;}if(null===d)y===p||c&&l.data===p||(l.data=p);else {if(r=r&&n$1.call(l.childNodes),h=(y=i.props||f$2).dangerouslySetInnerHTML,v=p.dangerouslySetInnerHTML,!c){if(null!=r)for(y={},k=0;k<l.attributes.length;k++)y[l.attributes[k].name]=l.attributes[k].value;(v||h)&&(v&&(h&&v.__html==h.__html||v.__html===l.innerHTML)||(l.innerHTML=v&&v.__html||""));}if(C$1(l,p,y,o,c),v)u.__k=[];else if(k=u.props.children,w$2(l,Array.isArray(k)?k:[k],u,i,t,o&&"foreignObject"!==d,r,e,r?r[0]:i.__k&&_$2(i,0),c),null!=r)for(k=r.length;k--;)null!=r[k]&&a$2(r[k]);c||("value"in p&&void 0!==(k=p.value)&&(k!==l.value||"progress"===d&&!k||"option"===d&&k!==y.value)&&H$1(l,"value",k,y.value,!1),"checked"in p&&void 0!==(k=p.checked)&&k!==l.checked&&H$1(l,"checked",k,y.checked,!1));}return l}function M$1(n,u,i){try{"function"==typeof n?n(u):n.current=u;}catch(n){l$2.__e(n,i);}}function N$1(n,u,i){var t,o;if(l$2.unmount&&l$2.unmount(n),(t=n.ref)&&(t.current&&t.current!==n.__e||M$1(t,null,u)),null!=(t=n.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(n){l$2.__e(n,u);}t.base=t.__P=null,n.__c=void 0;}if(t=n.__k)for(o=0;o<t.length;o++)t[o]&&N$1(t[o],u,i||"function"!=typeof n.type);i||null==n.__e||a$2(n.__e),n.__=n.__e=n.__d=void 0;}function O$1(n,l,u){return this.constructor(n,u)}function P$2(u,i,t){var o,r,e;l$2.__&&l$2.__(u,i),r=(o="function"==typeof t)?null:t&&t.__k||i.__k,e=[],j$2(i,u=(!o&&t||i).__k=h$1(p$2,null,[u]),r||f$2,f$2,void 0!==i.ownerSVGElement,!o&&t?[t]:r?null:i.firstChild?n$1.call(i.childNodes):null,e,!o&&t?t:r?r.__e:i.firstChild,o),z$2(e,u);}function S(n,l){P$2(n,l,S);}function q$2(l,u,i){var t,o,r,f=s$2({},l.props);for(r in u)"key"==r?t=u[r]:"ref"==r?o=u[r]:f[r]=u[r];return arguments.length>2&&(f.children=arguments.length>3?n$1.call(arguments,2):i),v$1(l.type,f,t||l.key,o||l.ref,null)}function B$2(n,l){var u={__c:l="__cC"+r$3++,__:n,Consumer:function(n,l){return n.children(l)},Provider:function(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(b$2);},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children}};return u.Provider.__=u.Consumer.contextType=u}n$1=e$3.slice,l$2={__e:function(n,l,u,i){for(var t,o,r;l=l.__;)if((t=l.__c)&&!t.__)try{if((o=t.constructor)&&null!=o.getDerivedStateFromError&&(t.setState(o.getDerivedStateFromError(n)),r=t.__d),null!=t.componentDidCatch&&(t.componentDidCatch(n,i||{}),r=t.__d),r)return t.__E=t}catch(l){n=l;}throw n}},u$2=0,d$2.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=s$2({},this.state),"function"==typeof n&&(n=n(s$2({},u),this.props)),n&&s$2(u,n),null!=n&&this.__v&&(l&&this._sb.push(l),b$2(this));},d$2.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),b$2(this));},d$2.prototype.render=p$2,t$2=[],g$3.__r=0,r$3=0;

	var _$1=0;function o$2(o,e,n,t,f){var l,s,u={};for(s in e)"ref"==s?l=e[s]:u[s]=e[s];var a={type:o,props:u,key:n,ref:l,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--_$1,__source:f,__self:t};if("function"==typeof o&&(l=o.defaultProps))for(s in l)void 0===u[s]&&(u[s]=l[s]);return l$2.vnode&&l$2.vnode(a),a}

	var jsxRuntime_module = /*#__PURE__*/Object.freeze({
		__proto__: null,
		jsx: o$2,
		jsxDEV: o$2,
		jsxs: o$2,
		Fragment: p$2
	});

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
					var args = [null];
					args.push.apply(args, arguments);
					var Ctor = Function.bind.apply(f, args);
					return new Ctor();
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var notistack = {exports: {}};

	var notistack_cjs_development = {};

	var t$1,r$2,u$1,i$1,o$1=0,f$1=[],c$1=[],e$2=l$2.__b,a$1=l$2.__r,v=l$2.diffed,l$1=l$2.__c,m=l$2.unmount;function d$1(t,u){l$2.__h&&l$2.__h(r$2,t,o$1||u),o$1=0;var i=r$2.__H||(r$2.__H={__:[],__h:[]});return t>=i.__.length&&i.__.push({__V:c$1}),i.__[t]}function p$1(n){return o$1=1,y(B$1,n)}function y(n,u,i){var o=d$1(t$1++,2);if(o.t=n,!o.__c&&(o.__=[i?i(u):B$1(void 0,u),function(n){var t=o.__N?o.__N[0]:o.__[0],r=o.t(t,n);t!==r&&(o.__N=[r,o.__[1]],o.__c.setState({}));}],o.__c=r$2,!r$2.u)){r$2.u=!0;var f=r$2.shouldComponentUpdate;r$2.shouldComponentUpdate=function(n,t,r){if(!o.__c.__H)return !0;var u=o.__c.__H.__.filter(function(n){return n.__c});if(u.every(function(n){return !n.__N}))return !f||f.call(this,n,t,r);var i=!1;return u.forEach(function(n){if(n.__N){var t=n.__[0];n.__=n.__N,n.__N=void 0,t!==n.__[0]&&(i=!0);}}),!(!i&&o.__c.props===n)&&(!f||f.call(this,n,t,r))};}return o.__N||o.__}function h(u,i){var o=d$1(t$1++,3);!l$2.__s&&z$1(o.__H,i)&&(o.__=u,o.i=i,r$2.__H.__h.push(o));}function s$1(u,i){var o=d$1(t$1++,4);!l$2.__s&&z$1(o.__H,i)&&(o.__=u,o.i=i,r$2.__h.push(o));}function _(n){return o$1=5,F$1(function(){return {current:n}},[])}function A$1(n,t,r){o$1=6,s$1(function(){return "function"==typeof n?(n(t()),function(){return n(null)}):n?(n.current=t(),function(){return n.current=null}):void 0},null==r?r:r.concat(n));}function F$1(n,r){var u=d$1(t$1++,7);return z$1(u.__H,r)?(u.__V=n(),u.i=r,u.__h=n,u.__V):u.__}function T$1(n,t){return o$1=8,F$1(function(){return n},t)}function q$1(n){var u=r$2.context[n.__c],i=d$1(t$1++,9);return i.c=n,u?(null==i.__&&(i.__=!0,u.sub(r$2)),u.props.value):n.__}function x$1(t,r){l$2.useDebugValue&&l$2.useDebugValue(r?r(t):t);}function P$1(n){var u=d$1(t$1++,10),i=p$1();return u.__=n,r$2.componentDidCatch||(r$2.componentDidCatch=function(n,t){u.__&&u.__(n,t),i[1](n);}),[i[0],function(){i[1](void 0);}]}function V$1(){var n=d$1(t$1++,11);if(!n.__){for(var u=r$2.__v;null!==u&&!u.__m&&null!==u.__;)u=u.__;var i=u.__m||(u.__m=[0,0]);n.__="P"+i[0]+"-"+i[1]++;}return n.__}function b$1(){for(var t;t=f$1.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(k$1),t.__H.__h.forEach(w$1),t.__H.__h=[];}catch(r){t.__H.__h=[],l$2.__e(r,t.__v);}}l$2.__b=function(n){r$2=null,e$2&&e$2(n);},l$2.__r=function(n){a$1&&a$1(n),t$1=0;var i=(r$2=n.__c).__H;i&&(u$1===r$2?(i.__h=[],r$2.__h=[],i.__.forEach(function(n){n.__N&&(n.__=n.__N),n.__V=c$1,n.__N=n.i=void 0;})):(i.__h.forEach(k$1),i.__h.forEach(w$1),i.__h=[])),u$1=r$2;},l$2.diffed=function(t){v&&v(t);var o=t.__c;o&&o.__H&&(o.__H.__h.length&&(1!==f$1.push(o)&&i$1===l$2.requestAnimationFrame||((i$1=l$2.requestAnimationFrame)||j$1)(b$1)),o.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.__V!==c$1&&(n.__=n.__V),n.i=void 0,n.__V=c$1;})),u$1=r$2=null;},l$2.__c=function(t,r){r.some(function(t){try{t.__h.forEach(k$1),t.__h=t.__h.filter(function(n){return !n.__||w$1(n)});}catch(u){r.some(function(n){n.__h&&(n.__h=[]);}),r=[],l$2.__e(u,t.__v);}}),l$1&&l$1(t,r);},l$2.unmount=function(t){m&&m(t);var r,u=t.__c;u&&u.__H&&(u.__H.__.forEach(function(n){try{k$1(n);}catch(n){r=n;}}),u.__H=void 0,r&&l$2.__e(r,u.__v));};var g$2="function"==typeof requestAnimationFrame;function j$1(n){var t,r=function(){clearTimeout(u),g$2&&cancelAnimationFrame(t),setTimeout(n);},u=setTimeout(r,100);g$2&&(t=requestAnimationFrame(r));}function k$1(n){var t=r$2,u=n.__c;"function"==typeof u&&(n.__c=void 0,u()),r$2=t;}function w$1(n){var t=r$2;n.__c=n.__(),r$2=t;}function z$1(n,t){return !n||n.length!==t.length||t.some(function(t,r){return t!==n[r]})}function B$1(n,t){return "function"==typeof t?t(n):t}

	function g$1(n,t){for(var e in t)n[e]=t[e];return n}function C(n,t){for(var e in n)if("__source"!==e&&!(e in t))return !0;for(var r in t)if("__source"!==r&&n[r]!==t[r])return !0;return !1}function E(n,t){return n===t&&(0!==n||1/n==1/t)||n!=n&&t!=t}function w(n){this.props=n;}function R(n,e){function r(n){var t=this.props.ref,r=t==n.ref;return !r&&t&&(t.call?t(null):t.current=null),e?!e(this.props,n)||!r:C(this.props,n)}function u(e){return this.shouldComponentUpdate=r,h$1(n,e)}return u.displayName="Memo("+(n.displayName||n.name)+")",u.prototype.isReactComponent=!0,u.__f=!0,u}(w.prototype=new d$2).isPureReactComponent=!0,w.prototype.shouldComponentUpdate=function(n,t){return C(this.props,n)||C(this.state,t)};var x=l$2.__b;l$2.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),x&&x(n);};var N="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function k(n){function t(t){var e=g$1({},t);return delete e.ref,n(e,t.ref||null)}return t.$$typeof=N,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(n.displayName||n.name)+")",t}var A=function(n,t){return null==n?null:x$2(x$2(n).map(t))},O={map:A,forEach:A,count:function(n){return n?x$2(n).length:0},only:function(n){var t=x$2(n);if(1!==t.length)throw "Children.only";return t[0]},toArray:x$2},T=l$2.__e;l$2.__e=function(n,t,e,r){if(n.then)for(var u,o=t;o=o.__;)if((u=o.__c)&&u.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),u.__c(n,t);T(n,t,e,r);};var I=l$2.unmount;function L(n,t,e){return n&&(n.__c&&n.__c.__H&&(n.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),n.__c.__H=null),null!=(n=g$1({},n)).__c&&(n.__c.__P===e&&(n.__c.__P=t),n.__c=null),n.__k=n.__k&&n.__k.map(function(n){return L(n,t,e)})),n}function U(n,t,e){return n&&(n.__v=null,n.__k=n.__k&&n.__k.map(function(n){return U(n,t,e)}),n.__c&&n.__c.__P===t&&(n.__e&&e.insertBefore(n.__e,n.__d),n.__c.__e=!0,n.__c.__P=e)),n}function D(){this.__u=0,this.t=null,this.__b=null;}function F(n){var t=n.__.__c;return t&&t.__a&&t.__a(n)}function M(n){var e,r,u;function o(o){if(e||(e=n()).then(function(n){r=n.default||n;},function(n){u=n;}),u)throw u;if(!r)throw e;return h$1(r,o)}return o.displayName="Lazy",o.__f=!0,o}function V(){this.u=null,this.o=null;}l$2.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&!0===n.__h&&(n.type=null),I&&I(n);},(D.prototype=new d$2).__c=function(n,t){var e=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(e);var u=F(r.__v),o=!1,i=function(){o||(o=!0,e.__R=null,u?u(l):l());};e.__R=i;var l=function(){if(!--r.__u){if(r.state.__a){var n=r.state.__a;r.__v.__k[0]=U(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__a:r.__b=null});t=r.t.pop();)t.forceUpdate();}},c=!0===t.__h;r.__u++||c||r.setState({__a:r.__b=r.__v.__k[0]}),n.then(i,i);},D.prototype.componentWillUnmount=function(){this.t=[];},D.prototype.render=function(n,e){if(this.__b){if(this.__v.__k){var r=document.createElement("div"),o=this.__v.__k[0].__c;this.__v.__k[0]=L(this.__b,r,o.__O=o.__P);}this.__b=null;}var i=e.__a&&h$1(p$2,null,n.fallback);return i&&(i.__h=null),[h$1(p$2,null,e.__a?null:n.children),i]};var W=function(n,t,e){if(++e[1]===e[0]&&n.o.delete(t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.o.size))for(e=n.u;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.u=e=e[2];}};function P(n){return this.getChildContext=function(){return n.context},n.children}function $(n){var e=this,r=n.i;e.componentWillUnmount=function(){P$2(null,e.l),e.l=null,e.i=null;},e.i&&e.i!==r&&e.componentWillUnmount(),n.__v?(e.l||(e.i=r,e.l={nodeType:1,parentNode:r,childNodes:[],appendChild:function(n){this.childNodes.push(n),e.i.appendChild(n);},insertBefore:function(n,t){this.childNodes.push(n),e.i.appendChild(n);},removeChild:function(n){this.childNodes.splice(this.childNodes.indexOf(n)>>>1,1),e.i.removeChild(n);}}),P$2(h$1(P,{context:e.context},n.__v),e.l)):e.l&&e.componentWillUnmount();}function j(n,e){var r=h$1($,{__v:n,i:e});return r.containerInfo=e,r}(V.prototype=new d$2).__a=function(n){var t=this,e=F(t.__v),r=t.o.get(n);return r[0]++,function(u){var o=function(){t.props.revealOrder?(r.push(u),W(t,n,r)):u();};e?e(o):o();}},V.prototype.render=function(n){this.u=null,this.o=new Map;var t=x$2(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;)this.o.set(t[e],this.u=[1,0,this.u]);return n.children},V.prototype.componentDidUpdate=V.prototype.componentDidMount=function(){var n=this;this.o.forEach(function(t,e){W(n,e,t);});};var z="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,B=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,H="undefined"!=typeof document,Z=function(n){return ("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(n)};function Y(n,t,e){return null==t.__k&&(t.textContent=""),P$2(n,t),"function"==typeof e&&e(),n?n.__c:null}function q(n,t,e){return S(n,t),"function"==typeof e&&e(),n?n.__c:null}d$2.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(t){Object.defineProperty(d$2.prototype,t,{configurable:!0,get:function(){return this["UNSAFE_"+t]},set:function(n){Object.defineProperty(this,t,{configurable:!0,writable:!0,value:n});}});});var G=l$2.event;function J(){}function K(){return this.cancelBubble}function Q(){return this.defaultPrevented}l$2.event=function(n){return G&&(n=G(n)),n.persist=J,n.isPropagationStopped=K,n.isDefaultPrevented=Q,n.nativeEvent=n};var X,nn={configurable:!0,get:function(){return this.class}},tn=l$2.vnode;l$2.vnode=function(n){var t=n.type,e=n.props,u=e;if("string"==typeof t){var o=-1===t.indexOf("-");for(var i in u={},e){var l=e[i];H&&"children"===i&&"noscript"===t||"value"===i&&"defaultValue"in e&&null==l||("defaultValue"===i&&"value"in e&&null==e.value?i="value":"download"===i&&!0===l?l="":/ondoubleclick/i.test(i)?i="ondblclick":/^onchange(textarea|input)/i.test(i+t)&&!Z(e.type)?i="oninput":/^onfocus$/i.test(i)?i="onfocusin":/^onblur$/i.test(i)?i="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(i)?i=i.toLowerCase():o&&B.test(i)?i=i.replace(/[A-Z0-9]/g,"-$&").toLowerCase():null===l&&(l=void 0),/^oninput$/i.test(i)&&(i=i.toLowerCase(),u[i]&&(i="oninputCapture")),u[i]=l);}"select"==t&&u.multiple&&Array.isArray(u.value)&&(u.value=x$2(e.children).forEach(function(n){n.props.selected=-1!=u.value.indexOf(n.props.value);})),"select"==t&&null!=u.defaultValue&&(u.value=x$2(e.children).forEach(function(n){n.props.selected=u.multiple?-1!=u.defaultValue.indexOf(n.props.value):u.defaultValue==n.props.value;})),n.props=u,e.class!=e.className&&(nn.enumerable="className"in e,null!=e.className&&(u.class=e.className),Object.defineProperty(u,"className",nn));}n.$$typeof=z,tn&&tn(n);};var en=l$2.__r;l$2.__r=function(n){en&&en(n),X=n.__c;};var rn={ReactCurrentDispatcher:{current:{readContext:function(n){return X.__n[n.__c].props.value}}}},un="17.0.2";function on(n){return h$1.bind(null,n)}function ln(n){return !!n&&n.$$typeof===z}function cn(n){return ln(n)?q$2.apply(null,arguments):n}function fn(n){return !!n.__k&&(P$2(null,n),!0)}function an(n){return n&&(n.base||1===n.nodeType&&n)||null}var sn=function(n,t){return n(t)},hn=function(n,t){return n(t)},vn=p$2;function dn(n){n();}function pn(n){return n}function mn(){return [!1,dn]}var yn=s$1;function _n(n,t){var e=t(),r=p$1({h:{__:e,v:t}}),u=r[0].h,o=r[1];return s$1(function(){u.__=e,u.v=t,E(u.__,t())||o({h:u});},[n,e,t]),h(function(){return E(u.__,u.v())||o({h:u}),n(function(){E(u.__,u.v())||o({h:u});})},[n]),e}var bn={useState:p$1,useId:V$1,useReducer:y,useEffect:h,useLayoutEffect:s$1,useInsertionEffect:yn,useTransition:mn,useDeferredValue:pn,useSyncExternalStore:_n,startTransition:dn,useRef:_,useImperativeHandle:A$1,useMemo:F$1,useCallback:T$1,useContext:q$1,useDebugValue:x$1,version:"17.0.2",Children:O,render:Y,hydrate:q,unmountComponentAtNode:fn,createPortal:j,createElement:h$1,createContext:B$2,createFactory:on,cloneElement:cn,createRef:y$1,Fragment:p$2,isValidElement:ln,findDOMNode:an,Component:d$2,PureComponent:w,memo:R,forwardRef:k,flushSync:hn,unstable_batchedUpdates:sn,StrictMode:vn,Suspense:D,SuspenseList:V,lazy:M,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:rn};

	var React$3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Children: O,
		PureComponent: w,
		StrictMode: vn,
		Suspense: D,
		SuspenseList: V,
		__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: rn,
		cloneElement: cn,
		createFactory: on,
		createPortal: j,
		default: bn,
		findDOMNode: an,
		flushSync: hn,
		forwardRef: k,
		hydrate: q,
		isValidElement: ln,
		lazy: M,
		memo: R,
		render: Y,
		startTransition: dn,
		unmountComponentAtNode: fn,
		unstable_batchedUpdates: sn,
		useDeferredValue: pn,
		useInsertionEffect: yn,
		useSyncExternalStore: _n,
		useTransition: mn,
		version: un,
		Component: d$2,
		Fragment: p$2,
		createContext: B$2,
		createElement: h$1,
		createRef: y$1,
		useCallback: T$1,
		useContext: q$1,
		useDebugValue: x$1,
		useEffect: h,
		useErrorBoundary: P$1,
		useId: V$1,
		useImperativeHandle: A$1,
		useLayoutEffect: s$1,
		useMemo: F$1,
		useReducer: y,
		useRef: _,
		useState: p$1
	});

	var require$$3 = /*@__PURE__*/getAugmentedNamespace(React$3);

	var clsx$1 = {exports: {}};

	function e$1(r){var o,t,f="";if("string"==typeof r||"number"==typeof r)f+=r;else if("object"==typeof r)if(Array.isArray(r))for(o=0;o<r.length;o++)r[o]&&(t=e$1(r[o]))&&(f&&(f+=" "),f+=t);else for(o in r)r[o]&&(f&&(f+=" "),f+=o);return f}function r$1(){for(var r,o,t=0,f="";t<arguments.length;)(r=arguments[t++])&&(o=e$1(r))&&(f&&(f+=" "),f+=o);return f}clsx$1.exports=r$1,clsx$1.exports.clsx=r$1;

	var goober$1 = {};

	let e={data:""},t=t=>"object"==typeof window?((t?t.querySelector("#_goober"):window._goober)||Object.assign((t||document.head).appendChild(document.createElement("style")),{innerHTML:" ",id:"_goober"})).firstChild:t||e,r=/(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g,l=/\/\*[^]*?\*\/|  +/g,a=/\n+/g,s=(e,t)=>{let r="",l="",a="";for(let n in e){let o=e[n];"@"==n[0]?"i"==n[1]?r=n+" "+o+";":l+="f"==n[1]?s(o,n):n+"{"+s(o,"k"==n[1]?"":t)+"}":"object"==typeof o?l+=s(o,t?t.replace(/([^,])+/g,e=>n.replace(/(^:.*)|([^,])+/g,t=>/&/.test(t)?t.replace(/&/g,e):e?e+" "+t:t)):n):null!=o&&(n=/^--/.test(n)?n:n.replace(/[A-Z]/g,"-$&").toLowerCase(),a+=s.p?s.p(n,o):n+":"+o+";");}return r+(t&&a?t+"{"+a+"}":a)+l},n={},o=e=>{if("object"==typeof e){let t="";for(let r in e)t+=r+o(e[r]);return t}return e},c=(e,t,c,p,i)=>{let u=o(e),d=n[u]||(n[u]=(e=>{let t=0,r=11;for(;t<e.length;)r=101*r+e.charCodeAt(t++)>>>0;return "go"+r})(u));if(!n[d]){let t=u!==e?e:(e=>{let t,s,n=[{}];for(;t=r.exec(e.replace(l,""));)t[4]?n.shift():t[3]?(s=t[3].replace(a," ").trim(),n.unshift(n[0][s]=n[0][s]||{})):n[0][t[1]]=t[2].replace(a," ").trim();return n[0]})(e);n[d]=s(i?{["@keyframes "+d]:t}:t,c?"":"."+d);}let f=c&&n.g?n.g:null;return c&&(n.g=n[d]),((e,t,r,l)=>{l?t.data=t.data.replace(l,e):-1===t.data.indexOf(e)&&(t.data=r?e+t.data:t.data+e);})(n[d],t,p,f),d},p=(e,t,r)=>e.reduce((e,l,a)=>{let n=t[a];if(n&&n.call){let e=n(r),t=e&&e.props&&e.props.className||/^go/.test(e)&&e;n=t?"."+t:e&&"object"==typeof e?e.props?"":s(e,""):!1===e?"":e;}return e+l+(null==n?"":n)},"");function i(e){let r=this||{},l=e.call?e(r.p):e;return c(l.unshift?l.raw?p(l,[].slice.call(arguments,1),r.p):l.reduce((e,t)=>Object.assign(e,t&&t.call?t(r.p):t),{}):l,t(r.target),r.g,r.o,r.k)}let u,d,f,g=i.bind({g:1}),b=i.bind({k:1});goober$1.css=i,goober$1.extractCss=e=>{let r=t(e),l=r.data;return r.data="",l},goober$1.glob=g,goober$1.keyframes=b,goober$1.setup=function(e,t,r,l){s.p=t,u=e,d=r,f=l;},goober$1.styled=function(e,t){let r=this||{};return function(){let l=arguments;function a(s,n){let o=Object.assign({},s),c=o.className||a.className;r.p=Object.assign({theme:d&&d()},o),r.o=/ *go\d+/.test(c),o.className=i.apply(r,l)+(c?" "+c:""),t&&(o.ref=n);let p=e;return e[0]&&(p=o.as||e,delete o.as),f&&p[0]&&f(o),u(p,o)}return t?t(a):a}};

	Object.defineProperty(notistack_cjs_development, '__esModule', { value: true });

	function _interopDefault$2 (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var React$2 = require$$3;
	var React__default$1 = _interopDefault$2(React$2);
	var reactDom$1 = require$$3;
	var clsx = _interopDefault$2(clsx$1.exports);
	var goober = goober$1;

	function _defineProperties$1(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$1(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$1(Constructor, staticProps);
	  return Constructor;
	}

	function _extends$3() {
	  _extends$3 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$3.apply(this, arguments);
	}

	function _inheritsLoose$1(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	var noOp = function noOp() {
	  return '';
	};

	var SnackbarContext = /*#__PURE__*/React__default$1.createContext({
	  enqueueSnackbar: noOp,
	  closeSnackbar: noOp
	});

	var breakpoints$1 = {
	  downXs: '@media (max-width:599.95px)',
	  upSm: '@media (min-width:600px)'
	};

	var capitalise = function capitalise(text) {
	  return text.charAt(0).toUpperCase() + text.slice(1);
	};

	var originKeyExtractor = function originKeyExtractor(anchor) {
	  return "" + capitalise(anchor.vertical) + capitalise(anchor.horizontal);
	};
	var isDefined = function isDefined(value) {
	  return !!value || value === 0;
	};

	var UNMOUNTED = 'unmounted';
	var EXITED = 'exited';
	var ENTERING = 'entering';
	var ENTERED = 'entered';
	var EXITING = 'exiting';

	var Transition$1 = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose$1(Transition, _React$Component);

	  function Transition(props) {
	    var _this;

	    _this = _React$Component.call(this, props) || this;
	    var appear = props.appear;
	    var initialStatus;
	    _this.appearStatus = null;

	    if (props["in"]) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.appearStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else if (props.unmountOnExit || props.mountOnEnter) {
	      initialStatus = UNMOUNTED;
	    } else {
	      initialStatus = EXITED;
	    }

	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }

	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref["in"];

	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED
	      };
	    }

	    return null;
	  };

	  var _proto = Transition.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;

	    if (prevProps !== this.props) {
	      var status = this.state.status;

	      if (this.props["in"]) {
	        if (status !== ENTERING && status !== ENTERED) {
	          nextStatus = ENTERING;
	        }
	      } else if (status === ENTERING || status === ENTERED) {
	        nextStatus = EXITING;
	      }
	    }

	    this.updateStatus(false, nextStatus);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var enter = timeout;
	    var exit = timeout;

	    if (timeout != null && typeof timeout !== 'number' && typeof timeout !== 'string') {
	      exit = timeout.exit;
	      enter = timeout.enter;
	    }

	    return {
	      exit: exit,
	      enter: enter
	    };
	  };

	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }

	    if (nextStatus !== null) {
	      this.cancelNextCallback();

	      if (nextStatus === ENTERING) {
	        this.performEnter(mounting);
	      } else {
	        this.performExit();
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };

	  _proto.performEnter = function performEnter(mounting) {
	    var _this2 = this;

	    var enter = this.props.enter;
	    var isAppearing = mounting;
	    var timeouts = this.getTimeouts();

	    if (!mounting && !enter) {
	      this.safeSetState({
	        status: ENTERED
	      }, function () {
	        if (_this2.props.onEntered) {
	          _this2.props.onEntered(_this2.node, isAppearing);
	        }
	      });
	      return;
	    }

	    if (this.props.onEnter) {
	      this.props.onEnter(this.node, isAppearing);
	    }

	    this.safeSetState({
	      status: ENTERING
	    }, function () {
	      if (_this2.props.onEntering) {
	        _this2.props.onEntering(_this2.node, isAppearing);
	      }

	      _this2.onTransitionEnd(timeouts.enter, function () {
	        _this2.safeSetState({
	          status: ENTERED
	        }, function () {
	          if (_this2.props.onEntered) {
	            _this2.props.onEntered(_this2.node, isAppearing);
	          }
	        });
	      });
	    });
	  };

	  _proto.performExit = function performExit() {
	    var _this3 = this;

	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

	    if (!exit) {
	      this.safeSetState({
	        status: EXITED
	      }, function () {
	        if (_this3.props.onExited) {
	          _this3.props.onExited(_this3.node);
	        }
	      });
	      return;
	    }

	    if (this.props.onExit) {
	      this.props.onExit(this.node);
	    }

	    this.safeSetState({
	      status: EXITING
	    }, function () {
	      if (_this3.props.onExiting) {
	        _this3.props.onExiting(_this3.node);
	      }

	      _this3.onTransitionEnd(timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED
	        }, function () {
	          if (_this3.props.onExited) {
	            _this3.props.onExited(_this3.node);
	          }
	        });
	      });
	    });
	  };

	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null && this.nextCallback.cancel) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };

	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function () {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback();
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
	    this.setNextCallback(handler);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

	    if (!this.node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }

	    if (this.props.addEndListener) {
	      this.props.addEndListener(this.node, this.nextCallback);
	    }

	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };

	  _proto.render = function render() {
	    var status = this.state.status;

	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _this$props = this.props,
	        children = _this$props.children,
	        childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

	    return children(status, childProps);
	  };

	  _createClass$1(Transition, [{
	    key: "node",
	    get: function get() {
	      var _this$props$nodeRef;

	      var node = (_this$props$nodeRef = this.props.nodeRef) === null || _this$props$nodeRef === void 0 ? void 0 : _this$props$nodeRef.current;

	      if (!node) {
	        throw new Error('notistack - Custom snackbar is not refForwarding');
	      }

	      return node;
	    }
	  }]);

	  return Transition;
	}(React__default$1.Component);

	function noop$1() {//
	}

	Transition$1.defaultProps = {
	  "in": false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop$1,
	  onEntering: noop$1,
	  onEntered: noop$1,
	  onExit: noop$1,
	  onExiting: noop$1,
	  onExited: noop$1
	};

	/**
	 * Credit to MUI team @ https://mui.com
	 */
	/**
	 * passes {value} to {ref}
	 *
	 * Useful if you want to expose the ref of an inner component to the public API
	 * while still using it inside the component.
	 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
	 */

	function setRef$2(ref, value) {
	  if (typeof ref === 'function') {
	    ref(value);
	  } else if (ref) {
	    ref.current = value;
	  }
	}

	function useForkRef$2(refA, refB) {
	  /**
	   * This will create a new function if the ref props change and are defined.
	   * This means react will call the old forkRef with `null` and the new forkRef
	   * with the ref. Cleanup naturally emerges from this behavior.
	   */
	  return React$2.useMemo(function () {
	    if (refA == null && refB == null) {
	      return null;
	    }

	    return function (refValue) {
	      setRef$2(refA, refValue);
	      setRef$2(refB, refValue);
	    };
	  }, [refA, refB]);
	}

	function getTransitionProps(props) {
	  var timeout = props.timeout,
	      _props$style = props.style,
	      style = _props$style === void 0 ? {} : _props$style,
	      mode = props.mode;
	  return {
	    duration: typeof timeout === 'object' ? timeout[mode] || 0 : timeout,
	    easing: style.transitionTimingFunction,
	    delay: style.transitionDelay
	  };
	}

	/**
	 * Credit to MUI team @ https://mui.com
	 */
	var defaultEasing = {
	  // This is the most common easing curve.
	  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
	  // Objects enter the screen at full velocity from off-screen and
	  // slowly decelerate to a resting point.
	  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
	  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
	  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
	  // The sharp curve is used by objects that may return to the screen at any time.
	  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
	};
	/**
	 * CSS hack to force a repaint
	 */

	var reflow$1 = function reflow(node) {
	  // We have to do something with node.scrollTop.
	  // Otherwise it's removed from the compiled code by optimisers
	  // eslint-disable-next-line no-self-assign
	  node.scrollTop = node.scrollTop;
	};

	var formatMs = function formatMs(milliseconds) {
	  return Math.round(milliseconds) + "ms";
	};

	function createTransition(props, options) {
	  if (props === void 0) {
	    props = ['all'];
	  }

	  var _ref = options || {},
	      _ref$duration = _ref.duration,
	      duration = _ref$duration === void 0 ? 300 : _ref$duration,
	      _ref$easing = _ref.easing,
	      easing = _ref$easing === void 0 ? defaultEasing.easeInOut : _ref$easing,
	      _ref$delay = _ref.delay,
	      delay = _ref$delay === void 0 ? 0 : _ref$delay;

	  var properties = Array.isArray(props) ? props : [props];
	  return properties.map(function (animatedProp) {
	    var formattedDuration = typeof duration === 'string' ? duration : formatMs(duration);
	    var formattedDelay = typeof delay === 'string' ? delay : formatMs(delay);
	    return animatedProp + " " + formattedDuration + " " + easing + " " + formattedDelay;
	  }).join(',');
	}

	function ownerDocument$2(node) {
	  return node && node.ownerDocument || document;
	}

	function ownerWindow$2(node) {
	  var doc = ownerDocument$2(node);
	  return doc.defaultView || window;
	}
	/**
	 * Corresponds to 10 frames at 60 Hz.
	 * A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
	 */


	function debounce$2(func, wait) {
	  if (wait === void 0) {
	    wait = 166;
	  }

	  var timeout;

	  function debounced() {
	    var _this = this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var later = function later() {
	      // @ts-ignore
	      func.apply(_this, args);
	    };

	    clearTimeout(timeout);
	    timeout = setTimeout(later, wait);
	  }

	  debounced.clear = function () {
	    clearTimeout(timeout);
	  };

	  return debounced;
	}
	/**
	 * Translate the node so it can't be seen on the screen.
	 * Later, we're going to translate the node back to its original location with `none`.
	 */


	function getTranslateValue(direction, node) {
	  var rect = node.getBoundingClientRect();
	  var containerWindow = ownerWindow$2(node);
	  var transform;

	  if (node.fakeTransform) {
	    transform = node.fakeTransform;
	  } else {
	    var computedStyle = containerWindow.getComputedStyle(node);
	    transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');
	  }

	  var offsetX = 0;
	  var offsetY = 0;

	  if (transform && transform !== 'none' && typeof transform === 'string') {
	    var transformValues = transform.split('(')[1].split(')')[0].split(',');
	    offsetX = parseInt(transformValues[4], 10);
	    offsetY = parseInt(transformValues[5], 10);
	  }

	  switch (direction) {
	    case 'left':
	      return "translateX(" + (containerWindow.innerWidth + offsetX - rect.left) + "px)";

	    case 'right':
	      return "translateX(-" + (rect.left + rect.width - offsetX) + "px)";

	    case 'up':
	      return "translateY(" + (containerWindow.innerHeight + offsetY - rect.top) + "px)";

	    default:
	      // down
	      return "translateY(-" + (rect.top + rect.height - offsetY) + "px)";
	  }
	}

	function setTranslateValue(direction, node) {
	  if (!node) return;
	  var transform = getTranslateValue(direction, node);

	  if (transform) {
	    node.style.webkitTransform = transform;
	    node.style.transform = transform;
	  }
	}

	var Slide$2 = /*#__PURE__*/React$2.forwardRef(function (props, ref) {
	  var children = props.children,
	      _props$direction = props.direction,
	      direction = _props$direction === void 0 ? 'down' : _props$direction,
	      inProp = props["in"],
	      style = props.style,
	      _props$timeout = props.timeout,
	      timeout = _props$timeout === void 0 ? 0 : _props$timeout,
	      onEnter = props.onEnter,
	      onEntered = props.onEntered,
	      onExit = props.onExit,
	      onExited = props.onExited,
	      other = _objectWithoutPropertiesLoose(props, ["children", "direction", "in", "style", "timeout", "onEnter", "onEntered", "onExit", "onExited"]);

	  var nodeRef = React$2.useRef(null);
	  var handleRefIntermediary = useForkRef$2(children.ref, nodeRef);
	  var handleRef = useForkRef$2(handleRefIntermediary, ref);

	  var handleEnter = function handleEnter(node, isAppearing) {
	    setTranslateValue(direction, node);
	    reflow$1(node);

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  };

	  var handleEntering = function handleEntering(node) {
	    var easing = (style === null || style === void 0 ? void 0 : style.transitionTimingFunction) || defaultEasing.easeOut;
	    var transitionProps = getTransitionProps({
	      timeout: timeout,
	      mode: 'enter',
	      style: _extends$3({}, style, {
	        transitionTimingFunction: easing
	      })
	    });
	    node.style.webkitTransition = createTransition('-webkit-transform', transitionProps);
	    node.style.transition = createTransition('transform', transitionProps);
	    node.style.webkitTransform = 'none';
	    node.style.transform = 'none';
	  };

	  var handleExit = function handleExit(node) {
	    var easing = (style === null || style === void 0 ? void 0 : style.transitionTimingFunction) || defaultEasing.sharp;
	    var transitionProps = getTransitionProps({
	      timeout: timeout,
	      mode: 'exit',
	      style: _extends$3({}, style, {
	        transitionTimingFunction: easing
	      })
	    });
	    node.style.webkitTransition = createTransition('-webkit-transform', transitionProps);
	    node.style.transition = createTransition('transform', transitionProps);
	    setTranslateValue(direction, node);

	    if (onExit) {
	      onExit(node);
	    }
	  };

	  var handleExited = function handleExited(node) {
	    // No need for transitions when the component is hidden
	    node.style.webkitTransition = '';
	    node.style.transition = '';

	    if (onExited) {
	      onExited(node);
	    }
	  };

	  var updatePosition = React$2.useCallback(function () {
	    if (nodeRef.current) {
	      setTranslateValue(direction, nodeRef.current);
	    }
	  }, [direction]);
	  React$2.useEffect(function () {
	    // Skip configuration where the position is screen size invariant.
	    if (inProp || direction === 'down' || direction === 'right') {
	      return undefined;
	    }

	    var handleResize = debounce$2(function () {
	      if (nodeRef.current) {
	        setTranslateValue(direction, nodeRef.current);
	      }
	    });
	    var containerWindow = ownerWindow$2(nodeRef.current);
	    containerWindow.addEventListener('resize', handleResize);
	    return function () {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	    };
	  }, [direction, inProp]);
	  React$2.useEffect(function () {
	    if (!inProp) {
	      // We need to update the position of the drawer when the direction change and
	      // when it's hidden.
	      updatePosition();
	    }
	  }, [inProp, updatePosition]);
	  return React$2.createElement(Transition$1, Object.assign({
	    appear: true,
	    nodeRef: nodeRef,
	    onEnter: handleEnter,
	    onEntered: onEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    "in": inProp,
	    timeout: timeout
	  }, other), function (state, childProps) {
	    return React$2.cloneElement(children, _extends$3({
	      ref: handleRef,
	      style: _extends$3({
	        visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	      }, style, {}, children.props.style)
	    }, childProps));
	  });
	});
	Slide$2.displayName = 'Slide';

	var SvgIcon$2 = function SvgIcon(props) {
	  return React__default$1.createElement("svg", Object.assign({
	    viewBox: "0 0 24 24",
	    focusable: "false",
	    style: {
	      fontSize: 20,
	      marginInlineEnd: 8,
	      userSelect: 'none',
	      width: '1em',
	      height: '1em',
	      display: 'inline-block',
	      fill: 'currentColor',
	      flexShrink: 0
	    }
	  }, props));
	};

	var CheckIcon = function CheckIcon() {
	  return React__default$1.createElement(SvgIcon$2, null, React__default$1.createElement("path", {
	    d: "M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41\n        10.59L10 14.17L17.59 6.58L19 8L10 17Z"
	  }));
	};

	var WarningIcon = function WarningIcon() {
	  return React__default$1.createElement(SvgIcon$2, null, React__default$1.createElement("path", {
	    d: "M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z"
	  }));
	};

	var ErrorIcon = function ErrorIcon() {
	  return React__default$1.createElement(SvgIcon$2, null, React__default$1.createElement("path", {
	    d: "M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,\n        6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,\n        13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z"
	  }));
	};

	var InfoIcon = function InfoIcon() {
	  return React__default$1.createElement(SvgIcon$2, null, React__default$1.createElement("path", {
	    d: "M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,\n        0 22,12A10,10 0 0,0 12,2Z"
	  }));
	};

	var defaultIconVariants = {
	  "default": undefined,
	  success: /*#__PURE__*/React__default$1.createElement(CheckIcon, null),
	  warning: /*#__PURE__*/React__default$1.createElement(WarningIcon, null),
	  error: /*#__PURE__*/React__default$1.createElement(ErrorIcon, null),
	  info: /*#__PURE__*/React__default$1.createElement(InfoIcon, null)
	};

	var defaults = {
	  maxSnack: 3,
	  persist: false,
	  hideIconVariant: false,
	  disableWindowBlurListener: false,
	  variant: 'default',
	  autoHideDuration: 5000,
	  iconVariant: defaultIconVariants,
	  anchorOrigin: {
	    vertical: 'bottom',
	    horizontal: 'left'
	  },
	  TransitionComponent: Slide$2,
	  transitionDuration: {
	    enter: 225,
	    exit: 195
	  }
	};
	/**
	 * Derives the right autoHideDuration taking into account the following
	 * prority order: 1: Options, 2: Props, 3: default fallback
	 */

	var getAutoHideDuration = function getAutoHideDuration(optionsDuration, propsDuration) {
	  var isNumberOrNull = function isNumberOrNull(numberish) {
	    return typeof numberish === 'number' || numberish === null;
	  };

	  if (isNumberOrNull(optionsDuration)) return optionsDuration;
	  if (isNumberOrNull(propsDuration)) return propsDuration;
	  return defaults.autoHideDuration;
	};
	/**
	 * Derives the right transitionDuration taking into account the following
	 * prority order: 1: Options, 2: Props, 3: default fallback
	 */


	var getTransitionDuration = function getTransitionDuration(optionsDuration, propsDuration) {
	  var is = function is(item, types) {
	    return types.some(function (t) {
	      return typeof item === t;
	    });
	  };

	  if (is(optionsDuration, ['string', 'number'])) {
	    return optionsDuration;
	  }

	  if (is(optionsDuration, ['object'])) {
	    return _extends$3({}, defaults.transitionDuration, {}, is(propsDuration, ['object']) && propsDuration, {}, optionsDuration);
	  }

	  if (is(propsDuration, ['string', 'number'])) {
	    return propsDuration;
	  }

	  if (is(propsDuration, ['object'])) {
	    return _extends$3({}, defaults.transitionDuration, {}, propsDuration);
	  }

	  return defaults.transitionDuration;
	};

	var merge$2 = function merge(options, props) {
	  return function (name, shouldObjectMerge) {
	    if (shouldObjectMerge === void 0) {
	      shouldObjectMerge = false;
	    }

	    if (shouldObjectMerge) {
	      return _extends$3({}, defaults[name], {}, props[name], {}, options[name]);
	    }

	    if (name === 'autoHideDuration') {
	      return getAutoHideDuration(options.autoHideDuration, props.autoHideDuration);
	    }

	    if (name === 'transitionDuration') {
	      return getTransitionDuration(options.transitionDuration, props.transitionDuration);
	    }

	    return options[name] || props[name] || defaults[name];
	  };
	};

	function makeStyles$1(styles) {
	  return Object.entries(styles).reduce(function (acc, _ref) {
	    var _extends2;

	    var key = _ref[0],
	        value = _ref[1];
	    return _extends$3({}, acc, (_extends2 = {}, _extends2[key] = goober.css(value), _extends2));
	  }, {});
	}
	var ComponentClasses = {
	  SnackbarContainer: 'notistack-SnackbarContainer',
	  Snackbar: 'notistack-Snackbar',
	  CollapseWrapper: 'notistack-CollapseWrapper',
	  MuiContent: 'notistack-MuiContent'
	};

	var classes = /*#__PURE__*/makeStyles$1({
	  root: {
	    height: 0
	  },
	  entered: {
	    height: 'auto'
	  }
	});
	var collapsedSize = '0px';
	var timeout = 175;
	var Collapse = /*#__PURE__*/React$2.forwardRef(function (props, ref) {
	  var children = props.children,
	      inProp = props["in"],
	      onExited = props.onExited;
	  var wrapperRef = React$2.useRef(null);
	  var nodeRef = React$2.useRef(null);
	  var handleRef = useForkRef$2(ref, nodeRef);

	  var getWrapperSize = function getWrapperSize() {
	    return wrapperRef.current ? wrapperRef.current.clientHeight : 0;
	  };

	  var handleEnter = function handleEnter(node) {
	    node.style.height = collapsedSize;
	  };

	  var handleEntering = function handleEntering(node) {
	    var wrapperSize = getWrapperSize();

	    var _getTransitionProps = getTransitionProps({
	      timeout: timeout,
	      mode: 'enter'
	    }),
	        transitionDuration = _getTransitionProps.duration,
	        easing = _getTransitionProps.easing;

	    node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : transitionDuration + "ms";
	    node.style.height = wrapperSize + "px";
	    node.style.transitionTimingFunction = easing || '';
	  };

	  var handleEntered = function handleEntered(node) {
	    node.style.height = 'auto';
	  };

	  var handleExit = function handleExit(node) {
	    node.style.height = getWrapperSize() + "px";
	  };

	  var handleExiting = function handleExiting(node) {
	    reflow$1(node);

	    var _getTransitionProps2 = getTransitionProps({
	      timeout: timeout,
	      mode: 'exit'
	    }),
	        transitionDuration = _getTransitionProps2.duration,
	        easing = _getTransitionProps2.easing;

	    node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : transitionDuration + "ms";
	    node.style.height = collapsedSize;
	    node.style.transitionTimingFunction = easing || '';
	  };

	  return React$2.createElement(Transition$1, {
	    "in": inProp,
	    unmountOnExit: true,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: onExited,
	    onExiting: handleExiting,
	    nodeRef: nodeRef,
	    timeout: timeout
	  }, function (state, childProps) {
	    return React$2.createElement("div", Object.assign({
	      ref: handleRef,
	      className: clsx(classes.root, state === 'entered' && classes.entered),
	      style: _extends$3({
	        pointerEvents: 'all',
	        overflow: 'hidden',
	        minHeight: collapsedSize,
	        transition: createTransition('height')
	      }, state === 'entered' && {
	        overflow: 'visible'
	      }, {}, state === 'exited' && !inProp && {
	        visibility: 'hidden'
	      })
	    }, childProps), React$2.createElement("div", {
	      ref: wrapperRef,
	      className: ComponentClasses.CollapseWrapper,
	      // Hack to get children with a negative margin to not falsify the height computation.
	      style: {
	        display: 'flex',
	        width: '100%'
	      }
	    }, children));
	  });
	});
	Collapse.displayName = 'Collapse';

	var direction = {
	  right: 'left',
	  left: 'right',
	  bottom: 'up',
	  top: 'down'
	};
	var getSlideDirection = function getSlideDirection(anchorOrigin) {
	  if (anchorOrigin.horizontal !== 'center') {
	    return direction[anchorOrigin.horizontal];
	  }

	  return direction[anchorOrigin.vertical];
	};
	/** Tranforms classes name */

	var toSnackbarAnchorOrigin = function toSnackbarAnchorOrigin(anchorOrigin) {
	  return "anchorOrigin" + originKeyExtractor(anchorOrigin);
	};
	/**
	 * Omit SnackbarContainer class keys that are not needed for SnackbarItem
	 */

	var keepSnackbarClassKeys = function keepSnackbarClassKeys(classes) {
	  if (classes === void 0) {
	    classes = {};
	  }

	  var containerClasses = {
	    containerRoot: true,
	    containerAnchorOriginTopCenter: true,
	    containerAnchorOriginBottomCenter: true,
	    containerAnchorOriginTopRight: true,
	    containerAnchorOriginBottomRight: true,
	    containerAnchorOriginTopLeft: true,
	    containerAnchorOriginBottomLeft: true
	  };
	  return Object.keys(classes).filter(function (key) {
	    return !containerClasses[key];
	  }).reduce(function (obj, key) {
	    var _extends2;

	    return _extends$3({}, obj, (_extends2 = {}, _extends2[key] = classes[key], _extends2));
	  }, {});
	};

	var noOp$1 = function noOp() {
	  /* */
	};
	/**
	 * Credit to MUI team @ https://mui.com
	 * Safe chained function.
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 */


	function createChainedFunction$2(funcs, snackbarId) {
	  // @ts-ignore
	  return funcs.reduce(function (acc, func) {
	    if (func === null || func === undefined) {
	      return acc;
	    }

	    return function chainedFunction() {
	      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var argums = [].concat(args);

	      if (snackbarId && argums.indexOf(snackbarId) === -1) {
	        argums.push(snackbarId);
	      } // @ts-ignore


	      acc.apply(this, argums);
	      func.apply(this, argums);
	    };
	  }, noOp$1);
	}

	/**
	 * Credit to MUI team @ https://mui.com
	 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
	 */
	var useEnhancedEffect$2 = typeof window !== 'undefined' ? React$2.useLayoutEffect : React$2.useEffect;
	function useEventCallback$2(fn) {
	  var ref = React$2.useRef(fn);
	  useEnhancedEffect$2(function () {
	    ref.current = fn;
	  });
	  return React$2.useCallback(function () {
	    return (// @ts-expect-error hide `this`
	      (ref.current).apply(void 0, arguments)
	    );
	  }, []);
	}

	/**
	 * Credit to MUI team @ https://mui.com
	 */
	var Snackbar = /*#__PURE__*/React$2.forwardRef(function (props, ref) {
	  var children = props.children,
	      className = props.className,
	      autoHideDuration = props.autoHideDuration,
	      _props$disableWindowB = props.disableWindowBlurListener,
	      disableWindowBlurListener = _props$disableWindowB === void 0 ? false : _props$disableWindowB,
	      onClose = props.onClose,
	      id = props.id,
	      open = props.open,
	      _props$SnackbarProps = props.SnackbarProps,
	      SnackbarProps = _props$SnackbarProps === void 0 ? {} : _props$SnackbarProps;
	  var timerAutoHide = React$2.useRef();
	  var handleClose = useEventCallback$2(function () {
	    if (onClose) {
	      onClose.apply(void 0, arguments);
	    }
	  });
	  var setAutoHideTimer = useEventCallback$2(function (autoHideDurationParam) {
	    if (!onClose || autoHideDurationParam == null) {
	      return;
	    }

	    if (timerAutoHide.current) {
	      clearTimeout(timerAutoHide.current);
	    }

	    timerAutoHide.current = setTimeout(function () {
	      handleClose(null, 'timeout', id);
	    }, autoHideDurationParam);
	  });
	  React$2.useEffect(function () {
	    if (open) {
	      setAutoHideTimer(autoHideDuration);
	    }

	    return function () {
	      if (timerAutoHide.current) {
	        clearTimeout(timerAutoHide.current);
	      }
	    };
	  }, [open, autoHideDuration, setAutoHideTimer]);
	  /**
	   * Pause the timer when the user is interacting with the Snackbar
	   * or when the user hide the window.
	   */

	  var handlePause = function handlePause() {
	    if (timerAutoHide.current) {
	      clearTimeout(timerAutoHide.current);
	    }
	  };
	  /**
	   * Restart the timer when the user is no longer interacting with the Snackbar
	   * or when the window is shown back.
	   */


	  var handleResume = React$2.useCallback(function () {
	    if (autoHideDuration != null) {
	      setAutoHideTimer(autoHideDuration * 0.5);
	    }
	  }, [autoHideDuration, setAutoHideTimer]);

	  var handleMouseEnter = function handleMouseEnter(event) {
	    if (SnackbarProps.onMouseEnter) {
	      SnackbarProps.onMouseEnter(event);
	    }

	    handlePause();
	  };

	  var handleMouseLeave = function handleMouseLeave(event) {
	    if (SnackbarProps.onMouseLeave) {
	      SnackbarProps.onMouseLeave(event);
	    }

	    handleResume();
	  };

	  React$2.useEffect(function () {
	    if (!disableWindowBlurListener && open) {
	      window.addEventListener('focus', handleResume);
	      window.addEventListener('blur', handlePause);
	      return function () {
	        window.removeEventListener('focus', handleResume);
	        window.removeEventListener('blur', handlePause);
	      };
	    }

	    return undefined;
	  }, [disableWindowBlurListener, handleResume, open]);
	  return React$2.createElement("div", Object.assign({
	    ref: ref
	  }, SnackbarProps, {
	    className: clsx(ComponentClasses.Snackbar, className),
	    onMouseEnter: handleMouseEnter,
	    onMouseLeave: handleMouseLeave
	  }), children);
	});
	Snackbar.displayName = 'Snackbar';

	var _root;
	var classes$1 = /*#__PURE__*/makeStyles$1({
	  root: (_root = {
	    display: 'flex',
	    flexWrap: 'wrap',
	    flexGrow: 1
	  }, _root[breakpoints$1.upSm] = {
	    flexGrow: 'initial',
	    minWidth: '288px'
	  }, _root)
	});
	var SnackbarContent = /*#__PURE__*/React$2.forwardRef(function (_ref, ref) {
	  var className = _ref.className,
	      props = _objectWithoutPropertiesLoose(_ref, ["className"]);

	  return React__default$1.createElement("div", Object.assign({
	    ref: ref,
	    className: clsx(classes$1.root, className)
	  }, props));
	});
	SnackbarContent.displayName = 'SnackbarContent';

	var classes$2 = /*#__PURE__*/makeStyles$1({
	  root: {
	    backgroundColor: '#313131',
	    fontSize: '0.875rem',
	    lineHeight: 1.43,
	    letterSpacing: '0.01071em',
	    color: '#fff',
	    alignItems: 'center',
	    padding: '6px 16px',
	    borderRadius: '4px',
	    boxShadow: '0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)'
	  },
	  lessPadding: {
	    paddingLeft: 8 * 2.5 + "px"
	  },
	  "default": {
	    backgroundColor: '#313131'
	  },
	  success: {
	    backgroundColor: '#43a047'
	  },
	  error: {
	    backgroundColor: '#d32f2f'
	  },
	  warning: {
	    backgroundColor: '#ff9800'
	  },
	  info: {
	    backgroundColor: '#2196f3'
	  },
	  message: {
	    display: 'flex',
	    alignItems: 'center',
	    padding: '8px 0'
	  },
	  action: {
	    display: 'flex',
	    alignItems: 'center',
	    marginLeft: 'auto',
	    paddingLeft: '16px',
	    marginRight: '-8px'
	  }
	});
	var MaterialDesignContent = /*#__PURE__*/React$2.forwardRef(function (props, forwardedRef) {
	  var id = props.id,
	      message = props.message,
	      componentOrFunctionAction = props.action,
	      iconVariant = props.iconVariant,
	      variant = props.variant,
	      hideIconVariant = props.hideIconVariant,
	      style = props.style;
	  var icon = iconVariant[variant];
	  var action = componentOrFunctionAction;

	  if (typeof action === 'function') {
	    action = action(id);
	  }

	  return React__default$1.createElement(SnackbarContent, {
	    ref: forwardedRef,
	    role: "alert",
	    style: style,
	    className: clsx(ComponentClasses.MuiContent, classes$2.root, classes$2[variant], !hideIconVariant && icon && classes$2.lessPadding)
	  }, React__default$1.createElement("div", {
	    id: "notistack-snackbar",
	    className: classes$2.message
	  }, !hideIconVariant ? icon : null, message), action && React__default$1.createElement("div", {
	    className: classes$2.action
	  }, action));
	});
	MaterialDesignContent.displayName = 'MaterialDesignContent';
	var MaterialDesignContent$1 = /*#__PURE__*/React$2.memo(MaterialDesignContent);

	var styles$1 = /*#__PURE__*/makeStyles$1({
	  wrappedRoot: {
	    width: '100%',
	    position: 'relative',
	    transform: 'translateX(0)',
	    top: 0,
	    right: 0,
	    bottom: 0,
	    left: 0,
	    minWidth: '288px'
	  }
	});

	var SnackbarItem = function SnackbarItem(props) {
	  var timeout = React$2.useRef();

	  var _useState = React$2.useState(true),
	      collapsed = _useState[0],
	      setCollapsed = _useState[1];

	  var handleClose = createChainedFunction$2([props.snack.onClose, props.onClose]);

	  var handleEntered = function handleEntered() {
	    if (props.snack.requestClose) {
	      handleClose(null, 'instructed', props.snack.id);
	    }
	  };

	  var handleExitedScreen = React$2.useCallback(function () {
	    timeout.current = setTimeout(function () {
	      setCollapsed(function (col) {
	        return !col;
	      });
	    }, 125);
	  }, []);
	  React$2.useEffect(function () {
	    return function () {
	      if (timeout.current) {
	        clearTimeout(timeout.current);
	      }
	    };
	  }, []);
	  var snack = props.snack,
	      allClasses = props.classes,
	      _props$Component = props.Component,
	      Component = _props$Component === void 0 ? MaterialDesignContent$1 : _props$Component;
	  var classes = React$2.useMemo(function () {
	    return keepSnackbarClassKeys(allClasses);
	  }, [allClasses]);

	  var open = snack.open,
	      SnackbarProps = snack.SnackbarProps,
	      TransitionComponent = snack.TransitionComponent,
	      TransitionProps = snack.TransitionProps,
	      transitionDuration = snack.transitionDuration,
	      disableWindowBlurListener = snack.disableWindowBlurListener,
	      componentOrFunctionContent = snack.content,
	      otherSnack = _objectWithoutPropertiesLoose(snack, ["open", "SnackbarProps", "TransitionComponent", "TransitionProps", "transitionDuration", "disableWindowBlurListener", "content", "entered", "requestClose", "onEnter", "onEntered", "onExit", "onExited"]);

	  var transitionProps = _extends$3({
	    direction: getSlideDirection(otherSnack.anchorOrigin),
	    timeout: transitionDuration
	  }, TransitionProps);

	  var content = componentOrFunctionContent;

	  if (typeof content === 'function') {
	    content = content(otherSnack.id, otherSnack.message);
	  }

	  var callbacks = ['onEnter', 'onEntered', 'onExit', 'onExited'].reduce(function (acc, cbName) {
	    var _extends2;

	    return _extends$3({}, acc, (_extends2 = {}, _extends2[cbName] = createChainedFunction$2([props.snack[cbName], props[cbName]], otherSnack.id), _extends2));
	  }, {});
	  return React__default$1.createElement(Collapse, {
	    "in": collapsed,
	    onExited: callbacks.onExited
	  }, React__default$1.createElement(Snackbar, {
	    open: open,
	    id: otherSnack.id,
	    disableWindowBlurListener: disableWindowBlurListener,
	    autoHideDuration: otherSnack.autoHideDuration,
	    className: clsx(styles$1.wrappedRoot, classes.root, classes[toSnackbarAnchorOrigin(otherSnack.anchorOrigin)]),
	    SnackbarProps: SnackbarProps,
	    onClose: handleClose
	  }, React__default$1.createElement(TransitionComponent, Object.assign({}, transitionProps, {
	    appear: true,
	    "in": open,
	    onExit: callbacks.onExit,
	    onExited: handleExitedScreen,
	    onEnter: callbacks.onEnter,
	    // order matters. first callbacks.onEntered to set entered: true,
	    // then handleEntered to check if there's a request for closing
	    onEntered: createChainedFunction$2([callbacks.onEntered, handleEntered], otherSnack.id)
	  }), content || React__default$1.createElement(Component, Object.assign({}, otherSnack)))));
	};

	var _root$1, _rootDense, _left, _right, _center;
	var indents = {
	  view: {
	    "default": 20,
	    dense: 4
	  },
	  snackbar: {
	    "default": 6,
	    dense: 2
	  }
	};
	var collapseWrapper = "." + ComponentClasses.CollapseWrapper;
	var xsWidthMargin = 16;
	var styles$1$1 = /*#__PURE__*/makeStyles$1({
	  root: (_root$1 = {
	    boxSizing: 'border-box',
	    display: 'flex',
	    maxHeight: '100%',
	    position: 'fixed',
	    zIndex: 1400,
	    height: 'auto',
	    width: 'auto',
	    transition: /*#__PURE__*/createTransition(['top', 'right', 'bottom', 'left', 'max-width'], {
	      duration: 300,
	      easing: 'ease'
	    }),
	    // container itself is invisible and should not block clicks, clicks should be passed to its children
	    // a pointerEvents: all is applied in the collapse component
	    pointerEvents: 'none'
	  }, _root$1[collapseWrapper] = {
	    padding: indents.snackbar["default"] + "px 0px",
	    transition: 'padding 300ms ease 0ms'
	  }, _root$1.maxWidth = "calc(100% - " + indents.view["default"] * 2 + "px)", _root$1[breakpoints$1.downXs] = {
	    width: '100%',
	    maxWidth: "calc(100% - " + xsWidthMargin * 2 + "px)"
	  }, _root$1),
	  rootDense: (_rootDense = {}, _rootDense[collapseWrapper] = {
	    padding: indents.snackbar.dense + "px 0px"
	  }, _rootDense),
	  top: {
	    top: indents.view["default"] - indents.snackbar["default"] + "px",
	    flexDirection: 'column'
	  },
	  bottom: {
	    bottom: indents.view["default"] - indents.snackbar["default"] + "px",
	    flexDirection: 'column-reverse'
	  },
	  left: (_left = {
	    left: indents.view["default"] + "px"
	  }, _left[breakpoints$1.upSm] = {
	    alignItems: 'flex-start'
	  }, _left[breakpoints$1.downXs] = {
	    left: xsWidthMargin + "px"
	  }, _left),
	  right: (_right = {
	    right: indents.view["default"] + "px"
	  }, _right[breakpoints$1.upSm] = {
	    alignItems: 'flex-end'
	  }, _right[breakpoints$1.downXs] = {
	    right: xsWidthMargin + "px"
	  }, _right),
	  center: (_center = {
	    left: '50%',
	    transform: 'translateX(-50%)'
	  }, _center[breakpoints$1.upSm] = {
	    alignItems: 'center'
	  }, _center)
	});

	var SnackbarContainer = function SnackbarContainer(props) {
	  var _props$classes = props.classes,
	      classes = _props$classes === void 0 ? {} : _props$classes,
	      anchorOrigin = props.anchorOrigin,
	      dense = props.dense,
	      children = props.children;
	  var combinedClassname = clsx(ComponentClasses.SnackbarContainer, styles$1$1[anchorOrigin.vertical], styles$1$1[anchorOrigin.horizontal], styles$1$1.root, // root should come after others to override maxWidth
	  classes.containerRoot, classes["containerAnchorOrigin" + originKeyExtractor(anchorOrigin)], dense && styles$1$1.rootDense);
	  return React__default$1.createElement("div", {
	    className: combinedClassname
	  }, children);
	};

	var SnackbarContainer$1 = /*#__PURE__*/React$2.memo(SnackbarContainer);

	/* eslint-disable */

	var messages = {
	  NO_PERSIST_ALL: "Reached maxSnack while all enqueued snackbars have 'persist' flag. Notistack will dismiss the oldest snackbar anyway to allow other ones in the queue to be presented."
	};
	var warning = (function (messageKey) {
	  var message = messages[messageKey];

	  if (typeof console !== 'undefined') {
	    console.error("WARNING - notistack: " + message);
	  }

	  try {
	    throw new Error(message);
	  } catch (x) {}
	});

	var isOptions = function isOptions(messageOrOptions) {
	  return typeof messageOrOptions !== 'string';
	};

	var SnackbarProvider = /*#__PURE__*/function (_Component) {
	  _inheritsLoose$1(SnackbarProvider, _Component);

	  function SnackbarProvider(props) {
	    var _this;

	    _this = _Component.call(this, props) || this;
	    /**
	     * Adds a new snackbar to the queue to be presented.
	     * Returns generated or user defined key referencing the new snackbar or null
	     */

	    _this.enqueueSnackbar = function (messageOrOptions, optsOrUndefined) {
	      if (optsOrUndefined === void 0) {
	        optsOrUndefined = {};
	      }

	      var opts = isOptions(messageOrOptions) ? messageOrOptions : optsOrUndefined;
	      var message = messageOrOptions;

	      if (isOptions(messageOrOptions)) {
	        message = messageOrOptions.message;
	      }

	      var key = opts.key,
	          preventDuplicate = opts.preventDuplicate,
	          options = _objectWithoutPropertiesLoose(opts, ["key", "preventDuplicate"]);

	      var hasSpecifiedKey = isDefined(key);
	      var id = hasSpecifiedKey ? key : new Date().getTime() + Math.random();
	      var merger = merge$2(options, _this.props);

	      var snack = _extends$3({
	        id: id
	      }, options, {
	        message: message,
	        open: true,
	        entered: false,
	        requestClose: false,
	        persist: merger('persist'),
	        action: merger('action'),
	        content: merger('content'),
	        variant: merger('variant'),
	        anchorOrigin: merger('anchorOrigin'),
	        disableWindowBlurListener: merger('disableWindowBlurListener'),
	        autoHideDuration: merger('autoHideDuration'),
	        hideIconVariant: merger('hideIconVariant'),
	        TransitionComponent: merger('TransitionComponent'),
	        transitionDuration: merger('transitionDuration'),
	        TransitionProps: merger('TransitionProps', true),
	        iconVariant: merger('iconVariant', true),
	        style: merger('style', true),
	        SnackbarProps: merger('SnackbarProps', true),
	        className: clsx(_this.props.className, options.className)
	      });

	      if (snack.persist) {
	        snack.autoHideDuration = undefined;
	      }

	      _this.setState(function (state) {
	        if (preventDuplicate === undefined && _this.props.preventDuplicate || preventDuplicate) {
	          var compareFunction = function compareFunction(item) {
	            return hasSpecifiedKey ? item.id === id : item.message === message;
	          };

	          var inQueue = state.queue.findIndex(compareFunction) > -1;
	          var inView = state.snacks.findIndex(compareFunction) > -1;

	          if (inQueue || inView) {
	            return state;
	          }
	        }

	        return _this.handleDisplaySnack(_extends$3({}, state, {
	          queue: [].concat(state.queue, [snack])
	        }));
	      });

	      return id;
	    };
	    /**
	     * Reducer: Display snack if there's space for it. Otherwise, immediately
	     * begin dismissing the oldest message to start showing the new one.
	     */


	    _this.handleDisplaySnack = function (state) {
	      var snacks = state.snacks;

	      if (snacks.length >= _this.maxSnack) {
	        return _this.handleDismissOldest(state);
	      }

	      return _this.processQueue(state);
	    };
	    /**
	     * Reducer: Display items (notifications) in the queue if there's space for them.
	     */


	    _this.processQueue = function (state) {
	      var queue = state.queue,
	          snacks = state.snacks;

	      if (queue.length > 0) {
	        return _extends$3({}, state, {
	          snacks: [].concat(snacks, [queue[0]]),
	          queue: queue.slice(1, queue.length)
	        });
	      }

	      return state;
	    };
	    /**
	     * Reducer: Hide oldest snackbar on the screen because there exists a new one which we have to display.
	     * (ignoring the one with 'persist' flag. i.e. explicitly told by user not to get dismissed).
	     *
	     * Note 1: If there is already a message leaving the screen, no new messages are dismissed.
	     * Note 2: If the oldest message has not yet entered the screen, only a request to close the
	     *         snackbar is made. Once it entered the screen, it will be immediately dismissed.
	     */


	    _this.handleDismissOldest = function (state) {
	      if (state.snacks.some(function (item) {
	        return !item.open || item.requestClose;
	      })) {
	        return state;
	      }

	      var popped = false;
	      var ignore = false;
	      var persistentCount = state.snacks.reduce(function (acc, current) {
	        return acc + (current.open && current.persist ? 1 : 0);
	      }, 0);

	      if (persistentCount === _this.maxSnack) {
	         warning('NO_PERSIST_ALL') ;
	        ignore = true;
	      }

	      var snacks = state.snacks.map(function (item) {
	        if (!popped && (!item.persist || ignore)) {
	          popped = true;

	          if (!item.entered) {
	            return _extends$3({}, item, {
	              requestClose: true
	            });
	          }

	          if (item.onClose) {
	            item.onClose(null, 'maxsnack', item.id);
	          }

	          if (_this.props.onClose) {
	            _this.props.onClose(null, 'maxsnack', item.id);
	          }

	          return _extends$3({}, item, {
	            open: false
	          });
	        }

	        return _extends$3({}, item);
	      });
	      return _extends$3({}, state, {
	        snacks: snacks
	      });
	    };
	    /**
	     * Set the entered state of the snackbar with the given key.
	     */


	    _this.handleEnteredSnack = function (node, isAppearing, key) {
	      if (!isDefined(key)) {
	        throw new Error('handleEnteredSnack Cannot be called with undefined key');
	      }

	      _this.setState(function (_ref) {
	        var snacks = _ref.snacks;
	        return {
	          snacks: snacks.map(function (item) {
	            return item.id === key ? _extends$3({}, item, {
	              entered: true
	            }) : _extends$3({}, item);
	          })
	        };
	      });
	    };
	    /**
	     * Hide a snackbar after its timeout.
	     */


	    _this.handleCloseSnack = function (event, reason, key) {
	      // should not use createChainedFunction for onClose.
	      // because this.closeSnackbar called this function
	      if (_this.props.onClose) {
	        _this.props.onClose(event, reason, key);
	      }

	      var shouldCloseAll = key === undefined;

	      _this.setState(function (_ref2) {
	        var snacks = _ref2.snacks,
	            queue = _ref2.queue;
	        return {
	          snacks: snacks.map(function (item) {
	            if (!shouldCloseAll && item.id !== key) {
	              return _extends$3({}, item);
	            }

	            return item.entered ? _extends$3({}, item, {
	              open: false
	            }) : _extends$3({}, item, {
	              requestClose: true
	            });
	          }),
	          queue: queue.filter(function (item) {
	            return item.id !== key;
	          })
	        };
	      });
	    };
	    /**
	     * Close snackbar with the given key
	     */


	    _this.closeSnackbar = function (key) {
	      // call individual snackbar onClose callback passed through options parameter
	      var toBeClosed = _this.state.snacks.find(function (item) {
	        return item.id === key;
	      });

	      if (isDefined(key) && toBeClosed && toBeClosed.onClose) {
	        toBeClosed.onClose(null, 'instructed', key);
	      }

	      _this.handleCloseSnack(null, 'instructed', key);
	    };
	    /**
	     * When we set open attribute of a snackbar to false (i.e. after we hide a snackbar),
	     * it leaves the screen and immediately after leaving animation is done, this method
	     * gets called. We remove the hidden snackbar from state and then display notifications
	     * waiting in the queue (if any). If after this process the queue is not empty, the
	     * oldest message is dismissed.
	     */


	    _this.handleExitedSnack = function (node, key) {
	      if (!isDefined(key)) {
	        throw new Error('handleExitedSnack Cannot be called with undefined key');
	      }

	      _this.setState(function (state) {
	        var newState = _this.processQueue(_extends$3({}, state, {
	          snacks: state.snacks.filter(function (item) {
	            return item.id !== key;
	          })
	        }));

	        if (newState.queue.length === 0) {
	          return newState;
	        }

	        return _this.handleDismissOldest(newState);
	      });
	    };

	    notistack_cjs_development.enqueueSnackbar = _this.enqueueSnackbar;
	    notistack_cjs_development.closeSnackbar = _this.closeSnackbar;
	    _this.state = {
	      snacks: [],
	      queue: [],
	      contextValue: {
	        enqueueSnackbar: _this.enqueueSnackbar,
	        closeSnackbar: _this.closeSnackbar
	      }
	    };
	    return _this;
	  }

	  var _proto = SnackbarProvider.prototype;

	  _proto.render = function render() {
	    var _this2 = this;

	    var contextValue = this.state.contextValue;
	    var _this$props = this.props,
	        domRoot = _this$props.domRoot,
	        children = _this$props.children,
	        _this$props$dense = _this$props.dense,
	        dense = _this$props$dense === void 0 ? false : _this$props$dense,
	        _this$props$Component = _this$props.Components,
	        Components = _this$props$Component === void 0 ? {} : _this$props$Component,
	        classes = _this$props.classes;
	    var categ = this.state.snacks.reduce(function (acc, current) {
	      var _extends2;

	      var category = originKeyExtractor(current.anchorOrigin);
	      var existingOfCategory = acc[category] || [];
	      return _extends$3({}, acc, (_extends2 = {}, _extends2[category] = [].concat(existingOfCategory, [current]), _extends2));
	    }, {});
	    var snackbars = Object.keys(categ).map(function (origin) {
	      var snacks = categ[origin];
	      var nomineeSnack = snacks[0];
	      return React__default$1.createElement(SnackbarContainer$1, {
	        key: origin,
	        dense: dense,
	        anchorOrigin: nomineeSnack.anchorOrigin,
	        classes: classes
	      }, snacks.map(function (snack) {
	        return React__default$1.createElement(SnackbarItem, {
	          key: snack.id,
	          snack: snack,
	          classes: classes,
	          Component: Components[snack.variant],
	          onClose: _this2.handleCloseSnack,
	          onEnter: _this2.props.onEnter,
	          onExit: _this2.props.onExit,
	          onExited: createChainedFunction$2([_this2.handleExitedSnack, _this2.props.onExited], snack.id),
	          onEntered: createChainedFunction$2([_this2.handleEnteredSnack, _this2.props.onEntered], snack.id)
	        });
	      }));
	    });
	    return React__default$1.createElement(SnackbarContext.Provider, {
	      value: contextValue
	    }, children, domRoot ? reactDom$1.createPortal(snackbars, domRoot) : snackbars);
	  };

	  _createClass$1(SnackbarProvider, [{
	    key: "maxSnack",
	    get: function get() {
	      return this.props.maxSnack || defaults.maxSnack;
	    }
	  }]);

	  return SnackbarProvider;
	}(React$2.Component);

	var useSnackbar$1 = (function () {
	  return React$2.useContext(SnackbarContext);
	});

	notistack_cjs_development.SnackbarContent = SnackbarContent;
	notistack_cjs_development.SnackbarProvider = SnackbarProvider;
	notistack_cjs_development.Transition = Transition$1;
	notistack_cjs_development.useSnackbar = useSnackbar$1;

	(function (module) {

		{
		  module.exports = notistack_cjs_development;
		}
	} (notistack));

	const downloadDirectly = (blob, name) => {
	  const url = URL.createObjectURL(blob);
	  const a = document.createElement("a");
	  a.href = url;
	  a.download = name;
	  a.click();
	};
	async function waitForSelector(selector, opts = {}) {
	  return new Promise((resolve, reject) => {
	    const element = document.querySelector(selector);
	    if (element) {
	      resolve(element);
	      return;
	    }
	    const mutObserver = new MutationObserver((mutations) => {
	      for (const mutation of mutations) {
	        const nodes = Array.from(mutation.addedNodes);
	        for (const node of nodes) {
	          if (node.matches && node.matches(selector)) {
	            mutObserver.disconnect();
	            resolve(node);
	            return;
	          }
	        }
	      }
	    });
	    mutObserver.observe(document.documentElement, { childList: true, subtree: true });
	    if (opts.timeout) {
	      setTimeout(() => {
	        mutObserver.disconnect();
	        if (opts.optional) {
	          resolve(null);
	        } else {
	          reject(new Error(`Timeout exceeded while waiting for selector ("${selector}").`));
	        }
	      }, opts.timeout);
	    }
	  });
	}
	function sendMessage(message) {
	  return new Promise((resolve, reject) => {
	    window.addEventListener("DeepL-Crack-Receive", function({ detail: payload }) {
	      if (payload.success) {
	        if (payload.result) {
	          resolve(payload.result);
	        } else if (payload.results) {
	          resolve(payload.results);
	        } else {
	          reject(new Error(`Unexpected response from background script.`));
	        }
	      } else {
	        reject(payload.error);
	      }
	    }, { once: true });
	    window.dispatchEvent(new CustomEvent("DeepL-Crack-Send", { detail: message }));
	    setTimeout(() => {
	      reject(new Error(`Timeout exceeded while waiting for response from background script.`));
	    }, 1e4);
	  });
	}
	async function cleanCookies() {
	  await sendMessage({ method: "cleanIdentifierCookie" });
	  await sendMessage({
	    method: "setHeader",
	    params: {
	      urlFilter: location.href,
	      resourceTypes: ["main_frame"],
	      id: 2
	    }
	  });
	  location.reload();
	}

	var Button$2 = {};

	var interopRequireDefault = {exports: {}};

	(function (module) {
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (interopRequireDefault));

	var Button$1 = {};

	var objectWithoutPropertiesLoose = {exports: {}};

	var hasRequiredObjectWithoutPropertiesLoose;

	function requireObjectWithoutPropertiesLoose () {
		if (hasRequiredObjectWithoutPropertiesLoose) return objectWithoutPropertiesLoose.exports;
		hasRequiredObjectWithoutPropertiesLoose = 1;
		(function (module) {
			function _objectWithoutPropertiesLoose(source, excluded) {
			  if (source == null) return {};
			  var target = {};
			  var sourceKeys = Object.keys(source);
			  var key, i;
			  for (i = 0; i < sourceKeys.length; i++) {
			    key = sourceKeys[i];
			    if (excluded.indexOf(key) >= 0) continue;
			    target[key] = source[key];
			  }
			  return target;
			}
			module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (objectWithoutPropertiesLoose));
		return objectWithoutPropertiesLoose.exports;
	}

	var _extends$2 = {exports: {}};

	var hasRequired_extends;

	function require_extends () {
		if (hasRequired_extends) return _extends$2.exports;
		hasRequired_extends = 1;
		(function (module) {
			function _extends() {
			  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
			    for (var i = 1; i < arguments.length; i++) {
			      var source = arguments[i];
			      for (var key in source) {
			        if (Object.prototype.hasOwnProperty.call(source, key)) {
			          target[key] = source[key];
			        }
			      }
			    }
			    return target;
			  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
			  return _extends.apply(this, arguments);
			}
			module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
	} (_extends$2));
		return _extends$2.exports;
	}

	var propTypes = {exports: {}};

	var reactIs$2 = {exports: {}};

	var reactIs_development$1 = {};

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_development$1;

	function requireReactIs_development$1 () {
		if (hasRequiredReactIs_development$1) return reactIs_development$1;
		hasRequiredReactIs_development$1 = 1;



		{
		  (function() {

		// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
		// nor polyfill, then a plain number is used for performance.
		var hasSymbol = typeof Symbol === 'function' && Symbol.for;
		var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
		var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
		var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
		var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
		var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
		var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
		var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
		// (unstable) APIs that have been removed. Can we remove the symbols?

		var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
		var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
		var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
		var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
		var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
		var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
		var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
		var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
		var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
		var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
		var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

		function isValidElementType(type) {
		  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
		  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
		}

		function typeOf(object) {
		  if (typeof object === 'object' && object !== null) {
		    var $$typeof = object.$$typeof;

		    switch ($$typeof) {
		      case REACT_ELEMENT_TYPE:
		        var type = object.type;

		        switch (type) {
		          case REACT_ASYNC_MODE_TYPE:
		          case REACT_CONCURRENT_MODE_TYPE:
		          case REACT_FRAGMENT_TYPE:
		          case REACT_PROFILER_TYPE:
		          case REACT_STRICT_MODE_TYPE:
		          case REACT_SUSPENSE_TYPE:
		            return type;

		          default:
		            var $$typeofType = type && type.$$typeof;

		            switch ($$typeofType) {
		              case REACT_CONTEXT_TYPE:
		              case REACT_FORWARD_REF_TYPE:
		              case REACT_LAZY_TYPE:
		              case REACT_MEMO_TYPE:
		              case REACT_PROVIDER_TYPE:
		                return $$typeofType;

		              default:
		                return $$typeof;
		            }

		        }

		      case REACT_PORTAL_TYPE:
		        return $$typeof;
		    }
		  }

		  return undefined;
		} // AsyncMode is deprecated along with isAsyncMode

		var AsyncMode = REACT_ASYNC_MODE_TYPE;
		var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
		var ContextConsumer = REACT_CONTEXT_TYPE;
		var ContextProvider = REACT_PROVIDER_TYPE;
		var Element = REACT_ELEMENT_TYPE;
		var ForwardRef = REACT_FORWARD_REF_TYPE;
		var Fragment = REACT_FRAGMENT_TYPE;
		var Lazy = REACT_LAZY_TYPE;
		var Memo = REACT_MEMO_TYPE;
		var Portal = REACT_PORTAL_TYPE;
		var Profiler = REACT_PROFILER_TYPE;
		var StrictMode = REACT_STRICT_MODE_TYPE;
		var Suspense = REACT_SUSPENSE_TYPE;
		var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

		function isAsyncMode(object) {
		  {
		    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
		      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

		      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
		    }
		  }

		  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
		}
		function isConcurrentMode(object) {
		  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
		}
		function isContextConsumer(object) {
		  return typeOf(object) === REACT_CONTEXT_TYPE;
		}
		function isContextProvider(object) {
		  return typeOf(object) === REACT_PROVIDER_TYPE;
		}
		function isElement(object) {
		  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		}
		function isForwardRef(object) {
		  return typeOf(object) === REACT_FORWARD_REF_TYPE;
		}
		function isFragment(object) {
		  return typeOf(object) === REACT_FRAGMENT_TYPE;
		}
		function isLazy(object) {
		  return typeOf(object) === REACT_LAZY_TYPE;
		}
		function isMemo(object) {
		  return typeOf(object) === REACT_MEMO_TYPE;
		}
		function isPortal(object) {
		  return typeOf(object) === REACT_PORTAL_TYPE;
		}
		function isProfiler(object) {
		  return typeOf(object) === REACT_PROFILER_TYPE;
		}
		function isStrictMode(object) {
		  return typeOf(object) === REACT_STRICT_MODE_TYPE;
		}
		function isSuspense(object) {
		  return typeOf(object) === REACT_SUSPENSE_TYPE;
		}

		reactIs_development$1.AsyncMode = AsyncMode;
		reactIs_development$1.ConcurrentMode = ConcurrentMode;
		reactIs_development$1.ContextConsumer = ContextConsumer;
		reactIs_development$1.ContextProvider = ContextProvider;
		reactIs_development$1.Element = Element;
		reactIs_development$1.ForwardRef = ForwardRef;
		reactIs_development$1.Fragment = Fragment;
		reactIs_development$1.Lazy = Lazy;
		reactIs_development$1.Memo = Memo;
		reactIs_development$1.Portal = Portal;
		reactIs_development$1.Profiler = Profiler;
		reactIs_development$1.StrictMode = StrictMode;
		reactIs_development$1.Suspense = Suspense;
		reactIs_development$1.isAsyncMode = isAsyncMode;
		reactIs_development$1.isConcurrentMode = isConcurrentMode;
		reactIs_development$1.isContextConsumer = isContextConsumer;
		reactIs_development$1.isContextProvider = isContextProvider;
		reactIs_development$1.isElement = isElement;
		reactIs_development$1.isForwardRef = isForwardRef;
		reactIs_development$1.isFragment = isFragment;
		reactIs_development$1.isLazy = isLazy;
		reactIs_development$1.isMemo = isMemo;
		reactIs_development$1.isPortal = isPortal;
		reactIs_development$1.isProfiler = isProfiler;
		reactIs_development$1.isStrictMode = isStrictMode;
		reactIs_development$1.isSuspense = isSuspense;
		reactIs_development$1.isValidElementType = isValidElementType;
		reactIs_development$1.typeOf = typeOf;
		  })();
		}
		return reactIs_development$1;
	}

	var hasRequiredReactIs$1;

	function requireReactIs$1 () {
		if (hasRequiredReactIs$1) return reactIs$2.exports;
		hasRequiredReactIs$1 = 1;
		(function (module) {

			{
			  module.exports = requireReactIs_development$1();
			}
	} (reactIs$2));
		return reactIs$2.exports;
	}

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	var objectAssign;
	var hasRequiredObjectAssign;

	function requireObjectAssign () {
		if (hasRequiredObjectAssign) return objectAssign;
		hasRequiredObjectAssign = 1;
		/* eslint-disable no-unused-vars */
		var getOwnPropertySymbols = Object.getOwnPropertySymbols;
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		var propIsEnumerable = Object.prototype.propertyIsEnumerable;

		function toObject(val) {
			if (val === null || val === undefined) {
				throw new TypeError('Object.assign cannot be called with null or undefined');
			}

			return Object(val);
		}

		function shouldUseNative() {
			try {
				if (!Object.assign) {
					return false;
				}

				// Detect buggy property enumeration order in older V8 versions.

				// https://bugs.chromium.org/p/v8/issues/detail?id=4118
				var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
				test1[5] = 'de';
				if (Object.getOwnPropertyNames(test1)[0] === '5') {
					return false;
				}

				// https://bugs.chromium.org/p/v8/issues/detail?id=3056
				var test2 = {};
				for (var i = 0; i < 10; i++) {
					test2['_' + String.fromCharCode(i)] = i;
				}
				var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
					return test2[n];
				});
				if (order2.join('') !== '0123456789') {
					return false;
				}

				// https://bugs.chromium.org/p/v8/issues/detail?id=3056
				var test3 = {};
				'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
					test3[letter] = letter;
				});
				if (Object.keys(Object.assign({}, test3)).join('') !==
						'abcdefghijklmnopqrst') {
					return false;
				}

				return true;
			} catch (err) {
				// We don't expect any of the above to throw, but better to be safe.
				return false;
			}
		}

		objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
			var from;
			var to = toObject(target);
			var symbols;

			for (var s = 1; s < arguments.length; s++) {
				from = Object(arguments[s]);

				for (var key in from) {
					if (hasOwnProperty.call(from, key)) {
						to[key] = from[key];
					}
				}

				if (getOwnPropertySymbols) {
					symbols = getOwnPropertySymbols(from);
					for (var i = 0; i < symbols.length; i++) {
						if (propIsEnumerable.call(from, symbols[i])) {
							to[symbols[i]] = from[symbols[i]];
						}
					}
				}
			}

			return to;
		};
		return objectAssign;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret_1;
	var hasRequiredReactPropTypesSecret;

	function requireReactPropTypesSecret () {
		if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
		hasRequiredReactPropTypesSecret = 1;

		var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

		ReactPropTypesSecret_1 = ReactPropTypesSecret;
		return ReactPropTypesSecret_1;
	}

	var has$1;
	var hasRequiredHas;

	function requireHas () {
		if (hasRequiredHas) return has$1;
		hasRequiredHas = 1;
		has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
		return has$1;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var checkPropTypes_1;
	var hasRequiredCheckPropTypes;

	function requireCheckPropTypes () {
		if (hasRequiredCheckPropTypes) return checkPropTypes_1;
		hasRequiredCheckPropTypes = 1;

		var printWarning = function() {};

		{
		  var ReactPropTypesSecret = requireReactPropTypesSecret();
		  var loggedTypeFailures = {};
		  var has = requireHas();

		  printWarning = function(text) {
		    var message = 'Warning: ' + text;
		    if (typeof console !== 'undefined') {
		      console.error(message);
		    }
		    try {
		      // --- Welcome to debugging React ---
		      // This error was thrown as a convenience so that you can use this stack
		      // to find the callsite that caused this warning to fire.
		      throw new Error(message);
		    } catch (x) { /**/ }
		  };
		}

		/**
		 * Assert that the values match with the type specs.
		 * Error messages are memorized and will only be shown once.
		 *
		 * @param {object} typeSpecs Map of name to a ReactPropType
		 * @param {object} values Runtime values that need to be type-checked
		 * @param {string} location e.g. "prop", "context", "child context"
		 * @param {string} componentName Name of the component for error messages.
		 * @param {?Function} getStack Returns the component stack.
		 * @private
		 */
		function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
		  {
		    for (var typeSpecName in typeSpecs) {
		      if (has(typeSpecs, typeSpecName)) {
		        var error;
		        // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.
		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          if (typeof typeSpecs[typeSpecName] !== 'function') {
		            var err = Error(
		              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
		              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
		              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
		            );
		            err.name = 'Invariant Violation';
		            throw err;
		          }
		          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
		        } catch (ex) {
		          error = ex;
		        }
		        if (error && !(error instanceof Error)) {
		          printWarning(
		            (componentName || 'React class') + ': type specification of ' +
		            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
		            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
		            'You may have forgotten to pass an argument to the type checker ' +
		            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
		            'shape all require an argument).'
		          );
		        }
		        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error.message] = true;

		          var stack = getStack ? getStack() : '';

		          printWarning(
		            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
		          );
		        }
		      }
		    }
		  }
		}

		/**
		 * Resets warning cache when testing.
		 *
		 * @private
		 */
		checkPropTypes.resetWarningCache = function() {
		  {
		    loggedTypeFailures = {};
		  }
		};

		checkPropTypes_1 = checkPropTypes;
		return checkPropTypes_1;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var factoryWithTypeCheckers;
	var hasRequiredFactoryWithTypeCheckers;

	function requireFactoryWithTypeCheckers () {
		if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
		hasRequiredFactoryWithTypeCheckers = 1;

		var ReactIs = requireReactIs$1();
		var assign = requireObjectAssign();

		var ReactPropTypesSecret = requireReactPropTypesSecret();
		var has = requireHas();
		var checkPropTypes = requireCheckPropTypes();

		var printWarning = function() {};

		{
		  printWarning = function(text) {
		    var message = 'Warning: ' + text;
		    if (typeof console !== 'undefined') {
		      console.error(message);
		    }
		    try {
		      // --- Welcome to debugging React ---
		      // This error was thrown as a convenience so that you can use this stack
		      // to find the callsite that caused this warning to fire.
		      throw new Error(message);
		    } catch (x) {}
		  };
		}

		function emptyFunctionThatReturnsNull() {
		  return null;
		}

		factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
		  /* global Symbol */
		  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
		  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

		  /**
		   * Returns the iterator method function contained on the iterable object.
		   *
		   * Be sure to invoke the function with the iterable as context:
		   *
		   *     var iteratorFn = getIteratorFn(myIterable);
		   *     if (iteratorFn) {
		   *       var iterator = iteratorFn.call(myIterable);
		   *       ...
		   *     }
		   *
		   * @param {?object} maybeIterable
		   * @return {?function}
		   */
		  function getIteratorFn(maybeIterable) {
		    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
		    if (typeof iteratorFn === 'function') {
		      return iteratorFn;
		    }
		  }

		  /**
		   * Collection of methods that allow declaration and validation of props that are
		   * supplied to React components. Example usage:
		   *
		   *   var Props = require('ReactPropTypes');
		   *   var MyArticle = React.createClass({
		   *     propTypes: {
		   *       // An optional string prop named "description".
		   *       description: Props.string,
		   *
		   *       // A required enum prop named "category".
		   *       category: Props.oneOf(['News','Photos']).isRequired,
		   *
		   *       // A prop named "dialog" that requires an instance of Dialog.
		   *       dialog: Props.instanceOf(Dialog).isRequired
		   *     },
		   *     render: function() { ... }
		   *   });
		   *
		   * A more formal specification of how these methods are used:
		   *
		   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
		   *   decl := ReactPropTypes.{type}(.isRequired)?
		   *
		   * Each and every declaration produces a function with the same signature. This
		   * allows the creation of custom validation functions. For example:
		   *
		   *  var MyLink = React.createClass({
		   *    propTypes: {
		   *      // An optional string or URI prop named "href".
		   *      href: function(props, propName, componentName) {
		   *        var propValue = props[propName];
		   *        if (propValue != null && typeof propValue !== 'string' &&
		   *            !(propValue instanceof URI)) {
		   *          return new Error(
		   *            'Expected a string or an URI for ' + propName + ' in ' +
		   *            componentName
		   *          );
		   *        }
		   *      }
		   *    },
		   *    render: function() {...}
		   *  });
		   *
		   * @internal
		   */

		  var ANONYMOUS = '<<anonymous>>';

		  // Important!
		  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
		  var ReactPropTypes = {
		    array: createPrimitiveTypeChecker('array'),
		    bigint: createPrimitiveTypeChecker('bigint'),
		    bool: createPrimitiveTypeChecker('boolean'),
		    func: createPrimitiveTypeChecker('function'),
		    number: createPrimitiveTypeChecker('number'),
		    object: createPrimitiveTypeChecker('object'),
		    string: createPrimitiveTypeChecker('string'),
		    symbol: createPrimitiveTypeChecker('symbol'),

		    any: createAnyTypeChecker(),
		    arrayOf: createArrayOfTypeChecker,
		    element: createElementTypeChecker(),
		    elementType: createElementTypeTypeChecker(),
		    instanceOf: createInstanceTypeChecker,
		    node: createNodeChecker(),
		    objectOf: createObjectOfTypeChecker,
		    oneOf: createEnumTypeChecker,
		    oneOfType: createUnionTypeChecker,
		    shape: createShapeTypeChecker,
		    exact: createStrictShapeTypeChecker,
		  };

		  /**
		   * inlined Object.is polyfill to avoid requiring consumers ship their own
		   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		   */
		  /*eslint-disable no-self-compare*/
		  function is(x, y) {
		    // SameValue algorithm
		    if (x === y) {
		      // Steps 1-5, 7-10
		      // Steps 6.b-6.e: +0 != -0
		      return x !== 0 || 1 / x === 1 / y;
		    } else {
		      // Step 6.a: NaN == NaN
		      return x !== x && y !== y;
		    }
		  }
		  /*eslint-enable no-self-compare*/

		  /**
		   * We use an Error-like object for backward compatibility as people may call
		   * PropTypes directly and inspect their output. However, we don't use real
		   * Errors anymore. We don't inspect their stack anyway, and creating them
		   * is prohibitively expensive if they are created too often, such as what
		   * happens in oneOfType() for any type before the one that matched.
		   */
		  function PropTypeError(message, data) {
		    this.message = message;
		    this.data = data && typeof data === 'object' ? data: {};
		    this.stack = '';
		  }
		  // Make `instanceof Error` still work for returned errors.
		  PropTypeError.prototype = Error.prototype;

		  function createChainableTypeChecker(validate) {
		    {
		      var manualPropTypeCallCache = {};
		      var manualPropTypeWarningCount = 0;
		    }
		    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
		      componentName = componentName || ANONYMOUS;
		      propFullName = propFullName || propName;

		      if (secret !== ReactPropTypesSecret) {
		        if (throwOnDirectAccess) {
		          // New behavior only for users of `prop-types` package
		          var err = new Error(
		            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
		            'Use `PropTypes.checkPropTypes()` to call them. ' +
		            'Read more at http://fb.me/use-check-prop-types'
		          );
		          err.name = 'Invariant Violation';
		          throw err;
		        } else if (typeof console !== 'undefined') {
		          // Old behavior for people using React.PropTypes
		          var cacheKey = componentName + ':' + propName;
		          if (
		            !manualPropTypeCallCache[cacheKey] &&
		            // Avoid spamming the console because they are often not actionable except for lib authors
		            manualPropTypeWarningCount < 3
		          ) {
		            printWarning(
		              'You are manually calling a React.PropTypes validation ' +
		              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
		              'and will throw in the standalone `prop-types` package. ' +
		              'You may be seeing this warning due to a third-party PropTypes ' +
		              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
		            );
		            manualPropTypeCallCache[cacheKey] = true;
		            manualPropTypeWarningCount++;
		          }
		        }
		      }
		      if (props[propName] == null) {
		        if (isRequired) {
		          if (props[propName] === null) {
		            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
		          }
		          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
		        }
		        return null;
		      } else {
		        return validate(props, propName, componentName, location, propFullName);
		      }
		    }

		    var chainedCheckType = checkType.bind(null, false);
		    chainedCheckType.isRequired = checkType.bind(null, true);

		    return chainedCheckType;
		  }

		  function createPrimitiveTypeChecker(expectedType) {
		    function validate(props, propName, componentName, location, propFullName, secret) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== expectedType) {
		        // `propValue` being instance of, say, date/regexp, pass the 'object'
		        // check, but we can offer a more precise error message here rather than
		        // 'of type `object`'.
		        var preciseType = getPreciseType(propValue);

		        return new PropTypeError(
		          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
		          {expectedType: expectedType}
		        );
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createAnyTypeChecker() {
		    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
		  }

		  function createArrayOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
		      }
		      var propValue = props[propName];
		      if (!Array.isArray(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
		      }
		      for (var i = 0; i < propValue.length; i++) {
		        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
		        if (error instanceof Error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createElementTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      if (!isValidElement(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createElementTypeTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      if (!ReactIs.isValidElementType(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createInstanceTypeChecker(expectedClass) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!(props[propName] instanceof expectedClass)) {
		        var expectedClassName = expectedClass.name || ANONYMOUS;
		        var actualClassName = getClassName(props[propName]);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createEnumTypeChecker(expectedValues) {
		    if (!Array.isArray(expectedValues)) {
		      {
		        if (arguments.length > 1) {
		          printWarning(
		            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
		            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
		          );
		        } else {
		          printWarning('Invalid argument supplied to oneOf, expected an array.');
		        }
		      }
		      return emptyFunctionThatReturnsNull;
		    }

		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      for (var i = 0; i < expectedValues.length; i++) {
		        if (is(propValue, expectedValues[i])) {
		          return null;
		        }
		      }

		      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
		        var type = getPreciseType(value);
		        if (type === 'symbol') {
		          return String(value);
		        }
		        return value;
		      });
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createObjectOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
		      }
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
		      }
		      for (var key in propValue) {
		        if (has(propValue, key)) {
		          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		          if (error instanceof Error) {
		            return error;
		          }
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createUnionTypeChecker(arrayOfTypeCheckers) {
		    if (!Array.isArray(arrayOfTypeCheckers)) {
		      printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') ;
		      return emptyFunctionThatReturnsNull;
		    }

		    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		      var checker = arrayOfTypeCheckers[i];
		      if (typeof checker !== 'function') {
		        printWarning(
		          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
		          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
		        );
		        return emptyFunctionThatReturnsNull;
		      }
		    }

		    function validate(props, propName, componentName, location, propFullName) {
		      var expectedTypes = [];
		      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		        var checker = arrayOfTypeCheckers[i];
		        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
		        if (checkerResult == null) {
		          return null;
		        }
		        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
		          expectedTypes.push(checkerResult.data.expectedType);
		        }
		      }
		      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createNodeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!isNode(props[propName])) {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function invalidValidatorError(componentName, location, propFullName, key, type) {
		    return new PropTypeError(
		      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
		      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
		    );
		  }

		  function createShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      for (var key in shapeTypes) {
		        var checker = shapeTypes[key];
		        if (typeof checker !== 'function') {
		          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createStrictShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      // We need to check all keys in case some are required but missing from props.
		      var allKeys = assign({}, props[propName], shapeTypes);
		      for (var key in allKeys) {
		        var checker = shapeTypes[key];
		        if (has(shapeTypes, key) && typeof checker !== 'function') {
		          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
		        }
		        if (!checker) {
		          return new PropTypeError(
		            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
		            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
		            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
		          );
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function isNode(propValue) {
		    switch (typeof propValue) {
		      case 'number':
		      case 'string':
		      case 'undefined':
		        return true;
		      case 'boolean':
		        return !propValue;
		      case 'object':
		        if (Array.isArray(propValue)) {
		          return propValue.every(isNode);
		        }
		        if (propValue === null || isValidElement(propValue)) {
		          return true;
		        }

		        var iteratorFn = getIteratorFn(propValue);
		        if (iteratorFn) {
		          var iterator = iteratorFn.call(propValue);
		          var step;
		          if (iteratorFn !== propValue.entries) {
		            while (!(step = iterator.next()).done) {
		              if (!isNode(step.value)) {
		                return false;
		              }
		            }
		          } else {
		            // Iterator will provide entry [k,v] tuples rather than values.
		            while (!(step = iterator.next()).done) {
		              var entry = step.value;
		              if (entry) {
		                if (!isNode(entry[1])) {
		                  return false;
		                }
		              }
		            }
		          }
		        } else {
		          return false;
		        }

		        return true;
		      default:
		        return false;
		    }
		  }

		  function isSymbol(propType, propValue) {
		    // Native Symbol.
		    if (propType === 'symbol') {
		      return true;
		    }

		    // falsy value can't be a Symbol
		    if (!propValue) {
		      return false;
		    }

		    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
		    if (propValue['@@toStringTag'] === 'Symbol') {
		      return true;
		    }

		    // Fallback for non-spec compliant Symbols which are polyfilled.
		    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
		      return true;
		    }

		    return false;
		  }

		  // Equivalent of `typeof` but with special handling for array and regexp.
		  function getPropType(propValue) {
		    var propType = typeof propValue;
		    if (Array.isArray(propValue)) {
		      return 'array';
		    }
		    if (propValue instanceof RegExp) {
		      // Old webkits (at least until Android 4.0) return 'function' rather than
		      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
		      // passes PropTypes.object.
		      return 'object';
		    }
		    if (isSymbol(propType, propValue)) {
		      return 'symbol';
		    }
		    return propType;
		  }

		  // This handles more types than `getPropType`. Only used for error messages.
		  // See `createPrimitiveTypeChecker`.
		  function getPreciseType(propValue) {
		    if (typeof propValue === 'undefined' || propValue === null) {
		      return '' + propValue;
		    }
		    var propType = getPropType(propValue);
		    if (propType === 'object') {
		      if (propValue instanceof Date) {
		        return 'date';
		      } else if (propValue instanceof RegExp) {
		        return 'regexp';
		      }
		    }
		    return propType;
		  }

		  // Returns a string that is postfixed to a warning about an invalid type.
		  // For example, "undefined" or "of type array"
		  function getPostfixForTypeWarning(value) {
		    var type = getPreciseType(value);
		    switch (type) {
		      case 'array':
		      case 'object':
		        return 'an ' + type;
		      case 'boolean':
		      case 'date':
		      case 'regexp':
		        return 'a ' + type;
		      default:
		        return type;
		    }
		  }

		  // Returns class name of the object, if any.
		  function getClassName(propValue) {
		    if (!propValue.constructor || !propValue.constructor.name) {
		      return ANONYMOUS;
		    }
		    return propValue.constructor.name;
		  }

		  ReactPropTypes.checkPropTypes = checkPropTypes;
		  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
		  ReactPropTypes.PropTypes = ReactPropTypes;

		  return ReactPropTypes;
		};
		return factoryWithTypeCheckers;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredPropTypes$1;

	function requirePropTypes$1 () {
		if (hasRequiredPropTypes$1) return propTypes.exports;
		hasRequiredPropTypes$1 = 1;
		{
		  var ReactIs = requireReactIs$1();

		  // By explicitly using `prop-types` you are opting into new development behavior.
		  // http://fb.me/prop-types-in-prod
		  var throwOnDirectAccess = true;
		  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
		}
		return propTypes.exports;
	}

	var utils$5 = {};

	var chainPropTypes = {};

	var hasRequiredChainPropTypes;

	function requireChainPropTypes () {
		if (hasRequiredChainPropTypes) return chainPropTypes;
		hasRequiredChainPropTypes = 1;

		Object.defineProperty(chainPropTypes, "__esModule", {
		  value: true
		});
		chainPropTypes.default = chainPropTypes$1;
		function chainPropTypes$1(propType1, propType2) {
		  return function validate(...args) {
		    return propType1(...args) || propType2(...args);
		  };
		}
		return chainPropTypes;
	}

	var deepmerge = {};

	var hasRequiredDeepmerge;

	function requireDeepmerge () {
		if (hasRequiredDeepmerge) return deepmerge;
		hasRequiredDeepmerge = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(deepmerge, "__esModule", {
		  value: true
		});
		deepmerge.default = deepmerge$1;
		deepmerge.isPlainObject = isPlainObject;
		var _extends2 = _interopRequireDefault(require_extends());
		function isPlainObject(item) {
		  return item !== null && typeof item === 'object' && item.constructor === Object;
		}
		function deepmerge$1(target, source, options = {
		  clone: true
		}) {
		  const output = options.clone ? (0, _extends2.default)({}, target) : target;
		  if (isPlainObject(target) && isPlainObject(source)) {
		    Object.keys(source).forEach(key => {
		      // Avoid prototype pollution
		      if (key === '__proto__') {
		        return;
		      }
		      if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
		        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
		        output[key] = deepmerge$1(target[key], source[key], options);
		      } else {
		        output[key] = source[key];
		      }
		    });
		  }
		  return output;
		}
		return deepmerge;
	}

	var elementAcceptingRef = {};

	var hasRequiredElementAcceptingRef;

	function requireElementAcceptingRef () {
		if (hasRequiredElementAcceptingRef) return elementAcceptingRef;
		hasRequiredElementAcceptingRef = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(elementAcceptingRef, "__esModule", {
		  value: true
		});
		elementAcceptingRef.default = void 0;
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _chainPropTypes = _interopRequireDefault(requireChainPropTypes());
		function isClassComponent(elementType) {
		  // elementType.prototype?.isReactComponent
		  const {
		    prototype = {}
		  } = elementType;
		  return Boolean(prototype.isReactComponent);
		}
		function acceptingRef(props, propName, componentName, location, propFullName) {
		  const element = props[propName];
		  const safePropName = propFullName || propName;
		  if (element == null ||
		  // When server-side rendering React doesn't warn either.
		  // This is not an accurate check for SSR.
		  // This is only in place for Emotion compat.
		  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
		  typeof window === 'undefined') {
		    return null;
		  }
		  let warningHint;
		  const elementType = element.type;
		  /**
		   * Blacklisting instead of whitelisting
		   *
		   * Blacklisting will miss some components, such as React.Fragment. Those will at least
		   * trigger a warning in React.
		   * We can't whitelist because there is no safe way to detect React.forwardRef
		   * or class components. "Safe" means there's no public API.
		   *
		   */
		  if (typeof elementType === 'function' && !isClassComponent(elementType)) {
		    warningHint = 'Did you accidentally use a plain function component for an element instead?';
		  }
		  if (warningHint !== undefined) {
		    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
		  }
		  return null;
		}
		const elementAcceptingRef$1 = (0, _chainPropTypes.default)(_propTypes.default.element, acceptingRef);
		elementAcceptingRef$1.isRequired = (0, _chainPropTypes.default)(_propTypes.default.element.isRequired, acceptingRef);
		var _default = elementAcceptingRef$1;
		elementAcceptingRef.default = _default;
		return elementAcceptingRef;
	}

	var elementTypeAcceptingRef = {};

	var hasRequiredElementTypeAcceptingRef;

	function requireElementTypeAcceptingRef () {
		if (hasRequiredElementTypeAcceptingRef) return elementTypeAcceptingRef;
		hasRequiredElementTypeAcceptingRef = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(elementTypeAcceptingRef, "__esModule", {
		  value: true
		});
		elementTypeAcceptingRef.default = void 0;
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _chainPropTypes = _interopRequireDefault(requireChainPropTypes());
		function isClassComponent(elementType) {
		  // elementType.prototype?.isReactComponent
		  const {
		    prototype = {}
		  } = elementType;
		  return Boolean(prototype.isReactComponent);
		}
		function elementTypeAcceptingRef$1(props, propName, componentName, location, propFullName) {
		  const propValue = props[propName];
		  const safePropName = propFullName || propName;
		  if (propValue == null ||
		  // When server-side rendering React doesn't warn either.
		  // This is not an accurate check for SSR.
		  // This is only in place for emotion compat.
		  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
		  typeof window === 'undefined') {
		    return null;
		  }
		  let warningHint;

		  /**
		   * Blacklisting instead of whitelisting
		   *
		   * Blacklisting will miss some components, such as React.Fragment. Those will at least
		   * trigger a warning in React.
		   * We can't whitelist because there is no safe way to detect React.forwardRef
		   * or class components. "Safe" means there's no public API.
		   *
		   */
		  if (typeof propValue === 'function' && !isClassComponent(propValue)) {
		    warningHint = 'Did you accidentally provide a plain function component instead?';
		  }
		  if (warningHint !== undefined) {
		    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');
		  }
		  return null;
		}
		var _default = (0, _chainPropTypes.default)(_propTypes.default.elementType, elementTypeAcceptingRef$1);
		elementTypeAcceptingRef.default = _default;
		return elementTypeAcceptingRef;
	}

	var exactProp = {};

	var hasRequiredExactProp;

	function requireExactProp () {
		if (hasRequiredExactProp) return exactProp;
		hasRequiredExactProp = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exactProp, "__esModule", {
		  value: true
		});
		exactProp.default = exactProp$1;
		var _extends2 = _interopRequireDefault(require_extends());
		// This module is based on https://github.com/airbnb/prop-types-exact repository.
		// However, in order to reduce the number of dependencies and to remove some extra safe checks
		// the module was forked.

		const specialProperty = 'exact-prop: \u200b';
		function exactProp$1(propTypes) {
		  return (0, _extends2.default)({}, propTypes, {
		    [specialProperty]: props => {
		      const unsupportedProps = Object.keys(props).filter(prop => !propTypes.hasOwnProperty(prop));
		      if (unsupportedProps.length > 0) {
		        return new Error(`The following props are not supported: ${unsupportedProps.map(prop => `\`${prop}\``).join(', ')}. Please remove them.`);
		      }
		      return null;
		    }
		  });
		}
		return exactProp;
	}

	var formatMuiErrorMessage = {};

	var hasRequiredFormatMuiErrorMessage;

	function requireFormatMuiErrorMessage () {
		if (hasRequiredFormatMuiErrorMessage) return formatMuiErrorMessage;
		hasRequiredFormatMuiErrorMessage = 1;

		Object.defineProperty(formatMuiErrorMessage, "__esModule", {
		  value: true
		});
		formatMuiErrorMessage.default = formatMuiErrorMessage$1;
		/**
		 * WARNING: Don't import this directly.
		 * Use `MuiError` from `@mui/utils/macros/MuiError.macro` instead.
		 * @param {number} code
		 */
		function formatMuiErrorMessage$1(code) {
		  // Apply babel-plugin-transform-template-literals in loose mode
		  // loose mode is safe iff we're concatenating primitives
		  // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose
		  /* eslint-disable prefer-template */
		  let url = 'https://mui.com/production-error/?code=' + code;
		  for (let i = 1; i < arguments.length; i += 1) {
		    // rest params over-transpile for this case
		    // eslint-disable-next-line prefer-rest-params
		    url += '&args[]=' + encodeURIComponent(arguments[i]);
		  }
		  return 'Minified MUI error #' + code + '; visit ' + url + ' for the full message.';
		  /* eslint-enable prefer-template */
		}
		return formatMuiErrorMessage;
	}

	var getDisplayName = {};

	var reactIs$1 = {exports: {}};

	var reactIs_development = {};

	/**
	 * @license React
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_development;

	function requireReactIs_development () {
		if (hasRequiredReactIs_development) return reactIs_development;
		hasRequiredReactIs_development = 1;

		{
		  (function() {

		// ATTENTION
		// When adding new symbols to this file,
		// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
		// The Symbol used to tag the ReactElement-like types.
		var REACT_ELEMENT_TYPE = Symbol.for('react.element');
		var REACT_PORTAL_TYPE = Symbol.for('react.portal');
		var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
		var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
		var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
		var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
		var REACT_CONTEXT_TYPE = Symbol.for('react.context');
		var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
		var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
		var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
		var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
		var REACT_MEMO_TYPE = Symbol.for('react.memo');
		var REACT_LAZY_TYPE = Symbol.for('react.lazy');
		var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');

		// -----------------------------------------------------------------------------

		var enableScopeAPI = false; // Experimental Create Event Handle API.
		var enableCacheElement = false;
		var enableTransitionTracing = false; // No known bugs, but needs performance testing

		var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
		// stuff. Intended to enable React core members to more easily debug scheduling
		// issues in DEV builds.

		var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

		var REACT_MODULE_REFERENCE;

		{
		  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
		}

		function isValidElementType(type) {
		  if (typeof type === 'string' || typeof type === 'function') {
		    return true;
		  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


		  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
		    return true;
		  }

		  if (typeof type === 'object' && type !== null) {
		    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
		    // types supported by any Flight configuration anywhere since
		    // we don't know which Flight build this will end up being used
		    // with.
		    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
		      return true;
		    }
		  }

		  return false;
		}

		function typeOf(object) {
		  if (typeof object === 'object' && object !== null) {
		    var $$typeof = object.$$typeof;

		    switch ($$typeof) {
		      case REACT_ELEMENT_TYPE:
		        var type = object.type;

		        switch (type) {
		          case REACT_FRAGMENT_TYPE:
		          case REACT_PROFILER_TYPE:
		          case REACT_STRICT_MODE_TYPE:
		          case REACT_SUSPENSE_TYPE:
		          case REACT_SUSPENSE_LIST_TYPE:
		            return type;

		          default:
		            var $$typeofType = type && type.$$typeof;

		            switch ($$typeofType) {
		              case REACT_SERVER_CONTEXT_TYPE:
		              case REACT_CONTEXT_TYPE:
		              case REACT_FORWARD_REF_TYPE:
		              case REACT_LAZY_TYPE:
		              case REACT_MEMO_TYPE:
		              case REACT_PROVIDER_TYPE:
		                return $$typeofType;

		              default:
		                return $$typeof;
		            }

		        }

		      case REACT_PORTAL_TYPE:
		        return $$typeof;
		    }
		  }

		  return undefined;
		}
		var ContextConsumer = REACT_CONTEXT_TYPE;
		var ContextProvider = REACT_PROVIDER_TYPE;
		var Element = REACT_ELEMENT_TYPE;
		var ForwardRef = REACT_FORWARD_REF_TYPE;
		var Fragment = REACT_FRAGMENT_TYPE;
		var Lazy = REACT_LAZY_TYPE;
		var Memo = REACT_MEMO_TYPE;
		var Portal = REACT_PORTAL_TYPE;
		var Profiler = REACT_PROFILER_TYPE;
		var StrictMode = REACT_STRICT_MODE_TYPE;
		var Suspense = REACT_SUSPENSE_TYPE;
		var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
		var hasWarnedAboutDeprecatedIsAsyncMode = false;
		var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

		function isAsyncMode(object) {
		  {
		    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
		      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

		      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
		    }
		  }

		  return false;
		}
		function isConcurrentMode(object) {
		  {
		    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
		      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

		      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
		    }
		  }

		  return false;
		}
		function isContextConsumer(object) {
		  return typeOf(object) === REACT_CONTEXT_TYPE;
		}
		function isContextProvider(object) {
		  return typeOf(object) === REACT_PROVIDER_TYPE;
		}
		function isElement(object) {
		  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		}
		function isForwardRef(object) {
		  return typeOf(object) === REACT_FORWARD_REF_TYPE;
		}
		function isFragment(object) {
		  return typeOf(object) === REACT_FRAGMENT_TYPE;
		}
		function isLazy(object) {
		  return typeOf(object) === REACT_LAZY_TYPE;
		}
		function isMemo(object) {
		  return typeOf(object) === REACT_MEMO_TYPE;
		}
		function isPortal(object) {
		  return typeOf(object) === REACT_PORTAL_TYPE;
		}
		function isProfiler(object) {
		  return typeOf(object) === REACT_PROFILER_TYPE;
		}
		function isStrictMode(object) {
		  return typeOf(object) === REACT_STRICT_MODE_TYPE;
		}
		function isSuspense(object) {
		  return typeOf(object) === REACT_SUSPENSE_TYPE;
		}
		function isSuspenseList(object) {
		  return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
		}

		reactIs_development.ContextConsumer = ContextConsumer;
		reactIs_development.ContextProvider = ContextProvider;
		reactIs_development.Element = Element;
		reactIs_development.ForwardRef = ForwardRef;
		reactIs_development.Fragment = Fragment;
		reactIs_development.Lazy = Lazy;
		reactIs_development.Memo = Memo;
		reactIs_development.Portal = Portal;
		reactIs_development.Profiler = Profiler;
		reactIs_development.StrictMode = StrictMode;
		reactIs_development.Suspense = Suspense;
		reactIs_development.SuspenseList = SuspenseList;
		reactIs_development.isAsyncMode = isAsyncMode;
		reactIs_development.isConcurrentMode = isConcurrentMode;
		reactIs_development.isContextConsumer = isContextConsumer;
		reactIs_development.isContextProvider = isContextProvider;
		reactIs_development.isElement = isElement;
		reactIs_development.isForwardRef = isForwardRef;
		reactIs_development.isFragment = isFragment;
		reactIs_development.isLazy = isLazy;
		reactIs_development.isMemo = isMemo;
		reactIs_development.isPortal = isPortal;
		reactIs_development.isProfiler = isProfiler;
		reactIs_development.isStrictMode = isStrictMode;
		reactIs_development.isSuspense = isSuspense;
		reactIs_development.isSuspenseList = isSuspenseList;
		reactIs_development.isValidElementType = isValidElementType;
		reactIs_development.typeOf = typeOf;
		  })();
		}
		return reactIs_development;
	}

	var hasRequiredReactIs;

	function requireReactIs () {
		if (hasRequiredReactIs) return reactIs$1.exports;
		hasRequiredReactIs = 1;
		(function (module) {

			{
			  module.exports = requireReactIs_development();
			}
	} (reactIs$1));
		return reactIs$1.exports;
	}

	var hasRequiredGetDisplayName;

	function requireGetDisplayName () {
		if (hasRequiredGetDisplayName) return getDisplayName;
		hasRequiredGetDisplayName = 1;

		Object.defineProperty(getDisplayName, "__esModule", {
		  value: true
		});
		getDisplayName.default = getDisplayName$1;
		getDisplayName.getFunctionName = getFunctionName;
		var _reactIs = requireReactIs();
		// Simplified polyfill for IE11 support
		// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
		const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
		function getFunctionName(fn) {
		  const match = `${fn}`.match(fnNameMatchRegex);
		  const name = match && match[1];
		  return name || '';
		}
		function getFunctionComponentName(Component, fallback = '') {
		  return Component.displayName || Component.name || getFunctionName(Component) || fallback;
		}
		function getWrappedName(outerType, innerType, wrapperName) {
		  const functionName = getFunctionComponentName(innerType);
		  return outerType.displayName || (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName);
		}

		/**
		 * cherry-pick from
		 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
		 * originally forked from recompose/getDisplayName with added IE11 support
		 */
		function getDisplayName$1(Component) {
		  if (Component == null) {
		    return undefined;
		  }
		  if (typeof Component === 'string') {
		    return Component;
		  }
		  if (typeof Component === 'function') {
		    return getFunctionComponentName(Component, 'Component');
		  }

		  // TypeScript can't have components as objects but they exist in the form of `memo` or `Suspense`
		  if (typeof Component === 'object') {
		    switch (Component.$$typeof) {
		      case _reactIs.ForwardRef:
		        return getWrappedName(Component, Component.render, 'ForwardRef');
		      case _reactIs.Memo:
		        return getWrappedName(Component, Component.type, 'memo');
		      default:
		        return undefined;
		    }
		  }
		  return undefined;
		}
		return getDisplayName;
	}

	var HTMLElementType = {};

	var hasRequiredHTMLElementType;

	function requireHTMLElementType () {
		if (hasRequiredHTMLElementType) return HTMLElementType;
		hasRequiredHTMLElementType = 1;

		Object.defineProperty(HTMLElementType, "__esModule", {
		  value: true
		});
		HTMLElementType.default = HTMLElementType$1;
		function HTMLElementType$1(props, propName, componentName, location, propFullName) {
		  const propValue = props[propName];
		  const safePropName = propFullName || propName;
		  if (propValue == null) {
		    return null;
		  }
		  if (propValue && propValue.nodeType !== 1) {
		    return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. ` + `Expected an HTMLElement.`);
		  }
		  return null;
		}
		return HTMLElementType;
	}

	var ponyfillGlobal = {};

	var hasRequiredPonyfillGlobal;

	function requirePonyfillGlobal () {
		if (hasRequiredPonyfillGlobal) return ponyfillGlobal;
		hasRequiredPonyfillGlobal = 1;

		Object.defineProperty(ponyfillGlobal, "__esModule", {
		  value: true
		});
		ponyfillGlobal.default = void 0;
		/* eslint-disable */
		// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
		var _default = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
		ponyfillGlobal.default = _default;
		return ponyfillGlobal;
	}

	var refType = {};

	var hasRequiredRefType;

	function requireRefType () {
		if (hasRequiredRefType) return refType;
		hasRequiredRefType = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(refType, "__esModule", {
		  value: true
		});
		refType.default = void 0;
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		const refType$1 = _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]);
		var _default = refType$1;
		refType.default = _default;
		return refType;
	}

	var capitalize$1 = {};

	var hasRequiredCapitalize$1;

	function requireCapitalize$1 () {
		if (hasRequiredCapitalize$1) return capitalize$1;
		hasRequiredCapitalize$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(capitalize$1, "__esModule", {
		  value: true
		});
		capitalize$1.default = capitalize;
		_interopRequireDefault(requireFormatMuiErrorMessage());
		// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
		//
		// A strict capitalization should uppercase the first letter of each word in the sentence.
		// We only handle the first word.
		function capitalize(string) {
		  if (typeof string !== 'string') {
		    throw new Error(`MUI: \`capitalize(string)\` expects a string argument.` );
		  }
		  return string.charAt(0).toUpperCase() + string.slice(1);
		}
		return capitalize$1;
	}

	var createChainedFunction$1 = {};

	var hasRequiredCreateChainedFunction$1;

	function requireCreateChainedFunction$1 () {
		if (hasRequiredCreateChainedFunction$1) return createChainedFunction$1;
		hasRequiredCreateChainedFunction$1 = 1;

		Object.defineProperty(createChainedFunction$1, "__esModule", {
		  value: true
		});
		createChainedFunction$1.default = createChainedFunction;
		/**
		 * Safe chained function.
		 *
		 * Will only create a new function if needed,
		 * otherwise will pass back existing functions or null.
		 */
		function createChainedFunction(...funcs) {
		  return funcs.reduce((acc, func) => {
		    if (func == null) {
		      return acc;
		    }
		    return function chainedFunction(...args) {
		      acc.apply(this, args);
		      func.apply(this, args);
		    };
		  }, () => {});
		}
		return createChainedFunction$1;
	}

	var debounce$1 = {};

	var hasRequiredDebounce$1;

	function requireDebounce$1 () {
		if (hasRequiredDebounce$1) return debounce$1;
		hasRequiredDebounce$1 = 1;

		Object.defineProperty(debounce$1, "__esModule", {
		  value: true
		});
		debounce$1.default = debounce;
		// Corresponds to 10 frames at 60 Hz.
		// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
		function debounce(func, wait = 166) {
		  let timeout;
		  function debounced(...args) {
		    const later = () => {
		      func.apply(this, args);
		    };
		    clearTimeout(timeout);
		    timeout = setTimeout(later, wait);
		  }
		  debounced.clear = () => {
		    clearTimeout(timeout);
		  };
		  return debounced;
		}
		return debounce$1;
	}

	var deprecatedPropType$1 = {};

	var hasRequiredDeprecatedPropType$1;

	function requireDeprecatedPropType$1 () {
		if (hasRequiredDeprecatedPropType$1) return deprecatedPropType$1;
		hasRequiredDeprecatedPropType$1 = 1;

		Object.defineProperty(deprecatedPropType$1, "__esModule", {
		  value: true
		});
		deprecatedPropType$1.default = deprecatedPropType;
		function deprecatedPropType(validator, reason) {
		  return (props, propName, componentName, location, propFullName) => {
		    const componentNameSafe = componentName || '<<anonymous>>';
		    const propFullNameSafe = propFullName || propName;
		    if (typeof props[propName] !== 'undefined') {
		      return new Error(`The ${location} \`${propFullNameSafe}\` of ` + `\`${componentNameSafe}\` is deprecated. ${reason}`);
		    }
		    return null;
		  };
		}
		return deprecatedPropType$1;
	}

	var isMuiElement$1 = {};

	var hasRequiredIsMuiElement$1;

	function requireIsMuiElement$1 () {
		if (hasRequiredIsMuiElement$1) return isMuiElement$1;
		hasRequiredIsMuiElement$1 = 1;

		Object.defineProperty(isMuiElement$1, "__esModule", {
		  value: true
		});
		isMuiElement$1.default = isMuiElement;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function isMuiElement(element, muiNames) {
		  return /*#__PURE__*/React.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
		}
		return isMuiElement$1;
	}

	var ownerDocument$1 = {};

	var hasRequiredOwnerDocument$1;

	function requireOwnerDocument$1 () {
		if (hasRequiredOwnerDocument$1) return ownerDocument$1;
		hasRequiredOwnerDocument$1 = 1;

		Object.defineProperty(ownerDocument$1, "__esModule", {
		  value: true
		});
		ownerDocument$1.default = ownerDocument;
		function ownerDocument(node) {
		  return node && node.ownerDocument || document;
		}
		return ownerDocument$1;
	}

	var ownerWindow$1 = {};

	var hasRequiredOwnerWindow$1;

	function requireOwnerWindow$1 () {
		if (hasRequiredOwnerWindow$1) return ownerWindow$1;
		hasRequiredOwnerWindow$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ownerWindow$1, "__esModule", {
		  value: true
		});
		ownerWindow$1.default = ownerWindow;
		var _ownerDocument = _interopRequireDefault(requireOwnerDocument$1());
		function ownerWindow(node) {
		  const doc = (0, _ownerDocument.default)(node);
		  return doc.defaultView || window;
		}
		return ownerWindow$1;
	}

	var requirePropFactory$1 = {};

	var hasRequiredRequirePropFactory$1;

	function requireRequirePropFactory$1 () {
		if (hasRequiredRequirePropFactory$1) return requirePropFactory$1;
		hasRequiredRequirePropFactory$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(requirePropFactory$1, "__esModule", {
		  value: true
		});
		requirePropFactory$1.default = requirePropFactory;
		var _extends2 = _interopRequireDefault(require_extends());
		function requirePropFactory(componentNameInError, Component) {

		  // eslint-disable-next-line react/forbid-foreign-prop-types
		  const prevPropTypes = Component ? (0, _extends2.default)({}, Component.propTypes) : null;
		  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {
		    const propFullNameSafe = propFullName || propName;
		    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
		    if (defaultTypeChecker) {
		      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
		      if (typeCheckerResult) {
		        return typeCheckerResult;
		      }
		    }
		    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {
		      return new Error(`The prop \`${propFullNameSafe}\` of ` + `\`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
		    }
		    return null;
		  };
		  return requireProp;
		}
		return requirePropFactory$1;
	}

	var setRef$1 = {};

	var hasRequiredSetRef$1;

	function requireSetRef$1 () {
		if (hasRequiredSetRef$1) return setRef$1;
		hasRequiredSetRef$1 = 1;

		Object.defineProperty(setRef$1, "__esModule", {
		  value: true
		});
		setRef$1.default = setRef;
		/**
		 * TODO v5: consider making it private
		 *
		 * passes {value} to {ref}
		 *
		 * WARNING: Be sure to only call this inside a callback that is passed as a ref.
		 * Otherwise, make sure to cleanup the previous {ref} if it changes. See
		 * https://github.com/mui/material-ui/issues/13539
		 *
		 * Useful if you want to expose the ref of an inner component to the public API
		 * while still using it inside the component.
		 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
		 */
		function setRef(ref, value) {
		  if (typeof ref === 'function') {
		    ref(value);
		  } else if (ref) {
		    ref.current = value;
		  }
		}
		return setRef$1;
	}

	var useEnhancedEffect$1 = {};

	var hasRequiredUseEnhancedEffect$1;

	function requireUseEnhancedEffect$1 () {
		if (hasRequiredUseEnhancedEffect$1) return useEnhancedEffect$1;
		hasRequiredUseEnhancedEffect$1 = 1;

		Object.defineProperty(useEnhancedEffect$1, "__esModule", {
		  value: true
		});
		useEnhancedEffect$1.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;
		var _default = useEnhancedEffect;
		useEnhancedEffect$1.default = _default;
		return useEnhancedEffect$1;
	}

	var useId$1 = {};

	var hasRequiredUseId$1;

	function requireUseId$1 () {
		if (hasRequiredUseId$1) return useId$1;
		hasRequiredUseId$1 = 1;

		Object.defineProperty(useId$1, "__esModule", {
		  value: true
		});
		useId$1.default = useId;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		let globalId = 0;
		function useGlobalId(idOverride) {
		  const [defaultId, setDefaultId] = React.useState(idOverride);
		  const id = idOverride || defaultId;
		  React.useEffect(() => {
		    if (defaultId == null) {
		      // Fallback to this default id when possible.
		      // Use the incrementing value for client-side rendering only.
		      // We can't use it server-side.
		      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
		      globalId += 1;
		      setDefaultId(`mui-${globalId}`);
		    }
		  }, [defaultId]);
		  return id;
		}

		// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814
		const maybeReactUseId = React['useId' + ''];
		/**
		 *
		 * @example <div id={useId()} />
		 * @param idOverride
		 * @returns {string}
		 */
		function useId(idOverride) {
		  if (maybeReactUseId !== undefined) {
		    const reactId = maybeReactUseId();
		    return idOverride != null ? idOverride : reactId;
		  }
		  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.
		  return useGlobalId(idOverride);
		}
		return useId$1;
	}

	var unsupportedProp$1 = {};

	var hasRequiredUnsupportedProp$1;

	function requireUnsupportedProp$1 () {
		if (hasRequiredUnsupportedProp$1) return unsupportedProp$1;
		hasRequiredUnsupportedProp$1 = 1;

		Object.defineProperty(unsupportedProp$1, "__esModule", {
		  value: true
		});
		unsupportedProp$1.default = unsupportedProp;
		function unsupportedProp(props, propName, componentName, location, propFullName) {
		  const propFullNameSafe = propFullName || propName;
		  if (typeof props[propName] !== 'undefined') {
		    return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
		  }
		  return null;
		}
		return unsupportedProp$1;
	}

	var useControlled$1 = {};

	var hasRequiredUseControlled$1;

	function requireUseControlled$1 () {
		if (hasRequiredUseControlled$1) return useControlled$1;
		hasRequiredUseControlled$1 = 1;

		Object.defineProperty(useControlled$1, "__esModule", {
		  value: true
		});
		useControlled$1.default = useControlled;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */

		function useControlled({
		  controlled,
		  default: defaultProp,
		  name,
		  state = 'value'
		}) {
		  // isControlled is ignored in the hook dependency lists as it should never change.
		  const {
		    current: isControlled
		  } = React.useRef(controlled !== undefined);
		  const [valueState, setValue] = React.useState(defaultProp);
		  const value = isControlled ? controlled : valueState;
		  {
		    React.useEffect(() => {
		      if (isControlled !== (controlled !== undefined)) {
		        console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", 'More info: https://fb.me/react-controlled-components'].join('\n'));
		      }
		    }, [state, name, controlled]);
		    const {
		      current: defaultValue
		    } = React.useRef(defaultProp);
		    React.useEffect(() => {
		      if (!isControlled && defaultValue !== defaultProp) {
		        console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\n'));
		      }
		    }, [JSON.stringify(defaultProp)]);
		  }
		  const setValueIfUncontrolled = React.useCallback(newValue => {
		    if (!isControlled) {
		      setValue(newValue);
		    }
		  }, []);
		  return [value, setValueIfUncontrolled];
		}
		return useControlled$1;
	}

	var useEventCallback$1 = {};

	var hasRequiredUseEventCallback$1;

	function requireUseEventCallback$1 () {
		if (hasRequiredUseEventCallback$1) return useEventCallback$1;
		hasRequiredUseEventCallback$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useEventCallback$1, "__esModule", {
		  value: true
		});
		useEventCallback$1.default = useEventCallback;
		var React = _interopRequireWildcard(require$$3);
		var _useEnhancedEffect = _interopRequireDefault(requireUseEnhancedEffect$1());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
		 */
		function useEventCallback(fn) {
		  const ref = React.useRef(fn);
		  (0, _useEnhancedEffect.default)(() => {
		    ref.current = fn;
		  });
		  return React.useCallback((...args) =>
		  // @ts-expect-error hide `this`
		  // tslint:disable-next-line:ban-comma-operator
		  (0, ref.current)(...args), []);
		}
		return useEventCallback$1;
	}

	var useForkRef$1 = {};

	var hasRequiredUseForkRef$1;

	function requireUseForkRef$1 () {
		if (hasRequiredUseForkRef$1) return useForkRef$1;
		hasRequiredUseForkRef$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useForkRef$1, "__esModule", {
		  value: true
		});
		useForkRef$1.default = useForkRef;
		var React = _interopRequireWildcard(require$$3);
		var _setRef = _interopRequireDefault(requireSetRef$1());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function useForkRef(...refs) {
		  /**
		   * This will create a new function if the refs passed to this hook change and are all defined.
		   * This means react will call the old forkRef with `null` and the new forkRef
		   * with the ref. Cleanup naturally emerges from this behavior.
		   */
		  return React.useMemo(() => {
		    if (refs.every(ref => ref == null)) {
		      return null;
		    }
		    return instance => {
		      refs.forEach(ref => {
		        (0, _setRef.default)(ref, instance);
		      });
		    };
		    // eslint-disable-next-line react-hooks/exhaustive-deps
		  }, refs);
		}
		return useForkRef$1;
	}

	var useIsFocusVisible$1 = {};

	var hasRequiredUseIsFocusVisible$1;

	function requireUseIsFocusVisible$1 () {
		if (hasRequiredUseIsFocusVisible$1) return useIsFocusVisible$1;
		hasRequiredUseIsFocusVisible$1 = 1;

		Object.defineProperty(useIsFocusVisible$1, "__esModule", {
		  value: true
		});
		useIsFocusVisible$1.default = useIsFocusVisible;
		useIsFocusVisible$1.teardown = teardown;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js

		let hadKeyboardEvent = true;
		let hadFocusVisibleRecently = false;
		let hadFocusVisibleRecentlyTimeout;
		const inputTypesWhitelist = {
		  text: true,
		  search: true,
		  url: true,
		  tel: true,
		  email: true,
		  password: true,
		  number: true,
		  date: true,
		  month: true,
		  week: true,
		  time: true,
		  datetime: true,
		  'datetime-local': true
		};

		/**
		 * Computes whether the given element should automatically trigger the
		 * `focus-visible` class being added, i.e. whether it should always match
		 * `:focus-visible` when focused.
		 * @param {Element} node
		 * @returns {boolean}
		 */
		function focusTriggersKeyboardModality(node) {
		  const {
		    type,
		    tagName
		  } = node;
		  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
		    return true;
		  }
		  if (tagName === 'TEXTAREA' && !node.readOnly) {
		    return true;
		  }
		  if (node.isContentEditable) {
		    return true;
		  }
		  return false;
		}

		/**
		 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
		 * If the most recent user interaction was via the keyboard;
		 * and the key press did not include a meta, alt/option, or control key;
		 * then the modality is keyboard. Otherwise, the modality is not keyboard.
		 * @param {KeyboardEvent} event
		 */
		function handleKeyDown(event) {
		  if (event.metaKey || event.altKey || event.ctrlKey) {
		    return;
		  }
		  hadKeyboardEvent = true;
		}

		/**
		 * If at any point a user clicks with a pointing device, ensure that we change
		 * the modality away from keyboard.
		 * This avoids the situation where a user presses a key on an already focused
		 * element, and then clicks on a different element, focusing it with a
		 * pointing device, while we still think we're in keyboard modality.
		 */
		function handlePointerDown() {
		  hadKeyboardEvent = false;
		}
		function handleVisibilityChange() {
		  if (this.visibilityState === 'hidden') {
		    // If the tab becomes active again, the browser will handle calling focus
		    // on the element (Safari actually calls it twice).
		    // If this tab change caused a blur on an element with focus-visible,
		    // re-apply the class when the user switches back to the tab.
		    if (hadFocusVisibleRecently) {
		      hadKeyboardEvent = true;
		    }
		  }
		}
		function prepare(doc) {
		  doc.addEventListener('keydown', handleKeyDown, true);
		  doc.addEventListener('mousedown', handlePointerDown, true);
		  doc.addEventListener('pointerdown', handlePointerDown, true);
		  doc.addEventListener('touchstart', handlePointerDown, true);
		  doc.addEventListener('visibilitychange', handleVisibilityChange, true);
		}
		function teardown(doc) {
		  doc.removeEventListener('keydown', handleKeyDown, true);
		  doc.removeEventListener('mousedown', handlePointerDown, true);
		  doc.removeEventListener('pointerdown', handlePointerDown, true);
		  doc.removeEventListener('touchstart', handlePointerDown, true);
		  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);
		}
		function isFocusVisible(event) {
		  const {
		    target
		  } = event;
		  try {
		    return target.matches(':focus-visible');
		  } catch (error) {
		    // Browsers not implementing :focus-visible will throw a SyntaxError.
		    // We use our own heuristic for those browsers.
		    // Rethrow might be better if it's not the expected error but do we really
		    // want to crash if focus-visible malfunctioned?
		  }

		  // No need for validFocusTarget check. The user does that by attaching it to
		  // focusable events only.
		  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
		}
		function useIsFocusVisible() {
		  const ref = React.useCallback(node => {
		    if (node != null) {
		      prepare(node.ownerDocument);
		    }
		  }, []);
		  const isFocusVisibleRef = React.useRef(false);

		  /**
		   * Should be called if a blur event is fired
		   */
		  function handleBlurVisible() {
		    // checking against potential state variable does not suffice if we focus and blur synchronously.
		    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
		    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
		    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
		    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
		    if (isFocusVisibleRef.current) {
		      // To detect a tab/window switch, we look for a blur event followed
		      // rapidly by a visibility change.
		      // If we don't see a visibility change within 100ms, it's probably a
		      // regular focus change.
		      hadFocusVisibleRecently = true;
		      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
		      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
		        hadFocusVisibleRecently = false;
		      }, 100);
		      isFocusVisibleRef.current = false;
		      return true;
		    }
		    return false;
		  }

		  /**
		   * Should be called if a blur event is fired
		   */
		  function handleFocusVisible(event) {
		    if (isFocusVisible(event)) {
		      isFocusVisibleRef.current = true;
		      return true;
		    }
		    return false;
		  }
		  return {
		    isFocusVisibleRef,
		    onFocus: handleFocusVisible,
		    onBlur: handleBlurVisible,
		    ref
		  };
		}
		return useIsFocusVisible$1;
	}

	var getScrollbarSize = {};

	var hasRequiredGetScrollbarSize;

	function requireGetScrollbarSize () {
		if (hasRequiredGetScrollbarSize) return getScrollbarSize;
		hasRequiredGetScrollbarSize = 1;

		Object.defineProperty(getScrollbarSize, "__esModule", {
		  value: true
		});
		getScrollbarSize.default = getScrollbarSize$1;
		// A change of the browser zoom change the scrollbar size.
		// Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18
		function getScrollbarSize$1(doc) {
		  // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
		  const documentWidth = doc.documentElement.clientWidth;
		  return Math.abs(window.innerWidth - documentWidth);
		}
		return getScrollbarSize;
	}

	var scrollLeft = {};

	var hasRequiredScrollLeft;

	function requireScrollLeft () {
		if (hasRequiredScrollLeft) return scrollLeft;
		hasRequiredScrollLeft = 1;

		Object.defineProperty(scrollLeft, "__esModule", {
		  value: true
		});
		scrollLeft.detectScrollType = detectScrollType;
		scrollLeft.getNormalizedScrollLeft = getNormalizedScrollLeft;
		// Source from https://github.com/alitaheri/normalize-scroll-left
		let cachedType;

		/**
		 * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type
		 *
		 * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.
		 *
		 * Type             | <- Most Left | Most Right -> | Initial
		 * ---------------- | ------------ | ------------- | -------
		 * default          | 0            | 100           | 100
		 * negative (spec*) | -100         | 0             | 0
		 * reverse          | 100          | 0             | 0
		 *
		 * Edge 85: default
		 * Safari 14: negative
		 * Chrome 85: negative
		 * Firefox 81: negative
		 * IE11: reverse
		 *
		 * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll
		 */
		function detectScrollType() {
		  if (cachedType) {
		    return cachedType;
		  }
		  const dummy = document.createElement('div');
		  const container = document.createElement('div');
		  container.style.width = '10px';
		  container.style.height = '1px';
		  dummy.appendChild(container);
		  dummy.dir = 'rtl';
		  dummy.style.fontSize = '14px';
		  dummy.style.width = '4px';
		  dummy.style.height = '1px';
		  dummy.style.position = 'absolute';
		  dummy.style.top = '-1000px';
		  dummy.style.overflow = 'scroll';
		  document.body.appendChild(dummy);
		  cachedType = 'reverse';
		  if (dummy.scrollLeft > 0) {
		    cachedType = 'default';
		  } else {
		    dummy.scrollLeft = 1;
		    if (dummy.scrollLeft === 0) {
		      cachedType = 'negative';
		    }
		  }
		  document.body.removeChild(dummy);
		  return cachedType;
		}

		// Based on https://stackoverflow.com/a/24394376
		function getNormalizedScrollLeft(element, direction) {
		  const scrollLeft = element.scrollLeft;

		  // Perform the calculations only when direction is rtl to avoid messing up the ltr behavior
		  if (direction !== 'rtl') {
		    return scrollLeft;
		  }
		  const type = detectScrollType();
		  switch (type) {
		    case 'negative':
		      return element.scrollWidth - element.clientWidth + scrollLeft;
		    case 'reverse':
		      return element.scrollWidth - element.clientWidth - scrollLeft;
		    default:
		      return scrollLeft;
		  }
		}
		return scrollLeft;
	}

	var usePreviousProps = {};

	var hasRequiredUsePreviousProps;

	function requireUsePreviousProps () {
		if (hasRequiredUsePreviousProps) return usePreviousProps;
		hasRequiredUsePreviousProps = 1;

		Object.defineProperty(usePreviousProps, "__esModule", {
		  value: true
		});
		usePreviousProps.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const usePreviousProps$1 = value => {
		  const ref = React.useRef({});
		  React.useEffect(() => {
		    ref.current = value;
		  });
		  return ref.current;
		};
		var _default = usePreviousProps$1;
		usePreviousProps.default = _default;
		return usePreviousProps;
	}

	var visuallyHidden = {};

	var hasRequiredVisuallyHidden;

	function requireVisuallyHidden () {
		if (hasRequiredVisuallyHidden) return visuallyHidden;
		hasRequiredVisuallyHidden = 1;

		Object.defineProperty(visuallyHidden, "__esModule", {
		  value: true
		});
		visuallyHidden.default = void 0;
		const visuallyHidden$1 = {
		  border: 0,
		  clip: 'rect(0 0 0 0)',
		  height: '1px',
		  margin: -1,
		  overflow: 'hidden',
		  padding: 0,
		  position: 'absolute',
		  whiteSpace: 'nowrap',
		  width: '1px'
		};
		var _default = visuallyHidden$1;
		visuallyHidden.default = _default;
		return visuallyHidden;
	}

	var integerPropType = {};

	var hasRequiredIntegerPropType;

	function requireIntegerPropType () {
		if (hasRequiredIntegerPropType) return integerPropType;
		hasRequiredIntegerPropType = 1;

		Object.defineProperty(integerPropType, "__esModule", {
		  value: true
		});
		integerPropType.default = void 0;
		integerPropType.getTypeByValue = getTypeByValue;
		function getTypeByValue(value) {
		  const valueType = typeof value;
		  switch (valueType) {
		    case 'number':
		      if (Number.isNaN(value)) {
		        return 'NaN';
		      }
		      if (!Number.isFinite(value)) {
		        return 'Infinity';
		      }
		      if (value !== Math.floor(value)) {
		        return 'float';
		      }
		      return 'number';
		    case 'object':
		      if (value === null) {
		        return 'null';
		      }
		      return value.constructor.name;
		    default:
		      return valueType;
		  }
		}

		// IE 11 support
		function ponyfillIsInteger(x) {
		  // eslint-disable-next-line no-restricted-globals
		  return typeof x === 'number' && isFinite(x) && Math.floor(x) === x;
		}
		const isInteger = Number.isInteger || ponyfillIsInteger;
		function requiredInteger(props, propName, componentName, location) {
		  const propValue = props[propName];
		  if (propValue == null || !isInteger(propValue)) {
		    const propType = getTypeByValue(propValue);
		    return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
		  }
		  return null;
		}
		function validator(props, propName, ...other) {
		  const propValue = props[propName];
		  if (propValue === undefined) {
		    return null;
		  }
		  return requiredInteger(props, propName, ...other);
		}
		function validatorNoop() {
		  return null;
		}
		validator.isRequired = requiredInteger;
		validatorNoop.isRequired = validatorNoop;
		var _default = validator;
		integerPropType.default = _default;
		return integerPropType;
	}

	var resolveProps = {};

	var hasRequiredResolveProps;

	function requireResolveProps () {
		if (hasRequiredResolveProps) return resolveProps;
		hasRequiredResolveProps = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(resolveProps, "__esModule", {
		  value: true
		});
		resolveProps.default = resolveProps$1;
		var _extends2 = _interopRequireDefault(require_extends());
		/**
		 * Add keys, values of `defaultProps` that does not exist in `props`
		 * @param {object} defaultProps
		 * @param {object} props
		 * @returns {object} resolved props
		 */
		function resolveProps$1(defaultProps, props) {
		  const output = (0, _extends2.default)({}, props);
		  Object.keys(defaultProps).forEach(propName => {
		    if (output[propName] === undefined) {
		      output[propName] = defaultProps[propName];
		    }
		  });
		  return output;
		}
		return resolveProps;
	}

	var composeClasses$2 = {};

	var composeClasses$1 = {};

	var hasRequiredComposeClasses$2;

	function requireComposeClasses$2 () {
		if (hasRequiredComposeClasses$2) return composeClasses$1;
		hasRequiredComposeClasses$2 = 1;

		Object.defineProperty(composeClasses$1, "__esModule", {
		  value: true
		});
		composeClasses$1.default = composeClasses;
		function composeClasses(slots, getUtilityClass, classes) {
		  const output = {};
		  Object.keys(slots).forEach(
		  // `Objet.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
		  // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
		  slot => {
		    output[slot] = slots[slot].reduce((acc, key) => {
		      if (key) {
		        acc.push(getUtilityClass(key));
		        if (classes && classes[key]) {
		          acc.push(classes[key]);
		        }
		      }
		      return acc;
		    }, []).join(' ');
		  });
		  return output;
		}
		return composeClasses$1;
	}

	var hasRequiredComposeClasses$1;

	function requireComposeClasses$1 () {
		if (hasRequiredComposeClasses$1) return composeClasses$2;
		hasRequiredComposeClasses$1 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _composeClasses.default;
			  }
			});
			var _composeClasses = _interopRequireDefault(requireComposeClasses$2());
	} (composeClasses$2));
		return composeClasses$2;
	}

	var generateUtilityClass$3 = {};

	var generateUtilityClass$2 = {};

	var ClassNameGenerator$1 = {};

	var ClassNameGenerator = {};

	var hasRequiredClassNameGenerator$1;

	function requireClassNameGenerator$1 () {
		if (hasRequiredClassNameGenerator$1) return ClassNameGenerator;
		hasRequiredClassNameGenerator$1 = 1;

		Object.defineProperty(ClassNameGenerator, "__esModule", {
		  value: true
		});
		ClassNameGenerator.default = void 0;
		const defaultGenerator = componentName => componentName;
		const createClassNameGenerator = () => {
		  let generate = defaultGenerator;
		  return {
		    configure(generator) {
		      generate = generator;
		    },
		    generate(componentName) {
		      return generate(componentName);
		    },
		    reset() {
		      generate = defaultGenerator;
		    }
		  };
		};
		const ClassNameGenerator$1 = createClassNameGenerator();
		var _default = ClassNameGenerator$1;
		ClassNameGenerator.default = _default;
		return ClassNameGenerator;
	}

	var hasRequiredClassNameGenerator;

	function requireClassNameGenerator () {
		if (hasRequiredClassNameGenerator) return ClassNameGenerator$1;
		hasRequiredClassNameGenerator = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _ClassNameGenerator.default;
			  }
			});
			var _ClassNameGenerator = _interopRequireDefault(requireClassNameGenerator$1());
	} (ClassNameGenerator$1));
		return ClassNameGenerator$1;
	}

	var hasRequiredGenerateUtilityClass$3;

	function requireGenerateUtilityClass$3 () {
		if (hasRequiredGenerateUtilityClass$3) return generateUtilityClass$2;
		hasRequiredGenerateUtilityClass$3 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(generateUtilityClass$2, "__esModule", {
		  value: true
		});
		generateUtilityClass$2.default = generateUtilityClass;
		var _ClassNameGenerator = _interopRequireDefault(requireClassNameGenerator());
		const globalStateClassesMapping = {
		  active: 'active',
		  checked: 'checked',
		  completed: 'completed',
		  disabled: 'disabled',
		  error: 'error',
		  expanded: 'expanded',
		  focused: 'focused',
		  focusVisible: 'focusVisible',
		  required: 'required',
		  selected: 'selected'
		};
		function generateUtilityClass(componentName, slot, globalStatePrefix = 'Mui') {
		  const globalStateClass = globalStateClassesMapping[slot];
		  return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${_ClassNameGenerator.default.generate(componentName)}-${slot}`;
		}
		return generateUtilityClass$2;
	}

	var hasRequiredGenerateUtilityClass$2;

	function requireGenerateUtilityClass$2 () {
		if (hasRequiredGenerateUtilityClass$2) return generateUtilityClass$3;
		hasRequiredGenerateUtilityClass$2 = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _generateUtilityClass.default;
			  }
			});
			var _generateUtilityClass = _interopRequireWildcard(requireGenerateUtilityClass$3());
			Object.keys(_generateUtilityClass).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _generateUtilityClass[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _generateUtilityClass[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (generateUtilityClass$3));
		return generateUtilityClass$3;
	}

	var generateUtilityClasses$2 = {};

	var generateUtilityClasses$1 = {};

	var hasRequiredGenerateUtilityClasses$2;

	function requireGenerateUtilityClasses$2 () {
		if (hasRequiredGenerateUtilityClasses$2) return generateUtilityClasses$1;
		hasRequiredGenerateUtilityClasses$2 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(generateUtilityClasses$1, "__esModule", {
		  value: true
		});
		generateUtilityClasses$1.default = generateUtilityClasses;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$2());
		function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {
		  const result = {};
		  slots.forEach(slot => {
		    result[slot] = (0, _generateUtilityClass.default)(componentName, slot, globalStatePrefix);
		  });
		  return result;
		}
		return generateUtilityClasses$1;
	}

	var hasRequiredGenerateUtilityClasses$1;

	function requireGenerateUtilityClasses$1 () {
		if (hasRequiredGenerateUtilityClasses$1) return generateUtilityClasses$2;
		hasRequiredGenerateUtilityClasses$1 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _generateUtilityClasses.default;
			  }
			});
			var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses$2());
	} (generateUtilityClasses$2));
		return generateUtilityClasses$2;
	}

	/** @license MUI v5.10.16
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredUtils$4;

	function requireUtils$4 () {
		if (hasRequiredUtils$4) return utils$5;
		hasRequiredUtils$4 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  chainPropTypes: true,
			  deepmerge: true,
			  isPlainObject: true,
			  elementAcceptingRef: true,
			  elementTypeAcceptingRef: true,
			  exactProp: true,
			  formatMuiErrorMessage: true,
			  getDisplayName: true,
			  HTMLElementType: true,
			  ponyfillGlobal: true,
			  refType: true,
			  unstable_capitalize: true,
			  unstable_createChainedFunction: true,
			  unstable_debounce: true,
			  unstable_deprecatedPropType: true,
			  unstable_isMuiElement: true,
			  unstable_ownerDocument: true,
			  unstable_ownerWindow: true,
			  unstable_requirePropFactory: true,
			  unstable_setRef: true,
			  unstable_useEnhancedEffect: true,
			  unstable_useId: true,
			  unstable_unsupportedProp: true,
			  unstable_useControlled: true,
			  unstable_useEventCallback: true,
			  unstable_useForkRef: true,
			  unstable_useIsFocusVisible: true,
			  unstable_getScrollbarSize: true,
			  unstable_detectScrollType: true,
			  unstable_getNormalizedScrollLeft: true,
			  usePreviousProps: true,
			  visuallyHidden: true,
			  integerPropType: true,
			  internal_resolveProps: true,
			  unstable_composeClasses: true,
			  unstable_generateUtilityClass: true,
			  unstable_generateUtilityClasses: true,
			  unstable_ClassNameGenerator: true
			};
			Object.defineProperty(exports, "HTMLElementType", {
			  enumerable: true,
			  get: function () {
			    return _HTMLElementType.default;
			  }
			});
			Object.defineProperty(exports, "chainPropTypes", {
			  enumerable: true,
			  get: function () {
			    return _chainPropTypes.default;
			  }
			});
			Object.defineProperty(exports, "deepmerge", {
			  enumerable: true,
			  get: function () {
			    return _deepmerge.default;
			  }
			});
			Object.defineProperty(exports, "elementAcceptingRef", {
			  enumerable: true,
			  get: function () {
			    return _elementAcceptingRef.default;
			  }
			});
			Object.defineProperty(exports, "elementTypeAcceptingRef", {
			  enumerable: true,
			  get: function () {
			    return _elementTypeAcceptingRef.default;
			  }
			});
			Object.defineProperty(exports, "exactProp", {
			  enumerable: true,
			  get: function () {
			    return _exactProp.default;
			  }
			});
			Object.defineProperty(exports, "formatMuiErrorMessage", {
			  enumerable: true,
			  get: function () {
			    return _formatMuiErrorMessage.default;
			  }
			});
			Object.defineProperty(exports, "getDisplayName", {
			  enumerable: true,
			  get: function () {
			    return _getDisplayName.default;
			  }
			});
			Object.defineProperty(exports, "integerPropType", {
			  enumerable: true,
			  get: function () {
			    return _integerPropType.default;
			  }
			});
			Object.defineProperty(exports, "internal_resolveProps", {
			  enumerable: true,
			  get: function () {
			    return _resolveProps.default;
			  }
			});
			Object.defineProperty(exports, "isPlainObject", {
			  enumerable: true,
			  get: function () {
			    return _deepmerge.isPlainObject;
			  }
			});
			Object.defineProperty(exports, "ponyfillGlobal", {
			  enumerable: true,
			  get: function () {
			    return _ponyfillGlobal.default;
			  }
			});
			Object.defineProperty(exports, "refType", {
			  enumerable: true,
			  get: function () {
			    return _refType.default;
			  }
			});
			Object.defineProperty(exports, "unstable_ClassNameGenerator", {
			  enumerable: true,
			  get: function () {
			    return _ClassNameGenerator.default;
			  }
			});
			Object.defineProperty(exports, "unstable_capitalize", {
			  enumerable: true,
			  get: function () {
			    return _capitalize.default;
			  }
			});
			Object.defineProperty(exports, "unstable_composeClasses", {
			  enumerable: true,
			  get: function () {
			    return _composeClasses.default;
			  }
			});
			Object.defineProperty(exports, "unstable_createChainedFunction", {
			  enumerable: true,
			  get: function () {
			    return _createChainedFunction.default;
			  }
			});
			Object.defineProperty(exports, "unstable_debounce", {
			  enumerable: true,
			  get: function () {
			    return _debounce.default;
			  }
			});
			Object.defineProperty(exports, "unstable_deprecatedPropType", {
			  enumerable: true,
			  get: function () {
			    return _deprecatedPropType.default;
			  }
			});
			Object.defineProperty(exports, "unstable_detectScrollType", {
			  enumerable: true,
			  get: function () {
			    return _scrollLeft.detectScrollType;
			  }
			});
			Object.defineProperty(exports, "unstable_generateUtilityClass", {
			  enumerable: true,
			  get: function () {
			    return _generateUtilityClass.default;
			  }
			});
			Object.defineProperty(exports, "unstable_generateUtilityClasses", {
			  enumerable: true,
			  get: function () {
			    return _generateUtilityClasses.default;
			  }
			});
			Object.defineProperty(exports, "unstable_getNormalizedScrollLeft", {
			  enumerable: true,
			  get: function () {
			    return _scrollLeft.getNormalizedScrollLeft;
			  }
			});
			Object.defineProperty(exports, "unstable_getScrollbarSize", {
			  enumerable: true,
			  get: function () {
			    return _getScrollbarSize.default;
			  }
			});
			Object.defineProperty(exports, "unstable_isMuiElement", {
			  enumerable: true,
			  get: function () {
			    return _isMuiElement.default;
			  }
			});
			Object.defineProperty(exports, "unstable_ownerDocument", {
			  enumerable: true,
			  get: function () {
			    return _ownerDocument.default;
			  }
			});
			Object.defineProperty(exports, "unstable_ownerWindow", {
			  enumerable: true,
			  get: function () {
			    return _ownerWindow.default;
			  }
			});
			Object.defineProperty(exports, "unstable_requirePropFactory", {
			  enumerable: true,
			  get: function () {
			    return _requirePropFactory.default;
			  }
			});
			Object.defineProperty(exports, "unstable_setRef", {
			  enumerable: true,
			  get: function () {
			    return _setRef.default;
			  }
			});
			Object.defineProperty(exports, "unstable_unsupportedProp", {
			  enumerable: true,
			  get: function () {
			    return _unsupportedProp.default;
			  }
			});
			Object.defineProperty(exports, "unstable_useControlled", {
			  enumerable: true,
			  get: function () {
			    return _useControlled.default;
			  }
			});
			Object.defineProperty(exports, "unstable_useEnhancedEffect", {
			  enumerable: true,
			  get: function () {
			    return _useEnhancedEffect.default;
			  }
			});
			Object.defineProperty(exports, "unstable_useEventCallback", {
			  enumerable: true,
			  get: function () {
			    return _useEventCallback.default;
			  }
			});
			Object.defineProperty(exports, "unstable_useForkRef", {
			  enumerable: true,
			  get: function () {
			    return _useForkRef.default;
			  }
			});
			Object.defineProperty(exports, "unstable_useId", {
			  enumerable: true,
			  get: function () {
			    return _useId.default;
			  }
			});
			Object.defineProperty(exports, "unstable_useIsFocusVisible", {
			  enumerable: true,
			  get: function () {
			    return _useIsFocusVisible.default;
			  }
			});
			Object.defineProperty(exports, "usePreviousProps", {
			  enumerable: true,
			  get: function () {
			    return _usePreviousProps.default;
			  }
			});
			Object.defineProperty(exports, "visuallyHidden", {
			  enumerable: true,
			  get: function () {
			    return _visuallyHidden.default;
			  }
			});
			var _chainPropTypes = _interopRequireDefault(requireChainPropTypes());
			var _deepmerge = _interopRequireWildcard(requireDeepmerge());
			var _elementAcceptingRef = _interopRequireDefault(requireElementAcceptingRef());
			var _elementTypeAcceptingRef = _interopRequireDefault(requireElementTypeAcceptingRef());
			var _exactProp = _interopRequireDefault(requireExactProp());
			var _formatMuiErrorMessage = _interopRequireDefault(requireFormatMuiErrorMessage());
			var _getDisplayName = _interopRequireDefault(requireGetDisplayName());
			var _HTMLElementType = _interopRequireDefault(requireHTMLElementType());
			var _ponyfillGlobal = _interopRequireDefault(requirePonyfillGlobal());
			var _refType = _interopRequireDefault(requireRefType());
			var _capitalize = _interopRequireDefault(requireCapitalize$1());
			var _createChainedFunction = _interopRequireDefault(requireCreateChainedFunction$1());
			var _debounce = _interopRequireDefault(requireDebounce$1());
			var _deprecatedPropType = _interopRequireDefault(requireDeprecatedPropType$1());
			var _isMuiElement = _interopRequireDefault(requireIsMuiElement$1());
			var _ownerDocument = _interopRequireDefault(requireOwnerDocument$1());
			var _ownerWindow = _interopRequireDefault(requireOwnerWindow$1());
			var _requirePropFactory = _interopRequireDefault(requireRequirePropFactory$1());
			var _setRef = _interopRequireDefault(requireSetRef$1());
			var _useEnhancedEffect = _interopRequireDefault(requireUseEnhancedEffect$1());
			var _useId = _interopRequireDefault(requireUseId$1());
			var _unsupportedProp = _interopRequireDefault(requireUnsupportedProp$1());
			var _useControlled = _interopRequireDefault(requireUseControlled$1());
			var _useEventCallback = _interopRequireDefault(requireUseEventCallback$1());
			var _useForkRef = _interopRequireDefault(requireUseForkRef$1());
			var _useIsFocusVisible = _interopRequireDefault(requireUseIsFocusVisible$1());
			var _getScrollbarSize = _interopRequireDefault(requireGetScrollbarSize());
			var _scrollLeft = requireScrollLeft();
			var _usePreviousProps = _interopRequireDefault(requireUsePreviousProps());
			var _visuallyHidden = _interopRequireDefault(requireVisuallyHidden());
			var _integerPropType = _interopRequireDefault(requireIntegerPropType());
			var _resolveProps = _interopRequireDefault(requireResolveProps());
			var _composeClasses = _interopRequireDefault(requireComposeClasses$1());
			var _generateUtilityClass = _interopRequireWildcard(requireGenerateUtilityClass$2());
			Object.keys(_generateUtilityClass).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _generateUtilityClass[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _generateUtilityClass[key];
			    }
			  });
			});
			var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses$1());
			var _ClassNameGenerator = _interopRequireDefault(requireClassNameGenerator());
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (utils$5));
		return utils$5;
	}

	var node$3 = {};

	var utils$4 = {};

	var appendOwnerState = {};

	var isHostComponent = {};

	var hasRequiredIsHostComponent;

	function requireIsHostComponent () {
		if (hasRequiredIsHostComponent) return isHostComponent;
		hasRequiredIsHostComponent = 1;

		Object.defineProperty(isHostComponent, "__esModule", {
		  value: true
		});
		isHostComponent.default = void 0;
		/**
		 * Determines if a given element is a DOM element name (i.e. not a React component).
		 */
		function isHostComponent$1(element) {
		  return typeof element === 'string';
		}
		var _default = isHostComponent$1;
		isHostComponent.default = _default;
		return isHostComponent;
	}

	var hasRequiredAppendOwnerState;

	function requireAppendOwnerState () {
		if (hasRequiredAppendOwnerState) return appendOwnerState;
		hasRequiredAppendOwnerState = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(appendOwnerState, "__esModule", {
		  value: true
		});
		appendOwnerState.default = appendOwnerState$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var _isHostComponent = _interopRequireDefault(requireIsHostComponent());
		/**
		 * Appends the ownerState object to the props, merging with the existing one if necessary.
		 *
		 * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.
		 * @param otherProps Props of the element.
		 * @param ownerState
		 */
		function appendOwnerState$1(elementType, otherProps, ownerState) {
		  if (elementType === undefined || (0, _isHostComponent.default)(elementType)) {
		    return otherProps;
		  }
		  return (0, _extends2.default)({}, otherProps, {
		    ownerState: (0, _extends2.default)({}, otherProps.ownerState, ownerState)
		  });
		}
		return appendOwnerState;
	}

	var areArraysEqual = {};

	var hasRequiredAreArraysEqual;

	function requireAreArraysEqual () {
		if (hasRequiredAreArraysEqual) return areArraysEqual;
		hasRequiredAreArraysEqual = 1;

		Object.defineProperty(areArraysEqual, "__esModule", {
		  value: true
		});
		areArraysEqual.default = areArraysEqual$1;
		function areArraysEqual$1(array1, array2, itemComparer = (a, b) => a === b) {
		  return array1.length === array2.length && array1.every((value, index) => itemComparer(value, array2[index]));
		}
		return areArraysEqual;
	}

	var extractEventHandlers = {};

	var hasRequiredExtractEventHandlers;

	function requireExtractEventHandlers () {
		if (hasRequiredExtractEventHandlers) return extractEventHandlers;
		hasRequiredExtractEventHandlers = 1;

		Object.defineProperty(extractEventHandlers, "__esModule", {
		  value: true
		});
		extractEventHandlers.default = extractEventHandlers$1;
		/**
		 * Extracts event handlers from a given object.
		 * A prop is considered an event handler if it is a function and its name starts with `on`.
		 *
		 * @param object An object to extract event handlers from.
		 * @param excludeKeys An array of keys to exclude from the returned object.
		 */
		function extractEventHandlers$1(object, excludeKeys = []) {
		  if (object === undefined) {
		    return {};
		  }
		  const result = {};
		  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {
		    result[prop] = object[prop];
		  });
		  return result;
		}
		return extractEventHandlers;
	}

	var resolveComponentProps = {};

	var hasRequiredResolveComponentProps;

	function requireResolveComponentProps () {
		if (hasRequiredResolveComponentProps) return resolveComponentProps;
		hasRequiredResolveComponentProps = 1;

		Object.defineProperty(resolveComponentProps, "__esModule", {
		  value: true
		});
		resolveComponentProps.default = resolveComponentProps$1;
		/**
		 * If `componentProps` is a function, calls it with the provided `ownerState`.
		 * Otherwise, just returns `componentProps`.
		 */
		function resolveComponentProps$1(componentProps, ownerState) {
		  if (typeof componentProps === 'function') {
		    return componentProps(ownerState);
		  }
		  return componentProps;
		}
		return resolveComponentProps;
	}

	var useSlotProps = {};

	var mergeSlotProps = {};

	var omitEventHandlers = {};

	var hasRequiredOmitEventHandlers;

	function requireOmitEventHandlers () {
		if (hasRequiredOmitEventHandlers) return omitEventHandlers;
		hasRequiredOmitEventHandlers = 1;

		Object.defineProperty(omitEventHandlers, "__esModule", {
		  value: true
		});
		omitEventHandlers.default = omitEventHandlers$1;
		/**
		 * Removes event handlers from the given object.
		 * A field is considered an event handler if it is a function with a name beginning with `on`.
		 *
		 * @param object Object to remove event handlers from.
		 * @returns Object with event handlers removed.
		 */
		function omitEventHandlers$1(object) {
		  if (object === undefined) {
		    return {};
		  }
		  const result = {};
		  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {
		    result[prop] = object[prop];
		  });
		  return result;
		}
		return omitEventHandlers;
	}

	var hasRequiredMergeSlotProps;

	function requireMergeSlotProps () {
		if (hasRequiredMergeSlotProps) return mergeSlotProps;
		hasRequiredMergeSlotProps = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(mergeSlotProps, "__esModule", {
		  value: true
		});
		mergeSlotProps.default = mergeSlotProps$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _extractEventHandlers = _interopRequireDefault(requireExtractEventHandlers());
		var _omitEventHandlers = _interopRequireDefault(requireOmitEventHandlers());
		/**
		 * Merges the slot component internal props (usually coming from a hook)
		 * with the externally provided ones.
		 *
		 * The merge order is (the latter overrides the former):
		 * 1. The internal props (specified as a getter function to work with get*Props hook result)
		 * 2. Additional props (specified internally on an unstyled component)
		 * 3. External props specified on the owner component. These should only be used on a root slot.
		 * 4. External props specified in the `slotProps.*` prop.
		 * 5. The `className` prop - combined from all the above.
		 * @param parameters
		 * @returns
		 */
		function mergeSlotProps$1(parameters) {
		  const {
		    getSlotProps,
		    additionalProps,
		    externalSlotProps,
		    externalForwardedProps,
		    className
		  } = parameters;
		  if (!getSlotProps) {
		    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,
		    // so we can simply merge all the props without having to worry about extracting event handlers.
		    const joinedClasses = (0, _clsx.default)(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
		    const mergedStyle = (0, _extends2.default)({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
		    const props = (0, _extends2.default)({}, additionalProps, externalForwardedProps, externalSlotProps);
		    if (joinedClasses.length > 0) {
		      props.className = joinedClasses;
		    }
		    if (Object.keys(mergedStyle).length > 0) {
		      props.style = mergedStyle;
		    }
		    return {
		      props,
		      internalRef: undefined
		    };
		  }

		  // In this case, getSlotProps is responsible for calling the external event handlers.
		  // We don't need to include them in the merged props because of this.

		  const eventHandlers = (0, _extractEventHandlers.default)((0, _extends2.default)({}, externalForwardedProps, externalSlotProps));
		  const componentsPropsWithoutEventHandlers = (0, _omitEventHandlers.default)(externalSlotProps);
		  const otherPropsWithoutEventHandlers = (0, _omitEventHandlers.default)(externalForwardedProps);
		  const internalSlotProps = getSlotProps(eventHandlers);

		  // The order of classes is important here.
		  // Emotion (that we use in libraries consuming MUI Base) depends on this order
		  // to properly override style. It requires the most important classes to be last
		  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.
		  const joinedClasses = (0, _clsx.default)(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
		  const mergedStyle = (0, _extends2.default)({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
		  const props = (0, _extends2.default)({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
		  if (joinedClasses.length > 0) {
		    props.className = joinedClasses;
		  }
		  if (Object.keys(mergedStyle).length > 0) {
		    props.style = mergedStyle;
		  }
		  return {
		    props,
		    internalRef: internalSlotProps.ref
		  };
		}
		return mergeSlotProps;
	}

	var hasRequiredUseSlotProps;

	function requireUseSlotProps () {
		if (hasRequiredUseSlotProps) return useSlotProps;
		hasRequiredUseSlotProps = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useSlotProps, "__esModule", {
		  value: true
		});
		useSlotProps.default = useSlotProps$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _utils = requireUtils$4();
		var _appendOwnerState = _interopRequireDefault(requireAppendOwnerState());
		var _mergeSlotProps = _interopRequireDefault(requireMergeSlotProps());
		var _resolveComponentProps = _interopRequireDefault(requireResolveComponentProps());
		const _excluded = ["elementType", "externalSlotProps", "ownerState"];
		/**
		 * Builds the props to be passed into the slot of an unstyled component.
		 * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
		 * If the slot component is not a host component, it also merges in the `ownerState`.
		 *
		 * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
		 */
		function useSlotProps$1(parameters) {
		  var _parameters$additiona;
		  const {
		      elementType,
		      externalSlotProps,
		      ownerState
		    } = parameters,
		    rest = (0, _objectWithoutPropertiesLoose2.default)(parameters, _excluded);
		  const resolvedComponentsProps = (0, _resolveComponentProps.default)(externalSlotProps, ownerState);
		  const {
		    props: mergedProps,
		    internalRef
		  } = (0, _mergeSlotProps.default)((0, _extends2.default)({}, rest, {
		    externalSlotProps: resolvedComponentsProps
		  }));
		  const ref = (0, _utils.unstable_useForkRef)(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
		  const props = (0, _appendOwnerState.default)(elementType, (0, _extends2.default)({}, mergedProps, {
		    ref
		  }), ownerState);
		  return props;
		}
		return useSlotProps;
	}

	var types$1 = {};

	var hasRequiredTypes;

	function requireTypes () {
		if (hasRequiredTypes) return types$1;
		hasRequiredTypes = 1;

		Object.defineProperty(types$1, "__esModule", {
		  value: true
		});
		return types$1;
	}

	var hasRequiredUtils$3;

	function requireUtils$3 () {
		if (hasRequiredUtils$3) return utils$4;
		hasRequiredUtils$3 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  appendOwnerState: true,
			  areArraysEqual: true,
			  extractEventHandlers: true,
			  isHostComponent: true,
			  resolveComponentProps: true,
			  useSlotProps: true,
			  mergeSlotProps: true
			};
			Object.defineProperty(exports, "appendOwnerState", {
			  enumerable: true,
			  get: function () {
			    return _appendOwnerState.default;
			  }
			});
			Object.defineProperty(exports, "areArraysEqual", {
			  enumerable: true,
			  get: function () {
			    return _areArraysEqual.default;
			  }
			});
			Object.defineProperty(exports, "extractEventHandlers", {
			  enumerable: true,
			  get: function () {
			    return _extractEventHandlers.default;
			  }
			});
			Object.defineProperty(exports, "isHostComponent", {
			  enumerable: true,
			  get: function () {
			    return _isHostComponent.default;
			  }
			});
			Object.defineProperty(exports, "mergeSlotProps", {
			  enumerable: true,
			  get: function () {
			    return _mergeSlotProps.default;
			  }
			});
			Object.defineProperty(exports, "resolveComponentProps", {
			  enumerable: true,
			  get: function () {
			    return _resolveComponentProps.default;
			  }
			});
			Object.defineProperty(exports, "useSlotProps", {
			  enumerable: true,
			  get: function () {
			    return _useSlotProps.default;
			  }
			});
			var _appendOwnerState = _interopRequireDefault(requireAppendOwnerState());
			var _areArraysEqual = _interopRequireDefault(requireAreArraysEqual());
			var _extractEventHandlers = _interopRequireDefault(requireExtractEventHandlers());
			var _isHostComponent = _interopRequireDefault(requireIsHostComponent());
			var _resolveComponentProps = _interopRequireDefault(requireResolveComponentProps());
			var _useSlotProps = _interopRequireDefault(requireUseSlotProps());
			var _mergeSlotProps = _interopRequireDefault(requireMergeSlotProps());
			var _types = requireTypes();
			Object.keys(_types).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _types[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _types[key];
			    }
			  });
			});
	} (utils$4));
		return utils$4;
	}

	var AutocompleteUnstyled = {};

	var useAutocomplete = {};

	var hasRequiredUseAutocomplete;

	function requireUseAutocomplete () {
		if (hasRequiredUseAutocomplete) return useAutocomplete;
		hasRequiredUseAutocomplete = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useAutocomplete, "__esModule", {
		  value: true
		});
		useAutocomplete.createFilterOptions = createFilterOptions;
		useAutocomplete.default = useAutocomplete$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$4();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/* eslint-disable no-constant-condition */

		// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript
		// Give up on IE11 support for this feature
		function stripDiacritics(string) {
		  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : string;
		}
		function createFilterOptions(config = {}) {
		  const {
		    ignoreAccents = true,
		    ignoreCase = true,
		    limit,
		    matchFrom = 'any',
		    stringify,
		    trim = false
		  } = config;
		  return (options, {
		    inputValue,
		    getOptionLabel
		  }) => {
		    let input = trim ? inputValue.trim() : inputValue;
		    if (ignoreCase) {
		      input = input.toLowerCase();
		    }
		    if (ignoreAccents) {
		      input = stripDiacritics(input);
		    }
		    const filteredOptions = !input ? options : options.filter(option => {
		      let candidate = (stringify || getOptionLabel)(option);
		      if (ignoreCase) {
		        candidate = candidate.toLowerCase();
		      }
		      if (ignoreAccents) {
		        candidate = stripDiacritics(candidate);
		      }
		      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
		    });
		    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;
		  };
		}

		// To replace with .findIndex() once we stop IE11 support.
		function findIndex(array, comp) {
		  for (let i = 0; i < array.length; i += 1) {
		    if (comp(array[i])) {
		      return i;
		    }
		  }
		  return -1;
		}
		const defaultFilterOptions = createFilterOptions();

		// Number of options to jump in list box when pageup and pagedown keys are used.
		const pageSize = 5;
		const defaultIsActiveElementInListbox = listboxRef => {
		  var _listboxRef$current$p;
		  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
		};
		function useAutocomplete$1(props) {
		  const {
		    // eslint-disable-next-line @typescript-eslint/naming-convention
		    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
		    // eslint-disable-next-line @typescript-eslint/naming-convention
		    unstable_classNamePrefix = 'Mui',
		    autoComplete = false,
		    autoHighlight = false,
		    autoSelect = false,
		    blurOnSelect = false,
		    clearOnBlur = !props.freeSolo,
		    clearOnEscape = false,
		    componentName = 'useAutocomplete',
		    defaultValue = props.multiple ? [] : null,
		    disableClearable = false,
		    disableCloseOnSelect = false,
		    disabled: disabledProp,
		    disabledItemsFocusable = false,
		    disableListWrap = false,
		    filterOptions = defaultFilterOptions,
		    filterSelectedOptions = false,
		    freeSolo = false,
		    getOptionDisabled,
		    getOptionLabel: getOptionLabelProp = option => {
		      var _option$label;
		      return (_option$label = option.label) != null ? _option$label : option;
		    },
		    groupBy,
		    handleHomeEndKeys = !props.freeSolo,
		    id: idProp,
		    includeInputInList = false,
		    inputValue: inputValueProp,
		    isOptionEqualToValue = (option, value) => option === value,
		    multiple = false,
		    onChange,
		    onClose,
		    onHighlightChange,
		    onInputChange,
		    onOpen,
		    open: openProp,
		    openOnFocus = false,
		    options,
		    readOnly = false,
		    selectOnFocus = !props.freeSolo,
		    value: valueProp
		  } = props;
		  const id = (0, _utils.unstable_useId)(idProp);
		  let getOptionLabel = getOptionLabelProp;
		  getOptionLabel = option => {
		    const optionLabel = getOptionLabelProp(option);
		    if (typeof optionLabel !== 'string') {
		      {
		        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;
		        console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
		      }
		      return String(optionLabel);
		    }
		    return optionLabel;
		  };
		  const ignoreFocus = React.useRef(false);
		  const firstFocus = React.useRef(true);
		  const inputRef = React.useRef(null);
		  const listboxRef = React.useRef(null);
		  const [anchorEl, setAnchorEl] = React.useState(null);
		  const [focusedTag, setFocusedTag] = React.useState(-1);
		  const defaultHighlighted = autoHighlight ? 0 : -1;
		  const highlightedIndexRef = React.useRef(defaultHighlighted);
		  const [value, setValueState] = (0, _utils.unstable_useControlled)({
		    controlled: valueProp,
		    default: defaultValue,
		    name: componentName
		  });
		  const [inputValue, setInputValueState] = (0, _utils.unstable_useControlled)({
		    controlled: inputValueProp,
		    default: '',
		    name: componentName,
		    state: 'inputValue'
		  });
		  const [focused, setFocused] = React.useState(false);
		  const resetInputValue = React.useCallback((event, newValue) => {
		    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false
		    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item
		    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
		    if (!isOptionSelected && !clearOnBlur) {
		      return;
		    }
		    let newInputValue;
		    if (multiple) {
		      newInputValue = '';
		    } else if (newValue == null) {
		      newInputValue = '';
		    } else {
		      const optionLabel = getOptionLabel(newValue);
		      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';
		    }
		    if (inputValue === newInputValue) {
		      return;
		    }
		    setInputValueState(newInputValue);
		    if (onInputChange) {
		      onInputChange(event, newInputValue, 'reset');
		    }
		  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
		  const prevValue = React.useRef();
		  React.useEffect(() => {
		    const valueChange = value !== prevValue.current;
		    prevValue.current = value;
		    if (focused && !valueChange) {
		      return;
		    }

		    // Only reset the input's value when freeSolo if the component's value changes.
		    if (freeSolo && !valueChange) {
		      return;
		    }
		    resetInputValue(null, value);
		  }, [value, resetInputValue, focused, prevValue, freeSolo]);
		  const [open, setOpenState] = (0, _utils.unstable_useControlled)({
		    controlled: openProp,
		    default: false,
		    name: componentName,
		    state: 'open'
		  });
		  const [inputPristine, setInputPristine] = React.useState(true);
		  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
		  const popupOpen = open && !readOnly;
		  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {
		    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {
		      return false;
		    }
		    return true;
		  }),
		  // we use the empty string to manipulate `filterOptions` to not filter any options
		  // i.e. the filter predicate always returns true
		  {
		    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,
		    getOptionLabel
		  }) : [];
		  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
		  {
		    if (value !== null && !freeSolo && options.length > 0) {
		      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));
		      if (missingValue.length > 0) {
		        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\n'));
		      }
		    }
		  }
		  const focusTag = (0, _utils.unstable_useEventCallback)(tagToFocus => {
		    if (tagToFocus === -1) {
		      inputRef.current.focus();
		    } else {
		      anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
		    }
		  });

		  // Ensure the focusedTag is never inconsistent
		  React.useEffect(() => {
		    if (multiple && focusedTag > value.length - 1) {
		      setFocusedTag(-1);
		      focusTag(-1);
		    }
		  }, [value, multiple, focusedTag, focusTag]);
		  function validOptionIndex(index, direction) {
		    if (!listboxRef.current || index === -1) {
		      return -1;
		    }
		    let nextFocus = index;
		    while (true) {
		      // Out of range
		      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {
		        return -1;
		      }
		      const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);

		      // Same logic as MenuList.js
		      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';
		      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {
		        // Move to the next element.
		        nextFocus += direction === 'next' ? 1 : -1;
		      } else {
		        return nextFocus;
		      }
		    }
		  }
		  const setHighlightedIndex = (0, _utils.unstable_useEventCallback)(({
		    event,
		    index,
		    reason = 'auto'
		  }) => {
		    highlightedIndexRef.current = index;

		    // does the index exist?
		    if (index === -1) {
		      inputRef.current.removeAttribute('aria-activedescendant');
		    } else {
		      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);
		    }
		    if (onHighlightChange) {
		      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
		    }
		    if (!listboxRef.current) {
		      return;
		    }
		    const prev = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
		    if (prev) {
		      prev.classList.remove(`${unstable_classNamePrefix}-focused`);
		      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
		    }
		    const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');

		    // "No results"
		    if (!listboxNode) {
		      return;
		    }
		    if (index === -1) {
		      listboxNode.scrollTop = 0;
		      return;
		    }
		    const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
		    if (!option) {
		      return;
		    }
		    option.classList.add(`${unstable_classNamePrefix}-focused`);
		    if (reason === 'keyboard') {
		      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
		    }

		    // Scroll active descendant into view.
		    // Logic copied from https://www.w3.org/WAI/ARIA/apg/example-index/combobox/js/select-only.js
		    //
		    // Consider this API instead once it has a better browser support:
		    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });
		    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {
		      const element = option;
		      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
		      const elementBottom = element.offsetTop + element.offsetHeight;
		      if (elementBottom > scrollBottom) {
		        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
		      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
		        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
		      }
		    }
		  });
		  const changeHighlightedIndex = (0, _utils.unstable_useEventCallback)(({
		    event,
		    diff,
		    direction = 'next',
		    reason = 'auto'
		  }) => {
		    if (!popupOpen) {
		      return;
		    }
		    const getNextIndex = () => {
		      const maxIndex = filteredOptions.length - 1;
		      if (diff === 'reset') {
		        return defaultHighlighted;
		      }
		      if (diff === 'start') {
		        return 0;
		      }
		      if (diff === 'end') {
		        return maxIndex;
		      }
		      const newIndex = highlightedIndexRef.current + diff;
		      if (newIndex < 0) {
		        if (newIndex === -1 && includeInputInList) {
		          return -1;
		        }
		        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
		          return 0;
		        }
		        return maxIndex;
		      }
		      if (newIndex > maxIndex) {
		        if (newIndex === maxIndex + 1 && includeInputInList) {
		          return -1;
		        }
		        if (disableListWrap || Math.abs(diff) > 1) {
		          return maxIndex;
		        }
		        return 0;
		      }
		      return newIndex;
		    };
		    const nextIndex = validOptionIndex(getNextIndex(), direction);
		    setHighlightedIndex({
		      index: nextIndex,
		      reason,
		      event
		    });

		    // Sync the content of the input with the highlighted option.
		    if (autoComplete && diff !== 'reset') {
		      if (nextIndex === -1) {
		        inputRef.current.value = inputValue;
		      } else {
		        const option = getOptionLabel(filteredOptions[nextIndex]);
		        inputRef.current.value = option;

		        // The portion of the selected suggestion that has not been typed by the user,
		        // a completion string, appears inline after the input cursor in the textbox.
		        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
		        if (index === 0 && inputValue.length > 0) {
		          inputRef.current.setSelectionRange(inputValue.length, option.length);
		        }
		      }
		    }
		  });
		  const syncHighlightedIndex = React.useCallback(() => {
		    if (!popupOpen) {
		      return;
		    }
		    const valueItem = multiple ? value[0] : value;

		    // The popup is empty, reset
		    if (filteredOptions.length === 0 || valueItem == null) {
		      changeHighlightedIndex({
		        diff: 'reset'
		      });
		      return;
		    }
		    if (!listboxRef.current) {
		      return;
		    }

		    // Synchronize the value with the highlighted index
		    if (valueItem != null) {
		      const currentOption = filteredOptions[highlightedIndexRef.current];

		      // Keep the current highlighted index if possible
		      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {
		        return;
		      }
		      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));
		      if (itemIndex === -1) {
		        changeHighlightedIndex({
		          diff: 'reset'
		        });
		      } else {
		        setHighlightedIndex({
		          index: itemIndex
		        });
		      }
		      return;
		    }

		    // Prevent the highlighted index to leak outside the boundaries.
		    if (highlightedIndexRef.current >= filteredOptions.length - 1) {
		      setHighlightedIndex({
		        index: filteredOptions.length - 1
		      });
		      return;
		    }

		    // Restore the focus to the previous index.
		    setHighlightedIndex({
		      index: highlightedIndexRef.current
		    });
		    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position
		    // eslint-disable-next-line react-hooks/exhaustive-deps
		  }, [
		  // Only sync the highlighted index when the option switch between empty and not
		  filteredOptions.length,
		  // Don't sync the highlighted index with the value when multiple
		  // eslint-disable-next-line react-hooks/exhaustive-deps
		  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);
		  const handleListboxRef = (0, _utils.unstable_useEventCallback)(node => {
		    (0, _utils.unstable_setRef)(listboxRef, node);
		    if (!node) {
		      return;
		    }
		    syncHighlightedIndex();
		  });
		  {
		    // eslint-disable-next-line react-hooks/rules-of-hooks
		    React.useEffect(() => {
		      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {
		        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {
		          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\n'));
		        } else {
		          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have binded getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\n'));
		        }
		      }
		    }, [componentName]);
		  }
		  React.useEffect(() => {
		    syncHighlightedIndex();
		  }, [syncHighlightedIndex]);
		  const handleOpen = event => {
		    if (open) {
		      return;
		    }
		    setOpenState(true);
		    setInputPristine(true);
		    if (onOpen) {
		      onOpen(event);
		    }
		  };
		  const handleClose = (event, reason) => {
		    if (!open) {
		      return;
		    }
		    setOpenState(false);
		    if (onClose) {
		      onClose(event, reason);
		    }
		  };
		  const handleValue = (event, newValue, reason, details) => {
		    if (multiple) {
		      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
		        return;
		      }
		    } else if (value === newValue) {
		      return;
		    }
		    if (onChange) {
		      onChange(event, newValue, reason, details);
		    }
		    setValueState(newValue);
		  };
		  const isTouch = React.useRef(false);
		  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {
		    let reason = reasonProp;
		    let newValue = option;
		    if (multiple) {
		      newValue = Array.isArray(value) ? value.slice() : [];
		      {
		        const matches = newValue.filter(val => isOptionEqualToValue(option, val));
		        if (matches.length > 1) {
		          console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} do not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\n'));
		        }
		      }
		      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));
		      if (itemIndex === -1) {
		        newValue.push(option);
		      } else if (origin !== 'freeSolo') {
		        newValue.splice(itemIndex, 1);
		        reason = 'removeOption';
		      }
		    }
		    resetInputValue(event, newValue);
		    handleValue(event, newValue, reason, {
		      option
		    });
		    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
		      handleClose(event, reason);
		    }
		    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {
		      inputRef.current.blur();
		    }
		  };
		  function validTagIndex(index, direction) {
		    if (index === -1) {
		      return -1;
		    }
		    let nextFocus = index;
		    while (true) {
		      // Out of range
		      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {
		        return -1;
		      }
		      const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);

		      // Same logic as MenuList.js
		      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {
		        nextFocus += direction === 'next' ? 1 : -1;
		      } else {
		        return nextFocus;
		      }
		    }
		  }
		  const handleFocusTag = (event, direction) => {
		    if (!multiple) {
		      return;
		    }
		    if (inputValue === '') {
		      handleClose(event, 'toggleInput');
		    }
		    let nextTag = focusedTag;
		    if (focusedTag === -1) {
		      if (inputValue === '' && direction === 'previous') {
		        nextTag = value.length - 1;
		      }
		    } else {
		      nextTag += direction === 'next' ? 1 : -1;
		      if (nextTag < 0) {
		        nextTag = 0;
		      }
		      if (nextTag === value.length) {
		        nextTag = -1;
		      }
		    }
		    nextTag = validTagIndex(nextTag, direction);
		    setFocusedTag(nextTag);
		    focusTag(nextTag);
		  };
		  const handleClear = event => {
		    ignoreFocus.current = true;
		    setInputValueState('');
		    if (onInputChange) {
		      onInputChange(event, '', 'clear');
		    }
		    handleValue(event, multiple ? [] : null, 'clear');
		  };
		  const handleKeyDown = other => event => {
		    if (other.onKeyDown) {
		      other.onKeyDown(event);
		    }
		    if (event.defaultMuiPrevented) {
		      return;
		    }
		    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {
		      setFocusedTag(-1);
		      focusTag(-1);
		    }

		    // Wait until IME is settled.
		    if (event.which !== 229) {
		      switch (event.key) {
		        case 'Home':
		          if (popupOpen && handleHomeEndKeys) {
		            // Prevent scroll of the page
		            event.preventDefault();
		            changeHighlightedIndex({
		              diff: 'start',
		              direction: 'next',
		              reason: 'keyboard',
		              event
		            });
		          }
		          break;
		        case 'End':
		          if (popupOpen && handleHomeEndKeys) {
		            // Prevent scroll of the page
		            event.preventDefault();
		            changeHighlightedIndex({
		              diff: 'end',
		              direction: 'previous',
		              reason: 'keyboard',
		              event
		            });
		          }
		          break;
		        case 'PageUp':
		          // Prevent scroll of the page
		          event.preventDefault();
		          changeHighlightedIndex({
		            diff: -pageSize,
		            direction: 'previous',
		            reason: 'keyboard',
		            event
		          });
		          handleOpen(event);
		          break;
		        case 'PageDown':
		          // Prevent scroll of the page
		          event.preventDefault();
		          changeHighlightedIndex({
		            diff: pageSize,
		            direction: 'next',
		            reason: 'keyboard',
		            event
		          });
		          handleOpen(event);
		          break;
		        case 'ArrowDown':
		          // Prevent cursor move
		          event.preventDefault();
		          changeHighlightedIndex({
		            diff: 1,
		            direction: 'next',
		            reason: 'keyboard',
		            event
		          });
		          handleOpen(event);
		          break;
		        case 'ArrowUp':
		          // Prevent cursor move
		          event.preventDefault();
		          changeHighlightedIndex({
		            diff: -1,
		            direction: 'previous',
		            reason: 'keyboard',
		            event
		          });
		          handleOpen(event);
		          break;
		        case 'ArrowLeft':
		          handleFocusTag(event, 'previous');
		          break;
		        case 'ArrowRight':
		          handleFocusTag(event, 'next');
		          break;
		        case 'Enter':
		          if (highlightedIndexRef.current !== -1 && popupOpen) {
		            const option = filteredOptions[highlightedIndexRef.current];
		            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;

		            // Avoid early form validation, let the end-users continue filling the form.
		            event.preventDefault();
		            if (disabled) {
		              return;
		            }
		            selectNewValue(event, option, 'selectOption');

		            // Move the selection to the end.
		            if (autoComplete) {
		              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
		            }
		          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {
		            if (multiple) {
		              // Allow people to add new values before they submit the form.
		              event.preventDefault();
		            }
		            selectNewValue(event, inputValue, 'createOption', 'freeSolo');
		          }
		          break;
		        case 'Escape':
		          if (popupOpen) {
		            // Avoid Opera to exit fullscreen mode.
		            event.preventDefault();
		            // Avoid the Modal to handle the event.
		            event.stopPropagation();
		            handleClose(event, 'escape');
		          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {
		            // Avoid Opera to exit fullscreen mode.
		            event.preventDefault();
		            // Avoid the Modal to handle the event.
		            event.stopPropagation();
		            handleClear(event);
		          }
		          break;
		        case 'Backspace':
		          if (multiple && !readOnly && inputValue === '' && value.length > 0) {
		            const index = focusedTag === -1 ? value.length - 1 : focusedTag;
		            const newValue = value.slice();
		            newValue.splice(index, 1);
		            handleValue(event, newValue, 'removeOption', {
		              option: value[index]
		            });
		          }
		          break;
		        case 'Delete':
		          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {
		            const index = focusedTag;
		            const newValue = value.slice();
		            newValue.splice(index, 1);
		            handleValue(event, newValue, 'removeOption', {
		              option: value[index]
		            });
		          }
		          break;
		      }
		    }
		  };
		  const handleFocus = event => {
		    setFocused(true);
		    if (openOnFocus && !ignoreFocus.current) {
		      handleOpen(event);
		    }
		  };
		  const handleBlur = event => {
		    // Ignore the event when using the scrollbar with IE11
		    if (unstable_isActiveElementInListbox(listboxRef)) {
		      inputRef.current.focus();
		      return;
		    }
		    setFocused(false);
		    firstFocus.current = true;
		    ignoreFocus.current = false;
		    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
		      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');
		    } else if (autoSelect && freeSolo && inputValue !== '') {
		      selectNewValue(event, inputValue, 'blur', 'freeSolo');
		    } else if (clearOnBlur) {
		      resetInputValue(event, value);
		    }
		    handleClose(event, 'blur');
		  };
		  const handleInputChange = event => {
		    const newValue = event.target.value;
		    if (inputValue !== newValue) {
		      setInputValueState(newValue);
		      setInputPristine(false);
		      if (onInputChange) {
		        onInputChange(event, newValue, 'input');
		      }
		    }
		    if (newValue === '') {
		      if (!disableClearable && !multiple) {
		        handleValue(event, null, 'clear');
		      }
		    } else {
		      handleOpen(event);
		    }
		  };
		  const handleOptionMouseOver = event => {
		    setHighlightedIndex({
		      event,
		      index: Number(event.currentTarget.getAttribute('data-option-index')),
		      reason: 'mouse'
		    });
		  };
		  const handleOptionTouchStart = () => {
		    isTouch.current = true;
		  };
		  const handleOptionClick = event => {
		    const index = Number(event.currentTarget.getAttribute('data-option-index'));
		    selectNewValue(event, filteredOptions[index], 'selectOption');
		    isTouch.current = false;
		  };
		  const handleTagDelete = index => event => {
		    const newValue = value.slice();
		    newValue.splice(index, 1);
		    handleValue(event, newValue, 'removeOption', {
		      option: value[index]
		    });
		  };
		  const handlePopupIndicator = event => {
		    if (open) {
		      handleClose(event, 'toggleInput');
		    } else {
		      handleOpen(event);
		    }
		  };

		  // Prevent input blur when interacting with the combobox
		  const handleMouseDown = event => {
		    if (event.target.getAttribute('id') !== id) {
		      event.preventDefault();
		    }
		  };

		  // Focus the input when interacting with the combobox
		  const handleClick = () => {
		    inputRef.current.focus();
		    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
		      inputRef.current.select();
		    }
		    firstFocus.current = false;
		  };
		  const handleInputMouseDown = event => {
		    if (inputValue === '' || !open) {
		      handlePopupIndicator(event);
		    }
		  };
		  let dirty = freeSolo && inputValue.length > 0;
		  dirty = dirty || (multiple ? value.length > 0 : value !== null);
		  let groupedOptions = filteredOptions;
		  if (groupBy) {
		    // used to keep track of key and indexes in the result array
		    const indexBy = new Map();
		    let warn = false;
		    groupedOptions = filteredOptions.reduce((acc, option, index) => {
		      const group = groupBy(option);
		      if (acc.length > 0 && acc[acc.length - 1].group === group) {
		        acc[acc.length - 1].options.push(option);
		      } else {
		        {
		          if (indexBy.get(group) && !warn) {
		            console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');
		            warn = true;
		          }
		          indexBy.set(group, true);
		        }
		        acc.push({
		          key: index,
		          index,
		          group,
		          options: [option]
		        });
		      }
		      return acc;
		    }, []);
		  }
		  if (disabledProp && focused) {
		    handleBlur();
		  }
		  return {
		    getRootProps: (other = {}) => (0, _extends2.default)({
		      'aria-owns': listboxAvailable ? `${id}-listbox` : null
		    }, other, {
		      onKeyDown: handleKeyDown(other),
		      onMouseDown: handleMouseDown,
		      onClick: handleClick
		    }),
		    getInputLabelProps: () => ({
		      id: `${id}-label`,
		      htmlFor: id
		    }),
		    getInputProps: () => ({
		      id,
		      value: inputValue,
		      onBlur: handleBlur,
		      onFocus: handleFocus,
		      onChange: handleInputChange,
		      onMouseDown: handleInputMouseDown,
		      // if open then this is handled imperativeley so don't let react override
		      // only have an opinion about this when closed
		      'aria-activedescendant': popupOpen ? '' : null,
		      'aria-autocomplete': autoComplete ? 'both' : 'list',
		      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,
		      'aria-expanded': listboxAvailable,
		      // Disable browser's suggestion that might overlap with the popup.
		      // Handle autocomplete but not autofill.
		      autoComplete: 'off',
		      ref: inputRef,
		      autoCapitalize: 'none',
		      spellCheck: 'false',
		      role: 'combobox'
		    }),
		    getClearProps: () => ({
		      tabIndex: -1,
		      onClick: handleClear
		    }),
		    getPopupIndicatorProps: () => ({
		      tabIndex: -1,
		      onClick: handlePopupIndicator
		    }),
		    getTagProps: ({
		      index
		    }) => (0, _extends2.default)({
		      key: index,
		      'data-tag-index': index,
		      tabIndex: -1
		    }, !readOnly && {
		      onDelete: handleTagDelete(index)
		    }),
		    getListboxProps: () => ({
		      role: 'listbox',
		      id: `${id}-listbox`,
		      'aria-labelledby': `${id}-label`,
		      ref: handleListboxRef,
		      onMouseDown: event => {
		        // Prevent blur
		        event.preventDefault();
		      }
		    }),
		    getOptionProps: ({
		      index,
		      option
		    }) => {
		      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));
		      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
		      return {
		        key: getOptionLabel(option),
		        tabIndex: -1,
		        role: 'option',
		        id: `${id}-option-${index}`,
		        onMouseOver: handleOptionMouseOver,
		        onClick: handleOptionClick,
		        onTouchStart: handleOptionTouchStart,
		        'data-option-index': index,
		        'aria-disabled': disabled,
		        'aria-selected': selected
		      };
		    },
		    id,
		    inputValue,
		    value,
		    dirty,
		    popupOpen,
		    focused: focused || focusedTag !== -1,
		    anchorEl,
		    setAnchorEl,
		    focusedTag,
		    groupedOptions
		  };
		}
		return useAutocomplete;
	}

	var hasRequiredAutocompleteUnstyled;

	function requireAutocompleteUnstyled () {
		if (hasRequiredAutocompleteUnstyled) return AutocompleteUnstyled;
		hasRequiredAutocompleteUnstyled = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "createFilterOptions", {
			  enumerable: true,
			  get: function () {
			    return _useAutocomplete.createFilterOptions;
			  }
			});
			Object.defineProperty(exports, "useAutocomplete", {
			  enumerable: true,
			  get: function () {
			    return _useAutocomplete.default;
			  }
			});
			var _useAutocomplete = _interopRequireWildcard(requireUseAutocomplete());
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (AutocompleteUnstyled));
		return AutocompleteUnstyled;
	}

	var BadgeUnstyled$1 = {};

	var BadgeUnstyled = {};

	var composeClasses = {};

	var hasRequiredComposeClasses;

	function requireComposeClasses () {
		if (hasRequiredComposeClasses) return composeClasses;
		hasRequiredComposeClasses = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _utils.unstable_composeClasses;
			  }
			});
			var _utils = requireUtils$4();
	} (composeClasses));
		return composeClasses;
	}

	var useBadge = {};

	var hasRequiredUseBadge;

	function requireUseBadge () {
		if (hasRequiredUseBadge) return useBadge;
		hasRequiredUseBadge = 1;

		Object.defineProperty(useBadge, "__esModule", {
		  value: true
		});
		useBadge.default = useBadge$1;
		var _utils = requireUtils$4();
		function useBadge$1(parameters) {
		  const {
		    badgeContent: badgeContentProp,
		    invisible: invisibleProp = false,
		    max: maxProp = 99,
		    showZero = false
		  } = parameters;
		  const prevProps = (0, _utils.usePreviousProps)({
		    badgeContent: badgeContentProp,
		    max: maxProp
		  });
		  let invisible = invisibleProp;
		  if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
		    invisible = true;
		  }
		  const {
		    badgeContent,
		    max = maxProp
		  } = invisible ? prevProps : parameters;
		  const displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;
		  return {
		    badgeContent,
		    invisible,
		    max,
		    displayValue
		  };
		}
		return useBadge;
	}

	var badgeUnstyledClasses = {};

	var generateUtilityClasses = {};

	var hasRequiredGenerateUtilityClasses;

	function requireGenerateUtilityClasses () {
		if (hasRequiredGenerateUtilityClasses) return generateUtilityClasses;
		hasRequiredGenerateUtilityClasses = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _utils.unstable_generateUtilityClasses;
			  }
			});
			var _utils = requireUtils$4();
	} (generateUtilityClasses));
		return generateUtilityClasses;
	}

	var generateUtilityClass$1 = {};

	var hasRequiredGenerateUtilityClass$1;

	function requireGenerateUtilityClass$1 () {
		if (hasRequiredGenerateUtilityClass$1) return generateUtilityClass$1;
		hasRequiredGenerateUtilityClass$1 = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _utils.unstable_generateUtilityClass;
			  }
			});
			var _utils = requireUtils$4();
	} (generateUtilityClass$1));
		return generateUtilityClass$1;
	}

	var hasRequiredBadgeUnstyledClasses;

	function requireBadgeUnstyledClasses () {
		if (hasRequiredBadgeUnstyledClasses) return badgeUnstyledClasses;
		hasRequiredBadgeUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(badgeUnstyledClasses, "__esModule", {
		  value: true
		});
		badgeUnstyledClasses.default = void 0;
		badgeUnstyledClasses.getBadgeUnstyledUtilityClass = getBadgeUnstyledUtilityClass;
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		function getBadgeUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiBadge', slot);
		}
		const badgeUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiBadge', ['root', 'badge', 'invisible']);
		var _default = badgeUnstyledClasses$1;
		badgeUnstyledClasses.default = _default;
		return badgeUnstyledClasses;
	}

	var jsxRuntime = {exports: {}};

	var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(jsxRuntime_module);

	var hasRequiredJsxRuntime;

	function requireJsxRuntime () {
		if (hasRequiredJsxRuntime) return jsxRuntime.exports;
		hasRequiredJsxRuntime = 1;
		(function (module) {
			module.exports = require$$1$1;
	} (jsxRuntime));
		return jsxRuntime.exports;
	}

	var hasRequiredBadgeUnstyled$1;

	function requireBadgeUnstyled$1 () {
		if (hasRequiredBadgeUnstyled$1) return BadgeUnstyled;
		hasRequiredBadgeUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(BadgeUnstyled, "__esModule", {
		  value: true
		});
		BadgeUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _useBadge = _interopRequireDefault(requireUseBadge());
		var _badgeUnstyledClasses = requireBadgeUnstyledClasses();
		var _utils = requireUtils$3();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["badgeContent", "component", "children", "invisible", "max", "slotProps", "slots", "showZero"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    invisible
		  } = ownerState;
		  const slots = {
		    root: ['root'],
		    badge: ['badge', invisible && 'invisible']
		  };
		  return (0, _composeClasses.default)(slots, _badgeUnstyledClasses.getBadgeUnstyledUtilityClass, undefined);
		};
		/**
		 *
		 * Demos:
		 *
		 * - [Unstyled badge](https://mui.com/base/react-badge/)
		 *
		 * API:
		 *
		 * - [BadgeUnstyled API](https://mui.com/base/api/badge-unstyled/)
		 */
		const BadgeUnstyled$1 = /*#__PURE__*/React.forwardRef(function BadgeUnstyled(props, ref) {
		  const {
		      component,
		      children,
		      max: maxProp = 99,
		      slotProps = {},
		      slots = {},
		      showZero = false
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const {
		    badgeContent,
		    max,
		    displayValue,
		    invisible
		  } = (0, _useBadge.default)((0, _extends2.default)({}, props, {
		    max: maxProp
		  }));
		  const ownerState = (0, _extends2.default)({}, props, {
		    badgeContent,
		    invisible,
		    max,
		    showZero
		  });
		  const classes = useUtilityClasses(ownerState);
		  const Root = component || slots.root || 'span';
		  const rootProps = (0, _utils.useSlotProps)({
		    elementType: Root,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: {
		      ref
		    },
		    ownerState,
		    className: classes.root
		  });
		  const Badge = slots.badge || 'span';
		  const badgeProps = (0, _utils.useSlotProps)({
		    elementType: Badge,
		    externalSlotProps: slotProps.badge,
		    ownerState,
		    className: classes.badge
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Root, (0, _extends2.default)({}, rootProps, {
		    children: [children, /*#__PURE__*/(0, _jsxRuntime.jsx)(Badge, (0, _extends2.default)({}, badgeProps, {
		      children: displayValue
		    }))]
		  }));
		});
		BadgeUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * The content rendered within the badge.
		   */
		  badgeContent: _propTypes.default.node,
		  /**
		   * The badge will be added relative to this node.
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the badge is invisible.
		   * @default false
		   */
		  invisible: _propTypes.default.bool,
		  /**
		   * Max count to show.
		   * @default 99
		   */
		  max: _propTypes.default.number,
		  /**
		   * Controls whether the badge is hidden when `badgeContent` is zero.
		   * @default false
		   */
		  showZero: _propTypes.default.bool,
		  /**
		   * The props used for each slot inside the Badge.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    badge: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the Badge.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    badge: _propTypes.default.elementType,
		    root: _propTypes.default.elementType
		  })
		} ;
		var _default = BadgeUnstyled$1;
		BadgeUnstyled.default = _default;
		return BadgeUnstyled;
	}

	var BadgeUnstyled_types = {};

	var hasRequiredBadgeUnstyled_types;

	function requireBadgeUnstyled_types () {
		if (hasRequiredBadgeUnstyled_types) return BadgeUnstyled_types;
		hasRequiredBadgeUnstyled_types = 1;

		Object.defineProperty(BadgeUnstyled_types, "__esModule", {
		  value: true
		});
		return BadgeUnstyled_types;
	}

	var hasRequiredBadgeUnstyled;

	function requireBadgeUnstyled () {
		if (hasRequiredBadgeUnstyled) return BadgeUnstyled$1;
		hasRequiredBadgeUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  useBadge: true,
			  badgeUnstyledClasses: true
			};
			Object.defineProperty(exports, "badgeUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _badgeUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _BadgeUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "useBadge", {
			  enumerable: true,
			  get: function () {
			    return _useBadge.default;
			  }
			});
			var _BadgeUnstyled = _interopRequireDefault(requireBadgeUnstyled$1());
			var _useBadge = _interopRequireWildcard(requireUseBadge());
			Object.keys(_useBadge).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _useBadge[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _useBadge[key];
			    }
			  });
			});
			var _BadgeUnstyled2 = requireBadgeUnstyled_types();
			Object.keys(_BadgeUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _BadgeUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _BadgeUnstyled2[key];
			    }
			  });
			});
			var _badgeUnstyledClasses = _interopRequireWildcard(requireBadgeUnstyledClasses());
			Object.keys(_badgeUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _badgeUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _badgeUnstyledClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (BadgeUnstyled$1));
		return BadgeUnstyled$1;
	}

	var ButtonUnstyled$1 = {};

	var ButtonUnstyled = {};

	var buttonUnstyledClasses = {};

	var hasRequiredButtonUnstyledClasses;

	function requireButtonUnstyledClasses () {
		if (hasRequiredButtonUnstyledClasses) return buttonUnstyledClasses;
		hasRequiredButtonUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(buttonUnstyledClasses, "__esModule", {
		  value: true
		});
		buttonUnstyledClasses.default = void 0;
		buttonUnstyledClasses.getButtonUnstyledUtilityClass = getButtonUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getButtonUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiButton', slot);
		}
		const buttonUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiButton', ['root', 'active', 'disabled', 'focusVisible']);
		var _default = buttonUnstyledClasses$1;
		buttonUnstyledClasses.default = _default;
		return buttonUnstyledClasses;
	}

	var useButton = {};

	var hasRequiredUseButton;

	function requireUseButton () {
		if (hasRequiredUseButton) return useButton;
		hasRequiredUseButton = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useButton, "__esModule", {
		  value: true
		});
		useButton.default = useButton$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$4();
		var _extractEventHandlers = _interopRequireDefault(requireExtractEventHandlers());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function useButton$1(parameters) {
		  const {
		    disabled = false,
		    focusableWhenDisabled,
		    href,
		    ref: externalRef,
		    tabIndex,
		    to,
		    type
		  } = parameters;
		  const buttonRef = React.useRef();
		  const [active, setActive] = React.useState(false);
		  const {
		    isFocusVisibleRef,
		    onFocus: handleFocusVisible,
		    onBlur: handleBlurVisible,
		    ref: focusVisibleRef
		  } = (0, _utils.unstable_useIsFocusVisible)();
		  const [focusVisible, setFocusVisible] = React.useState(false);
		  if (disabled && !focusableWhenDisabled && focusVisible) {
		    setFocusVisible(false);
		  }
		  React.useEffect(() => {
		    isFocusVisibleRef.current = focusVisible;
		  }, [focusVisible, isFocusVisibleRef]);
		  const [hostElementName, setHostElementName] = React.useState('');
		  const createHandleMouseLeave = otherHandlers => event => {
		    var _otherHandlers$onMous;
		    if (focusVisible) {
		      event.preventDefault();
		    }
		    (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
		  };
		  const createHandleBlur = otherHandlers => event => {
		    var _otherHandlers$onBlur;
		    handleBlurVisible(event);
		    if (isFocusVisibleRef.current === false) {
		      setFocusVisible(false);
		    }
		    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
		  };
		  const createHandleFocus = otherHandlers => event => {
		    var _otherHandlers$onFocu2;
		    // Fix for https://github.com/facebook/react/issues/7769
		    if (!buttonRef.current) {
		      buttonRef.current = event.currentTarget;
		    }
		    handleFocusVisible(event);
		    if (isFocusVisibleRef.current === true) {
		      var _otherHandlers$onFocu;
		      setFocusVisible(true);
		      (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
		    }
		    (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu2.call(otherHandlers, event);
		  };
		  const isNativeButton = () => {
		    const button = buttonRef.current;
		    return hostElementName === 'BUTTON' || hostElementName === 'INPUT' && ['button', 'submit', 'reset'].includes(button == null ? void 0 : button.type) || hostElementName === 'A' && (button == null ? void 0 : button.href);
		  };
		  const createHandleClick = otherHandlers => event => {
		    if (!disabled) {
		      var _otherHandlers$onClic;
		      (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
		    }
		  };
		  const createHandleMouseDown = otherHandlers => event => {
		    var _otherHandlers$onMous2;
		    if (event.target === event.currentTarget && !disabled) {
		      setActive(true);
		    }
		    (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
		  };
		  const createHandleMouseUp = otherHandlers => event => {
		    var _otherHandlers$onMous3;
		    if (event.target === event.currentTarget) {
		      setActive(false);
		    }
		    (_otherHandlers$onMous3 = otherHandlers.onMouseUp) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
		  };
		  const createHandleKeyDown = otherHandlers => event => {
		    var _otherHandlers$onKeyD;
		    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
		    if (event.defaultPrevented) {
		      return;
		    }
		    if (event.target === event.currentTarget && !isNativeButton() && event.key === ' ') {
		      event.preventDefault();
		    }
		    if (event.target === event.currentTarget && event.key === ' ' && !disabled) {
		      setActive(true);
		    }

		    // Keyboard accessibility for non interactive elements
		    if (event.target === event.currentTarget && !isNativeButton() && event.key === 'Enter' && !disabled) {
		      var _otherHandlers$onClic2;
		      (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
		      event.preventDefault();
		    }
		  };
		  const createHandleKeyUp = otherHandlers => event => {
		    var _otherHandlers$onKeyU;
		    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
		    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0

		    if (event.target === event.currentTarget) {
		      setActive(false);
		    }
		    (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);

		    // Keyboard accessibility for non interactive elements
		    if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === ' ' && !event.defaultPrevented) {
		      var _otherHandlers$onClic3;
		      (_otherHandlers$onClic3 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic3.call(otherHandlers, event);
		    }
		  };
		  const updateHostElementName = React.useCallback(instance => {
		    var _instance$tagName;
		    setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : '');
		  }, []);
		  const handleRef = (0, _utils.unstable_useForkRef)(updateHostElementName, externalRef, focusVisibleRef, buttonRef);
		  const buttonProps = {};
		  if (hostElementName === 'BUTTON') {
		    buttonProps.type = type != null ? type : 'button';
		    if (focusableWhenDisabled) {
		      buttonProps['aria-disabled'] = disabled;
		    } else {
		      buttonProps.disabled = disabled;
		    }
		  } else if (hostElementName !== '') {
		    if (!href && !to) {
		      buttonProps.role = 'button';
		      buttonProps.tabIndex = tabIndex != null ? tabIndex : 0;
		    }
		    if (disabled) {
		      buttonProps['aria-disabled'] = disabled;
		      buttonProps.tabIndex = focusableWhenDisabled ? tabIndex != null ? tabIndex : 0 : -1;
		    }
		  }
		  const getRootProps = (otherHandlers = {}) => {
		    const propsEventHandlers = (0, _extractEventHandlers.default)(parameters);
		    const externalEventHandlers = (0, _extends2.default)({}, propsEventHandlers, otherHandlers);

		    // onFocusVisible can be present on the props, but since it's not a valid React event handler,
		    // it must not be forwarded to the inner component.
		    delete externalEventHandlers.onFocusVisible;
		    return (0, _extends2.default)({
		      type
		    }, externalEventHandlers, buttonProps, {
		      onBlur: createHandleBlur(externalEventHandlers),
		      onClick: createHandleClick(externalEventHandlers),
		      onFocus: createHandleFocus(externalEventHandlers),
		      onKeyDown: createHandleKeyDown(externalEventHandlers),
		      onKeyUp: createHandleKeyUp(externalEventHandlers),
		      onMouseDown: createHandleMouseDown(externalEventHandlers),
		      onMouseLeave: createHandleMouseLeave(externalEventHandlers),
		      onMouseUp: createHandleMouseUp(externalEventHandlers),
		      ref: handleRef
		    });
		  };
		  return {
		    getRootProps,
		    focusVisible,
		    setFocusVisible,
		    disabled,
		    active
		  };
		}
		return useButton;
	}

	var hasRequiredButtonUnstyled$1;

	function requireButtonUnstyled$1 () {
		if (hasRequiredButtonUnstyled$1) return ButtonUnstyled;
		hasRequiredButtonUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ButtonUnstyled, "__esModule", {
		  value: true
		});
		ButtonUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _buttonUnstyledClasses = requireButtonUnstyledClasses();
		var _useButton = _interopRequireDefault(requireUseButton());
		var _utils = requireUtils$3();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["action", "children", "component", "disabled", "focusableWhenDisabled", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseLeave", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    active,
		    disabled,
		    focusVisible
		  } = ownerState;
		  const slots = {
		    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']
		  };
		  return (0, _composeClasses.default)(slots, _buttonUnstyledClasses.getButtonUnstyledUtilityClass, {});
		};
		/**
		 * The foundation for building custom-styled buttons.
		 *
		 * Demos:
		 *
		 * - [Unstyled Button](https://mui.com/base/react-button/)
		 *
		 * API:
		 *
		 * - [ButtonUnstyled API](https://mui.com/base/api/button-unstyled/)
		 */
		const ButtonUnstyled$1 = /*#__PURE__*/React.forwardRef(function ButtonUnstyled(props, forwardedRef) {
		  var _ref;
		  const {
		      action,
		      children,
		      component,
		      focusableWhenDisabled = false,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const buttonRef = React.useRef();
		  const {
		    active,
		    focusVisible,
		    setFocusVisible,
		    getRootProps
		  } = (0, _useButton.default)((0, _extends2.default)({}, props, {
		    focusableWhenDisabled
		  }));
		  React.useImperativeHandle(action, () => ({
		    focusVisible: () => {
		      setFocusVisible(true);
		      buttonRef.current.focus();
		    }
		  }), [setFocusVisible]);
		  const ownerState = (0, _extends2.default)({}, props, {
		    active,
		    focusableWhenDisabled,
		    focusVisible
		  });
		  const classes = useUtilityClasses(ownerState);
		  const defaultElement = other.href || other.to ? 'a' : 'button';
		  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : defaultElement;
		  const rootProps = (0, _utils.useSlotProps)({
		    elementType: Root,
		    getSlotProps: getRootProps,
		    externalForwardedProps: other,
		    externalSlotProps: slotProps.root,
		    additionalProps: {
		      ref: forwardedRef
		    },
		    ownerState,
		    className: classes.root
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps, {
		    children: children
		  }));
		});
		ButtonUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * A ref for imperative actions. It currently only supports `focusVisible()` action.
		   */
		  action: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
		    current: _propTypes.default.shape({
		      focusVisible: _propTypes.default.func.isRequired
		    })
		  })]),
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the component is disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * If `true`, allows a disabled button to receive focus.
		   * @default false
		   */
		  focusableWhenDisabled: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  href: _propTypes.default.string,
		  /**
		   * @ignore
		   */
		  onBlur: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onClick: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onFocus: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onFocusVisible: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onKeyDown: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onKeyUp: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onMouseLeave: _propTypes.default.func,
		  /**
		   * The props used for each slot inside the Button.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the Button.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * @ignore
		   */
		  to: _propTypes.default.string
		} ;
		var _default = ButtonUnstyled$1;
		ButtonUnstyled.default = _default;
		return ButtonUnstyled;
	}

	var ButtonUnstyled_types = {};

	var hasRequiredButtonUnstyled_types;

	function requireButtonUnstyled_types () {
		if (hasRequiredButtonUnstyled_types) return ButtonUnstyled_types;
		hasRequiredButtonUnstyled_types = 1;

		Object.defineProperty(ButtonUnstyled_types, "__esModule", {
		  value: true
		});
		return ButtonUnstyled_types;
	}

	var useButton_types = {};

	var hasRequiredUseButton_types;

	function requireUseButton_types () {
		if (hasRequiredUseButton_types) return useButton_types;
		hasRequiredUseButton_types = 1;

		Object.defineProperty(useButton_types, "__esModule", {
		  value: true
		});
		return useButton_types;
	}

	var hasRequiredButtonUnstyled;

	function requireButtonUnstyled () {
		if (hasRequiredButtonUnstyled) return ButtonUnstyled$1;
		hasRequiredButtonUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  buttonUnstyledClasses: true,
			  getButtonUnstyledUtilityClass: true,
			  useButton: true
			};
			Object.defineProperty(exports, "buttonUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _buttonUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _ButtonUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "getButtonUnstyledUtilityClass", {
			  enumerable: true,
			  get: function () {
			    return _buttonUnstyledClasses.getButtonUnstyledUtilityClass;
			  }
			});
			Object.defineProperty(exports, "useButton", {
			  enumerable: true,
			  get: function () {
			    return _useButton.default;
			  }
			});
			var _ButtonUnstyled = _interopRequireDefault(requireButtonUnstyled$1());
			var _buttonUnstyledClasses = _interopRequireWildcard(requireButtonUnstyledClasses());
			var _ButtonUnstyled2 = requireButtonUnstyled_types();
			Object.keys(_ButtonUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _ButtonUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _ButtonUnstyled2[key];
			    }
			  });
			});
			var _useButton = _interopRequireDefault(requireUseButton());
			var _useButton2 = requireUseButton_types();
			Object.keys(_useButton2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _useButton2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _useButton2[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ButtonUnstyled$1));
		return ButtonUnstyled$1;
	}

	var ClickAwayListener$1 = {};

	var ClickAwayListener = {};

	var hasRequiredClickAwayListener$1;

	function requireClickAwayListener$1 () {
		if (hasRequiredClickAwayListener$1) return ClickAwayListener;
		hasRequiredClickAwayListener$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ClickAwayListener, "__esModule", {
		  value: true
		});
		ClickAwayListener.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		// TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1
		function mapEventPropToEvent(eventProp) {
		  return eventProp.substring(2).toLowerCase();
		}
		function clickedRootScrollbar(event, doc) {
		  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
		}
		/**
		 * Listen for click events that occur somewhere in the document, outside of the element itself.
		 * For instance, if you need to hide a menu when people click anywhere else on your page.
		 *
		 * Demos:
		 *
		 * - [Click-Away Listener](https://mui.com/base/react-click-away-listener/)
		 *
		 * API:
		 *
		 * - [ClickAwayListener API](https://mui.com/base/api/click-away-listener/)
		 */
		function ClickAwayListener$1(props) {
		  const {
		    children,
		    disableReactTree = false,
		    mouseEvent = 'onClick',
		    onClickAway,
		    touchEvent = 'onTouchEnd'
		  } = props;
		  const movedRef = React.useRef(false);
		  const nodeRef = React.useRef(null);
		  const activatedRef = React.useRef(false);
		  const syntheticEventRef = React.useRef(false);
		  React.useEffect(() => {
		    // Ensure that this component is not "activated" synchronously.
		    // https://github.com/facebook/react/issues/20074
		    setTimeout(() => {
		      activatedRef.current = true;
		    }, 0);
		    return () => {
		      activatedRef.current = false;
		    };
		  }, []);
		  const handleRef = (0, _utils.unstable_useForkRef)(
		  // @ts-expect-error TODO upstream fix
		  children.ref, nodeRef);

		  // The handler doesn't take event.defaultPrevented into account:
		  //
		  // event.preventDefault() is meant to stop default behaviors like
		  // clicking a checkbox to check it, hitting a button to submit a form,
		  // and hitting left arrow to move the cursor in a text input etc.
		  // Only special HTML elements have these default behaviors.
		  const handleClickAway = (0, _utils.unstable_useEventCallback)(event => {
		    // Given developers can stop the propagation of the synthetic event,
		    // we can only be confident with a positive value.
		    const insideReactTree = syntheticEventRef.current;
		    syntheticEventRef.current = false;
		    const doc = (0, _utils.unstable_ownerDocument)(nodeRef.current);

		    // 1. IE11 support, which trigger the handleClickAway even after the unbind
		    // 2. The child might render null.
		    // 3. Behave like a blur listener.
		    if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {
		      return;
		    }

		    // Do not act if user performed touchmove
		    if (movedRef.current) {
		      movedRef.current = false;
		      return;
		    }
		    let insideDOM;

		    // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js
		    if (event.composedPath) {
		      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
		    } else {
		      insideDOM = !doc.documentElement.contains(
		      // @ts-expect-error returns `false` as intended when not dispatched from a Node
		      event.target) || nodeRef.current.contains(
		      // @ts-expect-error returns `false` as intended when not dispatched from a Node
		      event.target);
		    }
		    if (!insideDOM && (disableReactTree || !insideReactTree)) {
		      onClickAway(event);
		    }
		  });

		  // Keep track of mouse/touch events that bubbled up through the portal.
		  const createHandleSynthetic = handlerName => event => {
		    syntheticEventRef.current = true;
		    const childrenPropsHandler = children.props[handlerName];
		    if (childrenPropsHandler) {
		      childrenPropsHandler(event);
		    }
		  };
		  const childrenProps = {
		    ref: handleRef
		  };
		  if (touchEvent !== false) {
		    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
		  }
		  React.useEffect(() => {
		    if (touchEvent !== false) {
		      const mappedTouchEvent = mapEventPropToEvent(touchEvent);
		      const doc = (0, _utils.unstable_ownerDocument)(nodeRef.current);
		      const handleTouchMove = () => {
		        movedRef.current = true;
		      };
		      doc.addEventListener(mappedTouchEvent, handleClickAway);
		      doc.addEventListener('touchmove', handleTouchMove);
		      return () => {
		        doc.removeEventListener(mappedTouchEvent, handleClickAway);
		        doc.removeEventListener('touchmove', handleTouchMove);
		      };
		    }
		    return undefined;
		  }, [handleClickAway, touchEvent]);
		  if (mouseEvent !== false) {
		    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
		  }
		  React.useEffect(() => {
		    if (mouseEvent !== false) {
		      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
		      const doc = (0, _utils.unstable_ownerDocument)(nodeRef.current);
		      doc.addEventListener(mappedMouseEvent, handleClickAway);
		      return () => {
		        doc.removeEventListener(mappedMouseEvent, handleClickAway);
		      };
		    }
		    return undefined;
		  }, [handleClickAway, mouseEvent]);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
		    children: /*#__PURE__*/React.cloneElement(children, childrenProps)
		  });
		}
		ClickAwayListener$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * The wrapped element.
		   */
		  children: _utils.elementAcceptingRef.isRequired,
		  /**
		   * If `true`, the React tree is ignored and only the DOM tree is considered.
		   * This prop changes how portaled elements are handled.
		   * @default false
		   */
		  disableReactTree: _propTypes.default.bool,
		  /**
		   * The mouse event to listen to. You can disable the listener by providing `false`.
		   * @default 'onClick'
		   */
		  mouseEvent: _propTypes.default.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),
		  /**
		   * Callback fired when a "click away" event is detected.
		   */
		  onClickAway: _propTypes.default.func.isRequired,
		  /**
		   * The touch event to listen to. You can disable the listener by providing `false`.
		   * @default 'onTouchEnd'
		   */
		  touchEvent: _propTypes.default.oneOf(['onTouchEnd', 'onTouchStart', false])
		} ;
		{
		  // eslint-disable-next-line
		  ClickAwayListener$1['propTypes' + ''] = (0, _utils.exactProp)(ClickAwayListener$1.propTypes);
		}
		var _default = ClickAwayListener$1;
		ClickAwayListener.default = _default;
		return ClickAwayListener;
	}

	var hasRequiredClickAwayListener;

	function requireClickAwayListener () {
		if (hasRequiredClickAwayListener) return ClickAwayListener$1;
		hasRequiredClickAwayListener = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _ClickAwayListener.default;
			  }
			});
			var _ClickAwayListener = _interopRequireWildcard(requireClickAwayListener$1());
			Object.keys(_ClickAwayListener).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _ClickAwayListener[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _ClickAwayListener[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ClickAwayListener$1));
		return ClickAwayListener$1;
	}

	var FocusTrap$1 = {};

	var FocusTrap = {};

	var hasRequiredFocusTrap$1;

	function requireFocusTrap$1 () {
		if (hasRequiredFocusTrap$1) return FocusTrap;
		hasRequiredFocusTrap$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(FocusTrap, "__esModule", {
		  value: true
		});
		FocusTrap.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */

		// Inspired by https://github.com/focus-trap/tabbable
		const candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'].join(',');
		function getTabIndex(node) {
		  const tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);
		  if (!Number.isNaN(tabindexAttr)) {
		    return tabindexAttr;
		  }

		  // Browsers do not return `tabIndex` correctly for contentEditable nodes;
		  // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
		  // so if they don't have a tabindex attribute specifically set, assume it's 0.
		  // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
		  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
		  //  yet they are still part of the regular tab order; in FF, they get a default
		  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
		  //  order, consider their tab index to be 0.
		  if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {
		    return 0;
		  }
		  return node.tabIndex;
		}
		function isNonTabbableRadio(node) {
		  if (node.tagName !== 'INPUT' || node.type !== 'radio') {
		    return false;
		  }
		  if (!node.name) {
		    return false;
		  }
		  const getRadio = selector => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);
		  let roving = getRadio(`[name="${node.name}"]:checked`);
		  if (!roving) {
		    roving = getRadio(`[name="${node.name}"]`);
		  }
		  return roving !== node;
		}
		function isNodeMatchingSelectorFocusable(node) {
		  if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {
		    return false;
		  }
		  return true;
		}
		function defaultGetTabbable(root) {
		  const regularTabNodes = [];
		  const orderedTabNodes = [];
		  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
		    const nodeTabIndex = getTabIndex(node);
		    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
		      return;
		    }
		    if (nodeTabIndex === 0) {
		      regularTabNodes.push(node);
		    } else {
		      orderedTabNodes.push({
		        documentOrder: i,
		        tabIndex: nodeTabIndex,
		        node
		      });
		    }
		  });
		  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);
		}
		function defaultIsEnabled() {
		  return true;
		}

		/**
		 * Utility component that locks focus inside the component.
		 */
		function FocusTrap$1(props) {
		  const {
		    children,
		    disableAutoFocus = false,
		    disableEnforceFocus = false,
		    disableRestoreFocus = false,
		    getTabbable = defaultGetTabbable,
		    isEnabled = defaultIsEnabled,
		    open
		  } = props;
		  const ignoreNextEnforceFocus = React.useRef();
		  const sentinelStart = React.useRef(null);
		  const sentinelEnd = React.useRef(null);
		  const nodeToRestore = React.useRef(null);
		  const reactFocusEventTarget = React.useRef(null);
		  // This variable is useful when disableAutoFocus is true.
		  // It waits for the active element to move into the component to activate.
		  const activated = React.useRef(false);
		  const rootRef = React.useRef(null);
		  const handleRef = (0, _utils.unstable_useForkRef)(children.ref, rootRef);
		  const lastKeydown = React.useRef(null);
		  React.useEffect(() => {
		    // We might render an empty child.
		    if (!open || !rootRef.current) {
		      return;
		    }
		    activated.current = !disableAutoFocus;
		  }, [disableAutoFocus, open]);
		  React.useEffect(() => {
		    // We might render an empty child.
		    if (!open || !rootRef.current) {
		      return;
		    }
		    const doc = (0, _utils.unstable_ownerDocument)(rootRef.current);
		    if (!rootRef.current.contains(doc.activeElement)) {
		      if (!rootRef.current.hasAttribute('tabIndex')) {
		        {
		          console.error(['MUI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
		        }
		        rootRef.current.setAttribute('tabIndex', -1);
		      }
		      if (activated.current) {
		        rootRef.current.focus();
		      }
		    }
		    return () => {
		      // restoreLastFocus()
		      if (!disableRestoreFocus) {
		        // In IE11 it is possible for document.activeElement to be null resulting
		        // in nodeToRestore.current being null.
		        // Not all elements in IE11 have a focus method.
		        // Once IE11 support is dropped the focus() call can be unconditional.
		        if (nodeToRestore.current && nodeToRestore.current.focus) {
		          ignoreNextEnforceFocus.current = true;
		          nodeToRestore.current.focus();
		        }
		        nodeToRestore.current = null;
		      }
		    };
		    // Missing `disableRestoreFocus` which is fine.
		    // We don't support changing that prop on an open FocusTrap
		    // eslint-disable-next-line react-hooks/exhaustive-deps
		  }, [open]);
		  React.useEffect(() => {
		    // We might render an empty child.
		    if (!open || !rootRef.current) {
		      return;
		    }
		    const doc = (0, _utils.unstable_ownerDocument)(rootRef.current);
		    const contain = nativeEvent => {
		      const {
		        current: rootElement
		      } = rootRef;
		      // Cleanup functions are executed lazily in React 17.
		      // Contain can be called between the component being unmounted and its cleanup function being run.
		      if (rootElement === null) {
		        return;
		      }
		      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
		        ignoreNextEnforceFocus.current = false;
		        return;
		      }
		      if (!rootElement.contains(doc.activeElement)) {
		        // if the focus event is not coming from inside the children's react tree, reset the refs
		        if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
		          reactFocusEventTarget.current = null;
		        } else if (reactFocusEventTarget.current !== null) {
		          return;
		        }
		        if (!activated.current) {
		          return;
		        }
		        let tabbable = [];
		        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
		          tabbable = getTabbable(rootRef.current);
		        }
		        if (tabbable.length > 0) {
		          var _lastKeydown$current, _lastKeydown$current2;
		          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
		          const focusNext = tabbable[0];
		          const focusPrevious = tabbable[tabbable.length - 1];
		          if (isShiftTab) {
		            focusPrevious.focus();
		          } else {
		            focusNext.focus();
		          }
		        } else {
		          rootElement.focus();
		        }
		      }
		    };
		    const loopFocus = nativeEvent => {
		      lastKeydown.current = nativeEvent;
		      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {
		        return;
		      }

		      // Make sure the next tab starts from the right place.
		      // doc.activeElement referes to the origin.
		      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
		        // We need to ignore the next contain as
		        // it will try to move the focus back to the rootRef element.
		        ignoreNextEnforceFocus.current = true;
		        sentinelEnd.current.focus();
		      }
		    };
		    doc.addEventListener('focusin', contain);
		    doc.addEventListener('keydown', loopFocus, true);

		    // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
		    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
		    // Instead, we can look if the active element was restored on the BODY element.
		    //
		    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
		    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.
		    const interval = setInterval(() => {
		      if (doc.activeElement.tagName === 'BODY') {
		        contain();
		      }
		    }, 50);
		    return () => {
		      clearInterval(interval);
		      doc.removeEventListener('focusin', contain);
		      doc.removeEventListener('keydown', loopFocus, true);
		    };
		  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
		  const onFocus = event => {
		    if (nodeToRestore.current === null) {
		      nodeToRestore.current = event.relatedTarget;
		    }
		    activated.current = true;
		    reactFocusEventTarget.current = event.target;
		    const childrenPropsHandler = children.props.onFocus;
		    if (childrenPropsHandler) {
		      childrenPropsHandler(event);
		    }
		  };
		  const handleFocusSentinel = event => {
		    if (nodeToRestore.current === null) {
		      nodeToRestore.current = event.relatedTarget;
		    }
		    activated.current = true;
		  };
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
		    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
		      tabIndex: open ? 0 : -1,
		      onFocus: handleFocusSentinel,
		      ref: sentinelStart,
		      "data-testid": "sentinelStart"
		    }), /*#__PURE__*/React.cloneElement(children, {
		      ref: handleRef,
		      onFocus
		    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
		      tabIndex: open ? 0 : -1,
		      onFocus: handleFocusSentinel,
		      ref: sentinelEnd,
		      "data-testid": "sentinelEnd"
		    })]
		  });
		}
		FocusTrap$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * A single child content element.
		   */
		  children: _utils.elementAcceptingRef,
		  /**
		   * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
		   * replace it to the last focused element when it closes.
		   * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
		   *
		   * Generally this should never be set to `true` as it makes the focus trap less
		   * accessible to assistive technologies, like screen readers.
		   * @default false
		   */
		  disableAutoFocus: _propTypes.default.bool,
		  /**
		   * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
		   *
		   * Generally this should never be set to `true` as it makes the focus trap less
		   * accessible to assistive technologies, like screen readers.
		   * @default false
		   */
		  disableEnforceFocus: _propTypes.default.bool,
		  /**
		   * If `true`, the focus trap will not restore focus to previously focused element once
		   * focus trap is hidden or unmounted.
		   * @default false
		   */
		  disableRestoreFocus: _propTypes.default.bool,
		  /**
		   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
		   * For instance, you can provide the "tabbable" npm dependency.
		   * @param {HTMLElement} root
		   */
		  getTabbable: _propTypes.default.func,
		  /**
		   * This prop extends the `open` prop.
		   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
		   * This prop should be memoized.
		   * It can be used to support multiple focus trap mounted at the same time.
		   * @default function defaultIsEnabled() {
		   *   return true;
		   * }
		   */
		  isEnabled: _propTypes.default.func,
		  /**
		   * If `true`, focus is locked.
		   */
		  open: _propTypes.default.bool.isRequired
		} ;
		{
		  // eslint-disable-next-line
		  FocusTrap$1['propTypes' + ''] = (0, _utils.exactProp)(FocusTrap$1.propTypes);
		}
		var _default = FocusTrap$1;
		FocusTrap.default = _default;
		return FocusTrap;
	}

	var hasRequiredFocusTrap;

	function requireFocusTrap () {
		if (hasRequiredFocusTrap) return FocusTrap$1;
		hasRequiredFocusTrap = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _FocusTrap.default;
			  }
			});
			var _FocusTrap = _interopRequireDefault(requireFocusTrap$1());
	} (FocusTrap$1));
		return FocusTrap$1;
	}

	var FormControlUnstyled$1 = {};

	var FormControlUnstyled = {};

	var FormControlUnstyledContext = {};

	var hasRequiredFormControlUnstyledContext;

	function requireFormControlUnstyledContext () {
		if (hasRequiredFormControlUnstyledContext) return FormControlUnstyledContext;
		hasRequiredFormControlUnstyledContext = 1;

		Object.defineProperty(FormControlUnstyledContext, "__esModule", {
		  value: true
		});
		FormControlUnstyledContext.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * @ignore - internal component.
		 */
		const FormControlUnstyledContext$1 = /*#__PURE__*/React.createContext(undefined);
		{
		  FormControlUnstyledContext$1.displayName = 'FormControlUnstyledContext';
		}
		var _default = FormControlUnstyledContext$1;
		FormControlUnstyledContext.default = _default;
		return FormControlUnstyledContext;
	}

	var formControlUnstyledClasses = {};

	var hasRequiredFormControlUnstyledClasses;

	function requireFormControlUnstyledClasses () {
		if (hasRequiredFormControlUnstyledClasses) return formControlUnstyledClasses;
		hasRequiredFormControlUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(formControlUnstyledClasses, "__esModule", {
		  value: true
		});
		formControlUnstyledClasses.default = void 0;
		formControlUnstyledClasses.getFormControlUnstyledUtilityClass = getFormControlUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getFormControlUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiFormControl', slot);
		}
		const formControlUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiFormControl', ['root', 'disabled', 'error', 'filled', 'focused', 'required']);
		var _default = formControlUnstyledClasses$1;
		formControlUnstyledClasses.default = _default;
		return formControlUnstyledClasses;
	}

	var hasRequiredFormControlUnstyled$1;

	function requireFormControlUnstyled$1 () {
		if (hasRequiredFormControlUnstyled$1) return FormControlUnstyled;
		hasRequiredFormControlUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(FormControlUnstyled, "__esModule", {
		  value: true
		});
		FormControlUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _FormControlUnstyledContext = _interopRequireDefault(requireFormControlUnstyledContext());
		var _formControlUnstyledClasses = requireFormControlUnstyledClasses();
		var _utils2 = requireUtils$3();
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["defaultValue", "children", "component", "disabled", "error", "onChange", "required", "slotProps", "slots", "value"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function hasValue(value) {
		  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';
		}
		function useUtilityClasses(ownerState) {
		  const {
		    disabled,
		    error,
		    filled,
		    focused,
		    required
		  } = ownerState;
		  const slots = {
		    root: ['root', disabled && 'disabled', focused && 'focused', error && 'error', filled && 'filled', required && 'required']
		  };
		  return (0, _composeClasses.default)(slots, _formControlUnstyledClasses.getFormControlUnstyledUtilityClass, {});
		}

		/**
		 * Provides context such as filled/focused/error/required for form inputs.
		 * Relying on the context provides high flexibility and ensures that the state always stays
		 * consistent across the children of the `FormControl`.
		 * This context is used by the following components:
		 *
		 * *   FormLabel
		 * *   FormHelperText
		 * *   Input
		 * *   InputLabel
		 *
		 * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).
		 *
		 * ```jsx
		 * <FormControl>
		 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
		 *   <Input id="my-input" aria-describedby="my-helper-text" />
		 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
		 * </FormControl>
		 * ```
		 *
		 * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.
		 * For instance, only one input can be focused at the same time, the state shouldn't be shared.
		 *
		 * Demos:
		 *
		 * - [Unstyled Form Control](https://mui.com/base/react-form-control/)
		 *
		 * API:
		 *
		 * - [FormControlUnstyled API](https://mui.com/base/api/form-control-unstyled/)
		 */
		const FormControlUnstyled$1 = /*#__PURE__*/React.forwardRef(function FormControlUnstyled(props, ref) {
		  var _ref;
		  const {
		      defaultValue,
		      children,
		      component,
		      disabled = false,
		      error = false,
		      onChange,
		      required = false,
		      slotProps = {},
		      slots = {},
		      value: incomingValue
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const [value, setValue] = (0, _utils.unstable_useControlled)({
		    controlled: incomingValue,
		    default: defaultValue,
		    name: 'FormControl',
		    state: 'value'
		  });
		  const filled = hasValue(value);
		  const [focusedState, setFocused] = React.useState(false);
		  const focused = focusedState && !disabled;
		  React.useEffect(() => setFocused(isFocused => disabled ? false : isFocused), [disabled]);
		  const ownerState = (0, _extends2.default)({}, props, {
		    disabled,
		    error,
		    filled,
		    focused,
		    required
		  });
		  const childContext = React.useMemo(() => {
		    return {
		      disabled,
		      error,
		      filled,
		      focused,
		      onBlur: () => {
		        setFocused(false);
		      },
		      onChange: event => {
		        setValue(event.target.value);
		        onChange == null ? void 0 : onChange(event);
		      },
		      onFocus: () => {
		        setFocused(true);
		      },
		      required,
		      value: value != null ? value : ''
		    };
		  }, [disabled, error, filled, focused, onChange, required, setValue, value]);
		  const classes = useUtilityClasses(ownerState);
		  const renderChildren = () => {
		    if (typeof children === 'function') {
		      return children(childContext);
		    }
		    return children;
		  };
		  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';
		  const rootProps = (0, _utils2.useSlotProps)({
		    elementType: Root,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: {
		      ref,
		      children: renderChildren()
		    },
		    ownerState,
		    className: classes.root
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_FormControlUnstyledContext.default.Provider, {
		    value: childContext,
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps))
		  });
		});
		FormControlUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.node, _propTypes.default.func]),
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * @ignore
		   */
		  defaultValue: _propTypes.default.any,
		  /**
		   * If `true`, the label, input and helper text should be displayed in a disabled state.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * If `true`, the label is displayed in an error state.
		   * @default false
		   */
		  error: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  onChange: _propTypes.default.func,
		  /**
		   * If `true`, the label will indicate that the `input` is required.
		   * @default false
		   */
		  required: _propTypes.default.bool,
		  /**
		   * The props used for each slot inside the FormControl.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the FormControl.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * @ignore
		   */
		  value: _propTypes.default.any
		} ;
		var _default = FormControlUnstyled$1;
		FormControlUnstyled.default = _default;
		return FormControlUnstyled;
	}

	var useFormControlUnstyledContext = {};

	var hasRequiredUseFormControlUnstyledContext;

	function requireUseFormControlUnstyledContext () {
		if (hasRequiredUseFormControlUnstyledContext) return useFormControlUnstyledContext;
		hasRequiredUseFormControlUnstyledContext = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useFormControlUnstyledContext, "__esModule", {
		  value: true
		});
		useFormControlUnstyledContext.default = useFormControlUnstyledContext$1;
		var React = _interopRequireWildcard(require$$3);
		var _FormControlUnstyledContext = _interopRequireDefault(requireFormControlUnstyledContext());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function useFormControlUnstyledContext$1() {
		  return React.useContext(_FormControlUnstyledContext.default);
		}
		return useFormControlUnstyledContext;
	}

	var hasRequiredFormControlUnstyled;

	function requireFormControlUnstyled () {
		if (hasRequiredFormControlUnstyled) return FormControlUnstyled$1;
		hasRequiredFormControlUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  FormControlUnstyledContext: true,
			  formControlUnstyledClasses: true,
			  useFormControlUnstyledContext: true
			};
			Object.defineProperty(exports, "FormControlUnstyledContext", {
			  enumerable: true,
			  get: function () {
			    return _FormControlUnstyledContext.default;
			  }
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _FormControlUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "formControlUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _formControlUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "useFormControlUnstyledContext", {
			  enumerable: true,
			  get: function () {
			    return _useFormControlUnstyledContext.default;
			  }
			});
			var _FormControlUnstyled = _interopRequireDefault(requireFormControlUnstyled$1());
			var _FormControlUnstyledContext = _interopRequireDefault(requireFormControlUnstyledContext());
			var _formControlUnstyledClasses = _interopRequireWildcard(requireFormControlUnstyledClasses());
			Object.keys(_formControlUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _formControlUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _formControlUnstyledClasses[key];
			    }
			  });
			});
			var _useFormControlUnstyledContext = _interopRequireDefault(requireUseFormControlUnstyledContext());
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (FormControlUnstyled$1));
		return FormControlUnstyled$1;
	}

	var InputUnstyled$1 = {};

	var InputUnstyled = {};

	var inputUnstyledClasses = {};

	var hasRequiredInputUnstyledClasses;

	function requireInputUnstyledClasses () {
		if (hasRequiredInputUnstyledClasses) return inputUnstyledClasses;
		hasRequiredInputUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(inputUnstyledClasses, "__esModule", {
		  value: true
		});
		inputUnstyledClasses.default = void 0;
		inputUnstyledClasses.getInputUnstyledUtilityClass = getInputUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getInputUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiInput', slot);
		}
		const inputUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiInput', ['root', 'formControl', 'focused', 'disabled', 'error', 'multiline', 'input', 'inputMultiline', 'inputTypeSearch', 'adornedStart', 'adornedEnd']);
		var _default = inputUnstyledClasses$1;
		inputUnstyledClasses.default = _default;
		return inputUnstyledClasses;
	}

	var useInput = {};

	var hasRequiredUseInput;

	function requireUseInput () {
		if (hasRequiredUseInput) return useInput;
		hasRequiredUseInput = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useInput, "__esModule", {
		  value: true
		});
		useInput.default = useInput$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var _utils = requireUtils$4();
		var React = _interopRequireWildcard(require$$3);
		var _FormControlUnstyled = requireFormControlUnstyled();
		var _extractEventHandlers = _interopRequireDefault(requireExtractEventHandlers());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function useInput$1(parameters) {
		  const {
		    defaultValue: defaultValueProp,
		    disabled: disabledProp = false,
		    error: errorProp = false,
		    onBlur,
		    onChange,
		    onFocus,
		    required: requiredProp = false,
		    value: valueProp
		  } = parameters;
		  const formControlContext = (0, _FormControlUnstyled.useFormControlUnstyledContext)();
		  let defaultValue;
		  let disabled;
		  let error;
		  let required;
		  let value;
		  if (formControlContext) {
		    var _formControlContext$d, _formControlContext$e, _formControlContext$r;
		    defaultValue = undefined;
		    disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
		    error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
		    required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
		    value = formControlContext.value;
		    {
		      const definedLocalProps = ['defaultValue', 'disabled', 'error', 'required', 'value'].filter(prop => parameters[prop] !== undefined);
		      if (definedLocalProps.length > 0) {
		        console.warn(['MUI: You have set props on an input that is inside a FormControlUnstyled.', 'Set these props on a FormControlUnstyled instead. Otherwise they will be ignored.', `Ignored props: ${definedLocalProps.join(', ')}`].join('\n'));
		      }
		    }
		  } else {
		    defaultValue = defaultValueProp;
		    disabled = disabledProp;
		    error = errorProp;
		    required = requiredProp;
		    value = valueProp;
		  }
		  const {
		    current: isControlled
		  } = React.useRef(value != null);
		  const handleInputRefWarning = React.useCallback(instance => {
		    {
		      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
		        console.error(['MUI: You have provided a `slots.input` to the input component', 'that does not correctly handle the `ref` prop.', 'Make sure the `ref` prop is called with a HTMLInputElement.'].join('\n'));
		      }
		    }
		  }, []);
		  const inputRef = React.useRef(null);
		  const handleInputRef = (0, _utils.unstable_useForkRef)(inputRef, handleInputRefWarning);
		  const [focused, setFocused] = React.useState(false);

		  // The blur won't fire when the disabled state is set on a focused input.
		  // We need to book keep the focused state manually.
		  React.useEffect(() => {
		    if (!formControlContext && disabled && focused) {
		      setFocused(false);

		      // @ts-ignore
		      onBlur == null ? void 0 : onBlur();
		    }
		  }, [formControlContext, disabled, focused, onBlur]);
		  const handleFocus = otherHandlers => event => {
		    var _otherHandlers$onFocu;
		    // Fix a bug with IE11 where the focus/blur events are triggered
		    // while the component is disabled.
		    if (formControlContext != null && formControlContext.disabled) {
		      event.stopPropagation();
		      return;
		    }
		    (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
		    if (formControlContext && formControlContext.onFocus) {
		      var _formControlContext$o;
		      formControlContext == null ? void 0 : (_formControlContext$o = formControlContext.onFocus) == null ? void 0 : _formControlContext$o.call(formControlContext);
		    } else {
		      setFocused(true);
		    }
		  };
		  const handleBlur = otherHandlers => event => {
		    var _otherHandlers$onBlur;
		    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
		    if (formControlContext && formControlContext.onBlur) {
		      formControlContext.onBlur();
		    } else {
		      setFocused(false);
		    }
		  };
		  const handleChange = otherHandlers => (event, ...args) => {
		    var _formControlContext$o2, _otherHandlers$onChan;
		    if (!isControlled) {
		      const element = event.target || inputRef.current;
		      if (element == null) {
		        throw new Error(`MUI: Expected valid input target. Did you use a custom \`slots.input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` );
		      }
		    }
		    formControlContext == null ? void 0 : (_formControlContext$o2 = formControlContext.onChange) == null ? void 0 : _formControlContext$o2.call(formControlContext, event);

		    // @ts-ignore
		    (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event, ...args);
		  };
		  const handleClick = otherHandlers => event => {
		    var _otherHandlers$onClic;
		    if (inputRef.current && event.currentTarget === event.target) {
		      inputRef.current.focus();
		    }
		    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
		  };
		  const getRootProps = (externalProps = {}) => {
		    // onBlur, onChange and onFocus are forwarded to the input slot.
		    const propsEventHandlers = (0, _extractEventHandlers.default)(parameters, ['onBlur', 'onChange', 'onFocus']);
		    const externalEventHandlers = (0, _extends2.default)({}, propsEventHandlers, (0, _extractEventHandlers.default)(externalProps));
		    return (0, _extends2.default)({}, externalProps, externalEventHandlers, {
		      onClick: handleClick(externalEventHandlers)
		    });
		  };
		  const getInputProps = (externalProps = {}) => {
		    const propsEventHandlers = {
		      onBlur,
		      onChange,
		      onFocus
		    };
		    const externalEventHandlers = (0, _extends2.default)({}, propsEventHandlers, (0, _extractEventHandlers.default)(externalProps));
		    const mergedEventHandlers = (0, _extends2.default)({}, externalProps, externalEventHandlers, {
		      onBlur: handleBlur(externalEventHandlers),
		      onChange: handleChange(externalEventHandlers),
		      onFocus: handleFocus(externalEventHandlers)
		    });
		    return (0, _extends2.default)({}, mergedEventHandlers, {
		      'aria-invalid': error || undefined,
		      defaultValue: defaultValue,
		      ref: handleInputRef,
		      value: value,
		      required,
		      disabled
		    });
		  };
		  return {
		    disabled,
		    error,
		    focused,
		    formControlContext,
		    getInputProps,
		    getRootProps,
		    required,
		    value
		  };
		}
		return useInput;
	}

	var hasRequiredInputUnstyled$1;

	function requireInputUnstyled$1 () {
		if (hasRequiredInputUnstyled$1) return InputUnstyled;
		hasRequiredInputUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(InputUnstyled, "__esModule", {
		  value: true
		});
		InputUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _isHostComponent = _interopRequireDefault(requireIsHostComponent());
		var _inputUnstyledClasses = _interopRequireDefault(requireInputUnstyledClasses());
		var _useInput = _interopRequireDefault(requireUseInput());
		var _utils = requireUtils$3();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "component", "defaultValue", "disabled", "endAdornment", "error", "id", "multiline", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "startAdornment", "value", "type", "rows", "slotProps", "slots", "minRows", "maxRows"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 *
		 * Demos:
		 *
		 * - [Unstyled Input](https://mui.com/base/react-input/)
		 *
		 * API:
		 *
		 * - [InputUnstyled API](https://mui.com/base/api/input-unstyled/)
		 */
		const InputUnstyled$1 = /*#__PURE__*/React.forwardRef(function InputUnstyled(props, forwardedRef) {
		  var _ref, _slots$textarea, _slots$input;
		  const {
		      'aria-describedby': ariaDescribedby,
		      'aria-label': ariaLabel,
		      'aria-labelledby': ariaLabelledby,
		      autoComplete,
		      autoFocus,
		      className,
		      component,
		      defaultValue,
		      disabled,
		      endAdornment,
		      error,
		      id,
		      multiline = false,
		      name,
		      onClick,
		      onChange,
		      onKeyDown,
		      onKeyUp,
		      onFocus,
		      onBlur,
		      placeholder,
		      readOnly,
		      required,
		      startAdornment,
		      value,
		      type: typeProp,
		      rows,
		      slotProps = {},
		      slots = {},
		      minRows,
		      maxRows
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const {
		    getRootProps,
		    getInputProps,
		    focused,
		    formControlContext,
		    error: errorState,
		    disabled: disabledState
		  } = (0, _useInput.default)({
		    disabled,
		    defaultValue,
		    error,
		    onBlur,
		    onClick,
		    onChange,
		    onFocus,
		    required,
		    value
		  });
		  const type = !multiline ? typeProp != null ? typeProp : 'text' : undefined;
		  const ownerState = (0, _extends2.default)({}, props, {
		    disabled: disabledState,
		    error: errorState,
		    focused,
		    formControlContext,
		    multiline,
		    type
		  });
		  const rootStateClasses = {
		    [_inputUnstyledClasses.default.disabled]: disabledState,
		    [_inputUnstyledClasses.default.error]: errorState,
		    [_inputUnstyledClasses.default.focused]: focused,
		    [_inputUnstyledClasses.default.formControl]: Boolean(formControlContext),
		    [_inputUnstyledClasses.default.multiline]: multiline,
		    [_inputUnstyledClasses.default.adornedStart]: Boolean(startAdornment),
		    [_inputUnstyledClasses.default.adornedEnd]: Boolean(endAdornment)
		  };
		  const inputStateClasses = {
		    [_inputUnstyledClasses.default.disabled]: disabledState,
		    [_inputUnstyledClasses.default.multiline]: multiline
		  };
		  const propsToForward = {
		    'aria-describedby': ariaDescribedby,
		    'aria-label': ariaLabel,
		    'aria-labelledby': ariaLabelledby,
		    autoComplete,
		    autoFocus,
		    id,
		    onKeyDown,
		    onKeyUp,
		    name,
		    placeholder,
		    readOnly,
		    type
		  };
		  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';
		  const rootProps = (0, _utils.useSlotProps)({
		    elementType: Root,
		    getSlotProps: getRootProps,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: {
		      ref: forwardedRef
		    },
		    ownerState,
		    className: [_inputUnstyledClasses.default.root, rootStateClasses, className]
		  });
		  const Input = multiline ? (_slots$textarea = slots.textarea) != null ? _slots$textarea : 'textarea' : (_slots$input = slots.input) != null ? _slots$input : 'input';
		  const inputProps = (0, _utils.useSlotProps)({
		    elementType: Input,
		    getSlotProps: otherHandlers => getInputProps((0, _extends2.default)({}, otherHandlers, propsToForward)),
		    externalSlotProps: slotProps.input,
		    additionalProps: (0, _extends2.default)({
		      rows: multiline ? rows : undefined
		    }, multiline && !(0, _isHostComponent.default)(Input) && {
		      minRows: rows || minRows,
		      maxRows: rows || maxRows
		    }),
		    ownerState,
		    className: [_inputUnstyledClasses.default.input, inputStateClasses]
		  });
		  {
		    if (multiline) {
		      if (rows) {
		        if (minRows || maxRows) {
		          console.warn('MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.');
		        }
		      }
		    }
		  }
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Root, (0, _extends2.default)({}, rootProps, {
		    children: [startAdornment, /*#__PURE__*/(0, _jsxRuntime.jsx)(Input, (0, _extends2.default)({}, inputProps)), endAdornment]
		  }));
		});
		InputUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * @ignore
		   */
		  'aria-describedby': _propTypes.default.string,
		  /**
		   * @ignore
		   */
		  'aria-label': _propTypes.default.string,
		  /**
		   * @ignore
		   */
		  'aria-labelledby': _propTypes.default.string,
		  /**
		   * This prop helps users to fill forms faster, especially on mobile devices.
		   * The name can be confusing, as it's more like an autofill.
		   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
		   */
		  autoComplete: _propTypes.default.string,
		  /**
		   * If `true`, the `input` element is focused during the first mount.
		   */
		  autoFocus: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * Class name applied to the root element.
		   */
		  className: _propTypes.default.string,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The default value. Use when the component is not controlled.
		   */
		  defaultValue: _propTypes.default.any,
		  /**
		   * If `true`, the component is disabled.
		   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * Trailing adornment for this input.
		   */
		  endAdornment: _propTypes.default.node,
		  /**
		   * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `Mui-error` class on the root element.
		   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
		   */
		  error: _propTypes.default.bool,
		  /**
		   * The id of the `input` element.
		   */
		  id: _propTypes.default.string,
		  /**
		   * Maximum number of rows to display when multiline option is set to true.
		   */
		  maxRows: _propTypes.default.number,
		  /**
		   * Minimum number of rows to display when multiline option is set to true.
		   */
		  minRows: _propTypes.default.number,
		  /**
		   * If `true`, a `textarea` element is rendered.
		   * @default false
		   */
		  multiline: _propTypes.default.bool,
		  /**
		   * Name attribute of the `input` element.
		   */
		  name: _propTypes.default.string,
		  /**
		   * @ignore
		   */
		  onBlur: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onChange: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onClick: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onFocus: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onKeyDown: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onKeyUp: _propTypes.default.func,
		  /**
		   * The short hint displayed in the `input` before the user enters a value.
		   */
		  placeholder: _propTypes.default.string,
		  /**
		   * It prevents the user from changing the value of the field
		   * (not from interacting with the field).
		   */
		  readOnly: _propTypes.default.bool,
		  /**
		   * If `true`, the `input` element is required.
		   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
		   */
		  required: _propTypes.default.bool,
		  /**
		   * Number of rows to display when multiline option is set to true.
		   */
		  rows: _propTypes.default.number,
		  /**
		   * The props used for each slot inside the Input.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the InputBase.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    input: _propTypes.default.elementType,
		    root: _propTypes.default.elementType,
		    textarea: _propTypes.default.elementType
		  }),
		  /**
		   * Leading adornment for this input.
		   */
		  startAdornment: _propTypes.default.node,
		  /**
		   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
		   * @default 'text'
		   */
		  type: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOf(['button', 'checkbox', 'color', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week']),
		  /**
		   * The value of the `input` element, required for a controlled component.
		   */
		  value: _propTypes.default.any
		} ;
		var _default = InputUnstyled$1;
		InputUnstyled.default = _default;
		return InputUnstyled;
	}

	var InputUnstyled_types = {};

	var hasRequiredInputUnstyled_types;

	function requireInputUnstyled_types () {
		if (hasRequiredInputUnstyled_types) return InputUnstyled_types;
		hasRequiredInputUnstyled_types = 1;

		Object.defineProperty(InputUnstyled_types, "__esModule", {
		  value: true
		});
		return InputUnstyled_types;
	}

	var useInput_types = {};

	var hasRequiredUseInput_types;

	function requireUseInput_types () {
		if (hasRequiredUseInput_types) return useInput_types;
		hasRequiredUseInput_types = 1;

		Object.defineProperty(useInput_types, "__esModule", {
		  value: true
		});
		return useInput_types;
	}

	var hasRequiredInputUnstyled;

	function requireInputUnstyled () {
		if (hasRequiredInputUnstyled) return InputUnstyled$1;
		hasRequiredInputUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  useInput: true,
			  inputUnstyledClasses: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _InputUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "inputUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _inputUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "useInput", {
			  enumerable: true,
			  get: function () {
			    return _useInput.default;
			  }
			});
			var _InputUnstyled = _interopRequireDefault(requireInputUnstyled$1());
			var _InputUnstyled2 = requireInputUnstyled_types();
			Object.keys(_InputUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _InputUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _InputUnstyled2[key];
			    }
			  });
			});
			var _useInput = _interopRequireDefault(requireUseInput());
			var _useInput2 = requireUseInput_types();
			Object.keys(_useInput2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _useInput2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _useInput2[key];
			    }
			  });
			});
			var _inputUnstyledClasses = _interopRequireWildcard(requireInputUnstyledClasses());
			Object.keys(_inputUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _inputUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _inputUnstyledClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (InputUnstyled$1));
		return InputUnstyled$1;
	}

	var ListboxUnstyled = {};

	var useListbox = {};

	var useListbox_types = {};

	var hasRequiredUseListbox_types;

	function requireUseListbox_types () {
		if (hasRequiredUseListbox_types) return useListbox_types;
		hasRequiredUseListbox_types = 1;

		Object.defineProperty(useListbox_types, "__esModule", {
		  value: true
		});
		useListbox_types.ActionTypes = void 0;
		var ActionTypes; // split declaration and export due to https://github.com/codesandbox/codesandbox-client/issues/6435
		useListbox_types.ActionTypes = ActionTypes;
		(function (ActionTypes) {
		  ActionTypes["blur"] = "blur";
		  ActionTypes["focus"] = "focus";
		  ActionTypes["keyDown"] = "keyDown";
		  ActionTypes["optionClick"] = "optionClick";
		  ActionTypes["optionHover"] = "optionHover";
		  ActionTypes["optionsChange"] = "optionsChange";
		  ActionTypes["setValue"] = "setValue";
		  ActionTypes["setHighlight"] = "setHighlight";
		  ActionTypes["textNavigation"] = "textNagivation";
		})(ActionTypes || (useListbox_types.ActionTypes = ActionTypes = {}));
		return useListbox_types;
	}

	var defaultListboxReducer = {};

	var hasRequiredDefaultListboxReducer;

	function requireDefaultListboxReducer () {
		if (hasRequiredDefaultListboxReducer) return defaultListboxReducer;
		hasRequiredDefaultListboxReducer = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(defaultListboxReducer, "__esModule", {
		  value: true
		});
		defaultListboxReducer.default = defaultListboxReducer$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var _useListbox = requireUseListbox_types();
		const pageSize = 5;
		function findValidOptionToHighlight(index, lookupDirection, options, focusDisabled, isOptionDisabled, wrapAround) {
		  if (options.length === 0 || options.every((o, i) => isOptionDisabled(o, i))) {
		    return -1;
		  }
		  let nextFocus = index;
		  for (;;) {
		    // No valid options found
		    if (!wrapAround && lookupDirection === 'next' && nextFocus === options.length || !wrapAround && lookupDirection === 'previous' && nextFocus === -1) {
		      return -1;
		    }
		    const nextFocusDisabled = focusDisabled ? false : isOptionDisabled(options[nextFocus], nextFocus);
		    if (nextFocusDisabled) {
		      nextFocus += lookupDirection === 'next' ? 1 : -1;
		      if (wrapAround) {
		        nextFocus = (nextFocus + options.length) % options.length;
		      }
		    } else {
		      return nextFocus;
		    }
		  }
		}
		function getNewHighlightedOption(options, previouslyHighlightedOption, diff, lookupDirection, highlightDisabled, isOptionDisabled, wrapAround, optionComparer) {
		  var _options$nextIndex;
		  const maxIndex = options.length - 1;
		  const defaultHighlightedIndex = -1;
		  let nextIndexCandidate;
		  const previouslyHighlightedIndex = previouslyHighlightedOption == null ? -1 : options.findIndex(option => optionComparer(option, previouslyHighlightedOption));
		  if (diff === 'reset') {
		    var _options$defaultHighl;
		    return defaultHighlightedIndex === -1 ? null : (_options$defaultHighl = options[defaultHighlightedIndex]) != null ? _options$defaultHighl : null;
		  }
		  if (diff === 'start') {
		    nextIndexCandidate = 0;
		  } else if (diff === 'end') {
		    nextIndexCandidate = maxIndex;
		  } else {
		    const newIndex = previouslyHighlightedIndex + diff;
		    if (newIndex < 0) {
		      if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(diff) > 1) {
		        nextIndexCandidate = 0;
		      } else {
		        nextIndexCandidate = maxIndex;
		      }
		    } else if (newIndex > maxIndex) {
		      if (!wrapAround || Math.abs(diff) > 1) {
		        nextIndexCandidate = maxIndex;
		      } else {
		        nextIndexCandidate = 0;
		      }
		    } else {
		      nextIndexCandidate = newIndex;
		    }
		  }
		  const nextIndex = findValidOptionToHighlight(nextIndexCandidate, lookupDirection, options, highlightDisabled, isOptionDisabled, wrapAround);
		  return (_options$nextIndex = options[nextIndex]) != null ? _options$nextIndex : null;
		}
		function handleOptionSelection(option, state, props) {
		  const {
		    multiple,
		    optionComparer = (o, v) => o === v,
		    isOptionDisabled = () => false
		  } = props;
		  const {
		    selectedValue
		  } = state;
		  const optionIndex = props.options.findIndex(o => props.optionComparer(option, o));
		  if (isOptionDisabled(option, optionIndex)) {
		    return state;
		  }
		  if (multiple) {
		    var _ref, _ref2;
		    const selectedValues = (_ref = selectedValue) != null ? _ref : [];
		    // if the option is already selected, remove it from the selection, otherwise add it
		    const newSelectedValues = selectedValues.some(sv => optionComparer(sv, option)) ? selectedValue.filter(v => !optionComparer(v, option)) : [...((_ref2 = selectedValue) != null ? _ref2 : []), option];
		    return {
		      selectedValue: newSelectedValues,
		      highlightedValue: option
		    };
		  }
		  if (selectedValue != null && optionComparer(option, selectedValue)) {
		    return state;
		  }
		  return {
		    selectedValue: option,
		    highlightedValue: option
		  };
		}
		function handleKeyDown(event, state, props) {
		  const {
		    options,
		    isOptionDisabled,
		    disableListWrap,
		    disabledItemsFocusable,
		    optionComparer
		  } = props;
		  const moveHighlight = (diff, direction, wrapAround) => {
		    return getNewHighlightedOption(options, state.highlightedValue, diff, direction, disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, wrapAround, optionComparer);
		  };
		  switch (event.key) {
		    case 'Home':
		      return (0, _extends2.default)({}, state, {
		        highlightedValue: moveHighlight('start', 'next', false)
		      });
		    case 'End':
		      return (0, _extends2.default)({}, state, {
		        highlightedValue: moveHighlight('end', 'previous', false)
		      });
		    case 'PageUp':
		      return (0, _extends2.default)({}, state, {
		        highlightedValue: moveHighlight(-pageSize, 'previous', false)
		      });
		    case 'PageDown':
		      return (0, _extends2.default)({}, state, {
		        highlightedValue: moveHighlight(pageSize, 'next', false)
		      });
		    case 'ArrowUp':
		      // TODO: extend current selection with Shift modifier
		      return (0, _extends2.default)({}, state, {
		        highlightedValue: moveHighlight(-1, 'previous', !(disableListWrap != null ? disableListWrap : false))
		      });
		    case 'ArrowDown':
		      // TODO: extend current selection with Shift modifier
		      return (0, _extends2.default)({}, state, {
		        highlightedValue: moveHighlight(1, 'next', !(disableListWrap != null ? disableListWrap : false))
		      });
		    case 'Enter':
		    case ' ':
		      if (state.highlightedValue === null) {
		        return state;
		      }
		      return handleOptionSelection(state.highlightedValue, state, props);
		  }
		  return state;
		}
		function handleBlur(state) {
		  return (0, _extends2.default)({}, state, {
		    highlightedValue: null
		  });
		}
		const textCriteriaMatches = (nextFocus, searchString, stringifyOption) => {
		  var _stringifyOption;
		  const text = (_stringifyOption = stringifyOption(nextFocus)) == null ? void 0 : _stringifyOption.trim().toLowerCase();
		  if (!text || text.length === 0) {
		    // Make option not navigable if stringification fails or results in empty string.
		    return false;
		  }
		  return text.indexOf(searchString) === 0;
		};
		function handleTextNavigation(state, searchString, props) {
		  const {
		    options,
		    isOptionDisabled,
		    disableListWrap,
		    disabledItemsFocusable,
		    optionComparer,
		    optionStringifier
		  } = props;
		  const moveHighlight = previouslyHighlightedOption => {
		    return getNewHighlightedOption(options, previouslyHighlightedOption, 1, 'next', disabledItemsFocusable != null ? disabledItemsFocusable : false, isOptionDisabled != null ? isOptionDisabled : () => false, !(disableListWrap != null ? disableListWrap : false), optionComparer);
		  };
		  const startWithCurrentOption = searchString.length > 1;
		  let nextOption = startWithCurrentOption ? state.highlightedValue : moveHighlight(state.highlightedValue);

		  // use `for` instead of `while` prevent infinite loop
		  for (let index = 0; index < options.length; index += 1) {
		    // Return un-mutated state if looped back to the currently highlighted value
		    if (!nextOption || !startWithCurrentOption && state.highlightedValue === nextOption) {
		      return state;
		    }
		    if (textCriteriaMatches(nextOption, searchString, optionStringifier) && (!isOptionDisabled(nextOption, options.indexOf(nextOption)) || disabledItemsFocusable)) {
		      // The nextOption is the element to be highlighted
		      return (0, _extends2.default)({}, state, {
		        highlightedValue: nextOption
		      });
		    }
		    // Move to the next element.
		    nextOption = moveHighlight(nextOption);
		  }

		  // No option match text search criteria
		  return state;
		}
		function handleOptionsChange(options, previousOptions, state, props) {
		  var _options$find, _options$find2;
		  const {
		    multiple,
		    optionComparer
		  } = props;
		  const newHighlightedOption = state.highlightedValue == null ? null : (_options$find = options.find(option => optionComparer(option, state.highlightedValue))) != null ? _options$find : null;
		  if (multiple) {
		    var _ref3;
		    // exclude selected values that are no longer in the options
		    const selectedValues = (_ref3 = state.selectedValue) != null ? _ref3 : [];
		    const newSelectedValues = selectedValues.filter(selectedValue => options.some(option => optionComparer(option, selectedValue)));
		    return {
		      highlightedValue: newHighlightedOption,
		      selectedValue: newSelectedValues
		    };
		  }
		  const newSelectedValue = (_options$find2 = options.find(option => optionComparer(option, state.selectedValue))) != null ? _options$find2 : null;
		  return {
		    highlightedValue: newHighlightedOption,
		    selectedValue: newSelectedValue
		  };
		}
		function defaultListboxReducer$1(state, action) {
		  const {
		    type
		  } = action;
		  switch (type) {
		    case _useListbox.ActionTypes.keyDown:
		      return handleKeyDown(action.event, state, action.props);
		    case _useListbox.ActionTypes.optionClick:
		      return handleOptionSelection(action.option, state, action.props);
		    case _useListbox.ActionTypes.blur:
		      return handleBlur(state);
		    case _useListbox.ActionTypes.setValue:
		      return (0, _extends2.default)({}, state, {
		        selectedValue: action.value
		      });
		    case _useListbox.ActionTypes.setHighlight:
		      return (0, _extends2.default)({}, state, {
		        highlightedValue: action.highlight
		      });
		    case _useListbox.ActionTypes.textNavigation:
		      return handleTextNavigation(state, action.searchString, action.props);
		    case _useListbox.ActionTypes.optionsChange:
		      return handleOptionsChange(action.options, action.previousOptions, state, action.props);
		    default:
		      return state;
		  }
		}
		return defaultListboxReducer;
	}

	var useControllableReducer = {};

	var hasRequiredUseControllableReducer;

	function requireUseControllableReducer () {
		if (hasRequiredUseControllableReducer) return useControllableReducer;
		hasRequiredUseControllableReducer = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useControllableReducer, "__esModule", {
		  value: true
		});
		useControllableReducer.default = useControllableReducer$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _areArraysEqual = _interopRequireDefault(requireAreArraysEqual());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * Gets the current state. If the selectedValue is controlled,
		 * the `value` prop is the source of truth instead of the internal state.
		 */
		function getControlledState(internalState, props) {
		  if (props.value !== undefined) {
		    return (0, _extends2.default)({}, internalState, {
		      selectedValue: props.value
		    });
		  }
		  return internalState;
		}
		function areOptionsEqual(option1, option2, optionComparer) {
		  if (option1 === option2) {
		    return true;
		  }
		  if (option1 === null || option2 === null) {
		    return false;
		  }
		  return optionComparer(option1, option2);
		}

		/**
		 * Triggers change event handlers when reducer returns changed state.
		 */
		function useStateChangeDetection(nextState, internalPreviousState, propsRef, lastActionRef) {
		  React.useEffect(() => {
		    if (!propsRef.current || lastActionRef.current === null) {
		      // Detect changes only if an action has been dispatched.
		      return;
		    }
		    const previousState = getControlledState(internalPreviousState, propsRef.current);
		    const {
		      multiple,
		      optionComparer
		    } = propsRef.current;
		    if (multiple) {
		      var _previousState$select;
		      const previousSelectedValues = (_previousState$select = previousState == null ? void 0 : previousState.selectedValue) != null ? _previousState$select : [];
		      const nextSelectedValues = nextState.selectedValue;
		      const onChange = propsRef.current.onChange;
		      if (!(0, _areArraysEqual.default)(nextSelectedValues, previousSelectedValues, optionComparer)) {
		        onChange == null ? void 0 : onChange(lastActionRef.current.event, nextSelectedValues);
		      }
		    } else {
		      const previousSelectedValue = previousState == null ? void 0 : previousState.selectedValue;
		      const nextSelectedValue = nextState.selectedValue;
		      const onChange = propsRef.current.onChange;
		      if (!areOptionsEqual(nextSelectedValue, previousSelectedValue, optionComparer)) {
		        onChange == null ? void 0 : onChange(lastActionRef.current.event, nextSelectedValue);
		      }
		    }

		    // Fires the highlightChange event when reducer returns changed `highlightedValue`.
		    if (!areOptionsEqual(internalPreviousState.highlightedValue, nextState.highlightedValue, propsRef.current.optionComparer)) {
		      var _propsRef$current, _propsRef$current$onH;
		      (_propsRef$current = propsRef.current) == null ? void 0 : (_propsRef$current$onH = _propsRef$current.onHighlightChange) == null ? void 0 : _propsRef$current$onH.call(_propsRef$current, lastActionRef.current.event, nextState.highlightedValue);
		    }
		    lastActionRef.current = null;
		  }, [nextState.selectedValue, nextState.highlightedValue, internalPreviousState, propsRef, lastActionRef]);
		}
		function useControllableReducer$1(internalReducer, externalReducer, props) {
		  var _ref;
		  const {
		    value,
		    defaultValue
		  } = props;
		  const propsRef = React.useRef(props);
		  propsRef.current = props;
		  const actionRef = React.useRef(null);
		  const initialSelectedValue = (_ref = value === undefined ? defaultValue : value) != null ? _ref : props.multiple ? [] : null;
		  const initalState = {
		    highlightedValue: null,
		    selectedValue: initialSelectedValue
		  };
		  const combinedReducer = React.useCallback((state, action) => {
		    actionRef.current = action;
		    if (externalReducer) {
		      return externalReducer(getControlledState(state, propsRef.current), action);
		    }
		    return internalReducer(getControlledState(state, propsRef.current), action);
		  }, [externalReducer, internalReducer, propsRef]);
		  const [nextState, dispatch] = React.useReducer(combinedReducer, initalState);
		  const previousState = React.useRef(initalState);
		  React.useEffect(() => {
		    previousState.current = nextState;
		  }, [previousState, nextState]);
		  useStateChangeDetection(nextState, previousState.current, propsRef, actionRef);
		  return [getControlledState(nextState, propsRef.current), dispatch];
		}
		return useControllableReducer;
	}

	var hasRequiredUseListbox;

	function requireUseListbox () {
		if (hasRequiredUseListbox) return useListbox;
		hasRequiredUseListbox = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useListbox, "__esModule", {
		  value: true
		});
		useListbox.default = useListbox$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$4();
		var _useListbox = requireUseListbox_types();
		var _defaultListboxReducer = _interopRequireDefault(requireDefaultListboxReducer());
		var _useControllableReducer = _interopRequireDefault(requireUseControllableReducer());
		var _areArraysEqual = _interopRequireDefault(requireAreArraysEqual());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const TEXT_NAVIGATION_RESET_TIMEOUT = 500; // milliseconds

		const defaultOptionComparer = (optionA, optionB) => optionA === optionB;
		const defaultIsOptionDisabled = () => false;
		const defaultOptionStringifier = option => typeof option === 'string' ? option : String(option);
		function useListbox$1(props) {
		  var _props$optionIdGenera, _options$highlightedI;
		  const {
		    disabledItemsFocusable = false,
		    disableListWrap = false,
		    focusManagement = 'activeDescendant',
		    id: idProp,
		    isOptionDisabled = defaultIsOptionDisabled,
		    listboxRef: externalListboxRef,
		    multiple = false,
		    optionComparer = defaultOptionComparer,
		    optionStringifier = defaultOptionStringifier,
		    options,
		    stateReducer: externalReducer
		  } = props;
		  const id = (0, _utils.unstable_useId)(idProp);
		  function defaultIdGenerator(_, index) {
		    return `${id}-option-${index}`;
		  }
		  const optionIdGenerator = (_props$optionIdGenera = props.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;
		  const propsWithDefaults = (0, _extends2.default)({}, props, {
		    disabledItemsFocusable,
		    disableListWrap,
		    focusManagement,
		    isOptionDisabled,
		    multiple,
		    optionComparer,
		    optionStringifier
		  });
		  const listboxRef = React.useRef(null);
		  const handleRef = (0, _utils.unstable_useForkRef)(externalListboxRef, listboxRef);
		  const textCriteriaRef = React.useRef({
		    searchString: '',
		    lastTime: null
		  });
		  const [{
		    highlightedValue,
		    selectedValue
		  }, dispatch] = (0, _useControllableReducer.default)(_defaultListboxReducer.default, externalReducer, propsWithDefaults);
		  const highlightedIndex = React.useMemo(() => {
		    return highlightedValue == null ? -1 : options.findIndex(option => optionComparer(option, highlightedValue));
		  }, [highlightedValue, options, optionComparer]);
		  const previousOptions = React.useRef([]);
		  React.useEffect(() => {
		    if ((0, _areArraysEqual.default)(previousOptions.current, options, optionComparer)) {
		      return;
		    }
		    dispatch({
		      type: _useListbox.ActionTypes.optionsChange,
		      event: null,
		      options,
		      previousOptions: previousOptions.current,
		      props: propsWithDefaults
		    });
		    previousOptions.current = options;

		    // No need to re-run this effect if props change
		    // eslint-disable-next-line react-hooks/exhaustive-deps
		  }, [options, optionComparer, dispatch]);
		  const setSelectedValue = React.useCallback(option => {
		    dispatch({
		      type: _useListbox.ActionTypes.setValue,
		      event: null,
		      value: option
		    });
		  }, [dispatch]);
		  const setHighlightedValue = React.useCallback(option => {
		    dispatch({
		      type: _useListbox.ActionTypes.setHighlight,
		      event: null,
		      highlight: option
		    });
		  }, [dispatch]);
		  const createHandleOptionClick = (option, other) => event => {
		    var _other$onClick;
		    (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);
		    if (event.defaultPrevented) {
		      return;
		    }
		    event.preventDefault();
		    dispatch({
		      type: _useListbox.ActionTypes.optionClick,
		      option,
		      event,
		      props: propsWithDefaults
		    });
		  };
		  const createHandleOptionPointerOver = (option, other) => event => {
		    var _other$onMouseOver;
		    (_other$onMouseOver = other.onMouseOver) == null ? void 0 : _other$onMouseOver.call(other, event);
		    if (event.defaultPrevented) {
		      return;
		    }
		    dispatch({
		      type: _useListbox.ActionTypes.optionHover,
		      option,
		      event,
		      props: propsWithDefaults
		    });
		  };
		  const createHandleKeyDown = other => event => {
		    var _other$onKeyDown;
		    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);
		    if (event.defaultPrevented) {
		      return;
		    }
		    const keysToPreventDefault = ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'];
		    if (focusManagement === 'activeDescendant') {
		      // When the child element is focused using the activeDescendant attribute,
		      // the listbox handles keyboard events on its behalf.
		      // We have to `preventDefault()` is this case to prevent the browser from
		      // scrolling the view when space is pressed or submitting forms when enter is pressed.
		      keysToPreventDefault.push(' ', 'Enter');
		    }
		    if (keysToPreventDefault.includes(event.key)) {
		      event.preventDefault();
		    }
		    dispatch({
		      type: _useListbox.ActionTypes.keyDown,
		      event,
		      props: propsWithDefaults
		    });

		    // Handle text navigation
		    if (event.key.length === 1 && event.key !== ' ') {
		      const textCriteria = textCriteriaRef.current;
		      const lowerKey = event.key.toLowerCase();
		      const currentTime = performance.now();
		      if (textCriteria.searchString.length > 0 && textCriteria.lastTime && currentTime - textCriteria.lastTime > TEXT_NAVIGATION_RESET_TIMEOUT) {
		        textCriteria.searchString = lowerKey;
		      } else if (textCriteria.searchString.length !== 1 || lowerKey !== textCriteria.searchString) {
		        // If there is just one character in the buffer and the key is the same, do not append
		        textCriteria.searchString += lowerKey;
		      }
		      textCriteria.lastTime = currentTime;
		      dispatch({
		        type: _useListbox.ActionTypes.textNavigation,
		        event,
		        searchString: textCriteria.searchString,
		        props: propsWithDefaults
		      });
		    }
		  };
		  const createHandleBlur = other => event => {
		    var _other$onBlur, _listboxRef$current;
		    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);
		    if (event.defaultPrevented) {
		      return;
		    }
		    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) {
		      // focus is within the listbox
		      return;
		    }
		    dispatch({
		      type: _useListbox.ActionTypes.blur,
		      event,
		      props: propsWithDefaults
		    });
		  };
		  const getRootProps = (otherHandlers = {}) => {
		    return (0, _extends2.default)({}, otherHandlers, {
		      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? optionIdGenerator(highlightedValue, highlightedIndex) : undefined,
		      id,
		      onBlur: createHandleBlur(otherHandlers),
		      onKeyDown: createHandleKeyDown(otherHandlers),
		      role: 'listbox',
		      tabIndex: focusManagement === 'DOM' ? -1 : 0,
		      ref: handleRef
		    });
		  };
		  const getOptionState = option => {
		    let selected;
		    const index = options.findIndex(opt => optionComparer(opt, option));
		    if (multiple) {
		      var _ref;
		      selected = ((_ref = selectedValue) != null ? _ref : []).some(value => value != null && optionComparer(option, value));
		    } else {
		      selected = optionComparer(option, selectedValue);
		    }
		    const disabled = isOptionDisabled(option, index);
		    return {
		      selected,
		      disabled,
		      highlighted: highlightedIndex === index
		    };
		  };
		  const getOptionTabIndex = optionState => {
		    if (focusManagement === 'activeDescendant') {
		      return undefined;
		    }
		    if (!optionState.highlighted) {
		      return -1;
		    }
		    if (optionState.disabled && !disabledItemsFocusable) {
		      return -1;
		    }
		    return 0;
		  };
		  const getOptionProps = (option, otherHandlers = {}) => {
		    const optionState = getOptionState(option);
		    const index = options.findIndex(opt => optionComparer(opt, option));
		    return (0, _extends2.default)({}, otherHandlers, {
		      'aria-disabled': optionState.disabled || undefined,
		      'aria-selected': optionState.selected,
		      id: optionIdGenerator(option, index),
		      onClick: createHandleOptionClick(option, otherHandlers),
		      onPointerOver: createHandleOptionPointerOver(option, otherHandlers),
		      role: 'option',
		      tabIndex: getOptionTabIndex(optionState)
		    });
		  };
		  React.useDebugValue({
		    highlightedOption: options[highlightedIndex],
		    selectedOption: selectedValue
		  });
		  return {
		    getRootProps,
		    getOptionProps,
		    getOptionState,
		    highlightedOption: (_options$highlightedI = options[highlightedIndex]) != null ? _options$highlightedI : null,
		    selectedOption: selectedValue,
		    setSelectedValue,
		    setHighlightedValue
		  };
		}
		return useListbox;
	}

	var hasRequiredListboxUnstyled;

	function requireListboxUnstyled () {
		if (hasRequiredListboxUnstyled) return ListboxUnstyled;
		hasRequiredListboxUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  useListbox: true,
			  defaultListboxReducer: true
			};
			Object.defineProperty(exports, "defaultListboxReducer", {
			  enumerable: true,
			  get: function () {
			    return _defaultListboxReducer.default;
			  }
			});
			Object.defineProperty(exports, "useListbox", {
			  enumerable: true,
			  get: function () {
			    return _useListbox.default;
			  }
			});
			var _useListbox = _interopRequireDefault(requireUseListbox());
			var _defaultListboxReducer = _interopRequireDefault(requireDefaultListboxReducer());
			var _useListbox2 = requireUseListbox_types();
			Object.keys(_useListbox2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _useListbox2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _useListbox2[key];
			    }
			  });
			});
	} (ListboxUnstyled));
		return ListboxUnstyled;
	}

	var MenuUnstyled$1 = {};

	var MenuUnstyled = {};

	var MenuUnstyledContext = {};

	var hasRequiredMenuUnstyledContext;

	function requireMenuUnstyledContext () {
		if (hasRequiredMenuUnstyledContext) return MenuUnstyledContext;
		hasRequiredMenuUnstyledContext = 1;

		Object.defineProperty(MenuUnstyledContext, "__esModule", {
		  value: true
		});
		MenuUnstyledContext.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const MenuUnstyledContext$1 = /*#__PURE__*/React.createContext(null);
		MenuUnstyledContext$1.displayName = 'MenuUnstyledContext';
		var _default = MenuUnstyledContext$1;
		MenuUnstyledContext.default = _default;
		return MenuUnstyledContext;
	}

	var menuUnstyledClasses = {};

	var hasRequiredMenuUnstyledClasses;

	function requireMenuUnstyledClasses () {
		if (hasRequiredMenuUnstyledClasses) return menuUnstyledClasses;
		hasRequiredMenuUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(menuUnstyledClasses, "__esModule", {
		  value: true
		});
		menuUnstyledClasses.default = void 0;
		menuUnstyledClasses.getMenuUnstyledUtilityClass = getMenuUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getMenuUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiMenu', slot);
		}
		const menuUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiMenu', ['root', 'listbox', 'expanded']);
		var _default = menuUnstyledClasses$1;
		menuUnstyledClasses.default = _default;
		return menuUnstyledClasses;
	}

	var useMenu = {};

	var hasRequiredUseMenu;

	function requireUseMenu () {
		if (hasRequiredUseMenu) return useMenu;
		hasRequiredUseMenu = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useMenu, "__esModule", {
		  value: true
		});
		useMenu.default = useMenu$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$4();
		var _ListboxUnstyled = requireListboxUnstyled();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function stateReducer(state, action) {
		  if (action.type === _ListboxUnstyled.ActionTypes.blur || action.type === _ListboxUnstyled.ActionTypes.optionHover || action.type === _ListboxUnstyled.ActionTypes.setValue) {
		    return state;
		  }
		  const newState = (0, _ListboxUnstyled.defaultListboxReducer)(state, action);
		  if (action.type !== _ListboxUnstyled.ActionTypes.setHighlight && newState.highlightedValue === null && action.props.options.length > 0) {
		    return (0, _extends2.default)({}, newState, {
		      highlightedValue: action.props.options[0]
		    });
		  }
		  return newState;
		}
		function useMenu$1(parameters = {}) {
		  const {
		    listboxRef: listboxRefProp,
		    open = false,
		    onClose,
		    listboxId
		  } = parameters;
		  const [menuItems, setMenuItems] = React.useState({});
		  const listboxRef = React.useRef(null);
		  const handleRef = (0, _utils.unstable_useForkRef)(listboxRef, listboxRefProp);
		  const registerItem = React.useCallback((id, metadata) => {
		    setMenuItems(previousState => {
		      const newState = (0, _extends2.default)({}, previousState);
		      newState[id] = metadata;
		      return newState;
		    });
		  }, []);
		  const unregisterItem = React.useCallback(id => {
		    setMenuItems(previousState => {
		      const newState = (0, _extends2.default)({}, previousState);
		      delete newState[id];
		      return newState;
		    });
		  }, []);
		  const {
		    getOptionState,
		    getOptionProps,
		    getRootProps,
		    highlightedOption,
		    setHighlightedValue: setListboxHighlight
		  } = (0, _ListboxUnstyled.useListbox)({
		    options: Object.keys(menuItems),
		    optionStringifier: id => {
		      var _menuItems$id$ref$cur;
		      return menuItems[id].label || ((_menuItems$id$ref$cur = menuItems[id].ref.current) == null ? void 0 : _menuItems$id$ref$cur.innerText);
		    },
		    isOptionDisabled: id => {
		      var _menuItems$id;
		      return (menuItems == null ? void 0 : (_menuItems$id = menuItems[id]) == null ? void 0 : _menuItems$id.disabled) || false;
		    },
		    listboxRef: handleRef,
		    focusManagement: 'DOM',
		    id: listboxId,
		    stateReducer,
		    disabledItemsFocusable: true
		  });
		  const highlightFirstItem = React.useCallback(() => {
		    if (Object.keys(menuItems).length > 0) {
		      setListboxHighlight(menuItems[Object.keys(menuItems)[0]].id);
		    }
		  }, [menuItems, setListboxHighlight]);
		  const highlightLastItem = React.useCallback(() => {
		    if (Object.keys(menuItems).length > 0) {
		      setListboxHighlight(menuItems[Object.keys(menuItems)[Object.keys(menuItems).length - 1]].id);
		    }
		  }, [menuItems, setListboxHighlight]);
		  React.useEffect(() => {
		    if (!open) {
		      highlightFirstItem();
		    }
		  }, [open, highlightFirstItem]);
		  const createHandleKeyDown = otherHandlers => e => {
		    var _otherHandlers$onKeyD;
		    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, e);
		    if (e.defaultPrevented) {
		      return;
		    }
		    if (e.key === 'Escape' && open) {
		      onClose == null ? void 0 : onClose();
		    }
		  };
		  const createHandleBlur = otherHandlers => e => {
		    var _otherHandlers$onBlur, _listboxRef$current;
		    (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, e);
		    if (!((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(e.relatedTarget))) {
		      onClose == null ? void 0 : onClose();
		    }
		  };
		  React.useEffect(() => {
		    var _listboxRef$current2;
		    // set focus to the highlighted item (but prevent stealing focus from other elements on the page)
		    if ((_listboxRef$current2 = listboxRef.current) != null && _listboxRef$current2.contains(document.activeElement) && highlightedOption !== null) {
		      var _menuItems$highlighte, _menuItems$highlighte2;
		      menuItems == null ? void 0 : (_menuItems$highlighte = menuItems[highlightedOption]) == null ? void 0 : (_menuItems$highlighte2 = _menuItems$highlighte.ref.current) == null ? void 0 : _menuItems$highlighte2.focus();
		    }
		  }, [highlightedOption, menuItems]);
		  const getListboxProps = (otherHandlers = {}) => {
		    const rootProps = getRootProps((0, _extends2.default)({}, otherHandlers, {
		      onBlur: createHandleBlur(otherHandlers),
		      onKeyDown: createHandleKeyDown(otherHandlers)
		    }));
		    return (0, _extends2.default)({}, otherHandlers, rootProps, {
		      role: 'menu'
		    });
		  };
		  const getItemState = id => {
		    const {
		      disabled,
		      highlighted
		    } = getOptionState(id);
		    return {
		      disabled,
		      highlighted
		    };
		  };
		  React.useDebugValue({
		    menuItems,
		    highlightedOption
		  });
		  return {
		    registerItem,
		    unregisterItem,
		    menuItems,
		    getListboxProps,
		    getItemState,
		    getItemProps: getOptionProps,
		    highlightedOption,
		    highlightFirstItem,
		    highlightLastItem
		  };
		}
		return useMenu;
	}

	var PopperUnstyled$1 = {};

	var PopperUnstyled = {};

	var popper = {};

	/**
	 * @popperjs/core v2.11.6 - MIT License
	 */

	var hasRequiredPopper$2;

	function requirePopper$2 () {
		if (hasRequiredPopper$2) return popper;
		hasRequiredPopper$2 = 1;

		Object.defineProperty(popper, '__esModule', { value: true });

		function getWindow(node) {
		  if (node == null) {
		    return window;
		  }

		  if (node.toString() !== '[object Window]') {
		    var ownerDocument = node.ownerDocument;
		    return ownerDocument ? ownerDocument.defaultView || window : window;
		  }

		  return node;
		}

		function isElement(node) {
		  var OwnElement = getWindow(node).Element;
		  return node instanceof OwnElement || node instanceof Element;
		}

		function isHTMLElement(node) {
		  var OwnElement = getWindow(node).HTMLElement;
		  return node instanceof OwnElement || node instanceof HTMLElement;
		}

		function isShadowRoot(node) {
		  // IE 11 has no ShadowRoot
		  if (typeof ShadowRoot === 'undefined') {
		    return false;
		  }

		  var OwnElement = getWindow(node).ShadowRoot;
		  return node instanceof OwnElement || node instanceof ShadowRoot;
		}

		var max = Math.max;
		var min = Math.min;
		var round = Math.round;

		function getUAString() {
		  var uaData = navigator.userAgentData;

		  if (uaData != null && uaData.brands) {
		    return uaData.brands.map(function (item) {
		      return item.brand + "/" + item.version;
		    }).join(' ');
		  }

		  return navigator.userAgent;
		}

		function isLayoutViewport() {
		  return !/^((?!chrome|android).)*safari/i.test(getUAString());
		}

		function getBoundingClientRect(element, includeScale, isFixedStrategy) {
		  if (includeScale === void 0) {
		    includeScale = false;
		  }

		  if (isFixedStrategy === void 0) {
		    isFixedStrategy = false;
		  }

		  var clientRect = element.getBoundingClientRect();
		  var scaleX = 1;
		  var scaleY = 1;

		  if (includeScale && isHTMLElement(element)) {
		    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
		    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
		  }

		  var _ref = isElement(element) ? getWindow(element) : window,
		      visualViewport = _ref.visualViewport;

		  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
		  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
		  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
		  var width = clientRect.width / scaleX;
		  var height = clientRect.height / scaleY;
		  return {
		    width: width,
		    height: height,
		    top: y,
		    right: x + width,
		    bottom: y + height,
		    left: x,
		    x: x,
		    y: y
		  };
		}

		function getWindowScroll(node) {
		  var win = getWindow(node);
		  var scrollLeft = win.pageXOffset;
		  var scrollTop = win.pageYOffset;
		  return {
		    scrollLeft: scrollLeft,
		    scrollTop: scrollTop
		  };
		}

		function getHTMLElementScroll(element) {
		  return {
		    scrollLeft: element.scrollLeft,
		    scrollTop: element.scrollTop
		  };
		}

		function getNodeScroll(node) {
		  if (node === getWindow(node) || !isHTMLElement(node)) {
		    return getWindowScroll(node);
		  } else {
		    return getHTMLElementScroll(node);
		  }
		}

		function getNodeName(element) {
		  return element ? (element.nodeName || '').toLowerCase() : null;
		}

		function getDocumentElement(element) {
		  // $FlowFixMe[incompatible-return]: assume body is always available
		  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
		  element.document) || window.document).documentElement;
		}

		function getWindowScrollBarX(element) {
		  // If <html> has a CSS width greater than the viewport, then this will be
		  // incorrect for RTL.
		  // Popper 1 is broken in this case and never had a bug report so let's assume
		  // it's not an issue. I don't think anyone ever specifies width on <html>
		  // anyway.
		  // Browsers where the left scrollbar doesn't cause an issue report `0` for
		  // this (e.g. Edge 2019, IE11, Safari)
		  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
		}

		function getComputedStyle(element) {
		  return getWindow(element).getComputedStyle(element);
		}

		function isScrollParent(element) {
		  // Firefox wants us to check `-x` and `-y` variations as well
		  var _getComputedStyle = getComputedStyle(element),
		      overflow = _getComputedStyle.overflow,
		      overflowX = _getComputedStyle.overflowX,
		      overflowY = _getComputedStyle.overflowY;

		  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
		}

		function isElementScaled(element) {
		  var rect = element.getBoundingClientRect();
		  var scaleX = round(rect.width) / element.offsetWidth || 1;
		  var scaleY = round(rect.height) / element.offsetHeight || 1;
		  return scaleX !== 1 || scaleY !== 1;
		} // Returns the composite rect of an element relative to its offsetParent.
		// Composite means it takes into account transforms as well as layout.


		function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
		  if (isFixed === void 0) {
		    isFixed = false;
		  }

		  var isOffsetParentAnElement = isHTMLElement(offsetParent);
		  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
		  var documentElement = getDocumentElement(offsetParent);
		  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
		  var scroll = {
		    scrollLeft: 0,
		    scrollTop: 0
		  };
		  var offsets = {
		    x: 0,
		    y: 0
		  };

		  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
		    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
		    isScrollParent(documentElement)) {
		      scroll = getNodeScroll(offsetParent);
		    }

		    if (isHTMLElement(offsetParent)) {
		      offsets = getBoundingClientRect(offsetParent, true);
		      offsets.x += offsetParent.clientLeft;
		      offsets.y += offsetParent.clientTop;
		    } else if (documentElement) {
		      offsets.x = getWindowScrollBarX(documentElement);
		    }
		  }

		  return {
		    x: rect.left + scroll.scrollLeft - offsets.x,
		    y: rect.top + scroll.scrollTop - offsets.y,
		    width: rect.width,
		    height: rect.height
		  };
		}

		// means it doesn't take into account transforms.

		function getLayoutRect(element) {
		  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
		  // Fixes https://github.com/popperjs/popper-core/issues/1223

		  var width = element.offsetWidth;
		  var height = element.offsetHeight;

		  if (Math.abs(clientRect.width - width) <= 1) {
		    width = clientRect.width;
		  }

		  if (Math.abs(clientRect.height - height) <= 1) {
		    height = clientRect.height;
		  }

		  return {
		    x: element.offsetLeft,
		    y: element.offsetTop,
		    width: width,
		    height: height
		  };
		}

		function getParentNode(element) {
		  if (getNodeName(element) === 'html') {
		    return element;
		  }

		  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
		    // $FlowFixMe[incompatible-return]
		    // $FlowFixMe[prop-missing]
		    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
		    element.parentNode || ( // DOM Element detected
		    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
		    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
		    getDocumentElement(element) // fallback

		  );
		}

		function getScrollParent(node) {
		  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
		    // $FlowFixMe[incompatible-return]: assume body is always available
		    return node.ownerDocument.body;
		  }

		  if (isHTMLElement(node) && isScrollParent(node)) {
		    return node;
		  }

		  return getScrollParent(getParentNode(node));
		}

		/*
		given a DOM element, return the list of all scroll parents, up the list of ancesors
		until we get to the top window object. This list is what we attach scroll listeners
		to, because if any of these parent elements scroll, we'll need to re-calculate the
		reference element's position.
		*/

		function listScrollParents(element, list) {
		  var _element$ownerDocumen;

		  if (list === void 0) {
		    list = [];
		  }

		  var scrollParent = getScrollParent(element);
		  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
		  var win = getWindow(scrollParent);
		  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
		  var updatedList = list.concat(target);
		  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
		  updatedList.concat(listScrollParents(getParentNode(target)));
		}

		function isTableElement(element) {
		  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
		}

		function getTrueOffsetParent(element) {
		  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
		  getComputedStyle(element).position === 'fixed') {
		    return null;
		  }

		  return element.offsetParent;
		} // `.offsetParent` reports `null` for fixed elements, while absolute elements
		// return the containing block


		function getContainingBlock(element) {
		  var isFirefox = /firefox/i.test(getUAString());
		  var isIE = /Trident/i.test(getUAString());

		  if (isIE && isHTMLElement(element)) {
		    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
		    var elementCss = getComputedStyle(element);

		    if (elementCss.position === 'fixed') {
		      return null;
		    }
		  }

		  var currentNode = getParentNode(element);

		  if (isShadowRoot(currentNode)) {
		    currentNode = currentNode.host;
		  }

		  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
		    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
		    // create a containing block.
		    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

		    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
		      return currentNode;
		    } else {
		      currentNode = currentNode.parentNode;
		    }
		  }

		  return null;
		} // Gets the closest ancestor positioned element. Handles some edge cases,
		// such as table ancestors and cross browser bugs.


		function getOffsetParent(element) {
		  var window = getWindow(element);
		  var offsetParent = getTrueOffsetParent(element);

		  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
		    offsetParent = getTrueOffsetParent(offsetParent);
		  }

		  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
		    return window;
		  }

		  return offsetParent || getContainingBlock(element) || window;
		}

		var top = 'top';
		var bottom = 'bottom';
		var right = 'right';
		var left = 'left';
		var auto = 'auto';
		var basePlacements = [top, bottom, right, left];
		var start = 'start';
		var end = 'end';
		var clippingParents = 'clippingParents';
		var viewport = 'viewport';
		var popper$1 = 'popper';
		var reference = 'reference';
		var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
		  return acc.concat([placement + "-" + start, placement + "-" + end]);
		}, []);
		var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
		  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
		}, []); // modifiers that need to read the DOM

		var beforeRead = 'beforeRead';
		var read = 'read';
		var afterRead = 'afterRead'; // pure-logic modifiers

		var beforeMain = 'beforeMain';
		var main = 'main';
		var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

		var beforeWrite = 'beforeWrite';
		var write = 'write';
		var afterWrite = 'afterWrite';
		var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

		function order(modifiers) {
		  var map = new Map();
		  var visited = new Set();
		  var result = [];
		  modifiers.forEach(function (modifier) {
		    map.set(modifier.name, modifier);
		  }); // On visiting object, check for its dependencies and visit them recursively

		  function sort(modifier) {
		    visited.add(modifier.name);
		    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
		    requires.forEach(function (dep) {
		      if (!visited.has(dep)) {
		        var depModifier = map.get(dep);

		        if (depModifier) {
		          sort(depModifier);
		        }
		      }
		    });
		    result.push(modifier);
		  }

		  modifiers.forEach(function (modifier) {
		    if (!visited.has(modifier.name)) {
		      // check for visited object
		      sort(modifier);
		    }
		  });
		  return result;
		}

		function orderModifiers(modifiers) {
		  // order based on dependencies
		  var orderedModifiers = order(modifiers); // order based on phase

		  return modifierPhases.reduce(function (acc, phase) {
		    return acc.concat(orderedModifiers.filter(function (modifier) {
		      return modifier.phase === phase;
		    }));
		  }, []);
		}

		function debounce(fn) {
		  var pending;
		  return function () {
		    if (!pending) {
		      pending = new Promise(function (resolve) {
		        Promise.resolve().then(function () {
		          pending = undefined;
		          resolve(fn());
		        });
		      });
		    }

		    return pending;
		  };
		}

		function format(str) {
		  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		    args[_key - 1] = arguments[_key];
		  }

		  return [].concat(args).reduce(function (p, c) {
		    return p.replace(/%s/, c);
		  }, str);
		}

		var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
		var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
		var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
		function validateModifiers(modifiers) {
		  modifiers.forEach(function (modifier) {
		    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
		    .filter(function (value, index, self) {
		      return self.indexOf(value) === index;
		    }).forEach(function (key) {
		      switch (key) {
		        case 'name':
		          if (typeof modifier.name !== 'string') {
		            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
		          }

		          break;

		        case 'enabled':
		          if (typeof modifier.enabled !== 'boolean') {
		            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
		          }

		          break;

		        case 'phase':
		          if (modifierPhases.indexOf(modifier.phase) < 0) {
		            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
		          }

		          break;

		        case 'fn':
		          if (typeof modifier.fn !== 'function') {
		            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
		          }

		          break;

		        case 'effect':
		          if (modifier.effect != null && typeof modifier.effect !== 'function') {
		            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
		          }

		          break;

		        case 'requires':
		          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
		            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
		          }

		          break;

		        case 'requiresIfExists':
		          if (!Array.isArray(modifier.requiresIfExists)) {
		            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
		          }

		          break;

		        case 'options':
		        case 'data':
		          break;

		        default:
		          console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
		            return "\"" + s + "\"";
		          }).join(', ') + "; but \"" + key + "\" was provided.");
		      }

		      modifier.requires && modifier.requires.forEach(function (requirement) {
		        if (modifiers.find(function (mod) {
		          return mod.name === requirement;
		        }) == null) {
		          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
		        }
		      });
		    });
		  });
		}

		function uniqueBy(arr, fn) {
		  var identifiers = new Set();
		  return arr.filter(function (item) {
		    var identifier = fn(item);

		    if (!identifiers.has(identifier)) {
		      identifiers.add(identifier);
		      return true;
		    }
		  });
		}

		function getBasePlacement(placement) {
		  return placement.split('-')[0];
		}

		function mergeByName(modifiers) {
		  var merged = modifiers.reduce(function (merged, current) {
		    var existing = merged[current.name];
		    merged[current.name] = existing ? Object.assign({}, existing, current, {
		      options: Object.assign({}, existing.options, current.options),
		      data: Object.assign({}, existing.data, current.data)
		    }) : current;
		    return merged;
		  }, {}); // IE11 does not support Object.values

		  return Object.keys(merged).map(function (key) {
		    return merged[key];
		  });
		}

		function getViewportRect(element, strategy) {
		  var win = getWindow(element);
		  var html = getDocumentElement(element);
		  var visualViewport = win.visualViewport;
		  var width = html.clientWidth;
		  var height = html.clientHeight;
		  var x = 0;
		  var y = 0;

		  if (visualViewport) {
		    width = visualViewport.width;
		    height = visualViewport.height;
		    var layoutViewport = isLayoutViewport();

		    if (layoutViewport || !layoutViewport && strategy === 'fixed') {
		      x = visualViewport.offsetLeft;
		      y = visualViewport.offsetTop;
		    }
		  }

		  return {
		    width: width,
		    height: height,
		    x: x + getWindowScrollBarX(element),
		    y: y
		  };
		}

		// of the `<html>` and `<body>` rect bounds if horizontally scrollable

		function getDocumentRect(element) {
		  var _element$ownerDocumen;

		  var html = getDocumentElement(element);
		  var winScroll = getWindowScroll(element);
		  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
		  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
		  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
		  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
		  var y = -winScroll.scrollTop;

		  if (getComputedStyle(body || html).direction === 'rtl') {
		    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
		  }

		  return {
		    width: width,
		    height: height,
		    x: x,
		    y: y
		  };
		}

		function contains(parent, child) {
		  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

		  if (parent.contains(child)) {
		    return true;
		  } // then fallback to custom implementation with Shadow DOM support
		  else if (rootNode && isShadowRoot(rootNode)) {
		      var next = child;

		      do {
		        if (next && parent.isSameNode(next)) {
		          return true;
		        } // $FlowFixMe[prop-missing]: need a better way to handle this...


		        next = next.parentNode || next.host;
		      } while (next);
		    } // Give up, the result is false


		  return false;
		}

		function rectToClientRect(rect) {
		  return Object.assign({}, rect, {
		    left: rect.x,
		    top: rect.y,
		    right: rect.x + rect.width,
		    bottom: rect.y + rect.height
		  });
		}

		function getInnerBoundingClientRect(element, strategy) {
		  var rect = getBoundingClientRect(element, false, strategy === 'fixed');
		  rect.top = rect.top + element.clientTop;
		  rect.left = rect.left + element.clientLeft;
		  rect.bottom = rect.top + element.clientHeight;
		  rect.right = rect.left + element.clientWidth;
		  rect.width = element.clientWidth;
		  rect.height = element.clientHeight;
		  rect.x = rect.left;
		  rect.y = rect.top;
		  return rect;
		}

		function getClientRectFromMixedType(element, clippingParent, strategy) {
		  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
		} // A "clipping parent" is an overflowable container with the characteristic of
		// clipping (or hiding) overflowing elements with a position different from
		// `initial`


		function getClippingParents(element) {
		  var clippingParents = listScrollParents(getParentNode(element));
		  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
		  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

		  if (!isElement(clipperElement)) {
		    return [];
		  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


		  return clippingParents.filter(function (clippingParent) {
		    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
		  });
		} // Gets the maximum area that the element is visible in due to any number of
		// clipping parents


		function getClippingRect(element, boundary, rootBoundary, strategy) {
		  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
		  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
		  var firstClippingParent = clippingParents[0];
		  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
		    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
		    accRect.top = max(rect.top, accRect.top);
		    accRect.right = min(rect.right, accRect.right);
		    accRect.bottom = min(rect.bottom, accRect.bottom);
		    accRect.left = max(rect.left, accRect.left);
		    return accRect;
		  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
		  clippingRect.width = clippingRect.right - clippingRect.left;
		  clippingRect.height = clippingRect.bottom - clippingRect.top;
		  clippingRect.x = clippingRect.left;
		  clippingRect.y = clippingRect.top;
		  return clippingRect;
		}

		function getVariation(placement) {
		  return placement.split('-')[1];
		}

		function getMainAxisFromPlacement(placement) {
		  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
		}

		function computeOffsets(_ref) {
		  var reference = _ref.reference,
		      element = _ref.element,
		      placement = _ref.placement;
		  var basePlacement = placement ? getBasePlacement(placement) : null;
		  var variation = placement ? getVariation(placement) : null;
		  var commonX = reference.x + reference.width / 2 - element.width / 2;
		  var commonY = reference.y + reference.height / 2 - element.height / 2;
		  var offsets;

		  switch (basePlacement) {
		    case top:
		      offsets = {
		        x: commonX,
		        y: reference.y - element.height
		      };
		      break;

		    case bottom:
		      offsets = {
		        x: commonX,
		        y: reference.y + reference.height
		      };
		      break;

		    case right:
		      offsets = {
		        x: reference.x + reference.width,
		        y: commonY
		      };
		      break;

		    case left:
		      offsets = {
		        x: reference.x - element.width,
		        y: commonY
		      };
		      break;

		    default:
		      offsets = {
		        x: reference.x,
		        y: reference.y
		      };
		  }

		  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

		  if (mainAxis != null) {
		    var len = mainAxis === 'y' ? 'height' : 'width';

		    switch (variation) {
		      case start:
		        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
		        break;

		      case end:
		        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
		        break;
		    }
		  }

		  return offsets;
		}

		function getFreshSideObject() {
		  return {
		    top: 0,
		    right: 0,
		    bottom: 0,
		    left: 0
		  };
		}

		function mergePaddingObject(paddingObject) {
		  return Object.assign({}, getFreshSideObject(), paddingObject);
		}

		function expandToHashMap(value, keys) {
		  return keys.reduce(function (hashMap, key) {
		    hashMap[key] = value;
		    return hashMap;
		  }, {});
		}

		function detectOverflow(state, options) {
		  if (options === void 0) {
		    options = {};
		  }

		  var _options = options,
		      _options$placement = _options.placement,
		      placement = _options$placement === void 0 ? state.placement : _options$placement,
		      _options$strategy = _options.strategy,
		      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
		      _options$boundary = _options.boundary,
		      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
		      _options$rootBoundary = _options.rootBoundary,
		      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
		      _options$elementConte = _options.elementContext,
		      elementContext = _options$elementConte === void 0 ? popper$1 : _options$elementConte,
		      _options$altBoundary = _options.altBoundary,
		      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
		      _options$padding = _options.padding,
		      padding = _options$padding === void 0 ? 0 : _options$padding;
		  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
		  var altContext = elementContext === popper$1 ? reference : popper$1;
		  var popperRect = state.rects.popper;
		  var element = state.elements[altBoundary ? altContext : elementContext];
		  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
		  var referenceClientRect = getBoundingClientRect(state.elements.reference);
		  var popperOffsets = computeOffsets({
		    reference: referenceClientRect,
		    element: popperRect,
		    strategy: 'absolute',
		    placement: placement
		  });
		  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
		  var elementClientRect = elementContext === popper$1 ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
		  // 0 or negative = within the clipping rect

		  var overflowOffsets = {
		    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
		    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
		    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
		    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
		  };
		  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

		  if (elementContext === popper$1 && offsetData) {
		    var offset = offsetData[placement];
		    Object.keys(overflowOffsets).forEach(function (key) {
		      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
		      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
		      overflowOffsets[key] += offset[axis] * multiply;
		    });
		  }

		  return overflowOffsets;
		}

		var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
		var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
		var DEFAULT_OPTIONS = {
		  placement: 'bottom',
		  modifiers: [],
		  strategy: 'absolute'
		};

		function areValidElements() {
		  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }

		  return !args.some(function (element) {
		    return !(element && typeof element.getBoundingClientRect === 'function');
		  });
		}

		function popperGenerator(generatorOptions) {
		  if (generatorOptions === void 0) {
		    generatorOptions = {};
		  }

		  var _generatorOptions = generatorOptions,
		      _generatorOptions$def = _generatorOptions.defaultModifiers,
		      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
		      _generatorOptions$def2 = _generatorOptions.defaultOptions,
		      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
		  return function createPopper(reference, popper, options) {
		    if (options === void 0) {
		      options = defaultOptions;
		    }

		    var state = {
		      placement: 'bottom',
		      orderedModifiers: [],
		      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
		      modifiersData: {},
		      elements: {
		        reference: reference,
		        popper: popper
		      },
		      attributes: {},
		      styles: {}
		    };
		    var effectCleanupFns = [];
		    var isDestroyed = false;
		    var instance = {
		      state: state,
		      setOptions: function setOptions(setOptionsAction) {
		        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
		        cleanupModifierEffects();
		        state.options = Object.assign({}, defaultOptions, state.options, options);
		        state.scrollParents = {
		          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
		          popper: listScrollParents(popper)
		        }; // Orders the modifiers based on their dependencies and `phase`
		        // properties

		        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

		        state.orderedModifiers = orderedModifiers.filter(function (m) {
		          return m.enabled;
		        }); // Validate the provided modifiers so that the consumer will get warned
		        // if one of the modifiers is invalid for any reason

		        {
		          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
		            var name = _ref.name;
		            return name;
		          });
		          validateModifiers(modifiers);

		          if (getBasePlacement(state.options.placement) === auto) {
		            var flipModifier = state.orderedModifiers.find(function (_ref2) {
		              var name = _ref2.name;
		              return name === 'flip';
		            });

		            if (!flipModifier) {
		              console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
		            }
		          }

		          var _getComputedStyle = getComputedStyle(popper),
		              marginTop = _getComputedStyle.marginTop,
		              marginRight = _getComputedStyle.marginRight,
		              marginBottom = _getComputedStyle.marginBottom,
		              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
		          // cause bugs with positioning, so we'll warn the consumer


		          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
		            return parseFloat(margin);
		          })) {
		            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
		          }
		        }

		        runModifierEffects();
		        return instance.update();
		      },
		      // Sync update – it will always be executed, even if not necessary. This
		      // is useful for low frequency updates where sync behavior simplifies the
		      // logic.
		      // For high frequency updates (e.g. `resize` and `scroll` events), always
		      // prefer the async Popper#update method
		      forceUpdate: function forceUpdate() {
		        if (isDestroyed) {
		          return;
		        }

		        var _state$elements = state.elements,
		            reference = _state$elements.reference,
		            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
		        // anymore

		        if (!areValidElements(reference, popper)) {
		          {
		            console.error(INVALID_ELEMENT_ERROR);
		          }

		          return;
		        } // Store the reference and popper rects to be read by modifiers


		        state.rects = {
		          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
		          popper: getLayoutRect(popper)
		        }; // Modifiers have the ability to reset the current update cycle. The
		        // most common use case for this is the `flip` modifier changing the
		        // placement, which then needs to re-run all the modifiers, because the
		        // logic was previously ran for the previous placement and is therefore
		        // stale/incorrect

		        state.reset = false;
		        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
		        // is filled with the initial data specified by the modifier. This means
		        // it doesn't persist and is fresh on each update.
		        // To ensure persistent data, use `${name}#persistent`

		        state.orderedModifiers.forEach(function (modifier) {
		          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
		        });
		        var __debug_loops__ = 0;

		        for (var index = 0; index < state.orderedModifiers.length; index++) {
		          {
		            __debug_loops__ += 1;

		            if (__debug_loops__ > 100) {
		              console.error(INFINITE_LOOP_ERROR);
		              break;
		            }
		          }

		          if (state.reset === true) {
		            state.reset = false;
		            index = -1;
		            continue;
		          }

		          var _state$orderedModifie = state.orderedModifiers[index],
		              fn = _state$orderedModifie.fn,
		              _state$orderedModifie2 = _state$orderedModifie.options,
		              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
		              name = _state$orderedModifie.name;

		          if (typeof fn === 'function') {
		            state = fn({
		              state: state,
		              options: _options,
		              name: name,
		              instance: instance
		            }) || state;
		          }
		        }
		      },
		      // Async and optimistically optimized update – it will not be executed if
		      // not necessary (debounced to run at most once-per-tick)
		      update: debounce(function () {
		        return new Promise(function (resolve) {
		          instance.forceUpdate();
		          resolve(state);
		        });
		      }),
		      destroy: function destroy() {
		        cleanupModifierEffects();
		        isDestroyed = true;
		      }
		    };

		    if (!areValidElements(reference, popper)) {
		      {
		        console.error(INVALID_ELEMENT_ERROR);
		      }

		      return instance;
		    }

		    instance.setOptions(options).then(function (state) {
		      if (!isDestroyed && options.onFirstUpdate) {
		        options.onFirstUpdate(state);
		      }
		    }); // Modifiers have the ability to execute arbitrary code before the first
		    // update cycle runs. They will be executed in the same order as the update
		    // cycle. This is useful when a modifier adds some persistent data that
		    // other modifiers need to use, but the modifier is run after the dependent
		    // one.

		    function runModifierEffects() {
		      state.orderedModifiers.forEach(function (_ref3) {
		        var name = _ref3.name,
		            _ref3$options = _ref3.options,
		            options = _ref3$options === void 0 ? {} : _ref3$options,
		            effect = _ref3.effect;

		        if (typeof effect === 'function') {
		          var cleanupFn = effect({
		            state: state,
		            name: name,
		            instance: instance,
		            options: options
		          });

		          var noopFn = function noopFn() {};

		          effectCleanupFns.push(cleanupFn || noopFn);
		        }
		      });
		    }

		    function cleanupModifierEffects() {
		      effectCleanupFns.forEach(function (fn) {
		        return fn();
		      });
		      effectCleanupFns = [];
		    }

		    return instance;
		  };
		}

		var passive = {
		  passive: true
		};

		function effect$2(_ref) {
		  var state = _ref.state,
		      instance = _ref.instance,
		      options = _ref.options;
		  var _options$scroll = options.scroll,
		      scroll = _options$scroll === void 0 ? true : _options$scroll,
		      _options$resize = options.resize,
		      resize = _options$resize === void 0 ? true : _options$resize;
		  var window = getWindow(state.elements.popper);
		  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

		  if (scroll) {
		    scrollParents.forEach(function (scrollParent) {
		      scrollParent.addEventListener('scroll', instance.update, passive);
		    });
		  }

		  if (resize) {
		    window.addEventListener('resize', instance.update, passive);
		  }

		  return function () {
		    if (scroll) {
		      scrollParents.forEach(function (scrollParent) {
		        scrollParent.removeEventListener('scroll', instance.update, passive);
		      });
		    }

		    if (resize) {
		      window.removeEventListener('resize', instance.update, passive);
		    }
		  };
		} // eslint-disable-next-line import/no-unused-modules


		var eventListeners = {
		  name: 'eventListeners',
		  enabled: true,
		  phase: 'write',
		  fn: function fn() {},
		  effect: effect$2,
		  data: {}
		};

		function popperOffsets(_ref) {
		  var state = _ref.state,
		      name = _ref.name;
		  // Offsets are the actual position the popper needs to have to be
		  // properly positioned near its reference element
		  // This is the most basic placement, and will be adjusted by
		  // the modifiers in the next step
		  state.modifiersData[name] = computeOffsets({
		    reference: state.rects.reference,
		    element: state.rects.popper,
		    strategy: 'absolute',
		    placement: state.placement
		  });
		} // eslint-disable-next-line import/no-unused-modules


		var popperOffsets$1 = {
		  name: 'popperOffsets',
		  enabled: true,
		  phase: 'read',
		  fn: popperOffsets,
		  data: {}
		};

		var unsetSides = {
		  top: 'auto',
		  right: 'auto',
		  bottom: 'auto',
		  left: 'auto'
		}; // Round the offsets to the nearest suitable subpixel based on the DPR.
		// Zooming can change the DPR, but it seems to report a value that will
		// cleanly divide the values into the appropriate subpixels.

		function roundOffsetsByDPR(_ref) {
		  var x = _ref.x,
		      y = _ref.y;
		  var win = window;
		  var dpr = win.devicePixelRatio || 1;
		  return {
		    x: round(x * dpr) / dpr || 0,
		    y: round(y * dpr) / dpr || 0
		  };
		}

		function mapToStyles(_ref2) {
		  var _Object$assign2;

		  var popper = _ref2.popper,
		      popperRect = _ref2.popperRect,
		      placement = _ref2.placement,
		      variation = _ref2.variation,
		      offsets = _ref2.offsets,
		      position = _ref2.position,
		      gpuAcceleration = _ref2.gpuAcceleration,
		      adaptive = _ref2.adaptive,
		      roundOffsets = _ref2.roundOffsets,
		      isFixed = _ref2.isFixed;
		  var _offsets$x = offsets.x,
		      x = _offsets$x === void 0 ? 0 : _offsets$x,
		      _offsets$y = offsets.y,
		      y = _offsets$y === void 0 ? 0 : _offsets$y;

		  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
		    x: x,
		    y: y
		  }) : {
		    x: x,
		    y: y
		  };

		  x = _ref3.x;
		  y = _ref3.y;
		  var hasX = offsets.hasOwnProperty('x');
		  var hasY = offsets.hasOwnProperty('y');
		  var sideX = left;
		  var sideY = top;
		  var win = window;

		  if (adaptive) {
		    var offsetParent = getOffsetParent(popper);
		    var heightProp = 'clientHeight';
		    var widthProp = 'clientWidth';

		    if (offsetParent === getWindow(popper)) {
		      offsetParent = getDocumentElement(popper);

		      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
		        heightProp = 'scrollHeight';
		        widthProp = 'scrollWidth';
		      }
		    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


		    offsetParent = offsetParent;

		    if (placement === top || (placement === left || placement === right) && variation === end) {
		      sideY = bottom;
		      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
		      offsetParent[heightProp];
		      y -= offsetY - popperRect.height;
		      y *= gpuAcceleration ? 1 : -1;
		    }

		    if (placement === left || (placement === top || placement === bottom) && variation === end) {
		      sideX = right;
		      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
		      offsetParent[widthProp];
		      x -= offsetX - popperRect.width;
		      x *= gpuAcceleration ? 1 : -1;
		    }
		  }

		  var commonStyles = Object.assign({
		    position: position
		  }, adaptive && unsetSides);

		  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
		    x: x,
		    y: y
		  }) : {
		    x: x,
		    y: y
		  };

		  x = _ref4.x;
		  y = _ref4.y;

		  if (gpuAcceleration) {
		    var _Object$assign;

		    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
		  }

		  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
		}

		function computeStyles(_ref5) {
		  var state = _ref5.state,
		      options = _ref5.options;
		  var _options$gpuAccelerat = options.gpuAcceleration,
		      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
		      _options$adaptive = options.adaptive,
		      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
		      _options$roundOffsets = options.roundOffsets,
		      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

		  {
		    var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || '';

		    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
		      return transitionProperty.indexOf(property) >= 0;
		    })) {
		      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
		    }
		  }

		  var commonStyles = {
		    placement: getBasePlacement(state.placement),
		    variation: getVariation(state.placement),
		    popper: state.elements.popper,
		    popperRect: state.rects.popper,
		    gpuAcceleration: gpuAcceleration,
		    isFixed: state.options.strategy === 'fixed'
		  };

		  if (state.modifiersData.popperOffsets != null) {
		    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
		      offsets: state.modifiersData.popperOffsets,
		      position: state.options.strategy,
		      adaptive: adaptive,
		      roundOffsets: roundOffsets
		    })));
		  }

		  if (state.modifiersData.arrow != null) {
		    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
		      offsets: state.modifiersData.arrow,
		      position: 'absolute',
		      adaptive: false,
		      roundOffsets: roundOffsets
		    })));
		  }

		  state.attributes.popper = Object.assign({}, state.attributes.popper, {
		    'data-popper-placement': state.placement
		  });
		} // eslint-disable-next-line import/no-unused-modules


		var computeStyles$1 = {
		  name: 'computeStyles',
		  enabled: true,
		  phase: 'beforeWrite',
		  fn: computeStyles,
		  data: {}
		};

		// and applies them to the HTMLElements such as popper and arrow

		function applyStyles(_ref) {
		  var state = _ref.state;
		  Object.keys(state.elements).forEach(function (name) {
		    var style = state.styles[name] || {};
		    var attributes = state.attributes[name] || {};
		    var element = state.elements[name]; // arrow is optional + virtual elements

		    if (!isHTMLElement(element) || !getNodeName(element)) {
		      return;
		    } // Flow doesn't support to extend this property, but it's the most
		    // effective way to apply styles to an HTMLElement
		    // $FlowFixMe[cannot-write]


		    Object.assign(element.style, style);
		    Object.keys(attributes).forEach(function (name) {
		      var value = attributes[name];

		      if (value === false) {
		        element.removeAttribute(name);
		      } else {
		        element.setAttribute(name, value === true ? '' : value);
		      }
		    });
		  });
		}

		function effect$1(_ref2) {
		  var state = _ref2.state;
		  var initialStyles = {
		    popper: {
		      position: state.options.strategy,
		      left: '0',
		      top: '0',
		      margin: '0'
		    },
		    arrow: {
		      position: 'absolute'
		    },
		    reference: {}
		  };
		  Object.assign(state.elements.popper.style, initialStyles.popper);
		  state.styles = initialStyles;

		  if (state.elements.arrow) {
		    Object.assign(state.elements.arrow.style, initialStyles.arrow);
		  }

		  return function () {
		    Object.keys(state.elements).forEach(function (name) {
		      var element = state.elements[name];
		      var attributes = state.attributes[name] || {};
		      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

		      var style = styleProperties.reduce(function (style, property) {
		        style[property] = '';
		        return style;
		      }, {}); // arrow is optional + virtual elements

		      if (!isHTMLElement(element) || !getNodeName(element)) {
		        return;
		      }

		      Object.assign(element.style, style);
		      Object.keys(attributes).forEach(function (attribute) {
		        element.removeAttribute(attribute);
		      });
		    });
		  };
		} // eslint-disable-next-line import/no-unused-modules


		var applyStyles$1 = {
		  name: 'applyStyles',
		  enabled: true,
		  phase: 'write',
		  fn: applyStyles,
		  effect: effect$1,
		  requires: ['computeStyles']
		};

		function distanceAndSkiddingToXY(placement, rects, offset) {
		  var basePlacement = getBasePlacement(placement);
		  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

		  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
		    placement: placement
		  })) : offset,
		      skidding = _ref[0],
		      distance = _ref[1];

		  skidding = skidding || 0;
		  distance = (distance || 0) * invertDistance;
		  return [left, right].indexOf(basePlacement) >= 0 ? {
		    x: distance,
		    y: skidding
		  } : {
		    x: skidding,
		    y: distance
		  };
		}

		function offset(_ref2) {
		  var state = _ref2.state,
		      options = _ref2.options,
		      name = _ref2.name;
		  var _options$offset = options.offset,
		      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
		  var data = placements.reduce(function (acc, placement) {
		    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
		    return acc;
		  }, {});
		  var _data$state$placement = data[state.placement],
		      x = _data$state$placement.x,
		      y = _data$state$placement.y;

		  if (state.modifiersData.popperOffsets != null) {
		    state.modifiersData.popperOffsets.x += x;
		    state.modifiersData.popperOffsets.y += y;
		  }

		  state.modifiersData[name] = data;
		} // eslint-disable-next-line import/no-unused-modules


		var offset$1 = {
		  name: 'offset',
		  enabled: true,
		  phase: 'main',
		  requires: ['popperOffsets'],
		  fn: offset
		};

		var hash$1 = {
		  left: 'right',
		  right: 'left',
		  bottom: 'top',
		  top: 'bottom'
		};
		function getOppositePlacement(placement) {
		  return placement.replace(/left|right|bottom|top/g, function (matched) {
		    return hash$1[matched];
		  });
		}

		var hash = {
		  start: 'end',
		  end: 'start'
		};
		function getOppositeVariationPlacement(placement) {
		  return placement.replace(/start|end/g, function (matched) {
		    return hash[matched];
		  });
		}

		function computeAutoPlacement(state, options) {
		  if (options === void 0) {
		    options = {};
		  }

		  var _options = options,
		      placement = _options.placement,
		      boundary = _options.boundary,
		      rootBoundary = _options.rootBoundary,
		      padding = _options.padding,
		      flipVariations = _options.flipVariations,
		      _options$allowedAutoP = _options.allowedAutoPlacements,
		      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
		  var variation = getVariation(placement);
		  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
		    return getVariation(placement) === variation;
		  }) : basePlacements;
		  var allowedPlacements = placements$1.filter(function (placement) {
		    return allowedAutoPlacements.indexOf(placement) >= 0;
		  });

		  if (allowedPlacements.length === 0) {
		    allowedPlacements = placements$1;

		    {
		      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
		    }
		  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


		  var overflows = allowedPlacements.reduce(function (acc, placement) {
		    acc[placement] = detectOverflow(state, {
		      placement: placement,
		      boundary: boundary,
		      rootBoundary: rootBoundary,
		      padding: padding
		    })[getBasePlacement(placement)];
		    return acc;
		  }, {});
		  return Object.keys(overflows).sort(function (a, b) {
		    return overflows[a] - overflows[b];
		  });
		}

		function getExpandedFallbackPlacements(placement) {
		  if (getBasePlacement(placement) === auto) {
		    return [];
		  }

		  var oppositePlacement = getOppositePlacement(placement);
		  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
		}

		function flip(_ref) {
		  var state = _ref.state,
		      options = _ref.options,
		      name = _ref.name;

		  if (state.modifiersData[name]._skip) {
		    return;
		  }

		  var _options$mainAxis = options.mainAxis,
		      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
		      _options$altAxis = options.altAxis,
		      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
		      specifiedFallbackPlacements = options.fallbackPlacements,
		      padding = options.padding,
		      boundary = options.boundary,
		      rootBoundary = options.rootBoundary,
		      altBoundary = options.altBoundary,
		      _options$flipVariatio = options.flipVariations,
		      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
		      allowedAutoPlacements = options.allowedAutoPlacements;
		  var preferredPlacement = state.options.placement;
		  var basePlacement = getBasePlacement(preferredPlacement);
		  var isBasePlacement = basePlacement === preferredPlacement;
		  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
		  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
		    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
		      placement: placement,
		      boundary: boundary,
		      rootBoundary: rootBoundary,
		      padding: padding,
		      flipVariations: flipVariations,
		      allowedAutoPlacements: allowedAutoPlacements
		    }) : placement);
		  }, []);
		  var referenceRect = state.rects.reference;
		  var popperRect = state.rects.popper;
		  var checksMap = new Map();
		  var makeFallbackChecks = true;
		  var firstFittingPlacement = placements[0];

		  for (var i = 0; i < placements.length; i++) {
		    var placement = placements[i];

		    var _basePlacement = getBasePlacement(placement);

		    var isStartVariation = getVariation(placement) === start;
		    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
		    var len = isVertical ? 'width' : 'height';
		    var overflow = detectOverflow(state, {
		      placement: placement,
		      boundary: boundary,
		      rootBoundary: rootBoundary,
		      altBoundary: altBoundary,
		      padding: padding
		    });
		    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

		    if (referenceRect[len] > popperRect[len]) {
		      mainVariationSide = getOppositePlacement(mainVariationSide);
		    }

		    var altVariationSide = getOppositePlacement(mainVariationSide);
		    var checks = [];

		    if (checkMainAxis) {
		      checks.push(overflow[_basePlacement] <= 0);
		    }

		    if (checkAltAxis) {
		      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
		    }

		    if (checks.every(function (check) {
		      return check;
		    })) {
		      firstFittingPlacement = placement;
		      makeFallbackChecks = false;
		      break;
		    }

		    checksMap.set(placement, checks);
		  }

		  if (makeFallbackChecks) {
		    // `2` may be desired in some cases – research later
		    var numberOfChecks = flipVariations ? 3 : 1;

		    var _loop = function _loop(_i) {
		      var fittingPlacement = placements.find(function (placement) {
		        var checks = checksMap.get(placement);

		        if (checks) {
		          return checks.slice(0, _i).every(function (check) {
		            return check;
		          });
		        }
		      });

		      if (fittingPlacement) {
		        firstFittingPlacement = fittingPlacement;
		        return "break";
		      }
		    };

		    for (var _i = numberOfChecks; _i > 0; _i--) {
		      var _ret = _loop(_i);

		      if (_ret === "break") break;
		    }
		  }

		  if (state.placement !== firstFittingPlacement) {
		    state.modifiersData[name]._skip = true;
		    state.placement = firstFittingPlacement;
		    state.reset = true;
		  }
		} // eslint-disable-next-line import/no-unused-modules


		var flip$1 = {
		  name: 'flip',
		  enabled: true,
		  phase: 'main',
		  fn: flip,
		  requiresIfExists: ['offset'],
		  data: {
		    _skip: false
		  }
		};

		function getAltAxis(axis) {
		  return axis === 'x' ? 'y' : 'x';
		}

		function within(min$1, value, max$1) {
		  return max(min$1, min(value, max$1));
		}
		function withinMaxClamp(min, value, max) {
		  var v = within(min, value, max);
		  return v > max ? max : v;
		}

		function preventOverflow(_ref) {
		  var state = _ref.state,
		      options = _ref.options,
		      name = _ref.name;
		  var _options$mainAxis = options.mainAxis,
		      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
		      _options$altAxis = options.altAxis,
		      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
		      boundary = options.boundary,
		      rootBoundary = options.rootBoundary,
		      altBoundary = options.altBoundary,
		      padding = options.padding,
		      _options$tether = options.tether,
		      tether = _options$tether === void 0 ? true : _options$tether,
		      _options$tetherOffset = options.tetherOffset,
		      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
		  var overflow = detectOverflow(state, {
		    boundary: boundary,
		    rootBoundary: rootBoundary,
		    padding: padding,
		    altBoundary: altBoundary
		  });
		  var basePlacement = getBasePlacement(state.placement);
		  var variation = getVariation(state.placement);
		  var isBasePlacement = !variation;
		  var mainAxis = getMainAxisFromPlacement(basePlacement);
		  var altAxis = getAltAxis(mainAxis);
		  var popperOffsets = state.modifiersData.popperOffsets;
		  var referenceRect = state.rects.reference;
		  var popperRect = state.rects.popper;
		  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
		    placement: state.placement
		  })) : tetherOffset;
		  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
		    mainAxis: tetherOffsetValue,
		    altAxis: tetherOffsetValue
		  } : Object.assign({
		    mainAxis: 0,
		    altAxis: 0
		  }, tetherOffsetValue);
		  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
		  var data = {
		    x: 0,
		    y: 0
		  };

		  if (!popperOffsets) {
		    return;
		  }

		  if (checkMainAxis) {
		    var _offsetModifierState$;

		    var mainSide = mainAxis === 'y' ? top : left;
		    var altSide = mainAxis === 'y' ? bottom : right;
		    var len = mainAxis === 'y' ? 'height' : 'width';
		    var offset = popperOffsets[mainAxis];
		    var min$1 = offset + overflow[mainSide];
		    var max$1 = offset - overflow[altSide];
		    var additive = tether ? -popperRect[len] / 2 : 0;
		    var minLen = variation === start ? referenceRect[len] : popperRect[len];
		    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
		    // outside the reference bounds

		    var arrowElement = state.elements.arrow;
		    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
		      width: 0,
		      height: 0
		    };
		    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
		    var arrowPaddingMin = arrowPaddingObject[mainSide];
		    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
		    // to include its full size in the calculation. If the reference is small
		    // and near the edge of a boundary, the popper can overflow even if the
		    // reference is not overflowing as well (e.g. virtual elements with no
		    // width or height)

		    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
		    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
		    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
		    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
		    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
		    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
		    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
		    var tetherMax = offset + maxOffset - offsetModifierValue;
		    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
		    popperOffsets[mainAxis] = preventedOffset;
		    data[mainAxis] = preventedOffset - offset;
		  }

		  if (checkAltAxis) {
		    var _offsetModifierState$2;

		    var _mainSide = mainAxis === 'x' ? top : left;

		    var _altSide = mainAxis === 'x' ? bottom : right;

		    var _offset = popperOffsets[altAxis];

		    var _len = altAxis === 'y' ? 'height' : 'width';

		    var _min = _offset + overflow[_mainSide];

		    var _max = _offset - overflow[_altSide];

		    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

		    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

		    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

		    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

		    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

		    popperOffsets[altAxis] = _preventedOffset;
		    data[altAxis] = _preventedOffset - _offset;
		  }

		  state.modifiersData[name] = data;
		} // eslint-disable-next-line import/no-unused-modules


		var preventOverflow$1 = {
		  name: 'preventOverflow',
		  enabled: true,
		  phase: 'main',
		  fn: preventOverflow,
		  requiresIfExists: ['offset']
		};

		var toPaddingObject = function toPaddingObject(padding, state) {
		  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
		    placement: state.placement
		  })) : padding;
		  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
		};

		function arrow(_ref) {
		  var _state$modifiersData$;

		  var state = _ref.state,
		      name = _ref.name,
		      options = _ref.options;
		  var arrowElement = state.elements.arrow;
		  var popperOffsets = state.modifiersData.popperOffsets;
		  var basePlacement = getBasePlacement(state.placement);
		  var axis = getMainAxisFromPlacement(basePlacement);
		  var isVertical = [left, right].indexOf(basePlacement) >= 0;
		  var len = isVertical ? 'height' : 'width';

		  if (!arrowElement || !popperOffsets) {
		    return;
		  }

		  var paddingObject = toPaddingObject(options.padding, state);
		  var arrowRect = getLayoutRect(arrowElement);
		  var minProp = axis === 'y' ? top : left;
		  var maxProp = axis === 'y' ? bottom : right;
		  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
		  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
		  var arrowOffsetParent = getOffsetParent(arrowElement);
		  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
		  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
		  // outside of the popper bounds

		  var min = paddingObject[minProp];
		  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
		  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
		  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

		  var axisProp = axis;
		  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
		}

		function effect(_ref2) {
		  var state = _ref2.state,
		      options = _ref2.options;
		  var _options$element = options.element,
		      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

		  if (arrowElement == null) {
		    return;
		  } // CSS selector


		  if (typeof arrowElement === 'string') {
		    arrowElement = state.elements.popper.querySelector(arrowElement);

		    if (!arrowElement) {
		      return;
		    }
		  }

		  {
		    if (!isHTMLElement(arrowElement)) {
		      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
		    }
		  }

		  if (!contains(state.elements.popper, arrowElement)) {
		    {
		      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
		    }

		    return;
		  }

		  state.elements.arrow = arrowElement;
		} // eslint-disable-next-line import/no-unused-modules


		var arrow$1 = {
		  name: 'arrow',
		  enabled: true,
		  phase: 'main',
		  fn: arrow,
		  effect: effect,
		  requires: ['popperOffsets'],
		  requiresIfExists: ['preventOverflow']
		};

		function getSideOffsets(overflow, rect, preventedOffsets) {
		  if (preventedOffsets === void 0) {
		    preventedOffsets = {
		      x: 0,
		      y: 0
		    };
		  }

		  return {
		    top: overflow.top - rect.height - preventedOffsets.y,
		    right: overflow.right - rect.width + preventedOffsets.x,
		    bottom: overflow.bottom - rect.height + preventedOffsets.y,
		    left: overflow.left - rect.width - preventedOffsets.x
		  };
		}

		function isAnySideFullyClipped(overflow) {
		  return [top, right, bottom, left].some(function (side) {
		    return overflow[side] >= 0;
		  });
		}

		function hide(_ref) {
		  var state = _ref.state,
		      name = _ref.name;
		  var referenceRect = state.rects.reference;
		  var popperRect = state.rects.popper;
		  var preventedOffsets = state.modifiersData.preventOverflow;
		  var referenceOverflow = detectOverflow(state, {
		    elementContext: 'reference'
		  });
		  var popperAltOverflow = detectOverflow(state, {
		    altBoundary: true
		  });
		  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
		  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
		  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
		  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
		  state.modifiersData[name] = {
		    referenceClippingOffsets: referenceClippingOffsets,
		    popperEscapeOffsets: popperEscapeOffsets,
		    isReferenceHidden: isReferenceHidden,
		    hasPopperEscaped: hasPopperEscaped
		  };
		  state.attributes.popper = Object.assign({}, state.attributes.popper, {
		    'data-popper-reference-hidden': isReferenceHidden,
		    'data-popper-escaped': hasPopperEscaped
		  });
		} // eslint-disable-next-line import/no-unused-modules


		var hide$1 = {
		  name: 'hide',
		  enabled: true,
		  phase: 'main',
		  requiresIfExists: ['preventOverflow'],
		  fn: hide
		};

		var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
		var createPopper$1 = /*#__PURE__*/popperGenerator({
		  defaultModifiers: defaultModifiers$1
		}); // eslint-disable-next-line import/no-unused-modules

		var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
		var createPopper = /*#__PURE__*/popperGenerator({
		  defaultModifiers: defaultModifiers
		}); // eslint-disable-next-line import/no-unused-modules

		popper.applyStyles = applyStyles$1;
		popper.arrow = arrow$1;
		popper.computeStyles = computeStyles$1;
		popper.createPopper = createPopper;
		popper.createPopperLite = createPopper$1;
		popper.defaultModifiers = defaultModifiers;
		popper.detectOverflow = detectOverflow;
		popper.eventListeners = eventListeners;
		popper.flip = flip$1;
		popper.hide = hide$1;
		popper.offset = offset$1;
		popper.popperGenerator = popperGenerator;
		popper.popperOffsets = popperOffsets$1;
		popper.preventOverflow = preventOverflow$1;
		
		return popper;
	}

	var Portal$2 = {};

	var Portal$1 = {};

	var hasRequiredPortal;

	function requirePortal () {
		if (hasRequiredPortal) return Portal$1;
		hasRequiredPortal = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Portal$1, "__esModule", {
		  value: true
		});
		Portal$1.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		var ReactDOM = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function getContainer(container) {
		  return typeof container === 'function' ? container() : container;
		}

		/**
		 * Portals provide a first-class way to render children into a DOM node
		 * that exists outside the DOM hierarchy of the parent component.
		 */
		const Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {
		  const {
		    children,
		    container,
		    disablePortal = false
		  } = props;
		  const [mountNode, setMountNode] = React.useState(null);
		  const handleRef = (0, _utils.unstable_useForkRef)( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);
		  (0, _utils.unstable_useEnhancedEffect)(() => {
		    if (!disablePortal) {
		      setMountNode(getContainer(container) || document.body);
		    }
		  }, [container, disablePortal]);
		  (0, _utils.unstable_useEnhancedEffect)(() => {
		    if (mountNode && !disablePortal) {
		      (0, _utils.unstable_setRef)(ref, mountNode);
		      return () => {
		        (0, _utils.unstable_setRef)(ref, null);
		      };
		    }
		    return undefined;
		  }, [ref, mountNode, disablePortal]);
		  if (disablePortal) {
		    if ( /*#__PURE__*/React.isValidElement(children)) {
		      return /*#__PURE__*/React.cloneElement(children, {
		        ref: handleRef
		      });
		    }
		    return children;
		  }
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
		    children: mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode
		  });
		});
		Portal.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The children to render into the `container`.
		   */
		  children: _propTypes.default.node,
		  /**
		   * An HTML element or function that returns one.
		   * The `container` will have the portal children appended to it.
		   *
		   * By default, it uses the body of the top-level document object,
		   * so it's simply `document.body` most of the time.
		   */
		  container: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
		  /**
		   * The `children` will be under the DOM hierarchy of the parent component.
		   * @default false
		   */
		  disablePortal: _propTypes.default.bool
		} ;
		{
		  // eslint-disable-next-line
		  Portal['propTypes' + ''] = (0, _utils.exactProp)(Portal.propTypes);
		}
		var _default = Portal;
		Portal$1.default = _default;
		return Portal$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Portal.default;
		  }
		});
		var _Portal = _interopRequireDefault(requirePortal());
	} (Portal$2));

	var Portal = /*@__PURE__*/getDefaultExportFromCjs(Portal$2);

	var popperUnstyledClasses = {};

	var hasRequiredPopperUnstyledClasses;

	function requirePopperUnstyledClasses () {
		if (hasRequiredPopperUnstyledClasses) return popperUnstyledClasses;
		hasRequiredPopperUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(popperUnstyledClasses, "__esModule", {
		  value: true
		});
		popperUnstyledClasses.default = void 0;
		popperUnstyledClasses.getPopperUnstyledUtilityClass = getPopperUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getPopperUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiPopperUnstyled', slot);
		}
		const popperUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiPopperUnstyled', ['root']);
		var _default = popperUnstyledClasses$1;
		popperUnstyledClasses.default = _default;
		return popperUnstyledClasses;
	}

	var hasRequiredPopperUnstyled$1;

	function requirePopperUnstyled$1 () {
		if (hasRequiredPopperUnstyled$1) return PopperUnstyled;
		hasRequiredPopperUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(PopperUnstyled, "__esModule", {
		  value: true
		});
		PopperUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$4();
		var _core = requirePopper$2();
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _Portal = _interopRequireDefault(Portal$2);
		var _popperUnstyledClasses = requirePopperUnstyledClasses();
		var _utils2 = requireUtils$3();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["anchorEl", "children", "component", "direction", "disablePortal", "modifiers", "open", "ownerState", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps"],
		  _excluded2 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function flipPlacement(placement, direction) {
		  if (direction === 'ltr') {
		    return placement;
		  }
		  switch (placement) {
		    case 'bottom-end':
		      return 'bottom-start';
		    case 'bottom-start':
		      return 'bottom-end';
		    case 'top-end':
		      return 'top-start';
		    case 'top-start':
		      return 'top-end';
		    default:
		      return placement;
		  }
		}
		function resolveAnchorEl(anchorEl) {
		  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
		}
		const useUtilityClasses = () => {
		  const slots = {
		    root: ['root']
		  };
		  return (0, _composeClasses.default)(slots, _popperUnstyledClasses.getPopperUnstyledUtilityClass, {});
		};
		const defaultPopperOptions = {};

		/* eslint-disable react/prop-types */
		const PopperTooltip = /*#__PURE__*/React.forwardRef(function PopperTooltip(props, ref) {
		  var _ref;
		  const {
		      anchorEl,
		      children,
		      component,
		      direction,
		      disablePortal,
		      modifiers,
		      open,
		      ownerState,
		      placement: initialPlacement,
		      popperOptions,
		      popperRef: popperRefProp,
		      slotProps = {},
		      slots = {},
		      TransitionProps
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const tooltipRef = React.useRef(null);
		  const ownRef = (0, _utils.unstable_useForkRef)(tooltipRef, ref);
		  const popperRef = React.useRef(null);
		  const handlePopperRef = (0, _utils.unstable_useForkRef)(popperRef, popperRefProp);
		  const handlePopperRefRef = React.useRef(handlePopperRef);
		  (0, _utils.unstable_useEnhancedEffect)(() => {
		    handlePopperRefRef.current = handlePopperRef;
		  }, [handlePopperRef]);
		  React.useImperativeHandle(popperRefProp, () => popperRef.current, []);
		  const rtlPlacement = flipPlacement(initialPlacement, direction);
		  /**
		   * placement initialized from prop but can change during lifetime if modifiers.flip.
		   * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
		   */
		  const [placement, setPlacement] = React.useState(rtlPlacement);
		  React.useEffect(() => {
		    if (popperRef.current) {
		      popperRef.current.forceUpdate();
		    }
		  });
		  (0, _utils.unstable_useEnhancedEffect)(() => {
		    if (!anchorEl || !open) {
		      return undefined;
		    }
		    const handlePopperUpdate = data => {
		      setPlacement(data.placement);
		    };
		    const resolvedAnchorEl = resolveAnchorEl(anchorEl);
		    {
		      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
		        const box = resolvedAnchorEl.getBoundingClientRect();
		        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
		          console.warn(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
		        }
		      }
		    }
		    let popperModifiers = [{
		      name: 'preventOverflow',
		      options: {
		        altBoundary: disablePortal
		      }
		    }, {
		      name: 'flip',
		      options: {
		        altBoundary: disablePortal
		      }
		    }, {
		      name: 'onUpdate',
		      enabled: true,
		      phase: 'afterWrite',
		      fn: ({
		        state
		      }) => {
		        handlePopperUpdate(state);
		      }
		    }];
		    if (modifiers != null) {
		      popperModifiers = popperModifiers.concat(modifiers);
		    }
		    if (popperOptions && popperOptions.modifiers != null) {
		      popperModifiers = popperModifiers.concat(popperOptions.modifiers);
		    }
		    const popper = (0, _core.createPopper)(resolveAnchorEl(anchorEl), tooltipRef.current, (0, _extends2.default)({
		      placement: rtlPlacement
		    }, popperOptions, {
		      modifiers: popperModifiers
		    }));
		    handlePopperRefRef.current(popper);
		    return () => {
		      popper.destroy();
		      handlePopperRefRef.current(null);
		    };
		  }, [anchorEl, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
		  const childProps = {
		    placement
		  };
		  if (TransitionProps !== null) {
		    childProps.TransitionProps = TransitionProps;
		  }
		  const classes = useUtilityClasses();
		  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';
		  const rootProps = (0, _utils2.useSlotProps)({
		    elementType: Root,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: {
		      role: 'tooltip',
		      ref: ownRef
		    },
		    ownerState: (0, _extends2.default)({}, props, ownerState),
		    className: classes.root
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps, {
		    children: typeof children === 'function' ? children(childProps) : children
		  }));
		});
		/* eslint-enable react/prop-types */

		/**
		 * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.
		 */
		const PopperUnstyled$1 = /*#__PURE__*/React.forwardRef(function PopperUnstyled(props, ref) {
		  const {
		      anchorEl,
		      children,
		      container: containerProp,
		      direction = 'ltr',
		      disablePortal = false,
		      keepMounted = false,
		      modifiers,
		      open,
		      placement = 'bottom',
		      popperOptions = defaultPopperOptions,
		      popperRef,
		      style,
		      transition = false
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded2);
		  const [exited, setExited] = React.useState(true);
		  const handleEnter = () => {
		    setExited(false);
		  };
		  const handleExited = () => {
		    setExited(true);
		  };
		  if (!keepMounted && !open && (!transition || exited)) {
		    return null;
		  }

		  // If the container prop is provided, use that
		  // If the anchorEl prop is provided, use its parent body element as the container
		  // If neither are provided let the Modal take care of choosing the container
		  const container = containerProp || (anchorEl ? (0, _utils.unstable_ownerDocument)(resolveAnchorEl(anchorEl)).body : undefined);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Portal.default, {
		    disablePortal: disablePortal,
		    container: container,
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(PopperTooltip, (0, _extends2.default)({
		      anchorEl: anchorEl,
		      direction: direction,
		      disablePortal: disablePortal,
		      modifiers: modifiers,
		      ref: ref,
		      open: transition ? !exited : open,
		      placement: placement,
		      popperOptions: popperOptions,
		      popperRef: popperRef
		    }, other, {
		      style: (0, _extends2.default)({
		        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
		        position: 'fixed',
		        // Fix Popper.js display issue
		        top: 0,
		        left: 0,
		        display: !open && keepMounted && (!transition || exited) ? 'none' : null
		      }, style),
		      TransitionProps: transition ? {
		        in: open,
		        onEnter: handleEnter,
		        onExited: handleExited
		      } : null,
		      children: children
		    }))
		  });
		});
		PopperUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
		   * or a function that returns either.
		   * It's used to set the position of the popper.
		   * The return value will passed as the reference object of the Popper instance.
		   */
		  anchorEl: (0, _utils.chainPropTypes)(_propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.object, _propTypes.default.func]), props => {
		    if (props.open) {
		      const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
		      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
		        const box = resolvedAnchorEl.getBoundingClientRect();
		        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
		          return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
		        }
		      } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== 'function' || resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
		        return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'It should be an HTML element instance or a virtualElement ', '(https://popper.js.org/docs/v2/virtual-elements/).'].join('\n'));
		      }
		    }
		    return null;
		  }),
		  /**
		   * Popper render function or node.
		   */
		  children: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.node, _propTypes.default.func]),
		  /**
		   * An HTML element or function that returns one.
		   * The `container` will have the portal children appended to it.
		   *
		   * By default, it uses the body of the top-level document object,
		   * so it's simply `document.body` most of the time.
		   */
		  container: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
		  /**
		   * Direction of the text.
		   * @default 'ltr'
		   */
		  direction: _propTypes.default.oneOf(['ltr', 'rtl']),
		  /**
		   * The `children` will be under the DOM hierarchy of the parent component.
		   * @default false
		   */
		  disablePortal: _propTypes.default.bool,
		  /**
		   * Always keep the children in the DOM.
		   * This prop can be useful in SEO situation or
		   * when you want to maximize the responsiveness of the Popper.
		   * @default false
		   */
		  keepMounted: _propTypes.default.bool,
		  /**
		   * Popper.js is based on a "plugin-like" architecture,
		   * most of its features are fully encapsulated "modifiers".
		   *
		   * A modifier is a function that is called each time Popper.js needs to
		   * compute the position of the popper.
		   * For this reason, modifiers should be very performant to avoid bottlenecks.
		   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
		   */
		  modifiers: _propTypes.default.arrayOf(_propTypes.default.shape({
		    data: _propTypes.default.object,
		    effect: _propTypes.default.func,
		    enabled: _propTypes.default.bool,
		    fn: _propTypes.default.func,
		    name: _propTypes.default.any,
		    options: _propTypes.default.object,
		    phase: _propTypes.default.oneOf(['afterMain', 'afterRead', 'afterWrite', 'beforeMain', 'beforeRead', 'beforeWrite', 'main', 'read', 'write']),
		    requires: _propTypes.default.arrayOf(_propTypes.default.string),
		    requiresIfExists: _propTypes.default.arrayOf(_propTypes.default.string)
		  })),
		  /**
		   * If `true`, the component is shown.
		   */
		  open: _propTypes.default.bool.isRequired,
		  /**
		   * Popper placement.
		   * @default 'bottom'
		   */
		  placement: _propTypes.default.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
		  /**
		   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
		   * @default {}
		   */
		  popperOptions: _propTypes.default.shape({
		    modifiers: _propTypes.default.array,
		    onFirstUpdate: _propTypes.default.func,
		    placement: _propTypes.default.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
		    strategy: _propTypes.default.oneOf(['absolute', 'fixed'])
		  }),
		  /**
		   * A ref that points to the used popper instance.
		   */
		  popperRef: _utils.refType,
		  /**
		   * The props used for each slot inside the Popper.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the Popper.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * @ignore
		   */
		  style: _propTypes.default.object,
		  /**
		   * Help supporting a react-transition-group/Transition component.
		   * @default false
		   */
		  transition: _propTypes.default.bool
		} ;
		var _default = PopperUnstyled$1;
		PopperUnstyled.default = _default;
		return PopperUnstyled;
	}

	var hasRequiredPopperUnstyled;

	function requirePopperUnstyled () {
		if (hasRequiredPopperUnstyled) return PopperUnstyled$1;
		hasRequiredPopperUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  popperUnstyledClasses: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _PopperUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "popperUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _popperUnstyledClasses.default;
			  }
			});
			var _PopperUnstyled = _interopRequireDefault(requirePopperUnstyled$1());
			var _popperUnstyledClasses = _interopRequireWildcard(requirePopperUnstyledClasses());
			Object.keys(_popperUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _popperUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _popperUnstyledClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (PopperUnstyled$1));
		return PopperUnstyled$1;
	}

	var hasRequiredMenuUnstyled$1;

	function requireMenuUnstyled$1 () {
		if (hasRequiredMenuUnstyled$1) return MenuUnstyled;
		hasRequiredMenuUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(MenuUnstyled, "__esModule", {
		  value: true
		});
		MenuUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _MenuUnstyledContext = _interopRequireDefault(requireMenuUnstyledContext());
		var _menuUnstyledClasses = requireMenuUnstyledClasses();
		var _useMenu = _interopRequireDefault(requireUseMenu());
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _PopperUnstyled = _interopRequireDefault(requirePopperUnstyled());
		var _useSlotProps = _interopRequireDefault(requireUseSlotProps());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["actions", "anchorEl", "children", "component", "keepMounted", "listboxId", "onClose", "open", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function getUtilityClasses(ownerState) {
		  const {
		    open
		  } = ownerState;
		  const slots = {
		    root: ['root', open && 'expanded'],
		    listbox: ['listbox', open && 'expanded']
		  };
		  return (0, _composeClasses.default)(slots, _menuUnstyledClasses.getMenuUnstyledUtilityClass, {});
		}
		/**
		 *
		 * Demos:
		 *
		 * - [Unstyled Menu](https://mui.com/base/react-menu/)
		 *
		 * API:
		 *
		 * - [MenuUnstyled API](https://mui.com/base/api/menu-unstyled/)
		 */
		const MenuUnstyled$1 = /*#__PURE__*/React.forwardRef(function MenuUnstyled(props, forwardedRef) {
		  var _ref, _slots$listbox;
		  const {
		      actions,
		      anchorEl,
		      children,
		      component,
		      keepMounted = false,
		      listboxId,
		      onClose,
		      open = false,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const {
		    registerItem,
		    unregisterItem,
		    getListboxProps,
		    getItemProps,
		    getItemState,
		    highlightFirstItem,
		    highlightLastItem
		  } = (0, _useMenu.default)({
		    open,
		    onClose,
		    listboxId
		  });
		  React.useImperativeHandle(actions, () => ({
		    highlightFirstItem,
		    highlightLastItem
		  }), [highlightFirstItem, highlightLastItem]);
		  const ownerState = (0, _extends2.default)({}, props, {
		    open
		  });
		  const classes = getUtilityClasses(ownerState);
		  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : _PopperUnstyled.default;
		  const rootProps = (0, _useSlotProps.default)({
		    elementType: Root,
		    externalForwardedProps: other,
		    externalSlotProps: slotProps.root,
		    additionalProps: {
		      anchorEl,
		      open,
		      keepMounted,
		      role: undefined,
		      ref: forwardedRef
		    },
		    className: classes.root,
		    ownerState
		  });
		  const Listbox = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';
		  const listboxProps = (0, _useSlotProps.default)({
		    elementType: Listbox,
		    getSlotProps: getListboxProps,
		    externalSlotProps: slotProps.listbox,
		    ownerState,
		    className: classes.listbox
		  });
		  const contextValue = React.useMemo(() => ({
		    registerItem,
		    unregisterItem,
		    getItemState,
		    getItemProps,
		    open
		  }), [getItemProps, getItemState, open, registerItem, unregisterItem]);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps, {
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Listbox, (0, _extends2.default)({}, listboxProps, {
		      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_MenuUnstyledContext.default.Provider, {
		        value: contextValue,
		        children: children
		      })
		    }))
		  }));
		});
		MenuUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * A ref with imperative actions.
		   * It allows to select the first or last menu item.
		   */
		  actions: _utils.refType,
		  /**
		   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
		   * or a function that returns either.
		   * It's used to set the position of the popper.
		   */
		  anchorEl: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_utils.HTMLElementType, _propTypes.default.object, _propTypes.default.func]),
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * Always keep the menu in the DOM.
		   * This prop can be useful in SEO situation or when you want to maximize the responsiveness of the Menu.
		   *
		   * @default false
		   */
		  keepMounted: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  listboxId: _propTypes.default.string,
		  /**
		   * Triggered when focus leaves the menu and the menu should close.
		   */
		  onClose: _propTypes.default.func,
		  /**
		   * Controls whether the menu is displayed.
		   * @default false
		   */
		  open: _propTypes.default.bool,
		  /**
		   * The props used for each slot inside the Menu.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    listbox: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the Menu.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    listbox: _propTypes.default.elementType,
		    root: _propTypes.default.elementType
		  })
		} ;
		var _default = MenuUnstyled$1;
		MenuUnstyled.default = _default;
		return MenuUnstyled;
	}

	var MenuUnstyled_types = {};

	var hasRequiredMenuUnstyled_types;

	function requireMenuUnstyled_types () {
		if (hasRequiredMenuUnstyled_types) return MenuUnstyled_types;
		hasRequiredMenuUnstyled_types = 1;

		Object.defineProperty(MenuUnstyled_types, "__esModule", {
		  value: true
		});
		return MenuUnstyled_types;
	}

	var useMenu_types = {};

	var hasRequiredUseMenu_types;

	function requireUseMenu_types () {
		if (hasRequiredUseMenu_types) return useMenu_types;
		hasRequiredUseMenu_types = 1;

		Object.defineProperty(useMenu_types, "__esModule", {
		  value: true
		});
		return useMenu_types;
	}

	var hasRequiredMenuUnstyled;

	function requireMenuUnstyled () {
		if (hasRequiredMenuUnstyled) return MenuUnstyled$1;
		hasRequiredMenuUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  MenuUnstyledContext: true,
			  menuUnstyledClasses: true,
			  useMenu: true
			};
			Object.defineProperty(exports, "MenuUnstyledContext", {
			  enumerable: true,
			  get: function () {
			    return _MenuUnstyledContext.default;
			  }
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _MenuUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "menuUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _menuUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "useMenu", {
			  enumerable: true,
			  get: function () {
			    return _useMenu.default;
			  }
			});
			var _MenuUnstyled = _interopRequireDefault(requireMenuUnstyled$1());
			var _MenuUnstyledContext = _interopRequireWildcard(requireMenuUnstyledContext());
			Object.keys(_MenuUnstyledContext).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _MenuUnstyledContext[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _MenuUnstyledContext[key];
			    }
			  });
			});
			var _menuUnstyledClasses = _interopRequireWildcard(requireMenuUnstyledClasses());
			Object.keys(_menuUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _menuUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _menuUnstyledClasses[key];
			    }
			  });
			});
			var _MenuUnstyled2 = requireMenuUnstyled_types();
			Object.keys(_MenuUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _MenuUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _MenuUnstyled2[key];
			    }
			  });
			});
			var _useMenu = _interopRequireDefault(requireUseMenu());
			var _useMenu2 = requireUseMenu_types();
			Object.keys(_useMenu2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _useMenu2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _useMenu2[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (MenuUnstyled$1));
		return MenuUnstyled$1;
	}

	var MenuItemUnstyled$1 = {};

	var MenuItemUnstyled = {};

	var menuItemUnstyledClasses = {};

	var hasRequiredMenuItemUnstyledClasses;

	function requireMenuItemUnstyledClasses () {
		if (hasRequiredMenuItemUnstyledClasses) return menuItemUnstyledClasses;
		hasRequiredMenuItemUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(menuItemUnstyledClasses, "__esModule", {
		  value: true
		});
		menuItemUnstyledClasses.default = void 0;
		menuItemUnstyledClasses.getMenuItemUnstyledUtilityClass = getMenuItemUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getMenuItemUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiMenuItem', slot);
		}
		const menuItemUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiMenuItem', ['root', 'disabled', 'focusVisible']);
		var _default = menuItemUnstyledClasses$1;
		menuItemUnstyledClasses.default = _default;
		return menuItemUnstyledClasses;
	}

	var useMenuItem = {};

	var hasRequiredUseMenuItem;

	function requireUseMenuItem () {
		if (hasRequiredUseMenuItem) return useMenuItem;
		hasRequiredUseMenuItem = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useMenuItem, "__esModule", {
		  value: true
		});
		useMenuItem.default = useMenuItem$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$4();
		var _MenuUnstyled = requireMenuUnstyled();
		var _ButtonUnstyled = requireButtonUnstyled();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function useMenuItem$1(props) {
		  var _itemState$disabled;
		  const {
		    disabled = false,
		    ref,
		    label
		  } = props;
		  const id = (0, _utils.unstable_useId)();
		  const menuContext = React.useContext(_MenuUnstyled.MenuUnstyledContext);
		  const itemRef = React.useRef(null);
		  const handleRef = (0, _utils.unstable_useForkRef)(itemRef, ref);
		  if (menuContext === null) {
		    throw new Error('MenuItemUnstyled must be used within a MenuUnstyled');
		  }
		  const {
		    registerItem,
		    unregisterItem,
		    open
		  } = menuContext;
		  React.useEffect(() => {
		    if (id === undefined) {
		      return undefined;
		    }
		    registerItem(id, {
		      disabled,
		      id,
		      ref: itemRef,
		      label
		    });
		    return () => unregisterItem(id);
		  }, [id, registerItem, unregisterItem, disabled, ref, label]);
		  const {
		    getRootProps: getButtonProps,
		    focusVisible
		  } = (0, _ButtonUnstyled.useButton)({
		    disabled,
		    focusableWhenDisabled: true,
		    ref: handleRef
		  });

		  // Ensure the menu item is focused when highlighted
		  const [focusRequested, requestFocus] = React.useState(false);
		  const focusIfRequested = React.useCallback(() => {
		    if (focusRequested && itemRef.current != null) {
		      itemRef.current.focus();
		      requestFocus(false);
		    }
		  }, [focusRequested]);
		  React.useEffect(() => {
		    focusIfRequested();
		  });
		  React.useDebugValue({
		    id,
		    disabled,
		    label
		  });
		  const itemState = menuContext.getItemState(id != null ? id : '');
		  const {
		    highlighted
		  } = itemState != null ? itemState : {
		    highlighted: false
		  };
		  React.useEffect(() => {
		    requestFocus(highlighted && open);
		  }, [highlighted, open]);
		  if (id === undefined) {
		    return {
		      getRootProps: other => (0, _extends2.default)({}, other, getButtonProps(other), {
		        role: 'menuitem'
		      }),
		      disabled: false,
		      focusVisible
		    };
		  }
		  return {
		    getRootProps: other => {
		      const optionProps = menuContext.getItemProps(id, other);
		      return (0, _extends2.default)({}, other, getButtonProps(other), {
		        tabIndex: optionProps.tabIndex,
		        id: optionProps.id,
		        role: 'menuitem'
		      });
		    },
		    disabled: (_itemState$disabled = itemState == null ? void 0 : itemState.disabled) != null ? _itemState$disabled : false,
		    focusVisible
		  };
		}
		return useMenuItem;
	}

	var hasRequiredMenuItemUnstyled$1;

	function requireMenuItemUnstyled$1 () {
		if (hasRequiredMenuItemUnstyled$1) return MenuItemUnstyled;
		hasRequiredMenuItemUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(MenuItemUnstyled, "__esModule", {
		  value: true
		});
		MenuItemUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _menuItemUnstyledClasses = requireMenuItemUnstyledClasses();
		var _useMenuItem = _interopRequireDefault(requireUseMenuItem());
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _useSlotProps = _interopRequireDefault(requireUseSlotProps());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["children", "disabled", "component", "label", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function getUtilityClasses(ownerState) {
		  const {
		    disabled,
		    focusVisible
		  } = ownerState;
		  const slots = {
		    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
		  };
		  return (0, _composeClasses.default)(slots, _menuItemUnstyledClasses.getMenuItemUnstyledUtilityClass, {});
		}

		/**
		 *
		 * Demos:
		 *
		 * - [Unstyled Menu](https://mui.com/base/react-menu/)
		 *
		 * API:
		 *
		 * - [MenuItemUnstyled API](https://mui.com/base/api/menu-item-unstyled/)
		 */
		const MenuItemUnstyled$1 = /*#__PURE__*/React.forwardRef(function MenuItemUnstyled(props, ref) {
		  var _ref;
		  const {
		      children,
		      disabled: disabledProp = false,
		      component,
		      label,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const {
		    getRootProps,
		    disabled,
		    focusVisible
		  } = (0, _useMenuItem.default)({
		    disabled: disabledProp,
		    ref,
		    label
		  });
		  const ownerState = (0, _extends2.default)({}, props, {
		    disabled,
		    focusVisible
		  });
		  const classes = getUtilityClasses(ownerState);
		  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'li';
		  const rootProps = (0, _useSlotProps.default)({
		    elementType: Root,
		    getSlotProps: getRootProps,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    className: classes.root,
		    ownerState
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps, {
		    children: children
		  }));
		});
		MenuItemUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the menu item will be disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * A text representation of the menu item's content.
		   * Used for keyboard text navigation matching.
		   */
		  label: _propTypes.default.string,
		  /**
		   * The props used for each slot inside the MenuItem.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the MenuItem.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  })
		} ;
		var _default = MenuItemUnstyled$1;
		MenuItemUnstyled.default = _default;
		return MenuItemUnstyled;
	}

	var MenuItemUnstyled_types = {};

	var hasRequiredMenuItemUnstyled_types;

	function requireMenuItemUnstyled_types () {
		if (hasRequiredMenuItemUnstyled_types) return MenuItemUnstyled_types;
		hasRequiredMenuItemUnstyled_types = 1;

		Object.defineProperty(MenuItemUnstyled_types, "__esModule", {
		  value: true
		});
		return MenuItemUnstyled_types;
	}

	var useMenuItem_types = {};

	var hasRequiredUseMenuItem_types;

	function requireUseMenuItem_types () {
		if (hasRequiredUseMenuItem_types) return useMenuItem_types;
		hasRequiredUseMenuItem_types = 1;

		Object.defineProperty(useMenuItem_types, "__esModule", {
		  value: true
		});
		return useMenuItem_types;
	}

	var hasRequiredMenuItemUnstyled;

	function requireMenuItemUnstyled () {
		if (hasRequiredMenuItemUnstyled) return MenuItemUnstyled$1;
		hasRequiredMenuItemUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  menuItemUnstyledClasses: true,
			  useMenuItem: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _MenuItemUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "menuItemUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _menuItemUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "useMenuItem", {
			  enumerable: true,
			  get: function () {
			    return _useMenuItem.default;
			  }
			});
			var _MenuItemUnstyled = _interopRequireDefault(requireMenuItemUnstyled$1());
			var _MenuItemUnstyled2 = requireMenuItemUnstyled_types();
			Object.keys(_MenuItemUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _MenuItemUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _MenuItemUnstyled2[key];
			    }
			  });
			});
			var _menuItemUnstyledClasses = _interopRequireWildcard(requireMenuItemUnstyledClasses());
			Object.keys(_menuItemUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _menuItemUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _menuItemUnstyledClasses[key];
			    }
			  });
			});
			var _useMenuItem = _interopRequireDefault(requireUseMenuItem());
			var _useMenuItem2 = requireUseMenuItem_types();
			Object.keys(_useMenuItem2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _useMenuItem2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _useMenuItem2[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (MenuItemUnstyled$1));
		return MenuItemUnstyled$1;
	}

	var ModalUnstyled$1 = {};

	var ModalUnstyled = {};

	var ModalManager = {};

	var hasRequiredModalManager;

	function requireModalManager () {
		if (hasRequiredModalManager) return ModalManager;
		hasRequiredModalManager = 1;

		Object.defineProperty(ModalManager, "__esModule", {
		  value: true
		});
		ModalManager.ariaHidden = ariaHidden;
		ModalManager.default = void 0;
		var _utils = requireUtils$4();
		// Is a vertical scrollbar displayed?
		function isOverflowing(container) {
		  const doc = (0, _utils.unstable_ownerDocument)(container);
		  if (doc.body === container) {
		    return (0, _utils.unstable_ownerWindow)(container).innerWidth > doc.documentElement.clientWidth;
		  }
		  return container.scrollHeight > container.clientHeight;
		}
		function ariaHidden(element, show) {
		  if (show) {
		    element.setAttribute('aria-hidden', 'true');
		  } else {
		    element.removeAttribute('aria-hidden');
		  }
		}
		function getPaddingRight(element) {
		  return parseInt((0, _utils.unstable_ownerWindow)(element).getComputedStyle(element).paddingRight, 10) || 0;
		}
		function isAriaHiddenForbiddenOnElement(element) {
		  // The forbidden HTML tags are the ones from ARIA specification that
		  // can be children of body and can't have aria-hidden attribute.
		  // cf. https://www.w3.org/TR/html-aria/#docconformance
		  const forbiddenTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE', 'LINK', 'MAP', 'META', 'NOSCRIPT', 'PICTURE', 'COL', 'COLGROUP', 'PARAM', 'SLOT', 'SOURCE', 'TRACK'];
		  const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
		  const isInputHidden = element.tagName === 'INPUT' && element.getAttribute('type') === 'hidden';
		  return isForbiddenTagName || isInputHidden;
		}
		function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
		  const blacklist = [mountElement, currentElement, ...elementsToExclude];
		  [].forEach.call(container.children, element => {
		    const isNotExcludedElement = blacklist.indexOf(element) === -1;
		    const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
		    if (isNotExcludedElement && isNotForbiddenElement) {
		      ariaHidden(element, show);
		    }
		  });
		}
		function findIndexOf(items, callback) {
		  let idx = -1;
		  items.some((item, index) => {
		    if (callback(item)) {
		      idx = index;
		      return true;
		    }
		    return false;
		  });
		  return idx;
		}
		function handleContainer(containerInfo, props) {
		  const restoreStyle = [];
		  const container = containerInfo.container;
		  if (!props.disableScrollLock) {
		    if (isOverflowing(container)) {
		      // Compute the size before applying overflow hidden to avoid any scroll jumps.
		      const scrollbarSize = (0, _utils.unstable_getScrollbarSize)((0, _utils.unstable_ownerDocument)(container));
		      restoreStyle.push({
		        value: container.style.paddingRight,
		        property: 'padding-right',
		        el: container
		      });
		      // Use computed style, here to get the real padding to add our scrollbar width.
		      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;

		      // .mui-fixed is a global helper.
		      const fixedElements = (0, _utils.unstable_ownerDocument)(container).querySelectorAll('.mui-fixed');
		      [].forEach.call(fixedElements, element => {
		        restoreStyle.push({
		          value: element.style.paddingRight,
		          property: 'padding-right',
		          el: element
		        });
		        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
		      });
		    }
		    let scrollContainer;
		    if (container.parentNode instanceof DocumentFragment) {
		      scrollContainer = (0, _utils.unstable_ownerDocument)(container).body;
		    } else {
		      // Improve Gatsby support
		      // https://css-tricks.com/snippets/css/force-vertical-scrollbar/
		      const parent = container.parentElement;
		      const containerWindow = (0, _utils.unstable_ownerWindow)(container);
		      scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container;
		    }

		    // Block the scroll even if no scrollbar is visible to account for mobile keyboard
		    // screensize shrink.
		    restoreStyle.push({
		      value: scrollContainer.style.overflow,
		      property: 'overflow',
		      el: scrollContainer
		    }, {
		      value: scrollContainer.style.overflowX,
		      property: 'overflow-x',
		      el: scrollContainer
		    }, {
		      value: scrollContainer.style.overflowY,
		      property: 'overflow-y',
		      el: scrollContainer
		    });
		    scrollContainer.style.overflow = 'hidden';
		  }
		  const restore = () => {
		    restoreStyle.forEach(({
		      value,
		      el,
		      property
		    }) => {
		      if (value) {
		        el.style.setProperty(property, value);
		      } else {
		        el.style.removeProperty(property);
		      }
		    });
		  };
		  return restore;
		}
		function getHiddenSiblings(container) {
		  const hiddenSiblings = [];
		  [].forEach.call(container.children, element => {
		    if (element.getAttribute('aria-hidden') === 'true') {
		      hiddenSiblings.push(element);
		    }
		  });
		  return hiddenSiblings;
		}
		/**
		 * @ignore - do not document.
		 *
		 * Proper state management for containers and the modals in those containers.
		 * Simplified, but inspired by react-overlay's ModalManager class.
		 * Used by the Modal to ensure proper styling of containers.
		 */
		let ModalManager$1 = class ModalManager {
		  constructor() {
		    this.containers = void 0;
		    this.modals = void 0;
		    this.modals = [];
		    this.containers = [];
		  }
		  add(modal, container) {
		    let modalIndex = this.modals.indexOf(modal);
		    if (modalIndex !== -1) {
		      return modalIndex;
		    }
		    modalIndex = this.modals.length;
		    this.modals.push(modal);

		    // If the modal we are adding is already in the DOM.
		    if (modal.modalRef) {
		      ariaHidden(modal.modalRef, false);
		    }
		    const hiddenSiblings = getHiddenSiblings(container);
		    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
		    const containerIndex = findIndexOf(this.containers, item => item.container === container);
		    if (containerIndex !== -1) {
		      this.containers[containerIndex].modals.push(modal);
		      return modalIndex;
		    }
		    this.containers.push({
		      modals: [modal],
		      container,
		      restore: null,
		      hiddenSiblings
		    });
		    return modalIndex;
		  }
		  mount(modal, props) {
		    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
		    const containerInfo = this.containers[containerIndex];
		    if (!containerInfo.restore) {
		      containerInfo.restore = handleContainer(containerInfo, props);
		    }
		  }
		  remove(modal, ariaHiddenState = true) {
		    const modalIndex = this.modals.indexOf(modal);
		    if (modalIndex === -1) {
		      return modalIndex;
		    }
		    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
		    const containerInfo = this.containers[containerIndex];
		    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
		    this.modals.splice(modalIndex, 1);

		    // If that was the last modal in a container, clean up the container.
		    if (containerInfo.modals.length === 0) {
		      // The modal might be closed before it had the chance to be mounted in the DOM.
		      if (containerInfo.restore) {
		        containerInfo.restore();
		      }
		      if (modal.modalRef) {
		        // In case the modal wasn't in the DOM yet.
		        ariaHidden(modal.modalRef, ariaHiddenState);
		      }
		      ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
		      this.containers.splice(containerIndex, 1);
		    } else {
		      // Otherwise make sure the next top modal is visible to a screen reader.
		      const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
		      // as soon as a modal is adding its modalRef is undefined. it can't set
		      // aria-hidden because the dom element doesn't exist either
		      // when modal was unmounted before modalRef gets null
		      if (nextTop.modalRef) {
		        ariaHidden(nextTop.modalRef, false);
		      }
		    }
		    return modalIndex;
		  }
		  isTopModal(modal) {
		    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
		  }
		};
		ModalManager.default = ModalManager$1;
		return ModalManager;
	}

	var modalUnstyledClasses = {};

	var hasRequiredModalUnstyledClasses;

	function requireModalUnstyledClasses () {
		if (hasRequiredModalUnstyledClasses) return modalUnstyledClasses;
		hasRequiredModalUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(modalUnstyledClasses, "__esModule", {
		  value: true
		});
		modalUnstyledClasses.default = void 0;
		modalUnstyledClasses.getModalUtilityClass = getModalUtilityClass;
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		function getModalUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiModal', slot);
		}
		const modalUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiModal', ['root', 'hidden']);
		var _default = modalUnstyledClasses$1;
		modalUnstyledClasses.default = _default;
		return modalUnstyledClasses;
	}

	var hasRequiredModalUnstyled$1;

	function requireModalUnstyled$1 () {
		if (hasRequiredModalUnstyled$1) return ModalUnstyled;
		hasRequiredModalUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ModalUnstyled, "__esModule", {
		  value: true
		});
		ModalUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _Portal = _interopRequireDefault(Portal$2);
		var _ModalManager = _interopRequireWildcard(requireModalManager());
		var _FocusTrap = _interopRequireDefault(requireFocusTrap());
		var _modalUnstyledClasses = requireModalUnstyledClasses();
		var _utils2 = requireUtils$3();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["children", "classes", "closeAfterTransition", "component", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    open,
		    exited,
		    classes
		  } = ownerState;
		  const slots = {
		    root: ['root', !open && exited && 'hidden']
		  };
		  return (0, _composeClasses.default)(slots, _modalUnstyledClasses.getModalUtilityClass, classes);
		};
		function getContainer(container) {
		  return typeof container === 'function' ? container() : container;
		}
		function getHasTransition(props) {
		  return props.children ? props.children.props.hasOwnProperty('in') : false;
		}

		// A modal manager used to track and manage the state of open Modals.
		// Modals don't open on the server so this won't conflict with concurrent requests.
		const defaultManager = new _ModalManager.default();

		/**
		 * Modal is a lower-level construct that is leveraged by the following components:
		 *
		 * - [Dialog](/material-ui/api/dialog/)
		 * - [Drawer](/material-ui/api/drawer/)
		 * - [Menu](/material-ui/api/menu/)
		 * - [Popover](/material-ui/api/popover/)
		 *
		 * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
		 * rather than directly using Modal.
		 *
		 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
		 */
		const ModalUnstyled$1 = /*#__PURE__*/React.forwardRef(function ModalUnstyled(props, ref) {
		  var _props$ariaHidden, _ref;
		  const {
		      children,
		      classes: classesProp,
		      closeAfterTransition = false,
		      component,
		      container,
		      disableAutoFocus = false,
		      disableEnforceFocus = false,
		      disableEscapeKeyDown = false,
		      disablePortal = false,
		      disableRestoreFocus = false,
		      disableScrollLock = false,
		      hideBackdrop = false,
		      keepMounted = false,
		      // private
		      // eslint-disable-next-line react/prop-types
		      manager = defaultManager,
		      onBackdropClick,
		      onClose,
		      onKeyDown,
		      open,
		      /* eslint-disable react/prop-types */
		      onTransitionEnter,
		      onTransitionExited,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const [exited, setExited] = React.useState(!open);
		  const modal = React.useRef({});
		  const mountNodeRef = React.useRef(null);
		  const modalRef = React.useRef(null);
		  const handleRef = (0, _utils.unstable_useForkRef)(modalRef, ref);
		  const hasTransition = getHasTransition(props);
		  const ariaHiddenProp = (_props$ariaHidden = props['aria-hidden']) != null ? _props$ariaHidden : true;
		  const getDoc = () => (0, _utils.unstable_ownerDocument)(mountNodeRef.current);
		  const getModal = () => {
		    modal.current.modalRef = modalRef.current;
		    modal.current.mountNode = mountNodeRef.current;
		    return modal.current;
		  };
		  const handleMounted = () => {
		    manager.mount(getModal(), {
		      disableScrollLock
		    });

		    // Fix a bug on Chrome where the scroll isn't initially 0.
		    modalRef.current.scrollTop = 0;
		  };
		  const handleOpen = (0, _utils.unstable_useEventCallback)(() => {
		    const resolvedContainer = getContainer(container) || getDoc().body;
		    manager.add(getModal(), resolvedContainer);

		    // The element was already mounted.
		    if (modalRef.current) {
		      handleMounted();
		    }
		  });
		  const isTopModal = React.useCallback(() => manager.isTopModal(getModal()), [manager]);
		  const handlePortalRef = (0, _utils.unstable_useEventCallback)(node => {
		    mountNodeRef.current = node;
		    if (!node) {
		      return;
		    }
		    if (open && isTopModal()) {
		      handleMounted();
		    } else {
		      (0, _ModalManager.ariaHidden)(modalRef.current, ariaHiddenProp);
		    }
		  });
		  const handleClose = React.useCallback(() => {
		    manager.remove(getModal(), ariaHiddenProp);
		  }, [manager, ariaHiddenProp]);
		  React.useEffect(() => {
		    return () => {
		      handleClose();
		    };
		  }, [handleClose]);
		  React.useEffect(() => {
		    if (open) {
		      handleOpen();
		    } else if (!hasTransition || !closeAfterTransition) {
		      handleClose();
		    }
		  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
		  const ownerState = (0, _extends2.default)({}, props, {
		    classes: classesProp,
		    closeAfterTransition,
		    disableAutoFocus,
		    disableEnforceFocus,
		    disableEscapeKeyDown,
		    disablePortal,
		    disableRestoreFocus,
		    disableScrollLock,
		    exited,
		    hideBackdrop,
		    keepMounted
		  });
		  const classes = useUtilityClasses(ownerState);
		  const handleEnter = () => {
		    setExited(false);
		    if (onTransitionEnter) {
		      onTransitionEnter();
		    }
		  };
		  const handleExited = () => {
		    setExited(true);
		    if (onTransitionExited) {
		      onTransitionExited();
		    }
		    if (closeAfterTransition) {
		      handleClose();
		    }
		  };
		  const handleBackdropClick = event => {
		    if (event.target !== event.currentTarget) {
		      return;
		    }
		    if (onBackdropClick) {
		      onBackdropClick(event);
		    }
		    if (onClose) {
		      onClose(event, 'backdropClick');
		    }
		  };
		  const handleKeyDown = event => {
		    if (onKeyDown) {
		      onKeyDown(event);
		    }

		    // The handler doesn't take event.defaultPrevented into account:
		    //
		    // event.preventDefault() is meant to stop default behaviors like
		    // clicking a checkbox to check it, hitting a button to submit a form,
		    // and hitting left arrow to move the cursor in a text input etc.
		    // Only special HTML elements have these default behaviors.
		    if (event.key !== 'Escape' || !isTopModal()) {
		      return;
		    }
		    if (!disableEscapeKeyDown) {
		      // Swallow the event, in case someone is listening for the escape key on the body.
		      event.stopPropagation();
		      if (onClose) {
		        onClose(event, 'escapeKeyDown');
		      }
		    }
		  };
		  const childProps = {};
		  if (children.props.tabIndex === undefined) {
		    childProps.tabIndex = '-1';
		  }

		  // It's a Transition like component
		  if (hasTransition) {
		    childProps.onEnter = (0, _utils.unstable_createChainedFunction)(handleEnter, children.props.onEnter);
		    childProps.onExited = (0, _utils.unstable_createChainedFunction)(handleExited, children.props.onExited);
		  }
		  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';
		  const rootProps = (0, _utils2.useSlotProps)({
		    elementType: Root,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: {
		      ref: handleRef,
		      role: 'presentation',
		      onKeyDown: handleKeyDown
		    },
		    className: classes.root,
		    ownerState
		  });
		  const BackdropComponent = slots.backdrop;
		  const backdropProps = (0, _utils2.useSlotProps)({
		    elementType: BackdropComponent,
		    externalSlotProps: slotProps.backdrop,
		    additionalProps: {
		      'aria-hidden': true,
		      onClick: handleBackdropClick,
		      open
		    },
		    className: classes.backdrop,
		    ownerState
		  });
		  if (!keepMounted && !open && (!hasTransition || exited)) {
		    return null;
		  }
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Portal.default, {
		    ref: handlePortalRef,
		    container: container,
		    disablePortal: disablePortal,
		    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(Root, (0, _extends2.default)({}, rootProps, {
		      children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/(0, _jsxRuntime.jsx)(BackdropComponent, (0, _extends2.default)({}, backdropProps)) : null, /*#__PURE__*/(0, _jsxRuntime.jsx)(_FocusTrap.default, {
		        disableEnforceFocus: disableEnforceFocus,
		        disableAutoFocus: disableAutoFocus,
		        disableRestoreFocus: disableRestoreFocus,
		        isEnabled: isTopModal,
		        open: open,
		        children: /*#__PURE__*/React.cloneElement(children, childProps)
		      })]
		    }))
		  });
		});
		ModalUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * A single child content element.
		   */
		  children: _utils.elementAcceptingRef.isRequired,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * When set to true the Modal waits until a nested Transition is completed before closing.
		   * @default false
		   */
		  closeAfterTransition: _propTypes.default.bool,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * An HTML element or function that returns one.
		   * The `container` will have the portal children appended to it.
		   *
		   * By default, it uses the body of the top-level document object,
		   * so it's simply `document.body` most of the time.
		   */
		  container: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
		  /**
		   * If `true`, the modal will not automatically shift focus to itself when it opens, and
		   * replace it to the last focused element when it closes.
		   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
		   *
		   * Generally this should never be set to `true` as it makes the modal less
		   * accessible to assistive technologies, like screen readers.
		   * @default false
		   */
		  disableAutoFocus: _propTypes.default.bool,
		  /**
		   * If `true`, the modal will not prevent focus from leaving the modal while open.
		   *
		   * Generally this should never be set to `true` as it makes the modal less
		   * accessible to assistive technologies, like screen readers.
		   * @default false
		   */
		  disableEnforceFocus: _propTypes.default.bool,
		  /**
		   * If `true`, hitting escape will not fire the `onClose` callback.
		   * @default false
		   */
		  disableEscapeKeyDown: _propTypes.default.bool,
		  /**
		   * The `children` will be under the DOM hierarchy of the parent component.
		   * @default false
		   */
		  disablePortal: _propTypes.default.bool,
		  /**
		   * If `true`, the modal will not restore focus to previously focused element once
		   * modal is hidden or unmounted.
		   * @default false
		   */
		  disableRestoreFocus: _propTypes.default.bool,
		  /**
		   * Disable the scroll lock behavior.
		   * @default false
		   */
		  disableScrollLock: _propTypes.default.bool,
		  /**
		   * If `true`, the backdrop is not rendered.
		   * @default false
		   */
		  hideBackdrop: _propTypes.default.bool,
		  /**
		   * Always keep the children in the DOM.
		   * This prop can be useful in SEO situation or
		   * when you want to maximize the responsiveness of the Modal.
		   * @default false
		   */
		  keepMounted: _propTypes.default.bool,
		  /**
		   * Callback fired when the backdrop is clicked.
		   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
		   */
		  onBackdropClick: _propTypes.default.func,
		  /**
		   * Callback fired when the component requests to be closed.
		   * The `reason` parameter can optionally be used to control the response to `onClose`.
		   *
		   * @param {object} event The event source of the callback.
		   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
		   */
		  onClose: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onKeyDown: _propTypes.default.func,
		  /**
		   * If `true`, the component is shown.
		   */
		  open: _propTypes.default.bool.isRequired,
		  /**
		   * The props used for each slot inside the Modal.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    backdrop: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the Modal.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    backdrop: _propTypes.default.elementType,
		    root: _propTypes.default.elementType
		  })
		} ;
		var _default = ModalUnstyled$1;
		ModalUnstyled.default = _default;
		return ModalUnstyled;
	}

	var hasRequiredModalUnstyled;

	function requireModalUnstyled () {
		if (hasRequiredModalUnstyled) return ModalUnstyled$1;
		hasRequiredModalUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "ModalManager", {
			  enumerable: true,
			  get: function () {
			    return _ModalManager.default;
			  }
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _ModalUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "getModalUtilityClass", {
			  enumerable: true,
			  get: function () {
			    return _modalUnstyledClasses.getModalUtilityClass;
			  }
			});
			Object.defineProperty(exports, "modalUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _modalUnstyledClasses.default;
			  }
			});
			var _ModalUnstyled = _interopRequireDefault(requireModalUnstyled$1());
			var _ModalManager = _interopRequireDefault(requireModalManager());
			var _modalUnstyledClasses = _interopRequireWildcard(requireModalUnstyledClasses());
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ModalUnstyled$1));
		return ModalUnstyled$1;
	}

	var MultiSelectUnstyled$1 = {};

	var MultiSelectUnstyled = {};

	var utils$3 = {};

	var useSelect_types = {};

	var hasRequiredUseSelect_types;

	function requireUseSelect_types () {
		if (hasRequiredUseSelect_types) return useSelect_types;
		hasRequiredUseSelect_types = 1;

		Object.defineProperty(useSelect_types, "__esModule", {
		  value: true
		});
		useSelect_types.isOptionGroup = isOptionGroup;
		function isOptionGroup(child) {
		  return !!child.options;
		}
		return useSelect_types;
	}

	var hasRequiredUtils$2;

	function requireUtils$2 () {
		if (hasRequiredUtils$2) return utils$3;
		hasRequiredUtils$2 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(utils$3, "__esModule", {
		  value: true
		});
		utils$3.areOptionsEqual = areOptionsEqual;
		utils$3.flattenOptionGroups = flattenOptionGroups;
		utils$3.getOptionsFromChildren = getOptionsFromChildren;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _useSelect = requireUseSelect_types();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function areOptionsEqual(option1, option2) {
		  return option1.label === option2.label && option1.value === option2.value && option1.disabled === option2.disabled;
		}
		function getOptionsFromChildren(children) {
		  if (children == null) {
		    return [];
		  }
		  const selectChildren = [];
		  React.Children.forEach(children, node => {
		    var _props, _props2, _element$props$disabl2;
		    const nodeChildren = node == null ? void 0 : (_props = node.props) == null ? void 0 : _props.children;
		    if ((node == null ? void 0 : (_props2 = node.props) == null ? void 0 : _props2.value) === undefined) {
		      if (nodeChildren != null) {
		        var _element$props$disabl;
		        const element = node;
		        const group = {
		          options: getOptionsFromChildren(nodeChildren),
		          label: element.props.label,
		          disabled: (_element$props$disabl = element.props.disabled) != null ? _element$props$disabl : false
		        };
		        selectChildren.push(group);
		      }
		      return;
		    }
		    const element = node;
		    const option = {
		      value: element.props.value,
		      label: element.props.label || element.props.children,
		      disabled: (_element$props$disabl2 = element.props.disabled) != null ? _element$props$disabl2 : false
		    };
		    selectChildren.push(option);
		  });
		  return selectChildren != null ? selectChildren : [];
		}
		function flattenOptionGroups(groupedOptions, isGroupDisabled = false) {
		  let flatOptions = [];
		  groupedOptions.forEach(optionOrGroup => {
		    if ((0, _useSelect.isOptionGroup)(optionOrGroup)) {
		      flatOptions = flatOptions.concat(flattenOptionGroups(optionOrGroup.options, optionOrGroup.disabled));
		    } else {
		      flatOptions.push((0, _extends2.default)({}, optionOrGroup, {
		        disabled: isGroupDisabled || optionOrGroup.disabled
		      }));
		    }
		  });
		  return flatOptions;
		}
		return utils$3;
	}

	var useSelect = {};

	var defaultOptionStringifier = {};

	var hasRequiredDefaultOptionStringifier;

	function requireDefaultOptionStringifier () {
		if (hasRequiredDefaultOptionStringifier) return defaultOptionStringifier;
		hasRequiredDefaultOptionStringifier = 1;

		Object.defineProperty(defaultOptionStringifier, "__esModule", {
		  value: true
		});
		defaultOptionStringifier.default = void 0;
		const defaultOptionStringifier$1 = option => {
		  const {
		    label,
		    value
		  } = option;
		  if (typeof label === 'string') {
		    return label;
		  }
		  if (typeof value === 'string') {
		    return value;
		  }

		  // Fallback string representation
		  return String(option);
		};
		var _default = defaultOptionStringifier$1;
		defaultOptionStringifier.default = _default;
		return defaultOptionStringifier;
	}

	var hasRequiredUseSelect;

	function requireUseSelect () {
		if (hasRequiredUseSelect) return useSelect;
		hasRequiredUseSelect = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useSelect, "__esModule", {
		  value: true
		});
		useSelect.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$4();
		var _ButtonUnstyled = requireButtonUnstyled();
		var _ListboxUnstyled = requireListboxUnstyled();
		var _defaultOptionStringifier = _interopRequireDefault(requireDefaultOptionStringifier());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function useSelect$1(props) {
		  const {
		    buttonRef: buttonRefProp,
		    defaultValue,
		    disabled = false,
		    listboxId: listboxIdProp,
		    listboxRef: listboxRefProp,
		    multiple = false,
		    onChange,
		    onOpenChange,
		    open = false,
		    options,
		    optionStringifier = _defaultOptionStringifier.default,
		    value: valueProp
		  } = props;
		  const buttonRef = React.useRef(null);
		  const handleButtonRef = (0, _utils.unstable_useForkRef)(buttonRefProp, buttonRef);
		  const listboxRef = React.useRef(null);
		  const listboxId = (0, _utils.unstable_useId)(listboxIdProp);
		  const [value, setValue] = (0, _utils.unstable_useControlled)({
		    controlled: valueProp,
		    default: defaultValue,
		    name: 'SelectUnstyled',
		    state: 'value'
		  });

		  // prevents closing the listbox on keyUp right after opening it
		  const ignoreEnterKeyUp = React.useRef(false);

		  // prevents reopening the listbox when button is clicked
		  // (listbox closes on lost focus, then immediately reopens on click)
		  const ignoreClick = React.useRef(false);

		  // Ensure the listbox is focused after opening
		  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);
		  const focusListboxIfRequested = React.useCallback(() => {
		    if (listboxFocusRequested && listboxRef.current != null) {
		      listboxRef.current.focus();
		      requestListboxFocus(false);
		    }
		  }, [listboxFocusRequested]);
		  const handleListboxRef = (0, _utils.unstable_useForkRef)(listboxRefProp, listboxRef, focusListboxIfRequested);
		  React.useEffect(() => {
		    focusListboxIfRequested();
		  }, [focusListboxIfRequested]);
		  React.useEffect(() => {
		    requestListboxFocus(open);
		  }, [open]);
		  const createHandleMouseDown = otherHandlers => event => {
		    var _otherHandlers$onMous;
		    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
		    if (!event.defaultPrevented && open) {
		      ignoreClick.current = true;
		    }
		  };
		  const createHandleButtonClick = otherHandlers => event => {
		    var _otherHandlers$onClic;
		    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
		    if (!event.defaultPrevented && !ignoreClick.current) {
		      onOpenChange == null ? void 0 : onOpenChange(!open);
		    }
		    ignoreClick.current = false;
		  };
		  const createHandleButtonKeyDown = otherHandlers => event => {
		    var _otherHandlers$onKeyD;
		    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
		    if (event.defaultPrevented) {
		      return;
		    }
		    if (event.key === 'Enter') {
		      ignoreEnterKeyUp.current = true;
		    }
		    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {
		      event.preventDefault();
		      onOpenChange == null ? void 0 : onOpenChange(true);
		    }
		  };
		  const createHandleListboxKeyUp = otherHandlers => event => {
		    var _otherHandlers$onKeyU;
		    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);
		    if (event.defaultPrevented) {
		      return;
		    }
		    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];
		    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {
		      var _buttonRef$current;
		      buttonRef == null ? void 0 : (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();
		    }
		    ignoreEnterKeyUp.current = false;
		  };
		  const createHandleListboxItemClick = otherHandlers => event => {
		    var _otherHandlers$onClic2;
		    otherHandlers == null ? void 0 : (_otherHandlers$onClic2 = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic2.call(otherHandlers, event);
		    if (event.defaultPrevented) {
		      return;
		    }
		    if (!multiple) {
		      onOpenChange == null ? void 0 : onOpenChange(false);
		    }
		  };
		  const createHandleListboxBlur = otherHandlers => event => {
		    var _otherHandlers$onBlur;
		    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
		    if (!event.defaultPrevented) {
		      onOpenChange == null ? void 0 : onOpenChange(false);
		    }
		  };
		  const listboxReducer = (state, action) => {
		    const newState = (0, _ListboxUnstyled.defaultListboxReducer)(state, action);

		    // change selection when listbox is closed
		    if (action.type === _ListboxUnstyled.ActionTypes.keyDown && !open && (action.event.key === 'ArrowUp' || action.event.key === 'ArrowDown')) {
		      return (0, _extends2.default)({}, newState, {
		        selectedValue: newState.highlightedValue
		      });
		    }
		    if (action.type === _ListboxUnstyled.ActionTypes.blur || action.type === _ListboxUnstyled.ActionTypes.setValue || action.type === _ListboxUnstyled.ActionTypes.optionsChange) {
		      return (0, _extends2.default)({}, newState, {
		        highlightedValue: newState.selectedValue
		      });
		    }
		    return newState;
		  };
		  const {
		    getRootProps: getButtonRootProps,
		    active: buttonActive,
		    focusVisible: buttonFocusVisible
		  } = (0, _ButtonUnstyled.useButton)({
		    disabled,
		    ref: handleButtonRef
		  });
		  const selectedOption = React.useMemo(() => {
		    var _props$options$find;
		    return props.multiple ? props.options.filter(o => value.includes(o.value)) : (_props$options$find = props.options.find(o => o.value === value)) != null ? _props$options$find : null;
		  }, [props.multiple, props.options, value]);
		  let useListboxParameters;
		  if (props.multiple) {
		    const onChangeMultiple = onChange;
		    useListboxParameters = {
		      id: listboxId,
		      isOptionDisabled: o => {
		        var _o$disabled;
		        return (_o$disabled = o == null ? void 0 : o.disabled) != null ? _o$disabled : false;
		      },
		      optionComparer: (o, v) => (o == null ? void 0 : o.value) === (v == null ? void 0 : v.value),
		      listboxRef: handleListboxRef,
		      multiple: true,
		      onChange: (e, newOptions) => {
		        const newValues = newOptions.map(o => o.value);
		        setValue(newValues);
		        onChangeMultiple == null ? void 0 : onChangeMultiple(e, newValues);
		      },
		      options,
		      optionStringifier,
		      value: selectedOption
		    };
		  } else {
		    const onChangeSingle = onChange;
		    useListboxParameters = {
		      id: listboxId,
		      isOptionDisabled: o => {
		        var _o$disabled2;
		        return (_o$disabled2 = o == null ? void 0 : o.disabled) != null ? _o$disabled2 : false;
		      },
		      optionComparer: (o, v) => (o == null ? void 0 : o.value) === (v == null ? void 0 : v.value),
		      listboxRef: handleListboxRef,
		      multiple: false,
		      onChange: (e, option) => {
		        var _option$value, _option$value2;
		        setValue((_option$value = option == null ? void 0 : option.value) != null ? _option$value : null);
		        onChangeSingle == null ? void 0 : onChangeSingle(e, (_option$value2 = option == null ? void 0 : option.value) != null ? _option$value2 : null);
		      },
		      options,
		      optionStringifier,
		      stateReducer: listboxReducer,
		      value: selectedOption
		    };
		  }
		  const {
		    getRootProps: getListboxRootProps,
		    getOptionProps: getListboxOptionProps,
		    getOptionState,
		    highlightedOption,
		    selectedOption: listboxSelectedOption
		  } = (0, _ListboxUnstyled.useListbox)(useListboxParameters);
		  const getButtonProps = (otherHandlers = {}) => {
		    return (0, _extends2.default)({}, getButtonRootProps((0, _extends2.default)({}, otherHandlers, {
		      onClick: createHandleButtonClick(otherHandlers),
		      onMouseDown: createHandleMouseDown(otherHandlers),
		      onKeyDown: createHandleButtonKeyDown(otherHandlers)
		    })), {
		      role: 'combobox',
		      'aria-expanded': open,
		      'aria-haspopup': 'listbox',
		      'aria-controls': listboxId
		    });
		  };
		  const getListboxProps = (otherHandlers = {}) => getListboxRootProps((0, _extends2.default)({}, otherHandlers, {
		    onBlur: createHandleListboxBlur(otherHandlers),
		    onKeyUp: createHandleListboxKeyUp(otherHandlers)
		  }));
		  const getOptionProps = (option, otherHandlers = {}) => {
		    return getListboxOptionProps(option, (0, _extends2.default)({}, otherHandlers, {
		      onClick: createHandleListboxItemClick(otherHandlers)
		    }));
		  };
		  React.useDebugValue({
		    selectedOption: listboxSelectedOption,
		    highlightedOption,
		    open
		  });
		  return {
		    buttonActive,
		    buttonFocusVisible,
		    disabled,
		    getButtonProps,
		    getListboxProps,
		    getOptionProps,
		    getOptionState,
		    open,
		    value
		  };
		}
		var _default = useSelect$1;
		useSelect.default = _default;
		return useSelect;
	}

	var SelectUnstyledContext = {};

	var hasRequiredSelectUnstyledContext;

	function requireSelectUnstyledContext () {
		if (hasRequiredSelectUnstyledContext) return SelectUnstyledContext;
		hasRequiredSelectUnstyledContext = 1;

		Object.defineProperty(SelectUnstyledContext, "__esModule", {
		  value: true
		});
		SelectUnstyledContext.SelectUnstyledContext = void 0;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const SelectUnstyledContext$1 = /*#__PURE__*/React.createContext(undefined);
		SelectUnstyledContext.SelectUnstyledContext = SelectUnstyledContext$1;
		return SelectUnstyledContext;
	}

	var selectUnstyledClasses = {};

	var hasRequiredSelectUnstyledClasses;

	function requireSelectUnstyledClasses () {
		if (hasRequiredSelectUnstyledClasses) return selectUnstyledClasses;
		hasRequiredSelectUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(selectUnstyledClasses, "__esModule", {
		  value: true
		});
		selectUnstyledClasses.default = void 0;
		selectUnstyledClasses.getSelectUnstyledUtilityClass = getSelectUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getSelectUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiSelect', slot);
		}
		const selectUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiSelect', ['root', 'button', 'listbox', 'popper', 'active', 'expanded', 'disabled', 'focusVisible']);
		var _default = selectUnstyledClasses$1;
		selectUnstyledClasses.default = _default;
		return selectUnstyledClasses;
	}

	var hasRequiredMultiSelectUnstyled$1;

	function requireMultiSelectUnstyled$1 () {
		if (hasRequiredMultiSelectUnstyled$1) return MultiSelectUnstyled;
		hasRequiredMultiSelectUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(MultiSelectUnstyled, "__esModule", {
		  value: true
		});
		MultiSelectUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _utils2 = requireUtils$2();
		var _useSelect = _interopRequireDefault(requireUseSelect());
		var _utils3 = requireUtils$3();
		var _PopperUnstyled = _interopRequireDefault(requirePopperUnstyled());
		var _SelectUnstyledContext = requireSelectUnstyledContext();
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _selectUnstyledClasses = requireSelectUnstyledClasses();
		var _defaultOptionStringifier = _interopRequireDefault(requireDefaultOptionStringifier());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["autoFocus", "children", "component", "defaultListboxOpen", "defaultValue", "disabled", "getSerializedValue", "listboxId", "listboxOpen", "name", "onChange", "onListboxOpenChange", "optionStringifier", "renderValue", "slotProps", "slots", "value"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function defaultRenderMultipleValues(selectedOptions) {
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
		    children: selectedOptions.map(o => o.label).join(', ')
		  });
		}
		function defaultFormValueProvider(selectedOptions) {
		  if (selectedOptions.length === 0) {
		    return '';
		  }
		  if (selectedOptions.every(o => typeof o.value === 'string' || typeof o.value === 'number' || typeof o.value === 'boolean')) {
		    return selectedOptions.map(o => String(o.value));
		  }
		  return JSON.stringify(selectedOptions.map(o => o.value));
		}
		function useUtilityClasses(ownerState) {
		  const {
		    active,
		    disabled,
		    open,
		    focusVisible
		  } = ownerState;
		  const slots = {
		    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],
		    listbox: ['listbox', disabled && 'disabled'],
		    popper: ['popper']
		  };
		  return (0, _composeClasses.default)(slots, _selectUnstyledClasses.getSelectUnstyledUtilityClass, {});
		}

		/**
		 * The foundation for building custom-styled multi-selection select components.
		 *
		 * Demos:
		 *
		 * - [Unstyled Select](https://mui.com/base/react-select/)
		 *
		 * API:
		 *
		 * - [MultiSelectUnstyled API](https://mui.com/base/api/multi-select-unstyled/)
		 */
		const MultiSelectUnstyled$1 = /*#__PURE__*/React.forwardRef(function MultiSelectUnstyled(props, forwardedRef) {
		  var _ref, _slots$listbox, _slots$popper;
		  const {
		      autoFocus,
		      children,
		      component,
		      defaultListboxOpen = false,
		      defaultValue = [],
		      disabled: disabledProp,
		      getSerializedValue = defaultFormValueProvider,
		      listboxId,
		      listboxOpen: listboxOpenProp,
		      name,
		      onChange,
		      onListboxOpenChange,
		      optionStringifier = _defaultOptionStringifier.default,
		      renderValue: renderValueProp,
		      slotProps = {},
		      slots = {},
		      value: valueProp
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderMultipleValues;
		  const [groupedOptions, setGroupedOptions] = React.useState([]);
		  const options = React.useMemo(() => (0, _utils2.flattenOptionGroups)(groupedOptions), [groupedOptions]);
		  const [listboxOpen, setListboxOpen] = (0, _utils.unstable_useControlled)({
		    controlled: listboxOpenProp,
		    default: defaultListboxOpen,
		    name: 'MultiSelectUnstyled',
		    state: 'listboxOpen'
		  });
		  React.useEffect(() => {
		    setGroupedOptions((0, _utils2.getOptionsFromChildren)(children));
		  }, [children]);
		  const [buttonDefined, setButtonDefined] = React.useState(false);
		  const buttonRef = React.useRef(null);
		  const listboxRef = React.useRef(null);
		  const Button = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';
		  const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';
		  const Popper = (_slots$popper = slots.popper) != null ? _slots$popper : _PopperUnstyled.default;
		  const handleButtonRefChange = React.useCallback(element => {
		    setButtonDefined(element != null);
		  }, []);
		  const handleButtonRef = (0, _utils.unstable_useForkRef)(forwardedRef, buttonRef, handleButtonRefChange);
		  React.useEffect(() => {
		    if (autoFocus) {
		      buttonRef.current.focus();
		    }
		  }, [autoFocus]);
		  const handleOpenChange = isOpen => {
		    setListboxOpen(isOpen);
		    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
		  };
		  const {
		    buttonActive,
		    buttonFocusVisible,
		    disabled,
		    getButtonProps,
		    getListboxProps,
		    getOptionProps,
		    getOptionState,
		    value
		  } = (0, _useSelect.default)({
		    buttonRef: handleButtonRef,
		    defaultValue,
		    disabled: disabledProp,
		    listboxId,
		    multiple: true,
		    onChange,
		    onOpenChange: handleOpenChange,
		    open: listboxOpen,
		    options,
		    optionStringifier,
		    value: valueProp
		  });
		  const ownerState = (0, _extends2.default)({}, props, {
		    active: buttonActive,
		    defaultListboxOpen,
		    disabled,
		    focusVisible: buttonFocusVisible,
		    open: listboxOpen,
		    renderValue,
		    value
		  });
		  const classes = useUtilityClasses(ownerState);
		  const selectedOptions = React.useMemo(() => {
		    if (value == null) {
		      return [];
		    }
		    return options.filter(o => value.includes(o.value));
		  }, [options, value]);
		  const buttonProps = (0, _utils3.useSlotProps)({
		    elementType: Button,
		    getSlotProps: getButtonProps,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    ownerState,
		    className: classes.root
		  });
		  const listboxProps = (0, _utils3.useSlotProps)({
		    elementType: ListboxRoot,
		    getSlotProps: getListboxProps,
		    externalSlotProps: slotProps.listbox,
		    additionalProps: {
		      ref: listboxRef
		    },
		    ownerState,
		    className: classes.listbox
		  });
		  const popperProps = (0, _utils3.useSlotProps)({
		    elementType: Popper,
		    externalSlotProps: slotProps.popper,
		    additionalProps: {
		      anchorEl: buttonRef.current,
		      disablePortal: true,
		      open: listboxOpen,
		      placement: 'bottom-start',
		      role: undefined
		    },
		    ownerState,
		    className: classes.popper
		  });
		  const context = React.useMemo(() => ({
		    getOptionProps,
		    getOptionState,
		    listboxRef
		  }), [getOptionProps, getOptionState]);
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
		    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Button, (0, _extends2.default)({}, buttonProps, {
		      children: renderValue(selectedOptions)
		    })), buttonDefined && /*#__PURE__*/(0, _jsxRuntime.jsx)(Popper, (0, _extends2.default)({}, popperProps, {
		      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ListboxRoot, (0, _extends2.default)({}, listboxProps, {
		        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SelectUnstyledContext.SelectUnstyledContext.Provider, {
		          value: context,
		          children: children
		        })
		      }))
		    })), name && /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
		      type: "hidden",
		      name: name,
		      value: getSerializedValue(selectedOptions)
		    })]
		  });
		});
		MultiSelectUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * If `true`, the select element is focused during the first mount
		   * @default false
		   */
		  autoFocus: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the select will be initially open.
		   * @default false
		   */
		  defaultListboxOpen: _propTypes.default.bool,
		  /**
		   * The default selected values. Use when the component is not controlled.
		   * @default []
		   */
		  defaultValue: _propTypes.default.array,
		  /**
		   * If `true`, the select is disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * A function to convert the currently selected values to a type accepted by HTML input.
		   * Used to set a value of a hidden input associated with the select,
		   * so that the selected values can be posted with a form.
		   */
		  getSerializedValue: _propTypes.default.func,
		  /**
		   * `id` attribute of the listbox element.
		   * Also used to derive the `id` attributes of options.
		   */
		  listboxId: _propTypes.default.string,
		  /**
		   * Controls the open state of the select's listbox.
		   * @default undefined
		   */
		  listboxOpen: _propTypes.default.bool,
		  /**
		   * Name of the element. For example used by the server to identify the fields in form submits.
		   * If the name is provided, the component will render a hidden input element that can be submitted to a server.
		   */
		  name: _propTypes.default.string,
		  /**
		   * Callback fired when an option is selected.
		   */
		  onChange: _propTypes.default.func,
		  /**
		   * Callback fired when the component requests to be opened.
		   * Use in controlled mode (see listboxOpen).
		   */
		  onListboxOpenChange: _propTypes.default.func,
		  /**
		   * A function used to convert the option label to a string.
		   * It's useful when labels are elements and need to be converted to plain text
		   * to enable navigation using character keys on a keyboard.
		   *
		   * @default defaultOptionStringifier
		   */
		  optionStringifier: _propTypes.default.func,
		  /**
		   * Function that customizes the rendering of the selected values.
		   */
		  renderValue: _propTypes.default.func,
		  /**
		   * The props used for each slot inside the MultiSelect.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    listbox: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    popper: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the MultiSelect.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default /* @typescript-to-proptypes-ignore */.shape({
		    listbox: _propTypes.default.elementType,
		    popper: _propTypes.default.elementType,
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * The selected values.
		   * Set to an empty array to deselect all options.
		   */
		  value: _propTypes.default.array
		} ;
		var _default = MultiSelectUnstyled$1;
		MultiSelectUnstyled.default = _default;
		return MultiSelectUnstyled;
	}

	var MultiSelectUnstyled_types = {};

	var hasRequiredMultiSelectUnstyled_types;

	function requireMultiSelectUnstyled_types () {
		if (hasRequiredMultiSelectUnstyled_types) return MultiSelectUnstyled_types;
		hasRequiredMultiSelectUnstyled_types = 1;

		Object.defineProperty(MultiSelectUnstyled_types, "__esModule", {
		  value: true
		});
		return MultiSelectUnstyled_types;
	}

	var hasRequiredMultiSelectUnstyled;

	function requireMultiSelectUnstyled () {
		if (hasRequiredMultiSelectUnstyled) return MultiSelectUnstyled$1;
		hasRequiredMultiSelectUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _MultiSelectUnstyled.default;
			  }
			});
			var _MultiSelectUnstyled = _interopRequireDefault(requireMultiSelectUnstyled$1());
			var _MultiSelectUnstyled2 = requireMultiSelectUnstyled_types();
			Object.keys(_MultiSelectUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _MultiSelectUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _MultiSelectUnstyled2[key];
			    }
			  });
			});
	} (MultiSelectUnstyled$1));
		return MultiSelectUnstyled$1;
	}

	var NoSsr$1 = {};

	var NoSsr = {};

	var hasRequiredNoSsr$1;

	function requireNoSsr$1 () {
		if (hasRequiredNoSsr$1) return NoSsr;
		hasRequiredNoSsr$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(NoSsr, "__esModule", {
		  value: true
		});
		NoSsr.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).
		 *
		 * This component can be useful in a variety of situations:
		 *
		 * *   Escape hatch for broken dependencies not supporting SSR.
		 * *   Improve the time-to-first paint on the client by only rendering above the fold.
		 * *   Reduce the rendering time on the server.
		 * *   Under too heavy server load, you can turn on service degradation.
		 *
		 * Demos:
		 *
		 * - [No SSR](https://mui.com/base/react-no-ssr/)
		 *
		 * API:
		 *
		 * - [NoSsr API](https://mui.com/base/api/no-ssr/)
		 */
		function NoSsr$1(props) {
		  const {
		    children,
		    defer = false,
		    fallback = null
		  } = props;
		  const [mountedState, setMountedState] = React.useState(false);
		  (0, _utils.unstable_useEnhancedEffect)(() => {
		    if (!defer) {
		      setMountedState(true);
		    }
		  }, [defer]);
		  React.useEffect(() => {
		    if (defer) {
		      setMountedState(true);
		    }
		  }, [defer]);

		  // We need the Fragment here to force react-docgen to recognise NoSsr as a component.
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
		    children: mountedState ? children : fallback
		  });
		}
		NoSsr$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * You can wrap a node.
		   */
		  children: _propTypes.default.node,
		  /**
		   * If `true`, the component will not only prevent server-side rendering.
		   * It will also defer the rendering of the children into a different screen frame.
		   * @default false
		   */
		  defer: _propTypes.default.bool,
		  /**
		   * The fallback content to display.
		   * @default null
		   */
		  fallback: _propTypes.default.node
		} ;
		{
		  // eslint-disable-next-line
		  NoSsr$1['propTypes' + ''] = (0, _utils.exactProp)(NoSsr$1.propTypes);
		}
		var _default = NoSsr$1;
		NoSsr.default = _default;
		return NoSsr;
	}

	var NoSsr_types = {};

	var hasRequiredNoSsr_types;

	function requireNoSsr_types () {
		if (hasRequiredNoSsr_types) return NoSsr_types;
		hasRequiredNoSsr_types = 1;

		Object.defineProperty(NoSsr_types, "__esModule", {
		  value: true
		});
		return NoSsr_types;
	}

	var hasRequiredNoSsr;

	function requireNoSsr () {
		if (hasRequiredNoSsr) return NoSsr$1;
		hasRequiredNoSsr = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _NoSsr.default;
			  }
			});
			var _NoSsr = _interopRequireDefault(requireNoSsr$1());
			var _NoSsr2 = requireNoSsr_types();
			Object.keys(_NoSsr2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _NoSsr2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _NoSsr2[key];
			    }
			  });
			});
	} (NoSsr$1));
		return NoSsr$1;
	}

	var OptionGroupUnstyled$1 = {};

	var OptionGroupUnstyled = {};

	var optionGroupUnstyledClasses = {};

	var hasRequiredOptionGroupUnstyledClasses;

	function requireOptionGroupUnstyledClasses () {
		if (hasRequiredOptionGroupUnstyledClasses) return optionGroupUnstyledClasses;
		hasRequiredOptionGroupUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(optionGroupUnstyledClasses, "__esModule", {
		  value: true
		});
		optionGroupUnstyledClasses.default = void 0;
		optionGroupUnstyledClasses.getOptionGroupUnstyledUtilityClass = getOptionGroupUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getOptionGroupUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiOptionGroup', slot);
		}
		const optionGroupUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiOptionGroup', ['root', 'label', 'list']);
		var _default = optionGroupUnstyledClasses$1;
		optionGroupUnstyledClasses.default = _default;
		return optionGroupUnstyledClasses;
	}

	var hasRequiredOptionGroupUnstyled$1;

	function requireOptionGroupUnstyled$1 () {
		if (hasRequiredOptionGroupUnstyled$1) return OptionGroupUnstyled;
		hasRequiredOptionGroupUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(OptionGroupUnstyled, "__esModule", {
		  value: true
		});
		OptionGroupUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _optionGroupUnstyledClasses = requireOptionGroupUnstyledClasses();
		var _utils = requireUtils$3();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["component", "disabled", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function useUtilityClasses(disabled) {
		  const slots = {
		    root: ['root', disabled && 'disabled'],
		    label: ['label'],
		    list: ['list']
		  };
		  return (0, _composeClasses.default)(slots, _optionGroupUnstyledClasses.getOptionGroupUnstyledUtilityClass, {});
		}

		/**
		 * An unstyled option group to be used within a SelectUnstyled.
		 *
		 * Demos:
		 *
		 * - [Unstyled Select](https://mui.com/base/react-select/)
		 *
		 * API:
		 *
		 * - [OptionGroupUnstyled API](https://mui.com/base/api/option-group-unstyled/)
		 */
		const OptionGroupUnstyled$1 = /*#__PURE__*/React.forwardRef(function OptionGroupUnstyled(props, ref) {
		  const {
		      component,
		      disabled = false,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const Root = component || (slots == null ? void 0 : slots.root) || 'li';
		  const Label = (slots == null ? void 0 : slots.label) || 'span';
		  const List = (slots == null ? void 0 : slots.list) || 'ul';
		  const classes = useUtilityClasses(disabled);
		  const rootProps = (0, _utils.useSlotProps)({
		    elementType: Root,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: {
		      ref
		    },
		    ownerState: props,
		    className: classes.root
		  });
		  const labelProps = (0, _utils.useSlotProps)({
		    elementType: Label,
		    externalSlotProps: slotProps.label,
		    ownerState: props,
		    className: classes.label
		  });
		  const listProps = (0, _utils.useSlotProps)({
		    elementType: List,
		    externalSlotProps: slotProps.list,
		    ownerState: props,
		    className: classes.list
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Root, (0, _extends2.default)({}, rootProps, {
		    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Label, (0, _extends2.default)({}, labelProps, {
		      children: props.label
		    })), /*#__PURE__*/(0, _jsxRuntime.jsx)(List, (0, _extends2.default)({}, listProps, {
		      children: props.children
		    }))]
		  }));
		});
		OptionGroupUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true` all the options in the group will be disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * The human-readable description of the group.
		   */
		  label: _propTypes.default.node,
		  /**
		   * The props used for each slot inside the Input.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    label: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    list: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the OptionGroupUnstyled.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    label: _propTypes.default.elementType,
		    list: _propTypes.default.elementType,
		    root: _propTypes.default.elementType
		  })
		} ;
		var _default = OptionGroupUnstyled$1;
		OptionGroupUnstyled.default = _default;
		return OptionGroupUnstyled;
	}

	var OptionGroupUnstyled_types = {};

	var hasRequiredOptionGroupUnstyled_types;

	function requireOptionGroupUnstyled_types () {
		if (hasRequiredOptionGroupUnstyled_types) return OptionGroupUnstyled_types;
		hasRequiredOptionGroupUnstyled_types = 1;

		Object.defineProperty(OptionGroupUnstyled_types, "__esModule", {
		  value: true
		});
		return OptionGroupUnstyled_types;
	}

	var hasRequiredOptionGroupUnstyled;

	function requireOptionGroupUnstyled () {
		if (hasRequiredOptionGroupUnstyled) return OptionGroupUnstyled$1;
		hasRequiredOptionGroupUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  optionGroupUnstyledClasses: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _OptionGroupUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "optionGroupUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _optionGroupUnstyledClasses.default;
			  }
			});
			var _OptionGroupUnstyled = _interopRequireDefault(requireOptionGroupUnstyled$1());
			var _OptionGroupUnstyled2 = requireOptionGroupUnstyled_types();
			Object.keys(_OptionGroupUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _OptionGroupUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _OptionGroupUnstyled2[key];
			    }
			  });
			});
			var _optionGroupUnstyledClasses = _interopRequireWildcard(requireOptionGroupUnstyledClasses());
			Object.keys(_optionGroupUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _optionGroupUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _optionGroupUnstyledClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (OptionGroupUnstyled$1));
		return OptionGroupUnstyled$1;
	}

	var OptionUnstyled$1 = {};

	var OptionUnstyled = {};

	var optionUnstyledClasses = {};

	var hasRequiredOptionUnstyledClasses;

	function requireOptionUnstyledClasses () {
		if (hasRequiredOptionUnstyledClasses) return optionUnstyledClasses;
		hasRequiredOptionUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(optionUnstyledClasses, "__esModule", {
		  value: true
		});
		optionUnstyledClasses.default = void 0;
		optionUnstyledClasses.getOptionUnstyledUtilityClass = getOptionUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getOptionUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiOption', slot);
		}
		const optionUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiOption', ['root', 'disabled', 'selected', 'highlighted']);
		var _default = optionUnstyledClasses$1;
		optionUnstyledClasses.default = _default;
		return optionUnstyledClasses;
	}

	var hasRequiredOptionUnstyled$1;

	function requireOptionUnstyled$1 () {
		if (hasRequiredOptionUnstyled$1) return OptionUnstyled;
		hasRequiredOptionUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(OptionUnstyled, "__esModule", {
		  value: true
		});
		OptionUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _SelectUnstyledContext = requireSelectUnstyledContext();
		var _optionUnstyledClasses = requireOptionUnstyledClasses();
		var _utils2 = requireUtils$3();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["children", "component", "disabled", "label", "slotProps", "slots", "value"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function useUtilityClasses(ownerState) {
		  const {
		    disabled,
		    highlighted,
		    selected
		  } = ownerState;
		  const slots = {
		    root: ['root', disabled && 'disabled', highlighted && 'highlighted', selected && 'selected']
		  };
		  return (0, _composeClasses.default)(slots, _optionUnstyledClasses.getOptionUnstyledUtilityClass, {});
		}

		/**
		 * An unstyled option to be used within a SelectUnstyled.
		 */
		const OptionUnstyled$1 = /*#__PURE__*/React.forwardRef(function OptionUnstyled(props, ref) {
		  const {
		      children,
		      component,
		      disabled,
		      label,
		      slotProps = {},
		      slots = {},
		      value
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const selectContext = React.useContext(_SelectUnstyledContext.SelectUnstyledContext);
		  if (!selectContext) {
		    throw new Error('OptionUnstyled must be used within a SelectUnstyled');
		  }
		  const Root = component || slots.root || 'li';
		  const selectOption = {
		    value,
		    label: label || children,
		    disabled
		  };
		  const optionState = selectContext.getOptionState(selectOption);
		  const optionProps = selectContext.getOptionProps(selectOption);
		  const listboxRef = selectContext.listboxRef;
		  const ownerState = (0, _extends2.default)({}, props, optionState);
		  const optionRef = React.useRef(null);
		  const handleRef = (0, _utils.unstable_useForkRef)(ref, optionRef);
		  React.useEffect(() => {
		    // Scroll to the currently highlighted option
		    if (optionState.highlighted) {
		      if (!listboxRef.current || !optionRef.current) {
		        return;
		      }
		      const listboxClientRect = listboxRef.current.getBoundingClientRect();
		      const optionClientRect = optionRef.current.getBoundingClientRect();
		      if (optionClientRect.top < listboxClientRect.top) {
		        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;
		      } else if (optionClientRect.bottom > listboxClientRect.bottom) {
		        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;
		      }
		    }
		  }, [optionState.highlighted, listboxRef]);
		  const classes = useUtilityClasses(ownerState);
		  const rootProps = (0, _utils2.useSlotProps)({
		    elementType: Root,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: (0, _extends2.default)({}, optionProps, {
		      ref: handleRef
		    }),
		    className: classes.root,
		    ownerState
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps, {
		    children: children
		  }));
		});
		OptionUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the option will be disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * A text representation of the option's content.
		   * Used for keyboard text navigation matching.
		   */
		  label: _propTypes.default.string,
		  /**
		   * The props used for each slot inside the OptionUnstyled.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the OptionUnstyled.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * The value of the option.
		   */
		  value: _propTypes.default.any.isRequired
		} ;

		/**
		 * An unstyled option to be used within a SelectUnstyled.
		 *
		 * Demos:
		 *
		 * - [Unstyled Select](https://mui.com/base/react-select/)
		 *
		 * API:
		 *
		 * - [OptionUnstyled API](https://mui.com/base/api/option-unstyled/)
		 */
		var _default = /*#__PURE__*/React.memo(OptionUnstyled$1);
		OptionUnstyled.default = _default;
		return OptionUnstyled;
	}

	var OptionUnstyled_types = {};

	var hasRequiredOptionUnstyled_types;

	function requireOptionUnstyled_types () {
		if (hasRequiredOptionUnstyled_types) return OptionUnstyled_types;
		hasRequiredOptionUnstyled_types = 1;

		Object.defineProperty(OptionUnstyled_types, "__esModule", {
		  value: true
		});
		return OptionUnstyled_types;
	}

	var hasRequiredOptionUnstyled;

	function requireOptionUnstyled () {
		if (hasRequiredOptionUnstyled) return OptionUnstyled$1;
		hasRequiredOptionUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  optionUnstyledClasses: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _OptionUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "optionUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _optionUnstyledClasses.default;
			  }
			});
			var _OptionUnstyled = _interopRequireDefault(requireOptionUnstyled$1());
			var _OptionUnstyled2 = requireOptionUnstyled_types();
			Object.keys(_OptionUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _OptionUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _OptionUnstyled2[key];
			    }
			  });
			});
			var _optionUnstyledClasses = _interopRequireWildcard(requireOptionUnstyledClasses());
			Object.keys(_optionUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _optionUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _optionUnstyledClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (OptionUnstyled$1));
		return OptionUnstyled$1;
	}

	var SelectUnstyled$1 = {};

	var SelectUnstyled = {};

	var hasRequiredSelectUnstyled$1;

	function requireSelectUnstyled$1 () {
		if (hasRequiredSelectUnstyled$1) return SelectUnstyled;
		hasRequiredSelectUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(SelectUnstyled, "__esModule", {
		  value: true
		});
		SelectUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _utils2 = requireUtils$2();
		var _useSelect = _interopRequireDefault(requireUseSelect());
		var _utils3 = requireUtils$3();
		var _PopperUnstyled = _interopRequireDefault(requirePopperUnstyled());
		var _SelectUnstyledContext = requireSelectUnstyledContext();
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _selectUnstyledClasses = requireSelectUnstyledClasses();
		var _defaultOptionStringifier = _interopRequireDefault(requireDefaultOptionStringifier());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["autoFocus", "children", "component", "defaultValue", "defaultListboxOpen", "disabled", "getSerializedValue", "listboxId", "listboxOpen", "name", "onChange", "onListboxOpenChange", "optionStringifier", "renderValue", "slotProps", "slots", "value"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function defaultRenderSingleValue(selectedOption) {
		  var _selectedOption$label;
		  return (_selectedOption$label = selectedOption == null ? void 0 : selectedOption.label) != null ? _selectedOption$label : '';
		}
		function defaultFormValueProvider(selectedOption) {
		  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {
		    return '';
		  }
		  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {
		    return selectedOption.value;
		  }
		  return JSON.stringify(selectedOption.value);
		}
		function useUtilityClasses(ownerState) {
		  const {
		    active,
		    disabled,
		    open,
		    focusVisible
		  } = ownerState;
		  const slots = {
		    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active', open && 'expanded'],
		    listbox: ['listbox', disabled && 'disabled'],
		    popper: ['popper']
		  };
		  return (0, _composeClasses.default)(slots, _selectUnstyledClasses.getSelectUnstyledUtilityClass, {});
		}

		/**
		 * The foundation for building custom-styled select components.
		 *
		 * Demos:
		 *
		 * - [Unstyled Select](https://mui.com/base/react-select/)
		 *
		 * API:
		 *
		 * - [SelectUnstyled API](https://mui.com/base/api/select-unstyled/)
		 */
		const SelectUnstyled$1 = /*#__PURE__*/React.forwardRef(function SelectUnstyled(props, forwardedRef) {
		  var _ref, _slots$listbox, _slots$popper;
		  const {
		      autoFocus,
		      children,
		      component,
		      defaultValue,
		      defaultListboxOpen = false,
		      disabled: disabledProp,
		      getSerializedValue = defaultFormValueProvider,
		      listboxId,
		      listboxOpen: listboxOpenProp,
		      name,
		      onChange,
		      onListboxOpenChange,
		      optionStringifier = _defaultOptionStringifier.default,
		      renderValue: renderValueProp,
		      slotProps = {},
		      slots = {},
		      value: valueProp
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const renderValue = renderValueProp != null ? renderValueProp : defaultRenderSingleValue;
		  const [groupedOptions, setGroupedOptions] = React.useState([]);
		  const options = React.useMemo(() => (0, _utils2.flattenOptionGroups)(groupedOptions), [groupedOptions]);
		  const [listboxOpen, setListboxOpen] = (0, _utils.unstable_useControlled)({
		    controlled: listboxOpenProp,
		    default: defaultListboxOpen,
		    name: 'SelectUnstyled',
		    state: 'listboxOpen'
		  });
		  React.useEffect(() => {
		    setGroupedOptions((0, _utils2.getOptionsFromChildren)(children));
		  }, [children]);
		  const [buttonDefined, setButtonDefined] = React.useState(false);
		  const buttonRef = React.useRef(null);
		  const listboxRef = React.useRef(null);
		  const Button = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';
		  const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : 'ul';
		  const Popper = (_slots$popper = slots.popper) != null ? _slots$popper : _PopperUnstyled.default;
		  const handleButtonRefChange = React.useCallback(element => {
		    setButtonDefined(element != null);
		  }, []);
		  const handleButtonRef = (0, _utils.unstable_useForkRef)(forwardedRef, buttonRef, handleButtonRefChange);
		  React.useEffect(() => {
		    if (autoFocus) {
		      buttonRef.current.focus();
		    }
		  }, [autoFocus]);
		  const handleOpenChange = isOpen => {
		    setListboxOpen(isOpen);
		    onListboxOpenChange == null ? void 0 : onListboxOpenChange(isOpen);
		  };
		  const {
		    buttonActive,
		    buttonFocusVisible,
		    disabled,
		    getButtonProps,
		    getListboxProps,
		    getOptionProps,
		    getOptionState,
		    value
		  } = (0, _useSelect.default)({
		    buttonRef: handleButtonRef,
		    defaultValue,
		    disabled: disabledProp,
		    listboxId,
		    multiple: false,
		    onChange,
		    onOpenChange: handleOpenChange,
		    open: listboxOpen,
		    options,
		    optionStringifier,
		    value: valueProp
		  });
		  const ownerState = (0, _extends2.default)({}, props, {
		    active: buttonActive,
		    defaultListboxOpen,
		    disabled,
		    focusVisible: buttonFocusVisible,
		    open: listboxOpen,
		    renderValue,
		    value
		  });
		  const classes = useUtilityClasses(ownerState);
		  const selectedOption = React.useMemo(() => {
		    var _options$find;
		    return (_options$find = options.find(o => value === o.value)) != null ? _options$find : null;
		  }, [options, value]);
		  const buttonProps = (0, _utils3.useSlotProps)({
		    elementType: Button,
		    getSlotProps: getButtonProps,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    ownerState,
		    className: classes.root
		  });
		  const listboxProps = (0, _utils3.useSlotProps)({
		    elementType: ListboxRoot,
		    getSlotProps: getListboxProps,
		    externalSlotProps: slotProps.listbox,
		    additionalProps: {
		      ref: listboxRef
		    },
		    ownerState,
		    className: classes.listbox
		  });
		  const popperProps = (0, _utils3.useSlotProps)({
		    elementType: Popper,
		    externalSlotProps: slotProps.popper,
		    additionalProps: {
		      anchorEl: buttonRef.current,
		      disablePortal: true,
		      open: listboxOpen,
		      placement: 'bottom-start',
		      role: undefined
		    },
		    ownerState,
		    className: classes.popper
		  });
		  const context = React.useMemo(() => ({
		    getOptionProps,
		    getOptionState,
		    listboxRef
		  }), [getOptionProps, getOptionState]);
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
		    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Button, (0, _extends2.default)({}, buttonProps, {
		      children: renderValue(selectedOption)
		    })), buttonDefined && /*#__PURE__*/(0, _jsxRuntime.jsx)(Popper, (0, _extends2.default)({}, popperProps, {
		      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ListboxRoot, (0, _extends2.default)({}, listboxProps, {
		        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_SelectUnstyledContext.SelectUnstyledContext.Provider, {
		          value: context,
		          children: children
		        })
		      }))
		    })), name && /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
		      type: "hidden",
		      name: name,
		      value: getSerializedValue(selectedOption)
		    })]
		  });
		});
		SelectUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * If `true`, the select element is focused during the first mount
		   * @default false
		   */
		  autoFocus: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the select will be initially open.
		   * @default false
		   */
		  defaultListboxOpen: _propTypes.default.bool,
		  /**
		   * The default selected value. Use when the component is not controlled.
		   */
		  defaultValue: _propTypes.default.any,
		  /**
		   * If `true`, the select is disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * A function to convert the currently selected value to a string.
		   * Used to set a value of a hidden input associated with the select,
		   * so that the selected value can be posted with a form.
		   */
		  getSerializedValue: _propTypes.default.func,
		  /**
		   * `id` attribute of the listbox element.
		   * Also used to derive the `id` attributes of options.
		   */
		  listboxId: _propTypes.default.string,
		  /**
		   * Controls the open state of the select's listbox.
		   * @default undefined
		   */
		  listboxOpen: _propTypes.default.bool,
		  /**
		   * Name of the element. For example used by the server to identify the fields in form submits.
		   * If the name is provided, the component will render a hidden input element that can be submitted to a server.
		   */
		  name: _propTypes.default.string,
		  /**
		   * Callback fired when an option is selected.
		   */
		  onChange: _propTypes.default.func,
		  /**
		   * Callback fired when the component requests to be opened.
		   * Use in controlled mode (see listboxOpen).
		   */
		  onListboxOpenChange: _propTypes.default.func,
		  /**
		   * A function used to convert the option label to a string.
		   * It's useful when labels are elements and need to be converted to plain text
		   * to enable navigation using character keys on a keyboard.
		   *
		   * @default defaultOptionStringifier
		   */
		  optionStringifier: _propTypes.default.func,
		  /**
		   * Function that customizes the rendering of the selected value.
		   */
		  renderValue: _propTypes.default.func,
		  /**
		   * The props used for each slot inside the Input.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    listbox: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    popper: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the Select.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default /* @typescript-to-proptypes-ignore */.shape({
		    listbox: _propTypes.default.elementType,
		    popper: _propTypes.default.elementType,
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * The selected value.
		   * Set to `null` to deselect all options.
		   */
		  value: _propTypes.default.any
		} ;
		var _default = SelectUnstyled$1;
		SelectUnstyled.default = _default;
		return SelectUnstyled;
	}

	var SelectUnstyled_types = {};

	var hasRequiredSelectUnstyled_types;

	function requireSelectUnstyled_types () {
		if (hasRequiredSelectUnstyled_types) return SelectUnstyled_types;
		hasRequiredSelectUnstyled_types = 1;

		Object.defineProperty(SelectUnstyled_types, "__esModule", {
		  value: true
		});
		return SelectUnstyled_types;
	}

	var hasRequiredSelectUnstyled;

	function requireSelectUnstyled () {
		if (hasRequiredSelectUnstyled) return SelectUnstyled$1;
		hasRequiredSelectUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  selectUnstyledClasses: true,
			  useSelect: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _SelectUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "selectUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _selectUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "useSelect", {
			  enumerable: true,
			  get: function () {
			    return _useSelect.default;
			  }
			});
			var _SelectUnstyled = _interopRequireDefault(requireSelectUnstyled$1());
			var _SelectUnstyledContext = requireSelectUnstyledContext();
			Object.keys(_SelectUnstyledContext).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _SelectUnstyledContext[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _SelectUnstyledContext[key];
			    }
			  });
			});
			var _selectUnstyledClasses = _interopRequireWildcard(requireSelectUnstyledClasses());
			Object.keys(_selectUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _selectUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _selectUnstyledClasses[key];
			    }
			  });
			});
			var _SelectUnstyled2 = requireSelectUnstyled_types();
			Object.keys(_SelectUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _SelectUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _SelectUnstyled2[key];
			    }
			  });
			});
			var _useSelect = _interopRequireDefault(requireUseSelect());
			var _useSelect2 = requireUseSelect_types();
			Object.keys(_useSelect2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _useSelect2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _useSelect2[key];
			    }
			  });
			});
			var _utils = requireUtils$2();
			Object.keys(_utils).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _utils[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _utils[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (SelectUnstyled$1));
		return SelectUnstyled$1;
	}

	var SliderUnstyled$1 = {};

	var SliderUnstyled = {};

	var sliderUnstyledClasses = {};

	var hasRequiredSliderUnstyledClasses;

	function requireSliderUnstyledClasses () {
		if (hasRequiredSliderUnstyledClasses) return sliderUnstyledClasses;
		hasRequiredSliderUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(sliderUnstyledClasses, "__esModule", {
		  value: true
		});
		sliderUnstyledClasses.default = void 0;
		sliderUnstyledClasses.getSliderUtilityClass = getSliderUtilityClass;
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		function getSliderUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiSlider', slot);
		}
		const sliderUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiSlider', ['root', 'active', 'focusVisible', 'disabled', 'dragging', 'marked', 'vertical', 'trackInverted', 'trackFalse', 'rail', 'track', 'mark', 'markActive', 'markLabel', 'markLabelActive', 'thumb', 'valueLabel', 'valueLabelOpen', 'valueLabelCircle', 'valueLabelLabel']);
		var _default = sliderUnstyledClasses$1;
		sliderUnstyledClasses.default = _default;
		return sliderUnstyledClasses;
	}

	var SliderValueLabelUnstyled = {};

	var hasRequiredSliderValueLabelUnstyled;

	function requireSliderValueLabelUnstyled () {
		if (hasRequiredSliderValueLabelUnstyled) return SliderValueLabelUnstyled;
		hasRequiredSliderValueLabelUnstyled = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(SliderValueLabelUnstyled, "__esModule", {
		  value: true
		});
		SliderValueLabelUnstyled.default = SliderValueLabelUnstyled$1;
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _sliderUnstyledClasses = _interopRequireDefault(requireSliderUnstyledClasses());
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useValueLabelClasses = props => {
		  const {
		    open
		  } = props;
		  const utilityClasses = {
		    offset: (0, _clsx.default)(open && _sliderUnstyledClasses.default.valueLabelOpen),
		    circle: _sliderUnstyledClasses.default.valueLabelCircle,
		    label: _sliderUnstyledClasses.default.valueLabelLabel
		  };
		  return utilityClasses;
		};

		/**
		 * @ignore - internal component.
		 */
		function SliderValueLabelUnstyled$1(props) {
		  const {
		    children,
		    className,
		    value
		  } = props;
		  const classes = useValueLabelClasses(props);
		  return /*#__PURE__*/React.cloneElement(children, {
		    className: (0, _clsx.default)(children.props.className)
		  }, /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
		    children: [children.props.children, /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
		      className: (0, _clsx.default)(classes.offset, className),
		      "aria-hidden": true,
		      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
		        className: classes.circle,
		        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
		          className: classes.label,
		          children: value
		        })
		      })
		    })]
		  }));
		}
		SliderValueLabelUnstyled$1.propTypes = {
		  children: _propTypes.default.element.isRequired,
		  className: _propTypes.default.string,
		  theme: _propTypes.default.any,
		  value: _propTypes.default.node
		} ;
		return SliderValueLabelUnstyled;
	}

	var useSlider = {};

	var hasRequiredUseSlider;

	function requireUseSlider () {
		if (hasRequiredUseSlider) return useSlider;
		hasRequiredUseSlider = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useSlider, "__esModule", {
		  value: true
		});
		useSlider.Identity = void 0;
		useSlider.default = useSlider$1;
		useSlider.valueToPercent = valueToPercent;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$4();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
		function asc(a, b) {
		  return a - b;
		}
		function clamp(value, min, max) {
		  if (value == null) {
		    return min;
		  }
		  return Math.min(Math.max(min, value), max);
		}
		function findClosest(values, currentValue) {
		  var _values$reduce;
		  const {
		    index: closestIndex
		  } = (_values$reduce = values.reduce((acc, value, index) => {
		    const distance = Math.abs(currentValue - value);
		    if (acc === null || distance < acc.distance || distance === acc.distance) {
		      return {
		        distance,
		        index
		      };
		    }
		    return acc;
		  }, null)) != null ? _values$reduce : {};
		  return closestIndex;
		}
		function trackFinger(event, touchId) {
		  // The event is TouchEvent
		  if (touchId.current !== undefined && event.changedTouches) {
		    const touchEvent = event;
		    for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
		      const touch = touchEvent.changedTouches[i];
		      if (touch.identifier === touchId.current) {
		        return {
		          x: touch.clientX,
		          y: touch.clientY
		        };
		      }
		    }
		    return false;
		  }

		  // The event is MouseEvent
		  return {
		    x: event.clientX,
		    y: event.clientY
		  };
		}
		function valueToPercent(value, min, max) {
		  return (value - min) * 100 / (max - min);
		}
		function percentToValue(percent, min, max) {
		  return (max - min) * percent + min;
		}
		function getDecimalPrecision(num) {
		  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.
		  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.
		  if (Math.abs(num) < 1) {
		    const parts = num.toExponential().split('e-');
		    const matissaDecimalPart = parts[0].split('.')[1];
		    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
		  }
		  const decimalPart = num.toString().split('.')[1];
		  return decimalPart ? decimalPart.length : 0;
		}
		function roundValueToStep(value, step, min) {
		  const nearest = Math.round((value - min) / step) * step + min;
		  return Number(nearest.toFixed(getDecimalPrecision(step)));
		}
		function setValueIndex({
		  values,
		  newValue,
		  index
		}) {
		  const output = values.slice();
		  output[index] = newValue;
		  return output.sort(asc);
		}
		function focusThumb({
		  sliderRef,
		  activeIndex,
		  setActive
		}) {
		  var _sliderRef$current, _doc$activeElement;
		  const doc = (0, _utils.unstable_ownerDocument)(sliderRef.current);
		  if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null ? void 0 : (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute('data-index')) !== activeIndex) {
		    var _sliderRef$current2;
		    (_sliderRef$current2 = sliderRef.current) == null ? void 0 : _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
		  }
		  if (setActive) {
		    setActive(activeIndex);
		  }
		}
		const axisProps = {
		  horizontal: {
		    offset: percent => ({
		      left: `${percent}%`
		    }),
		    leap: percent => ({
		      width: `${percent}%`
		    })
		  },
		  'horizontal-reverse': {
		    offset: percent => ({
		      right: `${percent}%`
		    }),
		    leap: percent => ({
		      width: `${percent}%`
		    })
		  },
		  vertical: {
		    offset: percent => ({
		      bottom: `${percent}%`
		    }),
		    leap: percent => ({
		      height: `${percent}%`
		    })
		  }
		};
		const Identity = x => x;

		// TODO: remove support for Safari < 13.
		// https://caniuse.com/#search=touch-action
		//
		// Safari, on iOS, supports touch action since v13.
		// Over 80% of the iOS phones are compatible
		// in August 2020.
		// Utilizing the CSS.supports method to check if touch-action is supported.
		// Since CSS.supports is supported on all but Edge@12 and IE and touch-action
		// is supported on both Edge@12 and IE if CSS.supports is not available that means that
		// touch-action will be supported
		useSlider.Identity = Identity;
		let cachedSupportsTouchActionNone;
		function doesSupportTouchActionNone() {
		  if (cachedSupportsTouchActionNone === undefined) {
		    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {
		      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');
		    } else {
		      cachedSupportsTouchActionNone = true;
		    }
		  }
		  return cachedSupportsTouchActionNone;
		}
		function useSlider$1(parameters) {
		  const {
		    'aria-labelledby': ariaLabelledby,
		    defaultValue,
		    disabled = false,
		    disableSwap = false,
		    isRtl = false,
		    marks: marksProp = false,
		    max = 100,
		    min = 0,
		    name,
		    onChange,
		    onChangeCommitted,
		    orientation = 'horizontal',
		    ref,
		    scale = Identity,
		    step = 1,
		    tabIndex,
		    value: valueProp
		  } = parameters;
		  const touchId = React.useRef();
		  // We can't use the :active browser pseudo-classes.
		  // - The active state isn't triggered when clicking on the rail.
		  // - The active state isn't transferred when inversing a range slider.
		  const [active, setActive] = React.useState(-1);
		  const [open, setOpen] = React.useState(-1);
		  const [dragging, setDragging] = React.useState(false);
		  const moveCount = React.useRef(0);
		  const [valueDerived, setValueState] = (0, _utils.unstable_useControlled)({
		    controlled: valueProp,
		    default: defaultValue != null ? defaultValue : min,
		    name: 'Slider'
		  });
		  const handleChange = onChange && ((event, value, thumbIndex) => {
		    // Redefine target to allow name and value to be read.
		    // This allows seamless integration with the most popular form libraries.
		    // https://github.com/mui/material-ui/issues/13485#issuecomment-676048492
		    // Clone the event to not override `target` of the original event.
		    const nativeEvent = event.nativeEvent || event;
		    // @ts-ignore The nativeEvent is function, not object
		    const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
		    Object.defineProperty(clonedEvent, 'target', {
		      writable: true,
		      value: {
		        value,
		        name
		      }
		    });
		    onChange(clonedEvent, value, thumbIndex);
		  });
		  const range = Array.isArray(valueDerived);
		  let values = range ? valueDerived.slice().sort(asc) : [valueDerived];
		  values = values.map(value => clamp(value, min, max));
		  const marks = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_, index) => ({
		    value: min + step * index
		  })) : marksProp || [];
		  const marksValues = marks.map(mark => mark.value);
		  const {
		    isFocusVisibleRef,
		    onBlur: handleBlurVisible,
		    onFocus: handleFocusVisible,
		    ref: focusVisibleRef
		  } = (0, _utils.unstable_useIsFocusVisible)();
		  const [focusedThumbIndex, setFocusedThumbIndex] = React.useState(-1);
		  const sliderRef = React.useRef();
		  const handleFocusRef = (0, _utils.unstable_useForkRef)(focusVisibleRef, sliderRef);
		  const handleRef = (0, _utils.unstable_useForkRef)(ref, handleFocusRef);
		  const createHandleHiddenInputFocus = otherHandlers => event => {
		    var _otherHandlers$onFocu;
		    const index = Number(event.currentTarget.getAttribute('data-index'));
		    handleFocusVisible(event);
		    if (isFocusVisibleRef.current === true) {
		      setFocusedThumbIndex(index);
		    }
		    setOpen(index);
		    otherHandlers == null ? void 0 : (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
		  };
		  const createHandleHiddenInputBlur = otherHandlers => event => {
		    var _otherHandlers$onBlur;
		    handleBlurVisible(event);
		    if (isFocusVisibleRef.current === false) {
		      setFocusedThumbIndex(-1);
		    }
		    setOpen(-1);
		    otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
		  };
		  (0, _utils.unstable_useEnhancedEffect)(() => {
		    if (disabled && sliderRef.current.contains(document.activeElement)) {
		      var _document$activeEleme;
		      // This is necessary because Firefox and Safari will keep focus
		      // on a disabled element:
		      // https://codesandbox.io/s/mui-pr-22247-forked-h151h?file=/src/App.js
		      // @ts-ignore
		      (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.blur();
		    }
		  }, [disabled]);
		  if (disabled && active !== -1) {
		    setActive(-1);
		  }
		  if (disabled && focusedThumbIndex !== -1) {
		    setFocusedThumbIndex(-1);
		  }
		  const createHandleHiddenInputChange = otherHandlers => event => {
		    var _otherHandlers$onChan;
		    (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event);
		    const index = Number(event.currentTarget.getAttribute('data-index'));
		    const value = values[index];
		    const marksIndex = marksValues.indexOf(value);

		    // @ts-ignore
		    let newValue = event.target.valueAsNumber;
		    if (marks && step == null) {
		      newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
		    }
		    newValue = clamp(newValue, min, max);
		    if (marks && step == null) {
		      const currentMarkIndex = marksValues.indexOf(values[index]);
		      newValue = newValue < values[index] ? marksValues[currentMarkIndex - 1] : marksValues[currentMarkIndex + 1];
		    }
		    if (range) {
		      // Bound the new value to the thumb's neighbours.
		      if (disableSwap) {
		        newValue = clamp(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);
		      }
		      const previousValue = newValue;
		      newValue = setValueIndex({
		        values,
		        newValue,
		        index
		      });
		      let activeIndex = index;

		      // Potentially swap the index if needed.
		      if (!disableSwap) {
		        activeIndex = newValue.indexOf(previousValue);
		      }
		      focusThumb({
		        sliderRef,
		        activeIndex
		      });
		    }
		    setValueState(newValue);
		    setFocusedThumbIndex(index);
		    if (handleChange) {
		      handleChange(event, newValue, index);
		    }
		    if (onChangeCommitted) {
		      onChangeCommitted(event, newValue);
		    }
		  };
		  const previousIndex = React.useRef();
		  let axis = orientation;
		  if (isRtl && orientation === 'horizontal') {
		    axis += '-reverse';
		  }
		  const getFingerNewValue = ({
		    finger,
		    move = false
		  }) => {
		    const {
		      current: slider
		    } = sliderRef;
		    const {
		      width,
		      height,
		      bottom,
		      left
		    } = slider.getBoundingClientRect();
		    let percent;
		    if (axis.indexOf('vertical') === 0) {
		      percent = (bottom - finger.y) / height;
		    } else {
		      percent = (finger.x - left) / width;
		    }
		    if (axis.indexOf('-reverse') !== -1) {
		      percent = 1 - percent;
		    }
		    let newValue;
		    newValue = percentToValue(percent, min, max);
		    if (step) {
		      newValue = roundValueToStep(newValue, step, min);
		    } else {
		      const closestIndex = findClosest(marksValues, newValue);
		      newValue = marksValues[closestIndex];
		    }
		    newValue = clamp(newValue, min, max);
		    let activeIndex = 0;
		    if (range) {
		      if (!move) {
		        activeIndex = findClosest(values, newValue);
		      } else {
		        activeIndex = previousIndex.current;
		      }

		      // Bound the new value to the thumb's neighbours.
		      if (disableSwap) {
		        newValue = clamp(newValue, values[activeIndex - 1] || -Infinity, values[activeIndex + 1] || Infinity);
		      }
		      const previousValue = newValue;
		      newValue = setValueIndex({
		        values,
		        newValue,
		        index: activeIndex
		      });

		      // Potentially swap the index if needed.
		      if (!(disableSwap && move)) {
		        activeIndex = newValue.indexOf(previousValue);
		        previousIndex.current = activeIndex;
		      }
		    }
		    return {
		      newValue,
		      activeIndex
		    };
		  };
		  const handleTouchMove = (0, _utils.unstable_useEventCallback)(nativeEvent => {
		    const finger = trackFinger(nativeEvent, touchId);
		    if (!finger) {
		      return;
		    }
		    moveCount.current += 1;

		    // Cancel move in case some other element consumed a mouseup event and it was not fired.
		    // @ts-ignore buttons doesn't not exists on touch event
		    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {
		      // eslint-disable-next-line @typescript-eslint/no-use-before-define
		      handleTouchEnd(nativeEvent);
		      return;
		    }
		    const {
		      newValue,
		      activeIndex
		    } = getFingerNewValue({
		      finger,
		      move: true
		    });
		    focusThumb({
		      sliderRef,
		      activeIndex,
		      setActive
		    });
		    setValueState(newValue);
		    if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
		      setDragging(true);
		    }
		    if (handleChange && newValue !== valueDerived) {
		      handleChange(nativeEvent, newValue, activeIndex);
		    }
		  });
		  const handleTouchEnd = (0, _utils.unstable_useEventCallback)(nativeEvent => {
		    const finger = trackFinger(nativeEvent, touchId);
		    setDragging(false);
		    if (!finger) {
		      return;
		    }
		    const {
		      newValue
		    } = getFingerNewValue({
		      finger,
		      move: true
		    });
		    setActive(-1);
		    if (nativeEvent.type === 'touchend') {
		      setOpen(-1);
		    }
		    if (onChangeCommitted) {
		      onChangeCommitted(nativeEvent, newValue);
		    }
		    touchId.current = undefined;

		    // eslint-disable-next-line @typescript-eslint/no-use-before-define
		    stopListening();
		  });
		  const handleTouchStart = (0, _utils.unstable_useEventCallback)(nativeEvent => {
		    if (disabled) {
		      return;
		    }
		    // If touch-action: none; is not supported we need to prevent the scroll manually.
		    if (!doesSupportTouchActionNone()) {
		      nativeEvent.preventDefault();
		    }
		    const touch = nativeEvent.changedTouches[0];
		    if (touch != null) {
		      // A number that uniquely identifies the current finger in the touch session.
		      touchId.current = touch.identifier;
		    }
		    const finger = trackFinger(nativeEvent, touchId);
		    if (finger !== false) {
		      const {
		        newValue,
		        activeIndex
		      } = getFingerNewValue({
		        finger
		      });
		      focusThumb({
		        sliderRef,
		        activeIndex,
		        setActive
		      });
		      setValueState(newValue);
		      if (handleChange) {
		        handleChange(nativeEvent, newValue, activeIndex);
		      }
		    }
		    moveCount.current = 0;
		    const doc = (0, _utils.unstable_ownerDocument)(sliderRef.current);
		    doc.addEventListener('touchmove', handleTouchMove);
		    doc.addEventListener('touchend', handleTouchEnd);
		  });
		  const stopListening = React.useCallback(() => {
		    const doc = (0, _utils.unstable_ownerDocument)(sliderRef.current);
		    doc.removeEventListener('mousemove', handleTouchMove);
		    doc.removeEventListener('mouseup', handleTouchEnd);
		    doc.removeEventListener('touchmove', handleTouchMove);
		    doc.removeEventListener('touchend', handleTouchEnd);
		  }, [handleTouchEnd, handleTouchMove]);
		  React.useEffect(() => {
		    const {
		      current: slider
		    } = sliderRef;
		    slider.addEventListener('touchstart', handleTouchStart, {
		      passive: doesSupportTouchActionNone()
		    });
		    return () => {
		      // @ts-ignore
		      slider.removeEventListener('touchstart', handleTouchStart, {
		        passive: doesSupportTouchActionNone()
		      });
		      stopListening();
		    };
		  }, [stopListening, handleTouchStart]);
		  React.useEffect(() => {
		    if (disabled) {
		      stopListening();
		    }
		  }, [disabled, stopListening]);
		  const createHandleMouseDown = otherHandlers => event => {
		    var _otherHandlers$onMous;
		    (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
		    if (disabled) {
		      return;
		    }
		    if (event.defaultPrevented) {
		      return;
		    }

		    // Only handle left clicks
		    if (event.button !== 0) {
		      return;
		    }

		    // Avoid text selection
		    event.preventDefault();
		    const finger = trackFinger(event, touchId);
		    if (finger !== false) {
		      const {
		        newValue,
		        activeIndex
		      } = getFingerNewValue({
		        finger
		      });
		      focusThumb({
		        sliderRef,
		        activeIndex,
		        setActive
		      });
		      setValueState(newValue);
		      if (handleChange) {
		        handleChange(event, newValue, activeIndex);
		      }
		    }
		    moveCount.current = 0;
		    const doc = (0, _utils.unstable_ownerDocument)(sliderRef.current);
		    doc.addEventListener('mousemove', handleTouchMove);
		    doc.addEventListener('mouseup', handleTouchEnd);
		  };
		  const trackOffset = valueToPercent(range ? values[0] : min, min, max);
		  const trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;
		  const getRootProps = (otherHandlers = {}) => {
		    const ownEventHandlers = {
		      onMouseDown: createHandleMouseDown(otherHandlers || {})
		    };
		    const mergedEventHandlers = (0, _extends2.default)({}, otherHandlers, ownEventHandlers);
		    return (0, _extends2.default)({
		      ref: handleRef
		    }, mergedEventHandlers);
		  };
		  const createHandleMouseOver = otherHandlers => event => {
		    var _otherHandlers$onMous2;
		    (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
		    const index = Number(event.currentTarget.getAttribute('data-index'));
		    setOpen(index);
		  };
		  const createHandleMouseLeave = otherHandlers => event => {
		    var _otherHandlers$onMous3;
		    (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
		    setOpen(-1);
		  };
		  const getThumbProps = (otherHandlers = {}) => {
		    const ownEventHandlers = {
		      onMouseOver: createHandleMouseOver(otherHandlers || {}),
		      onMouseLeave: createHandleMouseLeave(otherHandlers || {})
		    };
		    return (0, _extends2.default)({}, otherHandlers, ownEventHandlers);
		  };
		  const getHiddenInputProps = (otherHandlers = {}) => {
		    var _parameters$step;
		    const ownEventHandlers = {
		      onChange: createHandleHiddenInputChange(otherHandlers || {}),
		      onFocus: createHandleHiddenInputFocus(otherHandlers || {}),
		      onBlur: createHandleHiddenInputBlur(otherHandlers || {})
		    };
		    const mergedEventHandlers = (0, _extends2.default)({}, otherHandlers, ownEventHandlers);
		    return (0, _extends2.default)({
		      tabIndex,
		      'aria-labelledby': ariaLabelledby,
		      'aria-orientation': orientation,
		      'aria-valuemax': scale(max),
		      'aria-valuemin': scale(min),
		      name,
		      type: 'range',
		      min: parameters.min,
		      max: parameters.max,
		      step: (_parameters$step = parameters.step) != null ? _parameters$step : undefined,
		      disabled
		    }, mergedEventHandlers, {
		      style: (0, _extends2.default)({}, _utils.visuallyHidden, {
		        direction: isRtl ? 'rtl' : 'ltr',
		        // So that VoiceOver's focus indicator matches the thumb's dimensions
		        width: '100%',
		        height: '100%'
		      })
		    });
		  };
		  return {
		    active,
		    axis: axis,
		    axisProps,
		    dragging,
		    focusedThumbIndex,
		    getHiddenInputProps,
		    getRootProps,
		    getThumbProps,
		    marks: marks,
		    open,
		    range,
		    trackLeap,
		    trackOffset,
		    values
		  };
		}
		return useSlider;
	}

	var hasRequiredSliderUnstyled$1;

	function requireSliderUnstyled$1 () {
		if (hasRequiredSliderUnstyled$1) return SliderUnstyled;
		hasRequiredSliderUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(SliderUnstyled, "__esModule", {
		  value: true
		});
		SliderUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _utils = requireUtils$4();
		var _isHostComponent = _interopRequireDefault(requireIsHostComponent());
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _sliderUnstyledClasses = requireSliderUnstyledClasses();
		var _SliderValueLabelUnstyled = _interopRequireDefault(requireSliderValueLabelUnstyled());
		var _useSlider = _interopRequireWildcard(requireUseSlider());
		var _useSlotProps = _interopRequireDefault(requireUseSlotProps());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["aria-label", "aria-valuetext", "aria-labelledby", "className", "component", "classes", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat", "isRtl", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const Identity = x => x;
		const useUtilityClasses = ownerState => {
		  const {
		    disabled,
		    dragging,
		    marked,
		    orientation,
		    track,
		    classes
		  } = ownerState;
		  const slots = {
		    root: ['root', disabled && 'disabled', dragging && 'dragging', marked && 'marked', orientation === 'vertical' && 'vertical', track === 'inverted' && 'trackInverted', track === false && 'trackFalse'],
		    rail: ['rail'],
		    track: ['track'],
		    mark: ['mark'],
		    markActive: ['markActive'],
		    markLabel: ['markLabel'],
		    markLabelActive: ['markLabelActive'],
		    valueLabel: ['valueLabel'],
		    thumb: ['thumb', disabled && 'disabled'],
		    active: ['active'],
		    disabled: ['disabled'],
		    focusVisible: ['focusVisible']
		  };
		  return (0, _composeClasses.default)(slots, _sliderUnstyledClasses.getSliderUtilityClass, classes);
		};
		const Forward = ({
		  children
		}) => children;
		const SliderUnstyled$1 = /*#__PURE__*/React.forwardRef(function SliderUnstyled(props, ref) {
		  var _ref, _slots$rail, _slots$track, _slots$thumb, _slots$valueLabel, _slots$mark, _slots$markLabel;
		  const {
		      'aria-label': ariaLabel,
		      'aria-valuetext': ariaValuetext,
		      'aria-labelledby': ariaLabelledby,
		      className,
		      component,
		      classes: classesProp,
		      disableSwap = false,
		      disabled = false,
		      getAriaLabel,
		      getAriaValueText,
		      marks: marksProp = false,
		      max = 100,
		      min = 0,
		      orientation = 'horizontal',
		      scale = Identity,
		      step = 1,
		      track = 'normal',
		      valueLabelDisplay = 'off',
		      valueLabelFormat = Identity,
		      isRtl = false,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);

		  // all props with defaults
		  // consider extracting to hook an reusing the lint rule for the variants
		  const ownerState = (0, _extends2.default)({}, props, {
		    marks: marksProp,
		    classes: classesProp,
		    disabled,
		    isRtl,
		    max,
		    min,
		    orientation,
		    scale,
		    step,
		    track,
		    valueLabelDisplay,
		    valueLabelFormat
		  });
		  const {
		    axisProps,
		    getRootProps,
		    getHiddenInputProps,
		    getThumbProps,
		    open,
		    active,
		    axis,
		    range,
		    focusedThumbIndex,
		    dragging,
		    marks,
		    values,
		    trackOffset,
		    trackLeap
		  } = (0, _useSlider.default)((0, _extends2.default)({}, ownerState, {
		    ref
		  }));
		  ownerState.marked = marks.length > 0 && marks.some(mark => mark.label);
		  ownerState.dragging = dragging;
		  ownerState.focusedThumbIndex = focusedThumbIndex;
		  const classes = useUtilityClasses(ownerState);
		  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'span';
		  const rootProps = (0, _useSlotProps.default)({
		    elementType: Root,
		    getSlotProps: getRootProps,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    ownerState,
		    className: [classes.root, className]
		  });
		  const Rail = (_slots$rail = slots.rail) != null ? _slots$rail : 'span';
		  const railProps = (0, _useSlotProps.default)({
		    elementType: Rail,
		    externalSlotProps: slotProps.rail,
		    ownerState,
		    className: classes.rail
		  });
		  const Track = (_slots$track = slots.track) != null ? _slots$track : 'span';
		  const trackProps = (0, _useSlotProps.default)({
		    elementType: Track,
		    externalSlotProps: slotProps.track,
		    additionalProps: {
		      style: (0, _extends2.default)({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap))
		    },
		    ownerState,
		    className: classes.track
		  });
		  const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : 'span';
		  const thumbProps = (0, _useSlotProps.default)({
		    elementType: Thumb,
		    getSlotProps: getThumbProps,
		    externalSlotProps: slotProps.thumb,
		    ownerState
		  });
		  const ValueLabel = (_slots$valueLabel = slots.valueLabel) != null ? _slots$valueLabel : _SliderValueLabelUnstyled.default;
		  const valueLabelProps = (0, _useSlotProps.default)({
		    elementType: ValueLabel,
		    externalSlotProps: slotProps.valueLabel,
		    ownerState
		  });
		  const Mark = (_slots$mark = slots.mark) != null ? _slots$mark : 'span';
		  const markProps = (0, _useSlotProps.default)({
		    elementType: Mark,
		    externalSlotProps: slotProps.mark,
		    ownerState,
		    className: classes.mark
		  });
		  const MarkLabel = (_slots$markLabel = slots.markLabel) != null ? _slots$markLabel : 'span';
		  const markLabelProps = (0, _useSlotProps.default)({
		    elementType: MarkLabel,
		    externalSlotProps: slotProps.markLabel,
		    ownerState
		  });
		  const Input = slots.input || 'input';
		  const inputProps = (0, _useSlotProps.default)({
		    elementType: Input,
		    getSlotProps: getHiddenInputProps,
		    externalSlotProps: slotProps.input,
		    ownerState
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Root, (0, _extends2.default)({}, rootProps, {
		    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Rail, (0, _extends2.default)({}, railProps)), /*#__PURE__*/(0, _jsxRuntime.jsx)(Track, (0, _extends2.default)({}, trackProps)), marks.filter(mark => mark.value >= min && mark.value <= max).map((mark, index) => {
		      const percent = (0, _useSlider.valueToPercent)(mark.value, min, max);
		      const style = axisProps[axis].offset(percent);
		      let markActive;
		      if (track === false) {
		        markActive = values.indexOf(mark.value) !== -1;
		      } else {
		        markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
		      }
		      return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
		        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Mark, (0, _extends2.default)({
		          "data-index": index
		        }, markProps, !(0, _isHostComponent.default)(Mark) && {
		          markActive
		        }, {
		          style: (0, _extends2.default)({}, style, markProps.style),
		          className: (0, _clsx.default)(markProps.className, markActive && classes.markActive)
		        })), mark.label != null ? /*#__PURE__*/(0, _jsxRuntime.jsx)(MarkLabel, (0, _extends2.default)({
		          "aria-hidden": true,
		          "data-index": index
		        }, markLabelProps, !(0, _isHostComponent.default)(MarkLabel) && {
		          markLabelActive: markActive
		        }, {
		          style: (0, _extends2.default)({}, style, markLabelProps.style),
		          className: (0, _clsx.default)(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
		          children: mark.label
		        })) : null]
		      }, index);
		    }), values.map((value, index) => {
		      const percent = (0, _useSlider.valueToPercent)(value, min, max);
		      const style = axisProps[axis].offset(percent);
		      const ValueLabelComponent = valueLabelDisplay === 'off' ? Forward : ValueLabel;
		      return /*#__PURE__*/(0, _jsxRuntime.jsx)(React.Fragment, {
		        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ValueLabelComponent, (0, _extends2.default)({}, !(0, _isHostComponent.default)(ValueLabelComponent) && {
		          valueLabelFormat,
		          valueLabelDisplay,
		          value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,
		          index,
		          open: open === index || active === index || valueLabelDisplay === 'on',
		          disabled
		        }, valueLabelProps, {
		          className: (0, _clsx.default)(classes.valueLabel, valueLabelProps.className),
		          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Thumb, (0, _extends2.default)({
		            "data-index": index,
		            "data-focusvisible": focusedThumbIndex === index
		          }, thumbProps, {
		            className: (0, _clsx.default)(classes.thumb, thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
		            style: (0, _extends2.default)({}, style, {
		              pointerEvents: disableSwap && active !== index ? 'none' : undefined
		            }, thumbProps.style),
		            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Input, (0, _extends2.default)({
		              "data-index": index,
		              "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
		              "aria-valuenow": scale(value),
		              "aria-labelledby": ariaLabelledby,
		              "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
		              value: values[index]
		            }, inputProps))
		          }))
		        }))
		      }, index);
		    })]
		  }));
		});
		SliderUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The label of the slider.
		   */
		  'aria-label': (0, _utils.chainPropTypes)(_propTypes.default.string, props => {
		    const range = Array.isArray(props.value || props.defaultValue);
		    if (range && props['aria-label'] != null) {
		      return new Error('MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');
		    }
		    return null;
		  }),
		  /**
		   * The id of the element containing a label for the slider.
		   */
		  'aria-labelledby': _propTypes.default.string,
		  /**
		   * A string value that provides a user-friendly name for the current value of the slider.
		   */
		  'aria-valuetext': (0, _utils.chainPropTypes)(_propTypes.default.string, props => {
		    const range = Array.isArray(props.value || props.defaultValue);
		    if (range && props['aria-valuetext'] != null) {
		      return new Error('MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');
		    }
		    return null;
		  }),
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The default value. Use when the component is not controlled.
		   */
		  defaultValue: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number]),
		  /**
		   * If `true`, the component is disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
		   * @default false
		   */
		  disableSwap: _propTypes.default.bool,
		  /**
		   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
		   * This is important for screen reader users.
		   * @param {number} index The thumb label's index to format.
		   * @returns {string}
		   */
		  getAriaLabel: _propTypes.default.func,
		  /**
		   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
		   * This is important for screen reader users.
		   * @param {number} value The thumb label's value to format.
		   * @param {number} index The thumb label's index to format.
		   * @returns {string}
		   */
		  getAriaValueText: _propTypes.default.func,
		  /**
		   * Indicates whether the theme context has rtl direction. It is set automatically.
		   * @default false
		   */
		  isRtl: _propTypes.default.bool,
		  /**
		   * Marks indicate predetermined values to which the user can move the slider.
		   * If `true` the marks are spaced according the value of the `step` prop.
		   * If an array, it should contain objects with `value` and an optional `label` keys.
		   * @default false
		   */
		  marks: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.shape({
		    label: _propTypes.default.node,
		    value: _propTypes.default.number.isRequired
		  })), _propTypes.default.bool]),
		  /**
		   * The maximum allowed value of the slider.
		   * Should not be equal to min.
		   * @default 100
		   */
		  max: _propTypes.default.number,
		  /**
		   * The minimum allowed value of the slider.
		   * Should not be equal to max.
		   * @default 0
		   */
		  min: _propTypes.default.number,
		  /**
		   * Name attribute of the hidden `input` element.
		   */
		  name: _propTypes.default.string,
		  /**
		   * Callback function that is fired when the slider's value changed.
		   *
		   * @param {Event} event The event source of the callback.
		   * You can pull out the new value by accessing `event.target.value` (any).
		   * **Warning**: This is a generic event not a change event.
		   * @param {number | number[]} value The new value.
		   * @param {number} activeThumb Index of the currently moved thumb.
		   */
		  onChange: _propTypes.default.func,
		  /**
		   * Callback function that is fired when the `mouseup` is triggered.
		   *
		   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
		   * @param {number | number[]} value The new value.
		   */
		  onChangeCommitted: _propTypes.default.func,
		  /**
		   * The component orientation.
		   * @default 'horizontal'
		   */
		  orientation: _propTypes.default.oneOf(['horizontal', 'vertical']),
		  /**
		   * A transformation function, to change the scale of the slider.
		   * @default (x) => x
		   */
		  scale: _propTypes.default.func,
		  /**
		   * The props used for each slot inside the Slider.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    mark: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    markLabel: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    rail: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    thumb: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    track: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    valueLabel: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
		      children: _propTypes.default.element,
		      className: _propTypes.default.string,
		      open: _propTypes.default.bool,
		      style: _propTypes.default.object,
		      value: _propTypes.default.number,
		      valueLabelDisplay: _propTypes.default.oneOf(['auto', 'off', 'on'])
		    })])
		  }),
		  /**
		   * The components used for each slot inside the Slider.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    input: _propTypes.default.elementType,
		    mark: _propTypes.default.elementType,
		    markLabel: _propTypes.default.elementType,
		    rail: _propTypes.default.elementType,
		    root: _propTypes.default.elementType,
		    thumb: _propTypes.default.elementType,
		    track: _propTypes.default.elementType,
		    valueLabel: _propTypes.default.elementType
		  }),
		  /**
		   * The granularity with which the slider can step through values. (A "discrete" slider.)
		   * The `min` prop serves as the origin for the valid values.
		   * We recommend (max - min) to be evenly divisible by the step.
		   *
		   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
		   * @default 1
		   */
		  step: _propTypes.default.number,
		  /**
		   * Tab index attribute of the hidden `input` element.
		   */
		  tabIndex: _propTypes.default.number,
		  /**
		   * The track presentation:
		   *
		   * - `normal` the track will render a bar representing the slider value.
		   * - `inverted` the track will render a bar representing the remaining slider value.
		   * - `false` the track will render without a bar.
		   * @default 'normal'
		   */
		  track: _propTypes.default.oneOf(['inverted', 'normal', false]),
		  /**
		   * The value of the slider.
		   * For ranged sliders, provide an array with two values.
		   */
		  value: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number]),
		  /**
		   * Controls when the value label is displayed:
		   *
		   * - `auto` the value label will display when the thumb is hovered or focused.
		   * - `on` will display persistently.
		   * - `off` will never display.
		   * @default 'off'
		   */
		  valueLabelDisplay: _propTypes.default.oneOf(['auto', 'off', 'on']),
		  /**
		   * The format function the value label's value.
		   *
		   * When a function is provided, it should have the following signature:
		   *
		   * - {number} value The value label's value to format
		   * - {number} index The value label's index to format
		   * @default (x) => x
		   */
		  valueLabelFormat: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string])
		} ;
		var _default = SliderUnstyled$1;
		SliderUnstyled.default = _default;
		return SliderUnstyled;
	}

	var hasRequiredSliderUnstyled;

	function requireSliderUnstyled () {
		if (hasRequiredSliderUnstyled) return SliderUnstyled$1;
		hasRequiredSliderUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  SliderValueLabelUnstyled: true,
			  sliderUnstyledClasses: true,
			  useSlider: true
			};
			Object.defineProperty(exports, "SliderValueLabelUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _SliderValueLabelUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _SliderUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "sliderUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _sliderUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "useSlider", {
			  enumerable: true,
			  get: function () {
			    return _useSlider.default;
			  }
			});
			var _SliderUnstyled = _interopRequireDefault(requireSliderUnstyled$1());
			var _SliderValueLabelUnstyled = _interopRequireDefault(requireSliderValueLabelUnstyled());
			var _sliderUnstyledClasses = _interopRequireWildcard(requireSliderUnstyledClasses());
			Object.keys(_sliderUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _sliderUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _sliderUnstyledClasses[key];
			    }
			  });
			});
			var _useSlider = _interopRequireDefault(requireUseSlider());
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (SliderUnstyled$1));
		return SliderUnstyled$1;
	}

	var SnackbarUnstyled$1 = {};

	var SnackbarUnstyled = {};

	var snackbarUnstyledClasses = {};

	var hasRequiredSnackbarUnstyledClasses;

	function requireSnackbarUnstyledClasses () {
		if (hasRequiredSnackbarUnstyledClasses) return snackbarUnstyledClasses;
		hasRequiredSnackbarUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(snackbarUnstyledClasses, "__esModule", {
		  value: true
		});
		snackbarUnstyledClasses.default = void 0;
		snackbarUnstyledClasses.getSnackbarUnstyledUtilityClass = getSnackbarUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getSnackbarUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiSnackbar', slot);
		}
		const snackbarUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiSnackbar', ['root']);
		var _default = snackbarUnstyledClasses$1;
		snackbarUnstyledClasses.default = _default;
		return snackbarUnstyledClasses;
	}

	var useSnackbar = {};

	var hasRequiredUseSnackbar;

	function requireUseSnackbar () {
		if (hasRequiredUseSnackbar) return useSnackbar;
		hasRequiredUseSnackbar = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useSnackbar, "__esModule", {
		  value: true
		});
		useSnackbar.default = useSnackbar$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$4();
		var _extractEventHandlers = _interopRequireDefault(requireExtractEventHandlers());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * The basic building block for creating custom snackbar.
		 *
		 * Demos:
		 *
		 * - [Snackbar](https://mui.com/base/react-snackbar/)
		 */
		function useSnackbar$1(parameters) {
		  const {
		    autoHideDuration = null,
		    disableWindowBlurListener = false,
		    onClose,
		    open,
		    ref,
		    resumeHideDuration
		  } = parameters;
		  const timerAutoHide = React.useRef();
		  React.useEffect(() => {
		    if (!open) {
		      return undefined;
		    }

		    /**
		     * @param {KeyboardEvent} nativeEvent
		     */
		    function handleKeyDown(nativeEvent) {
		      if (!nativeEvent.defaultPrevented) {
		        // IE11, Edge (prior to using Blink?) use 'Esc'
		        if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {
		          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar
		          onClose == null ? void 0 : onClose(nativeEvent, 'escapeKeyDown');
		        }
		      }
		    }
		    document.addEventListener('keydown', handleKeyDown);
		    return () => {
		      document.removeEventListener('keydown', handleKeyDown);
		    };
		  }, [open, onClose]);
		  const handleClose = (0, _utils.unstable_useEventCallback)((event, reason) => {
		    onClose == null ? void 0 : onClose(event, reason);
		  });
		  const setAutoHideTimer = (0, _utils.unstable_useEventCallback)(autoHideDurationParam => {
		    if (!onClose || autoHideDurationParam == null) {
		      return;
		    }
		    clearTimeout(timerAutoHide.current);
		    timerAutoHide.current = setTimeout(() => {
		      handleClose(null, 'timeout');
		    }, autoHideDurationParam);
		  });
		  React.useEffect(() => {
		    if (open) {
		      setAutoHideTimer(autoHideDuration);
		    }
		    return () => {
		      clearTimeout(timerAutoHide.current);
		    };
		  }, [open, autoHideDuration, setAutoHideTimer]);
		  const handleClickAway = event => {
		    onClose == null ? void 0 : onClose(event, 'clickaway');
		  };

		  // Pause the timer when the user is interacting with the Snackbar
		  // or when the user hide the window.
		  const handlePause = () => {
		    clearTimeout(timerAutoHide.current);
		  };

		  // Restart the timer when the user is no longer interacting with the Snackbar
		  // or when the window is shown back.
		  const handleResume = React.useCallback(() => {
		    if (autoHideDuration != null) {
		      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
		    }
		  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
		  const createHandleBlur = otherHandlers => event => {
		    const onBlurCallback = otherHandlers.onBlur;
		    onBlurCallback == null ? void 0 : onBlurCallback(event);
		    handleResume();
		  };
		  const createHandleFocus = otherHandlers => event => {
		    const onFocusCallback = otherHandlers.onFocus;
		    onFocusCallback == null ? void 0 : onFocusCallback(event);
		    handlePause();
		  };
		  const createMouseEnter = otherHandlers => event => {
		    const onMouseEnterCallback = otherHandlers.onMouseEnter;
		    onMouseEnterCallback == null ? void 0 : onMouseEnterCallback(event);
		    handlePause();
		  };
		  const createMouseLeave = otherHandlers => event => {
		    const onMouseLeaveCallback = otherHandlers.onMouseLeave;
		    onMouseLeaveCallback == null ? void 0 : onMouseLeaveCallback(event);
		    handleResume();
		  };
		  React.useEffect(() => {
		    // TODO: window global should be refactored here
		    if (!disableWindowBlurListener && open) {
		      window.addEventListener('focus', handleResume);
		      window.addEventListener('blur', handlePause);
		      return () => {
		        window.removeEventListener('focus', handleResume);
		        window.removeEventListener('blur', handlePause);
		      };
		    }
		    return undefined;
		  }, [disableWindowBlurListener, handleResume, open]);
		  const getRootProps = (otherHandlers = {}) => {
		    const propsEventHandlers = (0, _extractEventHandlers.default)(parameters);
		    const externalEventHandlers = (0, _extends2.default)({}, propsEventHandlers, otherHandlers);
		    return (0, _extends2.default)({
		      ref,
		      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
		      // See https://github.com/mui/material-ui/issues/29080
		      role: 'presentation'
		    }, externalEventHandlers, {
		      onBlur: createHandleBlur(externalEventHandlers),
		      onFocus: createHandleFocus(externalEventHandlers),
		      onMouseEnter: createMouseEnter(externalEventHandlers),
		      onMouseLeave: createMouseLeave(externalEventHandlers)
		    });
		  };
		  return {
		    getRootProps,
		    onClickAway: handleClickAway
		  };
		}
		return useSnackbar;
	}

	var hasRequiredSnackbarUnstyled$1;

	function requireSnackbarUnstyled$1 () {
		if (hasRequiredSnackbarUnstyled$1) return SnackbarUnstyled;
		hasRequiredSnackbarUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(SnackbarUnstyled, "__esModule", {
		  value: true
		});
		SnackbarUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _ClickAwayListener = _interopRequireDefault(requireClickAwayListener());
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _snackbarUnstyledClasses = requireSnackbarUnstyledClasses();
		var _useSnackbar = _interopRequireDefault(requireUseSnackbar());
		var _utils = requireUtils$3();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["autoHideDuration", "children", "component", "disableWindowBlurListener", "exited", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = () => {
		  const slots = {
		    root: ['root']
		  };
		  return (0, _composeClasses.default)(slots, _snackbarUnstyledClasses.getSnackbarUnstyledUtilityClass, undefined);
		};
		/**
		 *
		 * Demos:
		 *
		 * - [Unstyled Snackbar](https://mui.com/base/react-snackbar/)
		 *
		 * API:
		 *
		 * - [SnackbarUnstyled API](https://mui.com/base/api/snackbar-unstyled/)
		 */
		const SnackbarUnstyled$1 = /*#__PURE__*/React.forwardRef(function SnackbarUnstyled(props, ref) {
		  const {
		      autoHideDuration = null,
		      children,
		      component,
		      disableWindowBlurListener = false,
		      exited = true,
		      onClose,
		      open,
		      resumeHideDuration,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const classes = useUtilityClasses();
		  const {
		    getRootProps,
		    onClickAway
		  } = (0, _useSnackbar.default)((0, _extends2.default)({}, props, {
		    autoHideDuration,
		    disableWindowBlurListener,
		    onClose,
		    open,
		    resumeHideDuration,
		    ref
		  }));
		  const ownerState = props;
		  const Root = component || slots.root || 'div';
		  const rootProps = (0, _utils.useSlotProps)({
		    elementType: Root,
		    getSlotProps: getRootProps,
		    externalForwardedProps: other,
		    externalSlotProps: slotProps.root,
		    additionalProps: {
		      ref
		    },
		    ownerState,
		    className: classes.root
		  });
		  const clickAwayListenerProps = (0, _utils.useSlotProps)({
		    elementType: _ClickAwayListener.default,
		    externalSlotProps: slotProps.clickAwayListener,
		    additionalProps: {
		      onClickAway
		    },
		    ownerState
		  });

		  // ClickAwayListener doesn't support ownerState
		  delete clickAwayListenerProps.ownerState;

		  // So that we only render active snackbars.
		  if (!open && exited) {
		    return null;
		  }
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ClickAwayListener.default, (0, _extends2.default)({}, clickAwayListenerProps, {
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps, {
		      children: children
		    }))
		  }));
		});
		SnackbarUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * The number of milliseconds to wait before automatically calling the
		   * `onClose` function. `onClose` should then set the state of the `open`
		   * prop to hide the Snackbar. This behavior is disabled by default with
		   * the `null` value.
		   * @default null
		   */
		  autoHideDuration: _propTypes.default.number,
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
		   * @default false
		   */
		  disableWindowBlurListener: _propTypes.default.bool,
		  /**
		   * The prop used to handle exited transition and unmount the component.
		   * @default true
		   */
		  exited: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  onBlur: _propTypes.default.func,
		  /**
		   * Callback fired when the component requests to be closed.
		   * Typically `onClose` is used to set state in the parent component,
		   * which is used to control the `Snackbar` `open` prop.
		   * The `reason` parameter can optionally be used to control the response to `onClose`,
		   * for example ignoring `clickaway`.
		   *
		   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
		   * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
		   */
		  onClose: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onFocus: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onMouseEnter: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onMouseLeave: _propTypes.default.func,
		  /**
		   * If `true`, the component is shown.
		   */
		  open: _propTypes.default.bool,
		  /**
		   * The number of milliseconds to wait before dismissing after user interaction.
		   * If `autoHideDuration` prop isn't specified, it does nothing.
		   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
		   * we default to `autoHideDuration / 2` ms.
		   */
		  resumeHideDuration: _propTypes.default.number,
		  /**
		   * The props used for each slot inside the Snackbar.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    clickAwayListener: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
		      children: _propTypes.default.element.isRequired,
		      disableReactTree: _propTypes.default.bool,
		      mouseEvent: _propTypes.default.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),
		      onClickAway: _propTypes.default.func,
		      touchEvent: _propTypes.default.oneOf(['onTouchEnd', 'onTouchStart', false])
		    })]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the Snackbar.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  })
		} ;
		var _default = SnackbarUnstyled$1;
		SnackbarUnstyled.default = _default;
		return SnackbarUnstyled;
	}

	var SnackbarUnstyled_types = {};

	var hasRequiredSnackbarUnstyled_types;

	function requireSnackbarUnstyled_types () {
		if (hasRequiredSnackbarUnstyled_types) return SnackbarUnstyled_types;
		hasRequiredSnackbarUnstyled_types = 1;

		Object.defineProperty(SnackbarUnstyled_types, "__esModule", {
		  value: true
		});
		return SnackbarUnstyled_types;
	}

	var useSnackbar_types = {};

	var hasRequiredUseSnackbar_types;

	function requireUseSnackbar_types () {
		if (hasRequiredUseSnackbar_types) return useSnackbar_types;
		hasRequiredUseSnackbar_types = 1;

		Object.defineProperty(useSnackbar_types, "__esModule", {
		  value: true
		});
		return useSnackbar_types;
	}

	var hasRequiredSnackbarUnstyled;

	function requireSnackbarUnstyled () {
		if (hasRequiredSnackbarUnstyled) return SnackbarUnstyled$1;
		hasRequiredSnackbarUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  snackbarUnstyledClasses: true,
			  useSnackbar: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _SnackbarUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "snackbarUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _snackbarUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "useSnackbar", {
			  enumerable: true,
			  get: function () {
			    return _useSnackbar.default;
			  }
			});
			var _SnackbarUnstyled = _interopRequireDefault(requireSnackbarUnstyled$1());
			var _SnackbarUnstyled2 = requireSnackbarUnstyled_types();
			Object.keys(_SnackbarUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _SnackbarUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _SnackbarUnstyled2[key];
			    }
			  });
			});
			var _snackbarUnstyledClasses = _interopRequireWildcard(requireSnackbarUnstyledClasses());
			Object.keys(_snackbarUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _snackbarUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _snackbarUnstyledClasses[key];
			    }
			  });
			});
			var _useSnackbar = _interopRequireDefault(requireUseSnackbar());
			var _useSnackbar2 = requireUseSnackbar_types();
			Object.keys(_useSnackbar2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _useSnackbar2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _useSnackbar2[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (SnackbarUnstyled$1));
		return SnackbarUnstyled$1;
	}

	var SwitchUnstyled$1 = {};

	var SwitchUnstyled = {};

	var useSwitch = {};

	var hasRequiredUseSwitch;

	function requireUseSwitch () {
		if (hasRequiredUseSwitch) return useSwitch;
		hasRequiredUseSwitch = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useSwitch, "__esModule", {
		  value: true
		});
		useSwitch.default = useSwitch$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$4();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * The basic building block for creating custom switches.
		 *
		 * Demos:
		 *
		 * - [Switches](https://mui.com/components/switches/)
		 */
		function useSwitch$1(props) {
		  const {
		    checked: checkedProp,
		    defaultChecked,
		    disabled,
		    onBlur,
		    onChange,
		    onFocus,
		    onFocusVisible,
		    readOnly,
		    required
		  } = props;
		  const [checked, setCheckedState] = (0, _utils.unstable_useControlled)({
		    controlled: checkedProp,
		    default: Boolean(defaultChecked),
		    name: 'Switch',
		    state: 'checked'
		  });
		  const createHandleInputChange = otherProps => event => {
		    var _otherProps$onChange;
		    // Workaround for https://github.com/facebook/react/issues/9023
		    if (event.nativeEvent.defaultPrevented) {
		      return;
		    }
		    setCheckedState(event.target.checked);
		    onChange == null ? void 0 : onChange(event);
		    (_otherProps$onChange = otherProps.onChange) == null ? void 0 : _otherProps$onChange.call(otherProps, event);
		  };
		  const {
		    isFocusVisibleRef,
		    onBlur: handleBlurVisible,
		    onFocus: handleFocusVisible,
		    ref: focusVisibleRef
		  } = (0, _utils.unstable_useIsFocusVisible)();
		  const [focusVisible, setFocusVisible] = React.useState(false);
		  if (disabled && focusVisible) {
		    setFocusVisible(false);
		  }
		  React.useEffect(() => {
		    isFocusVisibleRef.current = focusVisible;
		  }, [focusVisible, isFocusVisibleRef]);
		  const inputRef = React.useRef(null);
		  const createHandleFocus = otherProps => event => {
		    var _otherProps$onFocus;
		    // Fix for https://github.com/facebook/react/issues/7769
		    if (!inputRef.current) {
		      inputRef.current = event.currentTarget;
		    }
		    handleFocusVisible(event);
		    if (isFocusVisibleRef.current === true) {
		      setFocusVisible(true);
		      onFocusVisible == null ? void 0 : onFocusVisible(event);
		    }
		    onFocus == null ? void 0 : onFocus(event);
		    (_otherProps$onFocus = otherProps.onFocus) == null ? void 0 : _otherProps$onFocus.call(otherProps, event);
		  };
		  const createHandleBlur = otherProps => event => {
		    var _otherProps$onBlur;
		    handleBlurVisible(event);
		    if (isFocusVisibleRef.current === false) {
		      setFocusVisible(false);
		    }
		    onBlur == null ? void 0 : onBlur(event);
		    (_otherProps$onBlur = otherProps.onBlur) == null ? void 0 : _otherProps$onBlur.call(otherProps, event);
		  };
		  const handleRefChange = (0, _utils.unstable_useForkRef)(focusVisibleRef, inputRef);
		  const getInputProps = (otherProps = {}) => (0, _extends2.default)({
		    checked: checkedProp,
		    defaultChecked,
		    disabled,
		    readOnly,
		    ref: handleRefChange,
		    required,
		    type: 'checkbox'
		  }, otherProps, {
		    onChange: createHandleInputChange(otherProps),
		    onFocus: createHandleFocus(otherProps),
		    onBlur: createHandleBlur(otherProps)
		  });
		  return {
		    checked,
		    disabled: Boolean(disabled),
		    focusVisible,
		    getInputProps,
		    readOnly: Boolean(readOnly)
		  };
		}
		return useSwitch;
	}

	var switchUnstyledClasses = {};

	var hasRequiredSwitchUnstyledClasses;

	function requireSwitchUnstyledClasses () {
		if (hasRequiredSwitchUnstyledClasses) return switchUnstyledClasses;
		hasRequiredSwitchUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(switchUnstyledClasses, "__esModule", {
		  value: true
		});
		switchUnstyledClasses.default = void 0;
		switchUnstyledClasses.getSwitchUnstyledUtilityClass = getSwitchUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getSwitchUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiSwitch', slot);
		}
		const switchUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiSwitch', ['root', 'input', 'track', 'thumb', 'checked', 'disabled', 'focusVisible', 'readOnly']);
		var _default = switchUnstyledClasses$1;
		switchUnstyledClasses.default = _default;
		return switchUnstyledClasses;
	}

	var hasRequiredSwitchUnstyled$1;

	function requireSwitchUnstyled$1 () {
		if (hasRequiredSwitchUnstyled$1) return SwitchUnstyled;
		hasRequiredSwitchUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(SwitchUnstyled, "__esModule", {
		  value: true
		});
		SwitchUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _useSwitch = _interopRequireDefault(requireUseSwitch());
		var _switchUnstyledClasses = requireSwitchUnstyledClasses();
		var _utils = requireUtils$3();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["checked", "component", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    checked,
		    disabled,
		    focusVisible,
		    readOnly
		  } = ownerState;
		  const slots = {
		    root: ['root', checked && 'checked', disabled && 'disabled', focusVisible && 'focusVisible', readOnly && 'readOnly'],
		    thumb: ['thumb'],
		    input: ['input'],
		    track: ['track']
		  };
		  return (0, _composeClasses.default)(slots, _switchUnstyledClasses.getSwitchUnstyledUtilityClass, {});
		};

		/**
		 * The foundation for building custom-styled switches.
		 *
		 * Demos:
		 *
		 * - [Unstyled Switch](https://mui.com/base/react-switch/)
		 *
		 * API:
		 *
		 * - [SwitchUnstyled API](https://mui.com/base/api/switch-unstyled/)
		 */
		const SwitchUnstyled$1 = /*#__PURE__*/React.forwardRef(function SwitchUnstyled(props, ref) {
		  var _ref, _slots$thumb, _slots$input, _slots$track;
		  const {
		      checked: checkedProp,
		      component,
		      defaultChecked,
		      disabled: disabledProp,
		      onBlur,
		      onChange,
		      onFocus,
		      onFocusVisible,
		      readOnly: readOnlyProp,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const useSwitchProps = {
		    checked: checkedProp,
		    defaultChecked,
		    disabled: disabledProp,
		    onBlur,
		    onChange,
		    onFocus,
		    onFocusVisible,
		    readOnly: readOnlyProp
		  };
		  const {
		    getInputProps,
		    checked,
		    disabled,
		    focusVisible,
		    readOnly
		  } = (0, _useSwitch.default)(useSwitchProps);
		  const ownerState = (0, _extends2.default)({}, props, {
		    checked,
		    disabled,
		    focusVisible,
		    readOnly
		  });
		  const classes = useUtilityClasses(ownerState);
		  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'span';
		  const rootProps = (0, _utils.useSlotProps)({
		    elementType: Root,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: {
		      ref
		    },
		    ownerState,
		    className: classes.root
		  });
		  const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : 'span';
		  const thumbProps = (0, _utils.useSlotProps)({
		    elementType: Thumb,
		    externalSlotProps: slotProps.thumb,
		    ownerState,
		    className: classes.thumb
		  });
		  const Input = (_slots$input = slots.input) != null ? _slots$input : 'input';
		  const inputProps = (0, _utils.useSlotProps)({
		    elementType: Input,
		    getSlotProps: getInputProps,
		    externalSlotProps: slotProps.input,
		    ownerState,
		    className: classes.input
		  });
		  const Track = slots.track === null ? () => null : (_slots$track = slots.track) != null ? _slots$track : 'span';
		  const trackProps = (0, _utils.useSlotProps)({
		    elementType: Track,
		    externalSlotProps: slotProps.track,
		    ownerState,
		    className: classes.track
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Root, (0, _extends2.default)({}, rootProps, {
		    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Track, (0, _extends2.default)({}, trackProps)), /*#__PURE__*/(0, _jsxRuntime.jsx)(Thumb, (0, _extends2.default)({}, thumbProps)), /*#__PURE__*/(0, _jsxRuntime.jsx)(Input, (0, _extends2.default)({}, inputProps))]
		  }));
		});
		SwitchUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * If `true`, the component is checked.
		   */
		  checked: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The default checked state. Use when the component is not controlled.
		   */
		  defaultChecked: _propTypes.default.bool,
		  /**
		   * If `true`, the component is disabled.
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  onBlur: _propTypes.default.func,
		  /**
		   * Callback fired when the state is changed.
		   *
		   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
		   * You can pull out the new value by accessing `event.target.value` (string).
		   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
		   */
		  onChange: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onFocus: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onFocusVisible: _propTypes.default.func,
		  /**
		   * If `true`, the component is read only.
		   */
		  readOnly: _propTypes.default.bool,
		  /**
		   * If `true`, the `input` element is required.
		   */
		  required: _propTypes.default.bool,
		  /**
		   * The props used for each slot inside the Switch.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    input: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    thumb: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    track: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the Switch.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default /* @typescript-to-proptypes-ignore */.shape({
		    input: _propTypes.default.elementType,
		    root: _propTypes.default.elementType,
		    thumb: _propTypes.default.elementType,
		    track: _propTypes.default.oneOfType([_propTypes.default.elementType, _propTypes.default.oneOf([null])])
		  })
		} ;
		var _default = SwitchUnstyled$1;
		SwitchUnstyled.default = _default;
		return SwitchUnstyled;
	}

	var SwitchUnstyled_types = {};

	var hasRequiredSwitchUnstyled_types;

	function requireSwitchUnstyled_types () {
		if (hasRequiredSwitchUnstyled_types) return SwitchUnstyled_types;
		hasRequiredSwitchUnstyled_types = 1;

		Object.defineProperty(SwitchUnstyled_types, "__esModule", {
		  value: true
		});
		return SwitchUnstyled_types;
	}

	var useSwitch_types = {};

	var hasRequiredUseSwitch_types;

	function requireUseSwitch_types () {
		if (hasRequiredUseSwitch_types) return useSwitch_types;
		hasRequiredUseSwitch_types = 1;

		Object.defineProperty(useSwitch_types, "__esModule", {
		  value: true
		});
		return useSwitch_types;
	}

	var hasRequiredSwitchUnstyled;

	function requireSwitchUnstyled () {
		if (hasRequiredSwitchUnstyled) return SwitchUnstyled$1;
		hasRequiredSwitchUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  useSwitch: true,
			  switchUnstyledClasses: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _SwitchUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "switchUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _switchUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "useSwitch", {
			  enumerable: true,
			  get: function () {
			    return _useSwitch.default;
			  }
			});
			var _SwitchUnstyled = _interopRequireDefault(requireSwitchUnstyled$1());
			var _SwitchUnstyled2 = requireSwitchUnstyled_types();
			Object.keys(_SwitchUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _SwitchUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _SwitchUnstyled2[key];
			    }
			  });
			});
			var _useSwitch = _interopRequireDefault(requireUseSwitch());
			var _useSwitch2 = requireUseSwitch_types();
			Object.keys(_useSwitch2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _useSwitch2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _useSwitch2[key];
			    }
			  });
			});
			var _switchUnstyledClasses = _interopRequireWildcard(requireSwitchUnstyledClasses());
			Object.keys(_switchUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _switchUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _switchUnstyledClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (SwitchUnstyled$1));
		return SwitchUnstyled$1;
	}

	var TablePaginationUnstyled$1 = {};

	var TablePaginationUnstyled = {};

	var TablePaginationActionsUnstyled = {};

	var hasRequiredTablePaginationActionsUnstyled;

	function requireTablePaginationActionsUnstyled () {
		if (hasRequiredTablePaginationActionsUnstyled) return TablePaginationActionsUnstyled;
		hasRequiredTablePaginationActionsUnstyled = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(TablePaginationActionsUnstyled, "__esModule", {
		  value: true
		});
		TablePaginationActionsUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$3();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["component", "count", "getItemAriaLabel", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton", "direction", "ownerState", "slotProps", "slots"];
		var _span, _span2, _span3, _span4;
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function LastPageIconDefault() {
		  return _span || (_span = /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
		    children: '⇾|'
		  }));
		}
		function FirstPageIconDefault() {
		  return _span2 || (_span2 = /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
		    children: '|⇽'
		  }));
		}
		function NextPageIconDefault() {
		  return _span3 || (_span3 = /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
		    children: '⇾'
		  }));
		}
		function BackPageIconDefault() {
		  return _span4 || (_span4 = /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
		    children: '⇽'
		  }));
		}
		function defaultGetAriaLabel(type) {
		  return `Go to ${type} page`;
		}

		/**
		 * @ignore - internal component.
		 */
		const TablePaginationActionsUnstyled$1 = /*#__PURE__*/React.forwardRef(function TablePaginationActionsUnstyled(props, ref) {
		  var _ref, _slots$root, _slots$firstButton, _slots$lastButton, _slots$nextButton, _slots$backButton, _slots$lastPageIcon, _slots$firstPageIcon, _slots$nextPageIcon, _slots$backPageIcon;
		  const {
		      component,
		      count,
		      getItemAriaLabel = defaultGetAriaLabel,
		      onPageChange,
		      page,
		      rowsPerPage,
		      showFirstButton = false,
		      showLastButton = false,
		      direction,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = props;
		  const handleFirstPageButtonClick = event => {
		    onPageChange(event, 0);
		  };
		  const handleBackButtonClick = event => {
		    onPageChange(event, page - 1);
		  };
		  const handleNextButtonClick = event => {
		    onPageChange(event, page + 1);
		  };
		  const handleLastPageButtonClick = event => {
		    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
		  };
		  const Root = (_ref = (_slots$root = slots.root) != null ? _slots$root : component) != null ? _ref : 'div';
		  const rootProps = (0, _utils.useSlotProps)({
		    elementType: Root,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: {
		      ref
		    },
		    ownerState
		  });
		  const FirstButton = (_slots$firstButton = slots.firstButton) != null ? _slots$firstButton : 'button';
		  const firstButtonProps = (0, _utils.useSlotProps)({
		    elementType: FirstButton,
		    externalSlotProps: slotProps.firstButton,
		    additionalProps: {
		      onClick: handleFirstPageButtonClick,
		      disabled: page === 0,
		      'aria-label': getItemAriaLabel('first', page),
		      title: getItemAriaLabel('first', page)
		    },
		    ownerState
		  });
		  const LastButton = (_slots$lastButton = slots.lastButton) != null ? _slots$lastButton : 'button';
		  const lastButtonProps = (0, _utils.useSlotProps)({
		    elementType: LastButton,
		    externalSlotProps: slotProps.lastButton,
		    additionalProps: {
		      onClick: handleLastPageButtonClick,
		      disabled: page >= Math.ceil(count / rowsPerPage) - 1,
		      'aria-label': getItemAriaLabel('last', page),
		      title: getItemAriaLabel('last', page)
		    },
		    ownerState
		  });
		  const NextButton = (_slots$nextButton = slots.nextButton) != null ? _slots$nextButton : 'button';
		  const nextButtonProps = (0, _utils.useSlotProps)({
		    elementType: NextButton,
		    externalSlotProps: slotProps.nextButton,
		    additionalProps: {
		      onClick: handleNextButtonClick,
		      disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
		      'aria-label': getItemAriaLabel('next', page),
		      title: getItemAriaLabel('next', page)
		    },
		    ownerState
		  });
		  const BackButton = (_slots$backButton = slots.backButton) != null ? _slots$backButton : 'button';
		  const backButtonProps = (0, _utils.useSlotProps)({
		    elementType: BackButton,
		    externalSlotProps: slotProps.backButton,
		    additionalProps: {
		      onClick: handleBackButtonClick,
		      disabled: page === 0,
		      'aria-label': getItemAriaLabel('previous', page),
		      title: getItemAriaLabel('previous', page)
		    },
		    ownerState
		  });
		  const LastPageIcon = (_slots$lastPageIcon = slots.lastPageIcon) != null ? _slots$lastPageIcon : LastPageIconDefault;
		  const FirstPageIcon = (_slots$firstPageIcon = slots.firstPageIcon) != null ? _slots$firstPageIcon : FirstPageIconDefault;
		  const NextPageIcon = (_slots$nextPageIcon = slots.nextPageIcon) != null ? _slots$nextPageIcon : NextPageIconDefault;
		  const BackPageIcon = (_slots$backPageIcon = slots.backPageIcon) != null ? _slots$backPageIcon : BackPageIconDefault;
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Root, (0, _extends2.default)({}, rootProps, {
		    children: [showFirstButton && /*#__PURE__*/(0, _jsxRuntime.jsx)(FirstButton, (0, _extends2.default)({}, firstButtonProps, {
		      children: direction === 'rtl' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(LastPageIcon, {}) : /*#__PURE__*/(0, _jsxRuntime.jsx)(FirstPageIcon, {})
		    })), /*#__PURE__*/(0, _jsxRuntime.jsx)(BackButton, (0, _extends2.default)({}, backButtonProps, {
		      children: direction === 'rtl' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(NextPageIcon, {}) : /*#__PURE__*/(0, _jsxRuntime.jsx)(BackPageIcon, {})
		    })), /*#__PURE__*/(0, _jsxRuntime.jsx)(NextButton, (0, _extends2.default)({}, nextButtonProps, {
		      children: direction === 'rtl' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(BackPageIcon, {}) : /*#__PURE__*/(0, _jsxRuntime.jsx)(NextPageIcon, {})
		    })), showLastButton && /*#__PURE__*/(0, _jsxRuntime.jsx)(LastButton, (0, _extends2.default)({}, lastButtonProps, {
		      children: direction === 'rtl' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(FirstPageIcon, {}) : /*#__PURE__*/(0, _jsxRuntime.jsx)(LastPageIcon, {})
		    }))]
		  }));
		});
		var _default = TablePaginationActionsUnstyled$1;
		TablePaginationActionsUnstyled.default = _default;
		return TablePaginationActionsUnstyled;
	}

	var tablePaginationUnstyledClasses = {};

	var hasRequiredTablePaginationUnstyledClasses;

	function requireTablePaginationUnstyledClasses () {
		if (hasRequiredTablePaginationUnstyledClasses) return tablePaginationUnstyledClasses;
		hasRequiredTablePaginationUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(tablePaginationUnstyledClasses, "__esModule", {
		  value: true
		});
		tablePaginationUnstyledClasses.default = void 0;
		tablePaginationUnstyledClasses.getTablePaginationUnstyledUtilityClass = getTablePaginationUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getTablePaginationUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiTablePagination', slot);
		}
		const tablePaginationUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiTablePagination', ['root', 'toolbar', 'spacer', 'selectLabel', 'selectRoot', 'select', 'selectIcon', 'input', 'menuItem', 'displayedRows', 'actions']);
		var _default = tablePaginationUnstyledClasses$1;
		tablePaginationUnstyledClasses.default = _default;
		return tablePaginationUnstyledClasses;
	}

	var hasRequiredTablePaginationUnstyled$1;

	function requireTablePaginationUnstyled$1 () {
		if (hasRequiredTablePaginationUnstyled$1) return TablePaginationUnstyled;
		hasRequiredTablePaginationUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(TablePaginationUnstyled, "__esModule", {
		  value: true
		});
		TablePaginationUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _utils2 = requireUtils$3();
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _isHostComponent = _interopRequireDefault(requireIsHostComponent());
		var _TablePaginationActionsUnstyled = _interopRequireDefault(requireTablePaginationActionsUnstyled());
		var _tablePaginationUnstyledClasses = requireTablePaginationUnstyledClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["component", "colSpan", "count", "getItemAriaLabel", "labelDisplayedRows", "labelId", "labelRowsPerPage", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "selectId", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function defaultLabelDisplayedRows({
		  from,
		  to,
		  count
		}) {
		  return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
		}
		function defaultGetAriaLabel(type) {
		  return `Go to ${type} page`;
		}
		const useUtilityClasses = () => {
		  const slots = {
		    root: ['root'],
		    toolbar: ['toolbar'],
		    spacer: ['spacer'],
		    selectLabel: ['selectLabel'],
		    select: ['select'],
		    input: ['input'],
		    selectIcon: ['selectIcon'],
		    menuItem: ['menuItem'],
		    displayedRows: ['displayedRows'],
		    actions: ['actions']
		  };
		  return (0, _composeClasses.default)(slots, _tablePaginationUnstyledClasses.getTablePaginationUnstyledUtilityClass, {});
		};

		/**
		 * A pagination for tables.
		 *
		 * Demos:
		 *
		 * - [Unstyled Table Pagination](https://mui.com/base/react-table-pagination/)
		 *
		 * API:
		 *
		 * - [TablePaginationUnstyled API](https://mui.com/base/api/table-pagination-unstyled/)
		 */
		const TablePaginationUnstyled$1 = /*#__PURE__*/React.forwardRef(function TablePaginationUnstyled(props, ref) {
		  var _ref, _slots$select, _slots$actions, _slots$menuItem, _slots$selectLabel, _slots$displayedRows, _slots$toolbar, _slots$spacer;
		  const {
		      component,
		      colSpan: colSpanProp,
		      count,
		      getItemAriaLabel = defaultGetAriaLabel,
		      labelDisplayedRows = defaultLabelDisplayedRows,
		      labelId: labelIdProp,
		      labelRowsPerPage = 'Rows per page:',
		      onPageChange,
		      onRowsPerPageChange,
		      page,
		      rowsPerPage,
		      rowsPerPageOptions = [10, 25, 50, 100],
		      selectId: selectIdProp,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = props;
		  const classes = useUtilityClasses();
		  let colSpan;
		  if (!component || component === 'td' || !(0, _isHostComponent.default)(component)) {
		    colSpan = colSpanProp || 1000; // col-span over everything
		  }

		  const getLabelDisplayedRowsTo = () => {
		    if (count === -1) {
		      return (page + 1) * rowsPerPage;
		    }
		    return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
		  };
		  const selectId = (0, _utils.unstable_useId)(selectIdProp);
		  const labelId = (0, _utils.unstable_useId)(labelIdProp);
		  const Root = (_ref = component != null ? component : slots.root) != null ? _ref : 'td';
		  const rootProps = (0, _utils2.useSlotProps)({
		    elementType: Root,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: {
		      colSpan,
		      ref
		    },
		    ownerState,
		    className: classes.root
		  });
		  const Select = (_slots$select = slots.select) != null ? _slots$select : 'select';
		  const selectProps = (0, _utils2.useSlotProps)({
		    elementType: Select,
		    externalSlotProps: slotProps.select,
		    additionalProps: {
		      value: rowsPerPage,
		      id: selectId,
		      onChange: e => onRowsPerPageChange && onRowsPerPageChange(e),
		      'aria-label': rowsPerPage.toString(),
		      'aria-labelledby': [labelId, selectId].filter(Boolean).join(' ') || undefined
		    },
		    ownerState,
		    className: classes.select
		  });
		  const Actions = (_slots$actions = slots.actions) != null ? _slots$actions : _TablePaginationActionsUnstyled.default;
		  const actionsProps = (0, _utils2.useSlotProps)({
		    elementType: Actions,
		    externalSlotProps: slotProps.actions,
		    additionalProps: {
		      page,
		      rowsPerPage,
		      count,
		      onPageChange,
		      getItemAriaLabel
		    },
		    ownerState,
		    className: classes.actions
		  });
		  const MenuItem = (_slots$menuItem = slots.menuItem) != null ? _slots$menuItem : 'option';
		  const menuItemProps = (0, _utils2.useSlotProps)({
		    elementType: MenuItem,
		    externalSlotProps: slotProps.menuItem,
		    additionalProps: {
		      value: undefined
		    },
		    ownerState,
		    className: classes.menuItem
		  });
		  const SelectLabel = (_slots$selectLabel = slots.selectLabel) != null ? _slots$selectLabel : 'p';
		  const selectLabelProps = (0, _utils2.useSlotProps)({
		    elementType: SelectLabel,
		    externalSlotProps: slotProps.selectLabel,
		    additionalProps: {
		      id: labelId
		    },
		    ownerState,
		    className: classes.selectLabel
		  });
		  const DisplayedRows = (_slots$displayedRows = slots.displayedRows) != null ? _slots$displayedRows : 'p';
		  const displayedRowsProps = (0, _utils2.useSlotProps)({
		    elementType: DisplayedRows,
		    externalSlotProps: slotProps.displayedRows,
		    ownerState,
		    className: classes.displayedRows
		  });
		  const Toolbar = (_slots$toolbar = slots.toolbar) != null ? _slots$toolbar : 'div';
		  const toolbarProps = (0, _utils2.useSlotProps)({
		    elementType: Toolbar,
		    externalSlotProps: slotProps.toolbar,
		    ownerState,
		    className: classes.toolbar
		  });
		  const Spacer = (_slots$spacer = slots.spacer) != null ? _slots$spacer : 'div';
		  const spacerProps = (0, _utils2.useSlotProps)({
		    elementType: Spacer,
		    externalSlotProps: slotProps.spacer,
		    ownerState,
		    className: classes.spacer
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps, {
		    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(Toolbar, (0, _extends2.default)({}, toolbarProps, {
		      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Spacer, (0, _extends2.default)({}, spacerProps)), rowsPerPageOptions.length > 1 && /*#__PURE__*/(0, _jsxRuntime.jsx)(SelectLabel, (0, _extends2.default)({}, selectLabelProps, {
		        children: labelRowsPerPage
		      })), rowsPerPageOptions.length > 1 && /*#__PURE__*/(0, _jsxRuntime.jsx)(Select, (0, _extends2.default)({}, selectProps, {
		        children: rowsPerPageOptions.map(rowsPerPageOption => /*#__PURE__*/(0, React.createElement)(MenuItem, (0, _extends2.default)({}, menuItemProps, {
		          key: typeof rowsPerPageOption !== 'number' && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
		          value: typeof rowsPerPageOption !== 'number' && rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
		        }), typeof rowsPerPageOption !== 'number' && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
		      })), /*#__PURE__*/(0, _jsxRuntime.jsx)(DisplayedRows, (0, _extends2.default)({}, displayedRowsProps, {
		        children: labelDisplayedRows({
		          from: count === 0 ? 0 : page * rowsPerPage + 1,
		          to: getLabelDisplayedRowsTo(),
		          count: count === -1 ? -1 : count,
		          page
		        })
		      })), /*#__PURE__*/(0, _jsxRuntime.jsx)(Actions, (0, _extends2.default)({}, actionsProps))]
		    }))
		  }));
		});
		TablePaginationUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * @ignore
		   */
		  colSpan: _propTypes.default.number,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The total number of rows.
		   *
		   * To enable server side pagination for an unknown number of items, provide -1.
		   */
		  count: _propTypes.default.number.isRequired,
		  /**
		   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
		   * This is important for screen reader users.
		   *
		   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
		   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
		   * @returns {string}
		   * @default function defaultGetAriaLabel(type: ItemAriaLabelType) {
		   *   return `Go to ${type} page`;
		   * }
		   */
		  getItemAriaLabel: _propTypes.default.func,
		  /**
		   * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
		   * object.
		   *
		   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
		   * @default function defaultLabelDisplayedRows({ from, to, count }: LabelDisplayedRowsArgs) {
		   *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
		   * }
		   */
		  labelDisplayedRows: _propTypes.default.func,
		  /**
		   * Id of the label element within the pagination.
		   */
		  labelId: _propTypes.default.string,
		  /**
		   * Customize the rows per page label.
		   *
		   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
		   * @default 'Rows per page:'
		   */
		  labelRowsPerPage: _propTypes.default.node,
		  /**
		   * Callback fired when the page is changed.
		   *
		   * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
		   * @param {number} page The page selected.
		   */
		  onPageChange: _propTypes.default.func.isRequired,
		  /**
		   * Callback fired when the number of rows per page is changed.
		   *
		   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
		   */
		  onRowsPerPageChange: _propTypes.default.func,
		  /**
		   * The zero-based index of the current page.
		   */
		  page: (0, _utils.chainPropTypes)(_utils.integerPropType.isRequired, props => {
		    const {
		      count,
		      page,
		      rowsPerPage
		    } = props;
		    if (count === -1) {
		      return null;
		    }
		    const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
		    if (page < 0 || page > newLastPage) {
		      return new Error('MUI: The page prop of a TablePaginationUnstyled is out of range ' + `(0 to ${newLastPage}, but page is ${page}).`);
		    }
		    return null;
		  }),
		  /**
		   * The number of rows per page.
		   *
		   * Set -1 to display all the rows.
		   */
		  rowsPerPage: _utils.integerPropType.isRequired,
		  /**
		   * Customizes the options of the rows per page select field. If less than two options are
		   * available, no select field will be displayed.
		   * Use -1 for the value with a custom label to show all the rows.
		   * @default [10, 25, 50, 100]
		   */
		  rowsPerPageOptions: _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
		    label: _propTypes.default.string.isRequired,
		    value: _propTypes.default.number.isRequired
		  })]).isRequired),
		  /**
		   * Id of the select element within the pagination.
		   */
		  selectId: _propTypes.default.string,
		  /**
		   * The props used for each slot inside the TablePagination.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    actions: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    displayedRows: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    menuItem: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    select: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    selectLabel: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    spacer: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    toolbar: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the TablePagination.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    actions: _propTypes.default.elementType,
		    displayedRows: _propTypes.default.elementType,
		    menuItem: _propTypes.default.elementType,
		    root: _propTypes.default.elementType,
		    select: _propTypes.default.elementType,
		    selectLabel: _propTypes.default.elementType,
		    spacer: _propTypes.default.elementType,
		    toolbar: _propTypes.default.elementType
		  })
		} ;
		var _default = TablePaginationUnstyled$1;
		TablePaginationUnstyled.default = _default;
		return TablePaginationUnstyled;
	}

	var TablePaginationUnstyled_types = {};

	var hasRequiredTablePaginationUnstyled_types;

	function requireTablePaginationUnstyled_types () {
		if (hasRequiredTablePaginationUnstyled_types) return TablePaginationUnstyled_types;
		hasRequiredTablePaginationUnstyled_types = 1;

		Object.defineProperty(TablePaginationUnstyled_types, "__esModule", {
		  value: true
		});
		return TablePaginationUnstyled_types;
	}

	var TablePaginationActionsUnstyled_types = {};

	var hasRequiredTablePaginationActionsUnstyled_types;

	function requireTablePaginationActionsUnstyled_types () {
		if (hasRequiredTablePaginationActionsUnstyled_types) return TablePaginationActionsUnstyled_types;
		hasRequiredTablePaginationActionsUnstyled_types = 1;

		Object.defineProperty(TablePaginationActionsUnstyled_types, "__esModule", {
		  value: true
		});
		return TablePaginationActionsUnstyled_types;
	}

	var hasRequiredTablePaginationUnstyled;

	function requireTablePaginationUnstyled () {
		if (hasRequiredTablePaginationUnstyled) return TablePaginationUnstyled$1;
		hasRequiredTablePaginationUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  TablePaginationActionsUnstyled: true,
			  tablePaginationUnstyledClasses: true
			};
			Object.defineProperty(exports, "TablePaginationActionsUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _TablePaginationActionsUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _TablePaginationUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "tablePaginationUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _tablePaginationUnstyledClasses.default;
			  }
			});
			var _TablePaginationUnstyled = _interopRequireDefault(requireTablePaginationUnstyled$1());
			var _TablePaginationUnstyled2 = requireTablePaginationUnstyled_types();
			Object.keys(_TablePaginationUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _TablePaginationUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _TablePaginationUnstyled2[key];
			    }
			  });
			});
			var _TablePaginationActionsUnstyled = _interopRequireDefault(requireTablePaginationActionsUnstyled());
			var _TablePaginationActionsUnstyled2 = requireTablePaginationActionsUnstyled_types();
			Object.keys(_TablePaginationActionsUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _TablePaginationActionsUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _TablePaginationActionsUnstyled2[key];
			    }
			  });
			});
			var _tablePaginationUnstyledClasses = _interopRequireWildcard(requireTablePaginationUnstyledClasses());
			Object.keys(_tablePaginationUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _tablePaginationUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _tablePaginationUnstyledClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TablePaginationUnstyled$1));
		return TablePaginationUnstyled$1;
	}

	var TabPanelUnstyled$1 = {};

	var TabPanelUnstyled = {};

	var tabPanelUnstyledClasses = {};

	var hasRequiredTabPanelUnstyledClasses;

	function requireTabPanelUnstyledClasses () {
		if (hasRequiredTabPanelUnstyledClasses) return tabPanelUnstyledClasses;
		hasRequiredTabPanelUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(tabPanelUnstyledClasses, "__esModule", {
		  value: true
		});
		tabPanelUnstyledClasses.default = void 0;
		tabPanelUnstyledClasses.getTabPanelUnstyledUtilityClass = getTabPanelUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getTabPanelUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiTabPanel', slot);
		}
		const tabPanelUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiTabPanel', ['root', 'hidden']);
		var _default = tabPanelUnstyledClasses$1;
		tabPanelUnstyledClasses.default = _default;
		return tabPanelUnstyledClasses;
	}

	var useTabPanel = {};

	var TabsUnstyled$1 = {};

	var TabsUnstyled = {};

	var tabsUnstyledClasses = {};

	var hasRequiredTabsUnstyledClasses;

	function requireTabsUnstyledClasses () {
		if (hasRequiredTabsUnstyledClasses) return tabsUnstyledClasses;
		hasRequiredTabsUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(tabsUnstyledClasses, "__esModule", {
		  value: true
		});
		tabsUnstyledClasses.default = void 0;
		tabsUnstyledClasses.getTabsUnstyledUtilityClass = getTabsUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getTabsUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiTabs', slot);
		}
		const tabsUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiTabs', ['root', 'horizontal', 'vertical']);
		var _default = tabsUnstyledClasses$1;
		tabsUnstyledClasses.default = _default;
		return tabsUnstyledClasses;
	}

	var useTabs = {};

	var hasRequiredUseTabs;

	function requireUseTabs () {
		if (hasRequiredUseTabs) return useTabs;
		hasRequiredUseTabs = 1;

		Object.defineProperty(useTabs, "__esModule", {
		  value: true
		});
		useTabs.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$4();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useTabs$1 = parameters => {
		  const {
		    value: valueProp,
		    defaultValue,
		    onChange,
		    orientation,
		    direction,
		    selectionFollowsFocus
		  } = parameters;
		  const [value, setValue] = (0, _utils.unstable_useControlled)({
		    controlled: valueProp,
		    default: defaultValue,
		    name: 'Tabs',
		    state: 'value'
		  });
		  const idPrefix = (0, _utils.unstable_useId)();
		  const onSelected = React.useCallback((e, newValue) => {
		    setValue(newValue);
		    if (onChange) {
		      onChange(e, newValue);
		    }
		  }, [onChange, setValue]);
		  const tabsContextValue = React.useMemo(() => {
		    return {
		      idPrefix,
		      value,
		      onSelected,
		      orientation,
		      direction,
		      selectionFollowsFocus
		    };
		  }, [idPrefix, value, onSelected, orientation, direction, selectionFollowsFocus]);
		  return {
		    tabsContextValue
		  };
		};
		var _default = useTabs$1;
		useTabs.default = _default;
		return useTabs;
	}

	var TabsContext = {};

	var hasRequiredTabsContext;

	function requireTabsContext () {
		if (hasRequiredTabsContext) return TabsContext;
		hasRequiredTabsContext = 1;

		Object.defineProperty(TabsContext, "__esModule", {
		  value: true
		});
		TabsContext.default = void 0;
		TabsContext.getPanelId = getPanelId;
		TabsContext.getTabId = getTabId;
		TabsContext.useTabContext = useTabContext;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * @ignore - internal component.
		 */
		const Context = /*#__PURE__*/React.createContext(null);
		{
		  Context.displayName = 'TabsContext';
		}

		/**
		 * @returns {unknown}
		 */
		function useTabContext() {
		  return React.useContext(Context);
		}
		function getPanelId(context, value) {
		  const {
		    idPrefix
		  } = context;
		  if (idPrefix === null) {
		    return null;
		  }
		  return `${context.idPrefix}-P-${value}`;
		}
		function getTabId(context, value) {
		  const {
		    idPrefix
		  } = context;
		  if (idPrefix === null) {
		    return null;
		  }
		  return `${context.idPrefix}-T-${value}`;
		}
		var _default = Context;
		TabsContext.default = _default;
		return TabsContext;
	}

	var hasRequiredTabsUnstyled$1;

	function requireTabsUnstyled$1 () {
		if (hasRequiredTabsUnstyled$1) return TabsUnstyled;
		hasRequiredTabsUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(TabsUnstyled, "__esModule", {
		  value: true
		});
		TabsUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$3();
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _tabsUnstyledClasses = requireTabsUnstyledClasses();
		var _useTabs = _interopRequireDefault(requireUseTabs());
		var _TabsContext = _interopRequireDefault(requireTabsContext());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["children", "value", "defaultValue", "orientation", "direction", "component", "onChange", "selectionFollowsFocus", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    orientation
		  } = ownerState;
		  const slots = {
		    root: ['root', orientation]
		  };
		  return (0, _composeClasses.default)(slots, _tabsUnstyledClasses.getTabsUnstyledUtilityClass, {});
		};

		/**
		 *
		 * Demos:
		 *
		 * - [Unstyled Tabs](https://mui.com/base/react-tabs/)
		 *
		 * API:
		 *
		 * - [TabsUnstyled API](https://mui.com/base/api/tabs-unstyled/)
		 */
		const TabsUnstyled$1 = /*#__PURE__*/React.forwardRef((props, ref) => {
		  var _ref;
		  const {
		      children,
		      orientation = 'horizontal',
		      direction = 'ltr',
		      component,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const {
		    tabsContextValue
		  } = (0, _useTabs.default)(props);
		  const ownerState = (0, _extends2.default)({}, props, {
		    orientation,
		    direction
		  });
		  const classes = useUtilityClasses(ownerState);
		  const TabsRoot = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';
		  const tabsRootProps = (0, _utils.useSlotProps)({
		    elementType: TabsRoot,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: {
		      ref
		    },
		    ownerState,
		    className: classes.root
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TabsRoot, (0, _extends2.default)({}, tabsRootProps, {
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabsContext.default.Provider, {
		      value: tabsContextValue,
		      children: children
		    })
		  }));
		});
		TabsUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The default value. Use when the component is not controlled.
		   */
		  defaultValue: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.number, _propTypes.default.string]),
		  /**
		   * The direction of the text.
		   * @default 'ltr'
		   */
		  direction: _propTypes.default.oneOf(['ltr', 'rtl']),
		  /**
		   * Callback invoked when new value is being set.
		   */
		  onChange: _propTypes.default.func,
		  /**
		   * The component orientation (layout flow direction).
		   * @default 'horizontal'
		   */
		  orientation: _propTypes.default.oneOf(['horizontal', 'vertical']),
		  /**
		   * If `true` the selected tab changes on focus. Otherwise it only
		   * changes on activation.
		   */
		  selectionFollowsFocus: _propTypes.default.bool,
		  /**
		   * The props used for each slot inside the Tabs.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the Tabs.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * The value of the currently selected `Tab`.
		   * If you don't want any selected `Tab`, you can set this prop to `false`.
		   */
		  value: _propTypes.default.oneOfType([_propTypes.default.oneOf([false]), _propTypes.default.number, _propTypes.default.string])
		} ;
		var _default = TabsUnstyled$1;
		TabsUnstyled.default = _default;
		return TabsUnstyled;
	}

	var TabsUnstyled_types = {};

	var hasRequiredTabsUnstyled_types;

	function requireTabsUnstyled_types () {
		if (hasRequiredTabsUnstyled_types) return TabsUnstyled_types;
		hasRequiredTabsUnstyled_types = 1;

		Object.defineProperty(TabsUnstyled_types, "__esModule", {
		  value: true
		});
		return TabsUnstyled_types;
	}

	var hasRequiredTabsUnstyled;

	function requireTabsUnstyled () {
		if (hasRequiredTabsUnstyled) return TabsUnstyled$1;
		hasRequiredTabsUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  TabsContext: true,
			  tabsUnstyledClasses: true,
			  useTabs: true
			};
			Object.defineProperty(exports, "TabsContext", {
			  enumerable: true,
			  get: function () {
			    return _TabsContext.default;
			  }
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _TabsUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "tabsUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _tabsUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "useTabs", {
			  enumerable: true,
			  get: function () {
			    return _useTabs.default;
			  }
			});
			var _TabsUnstyled = _interopRequireDefault(requireTabsUnstyled$1());
			var _TabsContext = _interopRequireWildcard(requireTabsContext());
			Object.keys(_TabsContext).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _TabsContext[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _TabsContext[key];
			    }
			  });
			});
			var _tabsUnstyledClasses = _interopRequireWildcard(requireTabsUnstyledClasses());
			Object.keys(_tabsUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _tabsUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _tabsUnstyledClasses[key];
			    }
			  });
			});
			var _TabsUnstyled2 = requireTabsUnstyled_types();
			Object.keys(_TabsUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _TabsUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _TabsUnstyled2[key];
			    }
			  });
			});
			var _useTabs = _interopRequireWildcard(requireUseTabs());
			Object.keys(_useTabs).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _useTabs[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _useTabs[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TabsUnstyled$1));
		return TabsUnstyled$1;
	}

	var hasRequiredUseTabPanel;

	function requireUseTabPanel () {
		if (hasRequiredUseTabPanel) return useTabPanel;
		hasRequiredUseTabPanel = 1;

		Object.defineProperty(useTabPanel, "__esModule", {
		  value: true
		});
		useTabPanel.default = void 0;
		var _TabsUnstyled = requireTabsUnstyled();
		const useTabPanel$1 = parameters => {
		  const {
		    value
		  } = parameters;
		  const context = (0, _TabsUnstyled.useTabContext)();
		  if (context === null) {
		    throw new Error('No TabContext provided');
		  }
		  const hidden = value !== context.value;
		  const id = (0, _TabsUnstyled.getPanelId)(context, value);
		  const tabId = (0, _TabsUnstyled.getTabId)(context, value);
		  const getRootProps = () => {
		    return {
		      'aria-labelledby': tabId != null ? tabId : undefined,
		      hidden,
		      id: id != null ? id : undefined
		    };
		  };
		  return {
		    hidden,
		    getRootProps
		  };
		};
		var _default = useTabPanel$1;
		useTabPanel.default = _default;
		return useTabPanel;
	}

	var hasRequiredTabPanelUnstyled$1;

	function requireTabPanelUnstyled$1 () {
		if (hasRequiredTabPanelUnstyled$1) return TabPanelUnstyled;
		hasRequiredTabPanelUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(TabPanelUnstyled, "__esModule", {
		  value: true
		});
		TabPanelUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$3();
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _tabPanelUnstyledClasses = requireTabPanelUnstyledClasses();
		var _useTabPanel = _interopRequireDefault(requireUseTabPanel());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["children", "component", "value", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    hidden
		  } = ownerState;
		  const slots = {
		    root: ['root', hidden && 'hidden']
		  };
		  return (0, _composeClasses.default)(slots, _tabPanelUnstyledClasses.getTabPanelUnstyledUtilityClass, {});
		};
		/**
		 *
		 * Demos:
		 *
		 * - [Unstyled Tabs](https://mui.com/base/react-tabs/)
		 *
		 * API:
		 *
		 * - [TabPanelUnstyled API](https://mui.com/base/api/tab-panel-unstyled/)
		 */
		const TabPanelUnstyled$1 = /*#__PURE__*/React.forwardRef(function TabPanelUnstyled(props, ref) {
		  var _ref;
		  const {
		      children,
		      component,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const {
		    hidden,
		    getRootProps
		  } = (0, _useTabPanel.default)(props);
		  const ownerState = (0, _extends2.default)({}, props, {
		    hidden
		  });
		  const classes = useUtilityClasses(ownerState);
		  const TabPanelRoot = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';
		  const tabPanelRootProps = (0, _utils.useSlotProps)({
		    elementType: TabPanelRoot,
		    getSlotProps: getRootProps,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: {
		      role: 'tabpanel',
		      ref
		    },
		    ownerState,
		    className: classes.root
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TabPanelRoot, (0, _extends2.default)({}, tabPanelRootProps, {
		    children: !hidden && children
		  }));
		});
		TabPanelUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The props used for each slot inside the TabPanel.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the TabPanel.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
		   */
		  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]).isRequired
		} ;
		var _default = TabPanelUnstyled$1;
		TabPanelUnstyled.default = _default;
		return TabPanelUnstyled;
	}

	var TabPanelUnstyled_types = {};

	var hasRequiredTabPanelUnstyled_types;

	function requireTabPanelUnstyled_types () {
		if (hasRequiredTabPanelUnstyled_types) return TabPanelUnstyled_types;
		hasRequiredTabPanelUnstyled_types = 1;

		Object.defineProperty(TabPanelUnstyled_types, "__esModule", {
		  value: true
		});
		return TabPanelUnstyled_types;
	}

	var hasRequiredTabPanelUnstyled;

	function requireTabPanelUnstyled () {
		if (hasRequiredTabPanelUnstyled) return TabPanelUnstyled$1;
		hasRequiredTabPanelUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  tabPanelUnstyledClasses: true,
			  useTabPanel: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _TabPanelUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "tabPanelUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _tabPanelUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "useTabPanel", {
			  enumerable: true,
			  get: function () {
			    return _useTabPanel.default;
			  }
			});
			var _TabPanelUnstyled = _interopRequireDefault(requireTabPanelUnstyled$1());
			var _TabPanelUnstyled2 = requireTabPanelUnstyled_types();
			Object.keys(_TabPanelUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _TabPanelUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _TabPanelUnstyled2[key];
			    }
			  });
			});
			var _tabPanelUnstyledClasses = _interopRequireWildcard(requireTabPanelUnstyledClasses());
			Object.keys(_tabPanelUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _tabPanelUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _tabPanelUnstyledClasses[key];
			    }
			  });
			});
			var _useTabPanel = _interopRequireDefault(requireUseTabPanel());
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TabPanelUnstyled$1));
		return TabPanelUnstyled$1;
	}

	var TabsListUnstyled$1 = {};

	var TabsListUnstyled = {};

	var tabsListUnstyledClasses = {};

	var hasRequiredTabsListUnstyledClasses;

	function requireTabsListUnstyledClasses () {
		if (hasRequiredTabsListUnstyledClasses) return tabsListUnstyledClasses;
		hasRequiredTabsListUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(tabsListUnstyledClasses, "__esModule", {
		  value: true
		});
		tabsListUnstyledClasses.default = void 0;
		tabsListUnstyledClasses.getTabsListUnstyledUtilityClass = getTabsListUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getTabsListUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiTabsList', slot);
		}
		const tabsListUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiTabsList', ['root', 'horizontal', 'vertical']);
		var _default = tabsListUnstyledClasses$1;
		tabsListUnstyledClasses.default = _default;
		return tabsListUnstyledClasses;
	}

	var useTabsList = {};

	var hasRequiredUseTabsList;

	function requireUseTabsList () {
		if (hasRequiredUseTabsList) return useTabsList;
		hasRequiredUseTabsList = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useTabsList, "__esModule", {
		  value: true
		});
		useTabsList.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _utils = requireUtils$4();
		var _reactIs = requireReactIs();
		var _TabsUnstyled = requireTabsUnstyled();
		var _extractEventHandlers = _interopRequireDefault(requireExtractEventHandlers());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const nextItem = (list, item) => {
		  if (!list) {
		    return null;
		  }
		  if (list === item) {
		    return list.firstChild;
		  }
		  if (item && item.nextElementSibling) {
		    return item.nextElementSibling;
		  }
		  return list.firstChild;
		};
		const previousItem = (list, item) => {
		  if (!list) {
		    return null;
		  }
		  if (list === item) {
		    return list.lastChild;
		  }
		  if (item && item.previousElementSibling) {
		    return item.previousElementSibling;
		  }
		  return list.lastChild;
		};
		const moveFocus = (list, currentFocus, traversalFunction) => {
		  let wrappedOnce = false;
		  let nextFocus = traversalFunction(list, currentFocus);
		  while (list && nextFocus) {
		    // Prevent infinite loop.
		    if (nextFocus === list.firstChild) {
		      if (wrappedOnce) {
		        return;
		      }
		      wrappedOnce = true;
		    }

		    // Same logic as useAutocomplete.js
		    const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';
		    if (!nextFocus.hasAttribute('tabindex') || nextFocusDisabled) {
		      // Move to the next element.
		      nextFocus = traversalFunction(list, nextFocus);
		    } else {
		      nextFocus.focus();
		      return;
		    }
		  }
		};
		const useTabsList$1 = parameters => {
		  const {
		    'aria-label': ariaLabel,
		    'aria-labelledby': ariaLabelledBy,
		    children,
		    ref
		  } = parameters;
		  const tabsListRef = /*#__PURE__*/React.createRef();
		  const handleRef = (0, _utils.unstable_useForkRef)(tabsListRef, ref);
		  const context = (0, _TabsUnstyled.useTabContext)();
		  if (context === null) {
		    throw new Error('No TabContext provided');
		  }
		  const {
		    value,
		    orientation = 'horizontal',
		    direction = 'ltr'
		  } = context;
		  const isRtl = direction === 'rtl';
		  const handleKeyDown = event => {
		    const list = tabsListRef.current;
		    const currentFocus = (0, _utils.unstable_ownerDocument)(list).activeElement;
		    // Keyboard navigation assumes that [role="tab"] are siblings
		    // though we might warn in the future about nested, interactive elements
		    // as a a11y violation
		    const role = currentFocus == null ? void 0 : currentFocus.getAttribute('role');
		    if (role !== 'tab') {
		      return;
		    }
		    let previousItemKey = orientation === 'horizontal' ? 'ArrowLeft' : 'ArrowUp';
		    let nextItemKey = orientation === 'horizontal' ? 'ArrowRight' : 'ArrowDown';
		    if (orientation === 'horizontal' && isRtl) {
		      // swap previousItemKey with nextItemKey
		      previousItemKey = 'ArrowRight';
		      nextItemKey = 'ArrowLeft';
		    }
		    switch (event.key) {
		      case previousItemKey:
		        event.preventDefault();
		        moveFocus(list, currentFocus, previousItem);
		        break;
		      case nextItemKey:
		        event.preventDefault();
		        moveFocus(list, currentFocus, nextItem);
		        break;
		      case 'Home':
		        event.preventDefault();
		        moveFocus(list, null, nextItem);
		        break;
		      case 'End':
		        event.preventDefault();
		        moveFocus(list, null, previousItem);
		        break;
		    }
		  };
		  const createHandleKeyDown = otherHandlers => event => {
		    var _otherHandlers$onKeyD;
		    handleKeyDown(event);
		    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);
		  };
		  const getRootProps = (otherHandlers = {}) => {
		    const propsEventHandlers = (0, _extractEventHandlers.default)(parameters);
		    const externalEventHandlers = (0, _extends2.default)({}, propsEventHandlers, otherHandlers);
		    const ownEventHandlers = {
		      onKeyDown: createHandleKeyDown(externalEventHandlers)
		    };
		    const mergedEventHandlers = (0, _extends2.default)({}, externalEventHandlers, ownEventHandlers);
		    return (0, _extends2.default)({
		      'aria-label': ariaLabel,
		      'aria-labelledby': ariaLabelledBy,
		      'aria-orientation': orientation === 'vertical' ? 'vertical' : undefined,
		      role: 'tablist',
		      ref: handleRef
		    }, mergedEventHandlers);
		  };
		  const processChildren = React.useCallback(() => {
		    const valueToIndex = new Map();
		    let childIndex = 0;
		    const processedChildren = React.Children.map(children, child => {
		      if (! /*#__PURE__*/React.isValidElement(child)) {
		        return null;
		      }
		      {
		        if ((0, _reactIs.isFragment)(child)) {
		          console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
		        }
		      }
		      const childValue = child.props.value === undefined ? childIndex : child.props.value;
		      valueToIndex.set(childValue, childIndex);
		      childIndex += 1;
		      return /*#__PURE__*/React.cloneElement(child, (0, _extends2.default)({
		        value: childValue
		      }, childIndex === 1 && value === false && !child.props.tabIndex || value === childValue ? {
		        tabIndex: 0
		      } : {
		        tabIndex: -1
		      }));
		    });
		    return processedChildren;
		  }, [children, value]);
		  return {
		    isRtl,
		    orientation,
		    value,
		    processChildren,
		    getRootProps
		  };
		};
		var _default = useTabsList$1;
		useTabsList.default = _default;
		return useTabsList;
	}

	var hasRequiredTabsListUnstyled$1;

	function requireTabsListUnstyled$1 () {
		if (hasRequiredTabsListUnstyled$1) return TabsListUnstyled;
		hasRequiredTabsListUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(TabsListUnstyled, "__esModule", {
		  value: true
		});
		TabsListUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _utils = requireUtils$3();
		var _tabsListUnstyledClasses = requireTabsListUnstyledClasses();
		var _useTabsList = _interopRequireDefault(requireUseTabsList());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["children", "component", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    orientation
		  } = ownerState;
		  const slots = {
		    root: ['root', orientation]
		  };
		  return (0, _composeClasses.default)(slots, _tabsListUnstyledClasses.getTabsListUnstyledUtilityClass, {});
		};

		/**
		 *
		 * Demos:
		 *
		 * - [Unstyled Tabs](https://mui.com/base/react-tabs/)
		 *
		 * API:
		 *
		 * - [TabsListUnstyled API](https://mui.com/base/api/tabs-list-unstyled/)
		 */
		const TabsListUnstyled$1 = /*#__PURE__*/React.forwardRef((props, ref) => {
		  var _ref;
		  const {
		      component,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const {
		    isRtl,
		    orientation,
		    getRootProps,
		    processChildren
		  } = (0, _useTabsList.default)((0, _extends2.default)({}, props, {
		    ref
		  }));
		  const ownerState = (0, _extends2.default)({}, props, {
		    isRtl,
		    orientation
		  });
		  const classes = useUtilityClasses(ownerState);
		  const TabsListRoot = (_ref = component != null ? component : slots.root) != null ? _ref : 'div';
		  const tabsListRootProps = (0, _utils.useSlotProps)({
		    elementType: TabsListRoot,
		    getSlotProps: getRootProps,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    ownerState,
		    className: classes.root
		  });
		  const processedChildren = processChildren();
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TabsListRoot, (0, _extends2.default)({}, tabsListRootProps, {
		    children: processedChildren
		  }));
		});
		TabsListUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The props used for each slot inside the TabsList.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the TabsList.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  })
		} ;
		var _default = TabsListUnstyled$1;
		TabsListUnstyled.default = _default;
		return TabsListUnstyled;
	}

	var TabsListUnstyled_types = {};

	var hasRequiredTabsListUnstyled_types;

	function requireTabsListUnstyled_types () {
		if (hasRequiredTabsListUnstyled_types) return TabsListUnstyled_types;
		hasRequiredTabsListUnstyled_types = 1;

		Object.defineProperty(TabsListUnstyled_types, "__esModule", {
		  value: true
		});
		return TabsListUnstyled_types;
	}

	var useTabsList_types = {};

	var hasRequiredUseTabsList_types;

	function requireUseTabsList_types () {
		if (hasRequiredUseTabsList_types) return useTabsList_types;
		hasRequiredUseTabsList_types = 1;

		Object.defineProperty(useTabsList_types, "__esModule", {
		  value: true
		});
		return useTabsList_types;
	}

	var hasRequiredTabsListUnstyled;

	function requireTabsListUnstyled () {
		if (hasRequiredTabsListUnstyled) return TabsListUnstyled$1;
		hasRequiredTabsListUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  tabsListUnstyledClasses: true,
			  useTabsList: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _TabsListUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "tabsListUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _tabsListUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "useTabsList", {
			  enumerable: true,
			  get: function () {
			    return _useTabsList.default;
			  }
			});
			var _TabsListUnstyled = _interopRequireDefault(requireTabsListUnstyled$1());
			var _TabsListUnstyled2 = requireTabsListUnstyled_types();
			Object.keys(_TabsListUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _TabsListUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _TabsListUnstyled2[key];
			    }
			  });
			});
			var _tabsListUnstyledClasses = _interopRequireWildcard(requireTabsListUnstyledClasses());
			Object.keys(_tabsListUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _tabsListUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _tabsListUnstyledClasses[key];
			    }
			  });
			});
			var _useTabsList = _interopRequireDefault(requireUseTabsList());
			var _useTabsList2 = requireUseTabsList_types();
			Object.keys(_useTabsList2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _useTabsList2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _useTabsList2[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TabsListUnstyled$1));
		return TabsListUnstyled$1;
	}

	var TabUnstyled$1 = {};

	var TabUnstyled = {};

	var tabUnstyledClasses = {};

	var hasRequiredTabUnstyledClasses;

	function requireTabUnstyledClasses () {
		if (hasRequiredTabUnstyledClasses) return tabUnstyledClasses;
		hasRequiredTabUnstyledClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(tabUnstyledClasses, "__esModule", {
		  value: true
		});
		tabUnstyledClasses.default = void 0;
		tabUnstyledClasses.getTabUnstyledUtilityClass = getTabUnstyledUtilityClass;
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass$1());
		var _generateUtilityClasses = _interopRequireDefault(requireGenerateUtilityClasses());
		function getTabUnstyledUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiTab', slot);
		}
		const tabUnstyledClasses$1 = (0, _generateUtilityClasses.default)('MuiTab', ['root', 'selected', 'disabled']);
		var _default = tabUnstyledClasses$1;
		tabUnstyledClasses.default = _default;
		return tabUnstyledClasses;
	}

	var useTab = {};

	var hasRequiredUseTab;

	function requireUseTab () {
		if (hasRequiredUseTab) return useTab;
		hasRequiredUseTab = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useTab, "__esModule", {
		  value: true
		});
		useTab.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _TabsUnstyled = requireTabsUnstyled();
		var _ButtonUnstyled = requireButtonUnstyled();
		const _excluded = ["getRootProps"];
		const useTab$1 = parameters => {
		  var _getPanelId, _getTabId;
		  const {
		    value: valueProp,
		    onChange,
		    onClick,
		    onFocus
		  } = parameters;
		  const _useButton = (0, _ButtonUnstyled.useButton)(parameters),
		    {
		      getRootProps: getRootPropsButton
		    } = _useButton,
		    otherButtonProps = (0, _objectWithoutPropertiesLoose2.default)(_useButton, _excluded);
		  const context = (0, _TabsUnstyled.useTabContext)();
		  if (context === null) {
		    throw new Error('No TabContext provided');
		  }
		  const value = valueProp != null ? valueProp : 0;
		  const selected = context.value === value;
		  const selectionFollowsFocus = context.selectionFollowsFocus;
		  const a11yAttributes = {
		    role: 'tab',
		    'aria-controls': (_getPanelId = (0, _TabsUnstyled.getPanelId)(context, value)) != null ? _getPanelId : undefined,
		    id: (_getTabId = (0, _TabsUnstyled.getTabId)(context, value)) != null ? _getTabId : undefined,
		    'aria-selected': selected,
		    disabled: otherButtonProps.disabled
		  };
		  const createHandleFocus = otherHandlers => event => {
		    var _otherHandlers$onFocu;
		    (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
		    if (event.defaultPrevented) {
		      return;
		    }
		    if (selectionFollowsFocus && !selected) {
		      if (onChange) {
		        onChange(event, value);
		      }
		      context.onSelected(event, value);
		    }
		    if (onFocus) {
		      onFocus(event);
		    }
		  };
		  const createHandleClick = otherHandlers => event => {
		    var _otherHandlers$onClic;
		    (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);
		    if (event.defaultPrevented) {
		      return;
		    }
		    if (!selected) {
		      if (onChange) {
		        onChange(event, value);
		      }
		      context.onSelected(event, value);
		    }
		    if (onClick) {
		      onClick(event);
		    }
		  };
		  const getRootProps = (otherHandlers = {}) => {
		    const buttonResolvedProps = getRootPropsButton((0, _extends2.default)({}, otherHandlers, {
		      onClick: createHandleClick(otherHandlers),
		      onFocus: createHandleFocus(otherHandlers)
		    }));
		    return (0, _extends2.default)({}, buttonResolvedProps, a11yAttributes);
		  };
		  return (0, _extends2.default)({
		    getRootProps
		  }, otherButtonProps, {
		    selected
		  });
		};
		var _default = useTab$1;
		useTab.default = _default;
		return useTab;
	}

	var hasRequiredTabUnstyled$1;

	function requireTabUnstyled$1 () {
		if (hasRequiredTabUnstyled$1) return TabUnstyled;
		hasRequiredTabUnstyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(TabUnstyled, "__esModule", {
		  value: true
		});
		TabUnstyled.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _tabUnstyledClasses = requireTabUnstyledClasses();
		var _useTab = _interopRequireDefault(requireUseTab());
		var _utils2 = requireUtils$3();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["action", "children", "value", "disabled", "onChange", "onClick", "onFocus", "component", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    selected,
		    disabled
		  } = ownerState;
		  const slots = {
		    root: ['root', selected && 'selected', disabled && 'disabled']
		  };
		  return (0, _composeClasses.default)(slots, _tabUnstyledClasses.getTabUnstyledUtilityClass, {});
		};
		/**
		 *
		 * Demos:
		 *
		 * - [Unstyled Tabs](https://mui.com/base/react-tabs/)
		 *
		 * API:
		 *
		 * - [TabUnstyled API](https://mui.com/base/api/tab-unstyled/)
		 */
		const TabUnstyled$1 = /*#__PURE__*/React.forwardRef(function TabUnstyled(props, ref) {
		  var _ref;
		  const {
		      action,
		      children,
		      disabled = false,
		      component,
		      slotProps = {},
		      slots = {}
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const tabRef = React.useRef();
		  const handleRef = (0, _utils.unstable_useForkRef)(tabRef, ref);
		  const {
		    active,
		    focusVisible,
		    setFocusVisible,
		    selected,
		    getRootProps
		  } = (0, _useTab.default)((0, _extends2.default)({}, props, {
		    ref: handleRef
		  }));
		  React.useImperativeHandle(action, () => ({
		    focusVisible: () => {
		      setFocusVisible(true);
		      tabRef.current.focus();
		    }
		  }), [setFocusVisible]);
		  const ownerState = (0, _extends2.default)({}, props, {
		    active,
		    focusVisible,
		    disabled,
		    selected
		  });
		  const classes = useUtilityClasses(ownerState);
		  const TabRoot = (_ref = component != null ? component : slots.root) != null ? _ref : 'button';
		  const tabRootProps = (0, _utils2.useSlotProps)({
		    elementType: TabRoot,
		    getSlotProps: getRootProps,
		    externalSlotProps: slotProps.root,
		    externalForwardedProps: other,
		    additionalProps: {
		      ref
		    },
		    ownerState,
		    className: classes.root
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TabRoot, (0, _extends2.default)({}, tabRootProps, {
		    children: children
		  }));
		});
		TabUnstyled$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * A ref for imperative actions. It currently only supports `focusVisible()` action.
		   */
		  action: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
		    current: _propTypes.default.shape({
		      focusVisible: _propTypes.default.func.isRequired
		    })
		  })]),
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the component is disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * Callback invoked when new value is being set.
		   */
		  onChange: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onClick: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onFocus: _propTypes.default.func,
		  /**
		   * The props used for each slot inside the Tab.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the Tab.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * You can provide your own value. Otherwise, we fall back to the child position index.
		   */
		  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
		} ;
		var _default = TabUnstyled$1;
		TabUnstyled.default = _default;
		return TabUnstyled;
	}

	var TabUnstyled_types = {};

	var hasRequiredTabUnstyled_types;

	function requireTabUnstyled_types () {
		if (hasRequiredTabUnstyled_types) return TabUnstyled_types;
		hasRequiredTabUnstyled_types = 1;

		Object.defineProperty(TabUnstyled_types, "__esModule", {
		  value: true
		});
		return TabUnstyled_types;
	}

	var useTab_types = {};

	var hasRequiredUseTab_types;

	function requireUseTab_types () {
		if (hasRequiredUseTab_types) return useTab_types;
		hasRequiredUseTab_types = 1;

		Object.defineProperty(useTab_types, "__esModule", {
		  value: true
		});
		return useTab_types;
	}

	var hasRequiredTabUnstyled;

	function requireTabUnstyled () {
		if (hasRequiredTabUnstyled) return TabUnstyled$1;
		hasRequiredTabUnstyled = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  tabUnstyledClasses: true,
			  useTab: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _TabUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "tabUnstyledClasses", {
			  enumerable: true,
			  get: function () {
			    return _tabUnstyledClasses.default;
			  }
			});
			Object.defineProperty(exports, "useTab", {
			  enumerable: true,
			  get: function () {
			    return _useTab.default;
			  }
			});
			var _TabUnstyled = _interopRequireDefault(requireTabUnstyled$1());
			var _TabUnstyled2 = requireTabUnstyled_types();
			Object.keys(_TabUnstyled2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _TabUnstyled2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _TabUnstyled2[key];
			    }
			  });
			});
			var _tabUnstyledClasses = _interopRequireWildcard(requireTabUnstyledClasses());
			Object.keys(_tabUnstyledClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _tabUnstyledClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _tabUnstyledClasses[key];
			    }
			  });
			});
			var _useTab = _interopRequireDefault(requireUseTab());
			var _useTab2 = requireUseTab_types();
			Object.keys(_useTab2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _useTab2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _useTab2[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (TabUnstyled$1));
		return TabUnstyled$1;
	}

	var TextareaAutosize$1 = {};

	var TextareaAutosize = {};

	var hasRequiredTextareaAutosize$1;

	function requireTextareaAutosize$1 () {
		if (hasRequiredTextareaAutosize$1) return TextareaAutosize;
		hasRequiredTextareaAutosize$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(TextareaAutosize, "__esModule", {
		  value: true
		});
		TextareaAutosize.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _reactDom = require$$3;
		var _utils = requireUtils$4();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["onChange", "maxRows", "minRows", "style", "value"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function getStyleValue(computedStyle, property) {
		  return parseInt(computedStyle[property], 10) || 0;
		}
		const styles = {
		  shadow: {
		    // Visibility needed to hide the extra text area on iPads
		    visibility: 'hidden',
		    // Remove from the content flow
		    position: 'absolute',
		    // Ignore the scrollbar width
		    overflow: 'hidden',
		    height: 0,
		    top: 0,
		    left: 0,
		    // Create a new layer, increase the isolation of the computed values
		    transform: 'translateZ(0)'
		  }
		};
		function isEmpty(obj) {
		  return obj === undefined || obj === null || Object.keys(obj).length === 0;
		}
		const TextareaAutosize$1 = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {
		  const {
		      onChange,
		      maxRows,
		      minRows = 1,
		      style,
		      value
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const {
		    current: isControlled
		  } = React.useRef(value != null);
		  const inputRef = React.useRef(null);
		  const handleRef = (0, _utils.unstable_useForkRef)(ref, inputRef);
		  const shadowRef = React.useRef(null);
		  const renders = React.useRef(0);
		  const [state, setState] = React.useState({});
		  const getUpdatedState = React.useCallback(() => {
		    const input = inputRef.current;
		    const containerWindow = (0, _utils.unstable_ownerWindow)(input);
		    const computedStyle = containerWindow.getComputedStyle(input);

		    // If input's width is shrunk and it's not visible, don't sync height.
		    if (computedStyle.width === '0px') {
		      return {};
		    }
		    const inputShallow = shadowRef.current;
		    inputShallow.style.width = computedStyle.width;
		    inputShallow.value = input.value || props.placeholder || 'x';
		    if (inputShallow.value.slice(-1) === '\n') {
		      // Certain fonts which overflow the line height will cause the textarea
		      // to report a different scrollHeight depending on whether the last line
		      // is empty. Make it non-empty to avoid this issue.
		      inputShallow.value += ' ';
		    }
		    const boxSizing = computedStyle['box-sizing'];
		    const padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
		    const border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width');

		    // The height of the inner content
		    const innerHeight = inputShallow.scrollHeight;

		    // Measure height of a textarea with a single row
		    inputShallow.value = 'x';
		    const singleRowHeight = inputShallow.scrollHeight;

		    // The height of the outer content
		    let outerHeight = innerHeight;
		    if (minRows) {
		      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
		    }
		    if (maxRows) {
		      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
		    }
		    outerHeight = Math.max(outerHeight, singleRowHeight);

		    // Take the box sizing into account for applying this value as a style.
		    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
		    const overflow = Math.abs(outerHeight - innerHeight) <= 1;
		    return {
		      outerHeightStyle,
		      overflow
		    };
		  }, [maxRows, minRows, props.placeholder]);
		  const updateState = (prevState, newState) => {
		    const {
		      outerHeightStyle,
		      overflow
		    } = newState;
		    // Need a large enough difference to update the height.
		    // This prevents infinite rendering loop.
		    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
		      renders.current += 1;
		      return {
		        overflow,
		        outerHeightStyle
		      };
		    }
		    {
		      if (renders.current === 20) {
		        console.error(['MUI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\n'));
		      }
		    }
		    return prevState;
		  };
		  const syncHeight = React.useCallback(() => {
		    const newState = getUpdatedState();
		    if (isEmpty(newState)) {
		      return;
		    }
		    setState(prevState => {
		      return updateState(prevState, newState);
		    });
		  }, [getUpdatedState]);
		  const syncHeightWithFlushSycn = () => {
		    const newState = getUpdatedState();
		    if (isEmpty(newState)) {
		      return;
		    }

		    // In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering
		    // when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen
		    // Related issue - https://github.com/facebook/react/issues/24331
		    (0, _reactDom.flushSync)(() => {
		      setState(prevState => {
		        return updateState(prevState, newState);
		      });
		    });
		  };
		  React.useEffect(() => {
		    const handleResize = (0, _utils.unstable_debounce)(() => {
		      renders.current = 0;

		      // If the TextareaAutosize component is replaced by Suspense with a fallback, the last
		      // ResizeObserver's handler that runs because of the change in the layout is trying to
		      // access a dom node that is no longer there (as the fallback component is being shown instead).
		      // See https://github.com/mui/material-ui/issues/32640
		      if (inputRef.current) {
		        syncHeightWithFlushSycn();
		      }
		    });
		    const containerWindow = (0, _utils.unstable_ownerWindow)(inputRef.current);
		    containerWindow.addEventListener('resize', handleResize);
		    let resizeObserver;
		    if (typeof ResizeObserver !== 'undefined') {
		      resizeObserver = new ResizeObserver(handleResize);
		      resizeObserver.observe(inputRef.current);
		    }
		    return () => {
		      handleResize.clear();
		      containerWindow.removeEventListener('resize', handleResize);
		      if (resizeObserver) {
		        resizeObserver.disconnect();
		      }
		    };
		  });
		  (0, _utils.unstable_useEnhancedEffect)(() => {
		    syncHeight();
		  });
		  React.useEffect(() => {
		    renders.current = 0;
		  }, [value]);
		  const handleChange = event => {
		    renders.current = 0;
		    if (!isControlled) {
		      syncHeight();
		    }
		    if (onChange) {
		      onChange(event);
		    }
		  };
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
		    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("textarea", (0, _extends2.default)({
		      value: value,
		      onChange: handleChange,
		      ref: handleRef
		      // Apply the rows prop to get a "correct" first SSR paint
		      ,
		      rows: minRows,
		      style: (0, _extends2.default)({
		        height: state.outerHeightStyle,
		        // Need a large enough difference to allow scrolling.
		        // This prevents infinite rendering loop.
		        overflow: state.overflow ? 'hidden' : null
		      }, style)
		    }, other)), /*#__PURE__*/(0, _jsxRuntime.jsx)("textarea", {
		      "aria-hidden": true,
		      className: props.className,
		      readOnly: true,
		      ref: shadowRef,
		      tabIndex: -1,
		      style: (0, _extends2.default)({}, styles.shadow, style, {
		        padding: 0
		      })
		    })]
		  });
		});
		TextareaAutosize$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * Maximum number of rows to display.
		   */
		  maxRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
		  /**
		   * Minimum number of rows to display.
		   * @default 1
		   */
		  minRows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
		  /**
		   * @ignore
		   */
		  onChange: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  placeholder: _propTypes.default.string,
		  /**
		   * @ignore
		   */
		  style: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  value: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.string), _propTypes.default.number, _propTypes.default.string])
		} ;
		var _default = TextareaAutosize$1;
		TextareaAutosize.default = _default;
		return TextareaAutosize;
	}

	var hasRequiredTextareaAutosize;

	function requireTextareaAutosize () {
		if (hasRequiredTextareaAutosize) return TextareaAutosize$1;
		hasRequiredTextareaAutosize = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _TextareaAutosize.default;
			  }
			});
			var _TextareaAutosize = _interopRequireDefault(requireTextareaAutosize$1());
	} (TextareaAutosize$1));
		return TextareaAutosize$1;
	}

	/** @license MUI v5.0.0-alpha.109
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredNode$2;

	function requireNode$2 () {
		if (hasRequiredNode$2) return node$3;
		hasRequiredNode$2 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  BadgeUnstyled: true,
			  ButtonUnstyled: true,
			  ClickAwayListener: true,
			  unstable_composeClasses: true,
			  FocusTrap: true,
			  FormControlUnstyled: true,
			  InputUnstyled: true,
			  MenuUnstyled: true,
			  MenuItemUnstyled: true,
			  ModalUnstyled: true,
			  MultiSelectUnstyled: true,
			  NoSsr: true,
			  OptionGroupUnstyled: true,
			  OptionUnstyled: true,
			  PopperUnstyled: true,
			  Portal: true,
			  SelectUnstyled: true,
			  SliderUnstyled: true,
			  SnackbarUnstyled: true,
			  SwitchUnstyled: true,
			  TablePaginationUnstyled: true,
			  TabPanelUnstyled: true,
			  TabsListUnstyled: true,
			  TabsUnstyled: true,
			  TabUnstyled: true,
			  TextareaAutosize: true
			};
			Object.defineProperty(exports, "BadgeUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _BadgeUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "ButtonUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _ButtonUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "ClickAwayListener", {
			  enumerable: true,
			  get: function () {
			    return _ClickAwayListener.default;
			  }
			});
			Object.defineProperty(exports, "FocusTrap", {
			  enumerable: true,
			  get: function () {
			    return _FocusTrap.default;
			  }
			});
			Object.defineProperty(exports, "FormControlUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _FormControlUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "InputUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _InputUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "MenuItemUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _MenuItemUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "MenuUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _MenuUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "ModalUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _ModalUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "MultiSelectUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _MultiSelectUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "NoSsr", {
			  enumerable: true,
			  get: function () {
			    return _NoSsr.default;
			  }
			});
			Object.defineProperty(exports, "OptionGroupUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _OptionGroupUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "OptionUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _OptionUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "PopperUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _PopperUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "Portal", {
			  enumerable: true,
			  get: function () {
			    return _Portal.default;
			  }
			});
			Object.defineProperty(exports, "SelectUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _SelectUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "SliderUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _SliderUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "SnackbarUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _SnackbarUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "SwitchUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _SwitchUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "TabPanelUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _TabPanelUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "TabUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _TabUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "TablePaginationUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _TablePaginationUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "TabsListUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _TabsListUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "TabsUnstyled", {
			  enumerable: true,
			  get: function () {
			    return _TabsUnstyled.default;
			  }
			});
			Object.defineProperty(exports, "TextareaAutosize", {
			  enumerable: true,
			  get: function () {
			    return _TextareaAutosize.default;
			  }
			});
			Object.defineProperty(exports, "unstable_composeClasses", {
			  enumerable: true,
			  get: function () {
			    return _composeClasses.default;
			  }
			});
			var _utils = requireUtils$3();
			Object.keys(_utils).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _utils[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _utils[key];
			    }
			  });
			});
			var _AutocompleteUnstyled = requireAutocompleteUnstyled();
			Object.keys(_AutocompleteUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _AutocompleteUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _AutocompleteUnstyled[key];
			    }
			  });
			});
			var _BadgeUnstyled = _interopRequireWildcard(requireBadgeUnstyled());
			Object.keys(_BadgeUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _BadgeUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _BadgeUnstyled[key];
			    }
			  });
			});
			var _ButtonUnstyled = _interopRequireWildcard(requireButtonUnstyled());
			Object.keys(_ButtonUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _ButtonUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _ButtonUnstyled[key];
			    }
			  });
			});
			var _ClickAwayListener = _interopRequireDefault(requireClickAwayListener());
			var _composeClasses = _interopRequireDefault(requireComposeClasses());
			var _FocusTrap = _interopRequireDefault(requireFocusTrap());
			var _FormControlUnstyled = _interopRequireWildcard(requireFormControlUnstyled());
			Object.keys(_FormControlUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _FormControlUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _FormControlUnstyled[key];
			    }
			  });
			});
			var _InputUnstyled = _interopRequireWildcard(requireInputUnstyled());
			Object.keys(_InputUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _InputUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _InputUnstyled[key];
			    }
			  });
			});
			var _ListboxUnstyled = requireListboxUnstyled();
			Object.keys(_ListboxUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _ListboxUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _ListboxUnstyled[key];
			    }
			  });
			});
			var _MenuUnstyled = _interopRequireWildcard(requireMenuUnstyled());
			Object.keys(_MenuUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _MenuUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _MenuUnstyled[key];
			    }
			  });
			});
			var _MenuItemUnstyled = _interopRequireWildcard(requireMenuItemUnstyled());
			Object.keys(_MenuItemUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _MenuItemUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _MenuItemUnstyled[key];
			    }
			  });
			});
			var _ModalUnstyled = _interopRequireWildcard(requireModalUnstyled());
			Object.keys(_ModalUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _ModalUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _ModalUnstyled[key];
			    }
			  });
			});
			var _MultiSelectUnstyled = _interopRequireWildcard(requireMultiSelectUnstyled());
			Object.keys(_MultiSelectUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _MultiSelectUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _MultiSelectUnstyled[key];
			    }
			  });
			});
			var _NoSsr = _interopRequireDefault(requireNoSsr());
			var _OptionGroupUnstyled = _interopRequireWildcard(requireOptionGroupUnstyled());
			Object.keys(_OptionGroupUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _OptionGroupUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _OptionGroupUnstyled[key];
			    }
			  });
			});
			var _OptionUnstyled = _interopRequireWildcard(requireOptionUnstyled());
			Object.keys(_OptionUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _OptionUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _OptionUnstyled[key];
			    }
			  });
			});
			var _PopperUnstyled = _interopRequireDefault(requirePopperUnstyled());
			var _Portal = _interopRequireDefault(Portal$2);
			var _SelectUnstyled = _interopRequireWildcard(requireSelectUnstyled());
			Object.keys(_SelectUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _SelectUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _SelectUnstyled[key];
			    }
			  });
			});
			var _SliderUnstyled = _interopRequireWildcard(requireSliderUnstyled());
			Object.keys(_SliderUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _SliderUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _SliderUnstyled[key];
			    }
			  });
			});
			var _SnackbarUnstyled = _interopRequireWildcard(requireSnackbarUnstyled());
			Object.keys(_SnackbarUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _SnackbarUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _SnackbarUnstyled[key];
			    }
			  });
			});
			var _SwitchUnstyled = _interopRequireWildcard(requireSwitchUnstyled());
			Object.keys(_SwitchUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _SwitchUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _SwitchUnstyled[key];
			    }
			  });
			});
			var _TablePaginationUnstyled = _interopRequireWildcard(requireTablePaginationUnstyled());
			Object.keys(_TablePaginationUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _TablePaginationUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _TablePaginationUnstyled[key];
			    }
			  });
			});
			var _TabPanelUnstyled = _interopRequireWildcard(requireTabPanelUnstyled());
			Object.keys(_TabPanelUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _TabPanelUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _TabPanelUnstyled[key];
			    }
			  });
			});
			var _TabsListUnstyled = _interopRequireWildcard(requireTabsListUnstyled());
			Object.keys(_TabsListUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _TabsListUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _TabsListUnstyled[key];
			    }
			  });
			});
			var _TabsUnstyled = _interopRequireWildcard(requireTabsUnstyled());
			Object.keys(_TabsUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _TabsUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _TabsUnstyled[key];
			    }
			  });
			});
			var _TabUnstyled = _interopRequireWildcard(requireTabUnstyled());
			Object.keys(_TabUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _TabUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _TabUnstyled[key];
			    }
			  });
			});
			var _TextareaAutosize = _interopRequireDefault(requireTextareaAutosize());
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (node$3));
		return node$3;
	}

	var system = {};

	var node$2 = {};

	function _extends$1() {
	  _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };
	  return _extends$1.apply(this, arguments);
	}

	function memoize$1(fn) {
	  var cache = Object.create(null);
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

	var isPropValid = /* #__PURE__ */memoize$1(function (prop) {
	  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
	  /* o */
	  && prop.charCodeAt(1) === 110
	  /* n */
	  && prop.charCodeAt(2) < 91;
	}
	/* Z+1 */
	);

	/*

	Based off glamor's StyleSheet, thanks Sunil ❤️

	high performance StyleSheet for css-in-js systems

	- uses multiple style tags behind the scenes for millions of rules
	- uses `insertRule` for appending in production for *much* faster performance

	// usage

	import { StyleSheet } from '@emotion/sheet'

	let styleSheet = new StyleSheet({ key: '', container: document.head })

	styleSheet.insert('#box { border: 1px solid red; }')
	- appends a css rule into the stylesheet

	styleSheet.flush()
	- empties the stylesheet of all its contents

	*/
	// $FlowFixMe
	function sheetForTag(tag) {
	  if (tag.sheet) {
	    // $FlowFixMe
	    return tag.sheet;
	  } // this weirdness brought to you by firefox

	  /* istanbul ignore next */


	  for (var i = 0; i < document.styleSheets.length; i++) {
	    if (document.styleSheets[i].ownerNode === tag) {
	      // $FlowFixMe
	      return document.styleSheets[i];
	    }
	  }
	}

	function createStyleElement(options) {
	  var tag = document.createElement('style');
	  tag.setAttribute('data-emotion', options.key);

	  if (options.nonce !== undefined) {
	    tag.setAttribute('nonce', options.nonce);
	  }

	  tag.appendChild(document.createTextNode(''));
	  tag.setAttribute('data-s', '');
	  return tag;
	}

	var StyleSheet = /*#__PURE__*/function () {
	  // Using Node instead of HTMLElement since container may be a ShadowRoot
	  function StyleSheet(options) {
	    var _this = this;

	    this._insertTag = function (tag) {
	      var before;

	      if (_this.tags.length === 0) {
	        if (_this.insertionPoint) {
	          before = _this.insertionPoint.nextSibling;
	        } else if (_this.prepend) {
	          before = _this.container.firstChild;
	        } else {
	          before = _this.before;
	        }
	      } else {
	        before = _this.tags[_this.tags.length - 1].nextSibling;
	      }

	      _this.container.insertBefore(tag, before);

	      _this.tags.push(tag);
	    };

	    this.isSpeedy = options.speedy === undefined ? "development" === 'production' : options.speedy;
	    this.tags = [];
	    this.ctr = 0;
	    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

	    this.key = options.key;
	    this.container = options.container;
	    this.prepend = options.prepend;
	    this.insertionPoint = options.insertionPoint;
	    this.before = null;
	  }

	  var _proto = StyleSheet.prototype;

	  _proto.hydrate = function hydrate(nodes) {
	    nodes.forEach(this._insertTag);
	  };

	  _proto.insert = function insert(rule) {
	    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
	    // it's 1 in dev because we insert source maps that map a single rule to a location
	    // and you can only have one source map per style tag
	    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
	      this._insertTag(createStyleElement(this));
	    }

	    var tag = this.tags[this.tags.length - 1];

	    {
	      var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;

	      if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
	        // this would only cause problem in speedy mode
	        // but we don't want enabling speedy to affect the observable behavior
	        // so we report this error at all times
	        console.error("You're attempting to insert the following rule:\n" + rule + '\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.');
	      }
	      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
	    }

	    if (this.isSpeedy) {
	      var sheet = sheetForTag(tag);

	      try {
	        // this is the ultrafast version, works across browsers
	        // the big drawback is that the css won't be editable in devtools
	        sheet.insertRule(rule, sheet.cssRules.length);
	      } catch (e) {
	        if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
	          console.error("There was a problem inserting the following rule: \"" + rule + "\"", e);
	        }
	      }
	    } else {
	      tag.appendChild(document.createTextNode(rule));
	    }

	    this.ctr++;
	  };

	  _proto.flush = function flush() {
	    // $FlowFixMe
	    this.tags.forEach(function (tag) {
	      return tag.parentNode && tag.parentNode.removeChild(tag);
	    });
	    this.tags = [];
	    this.ctr = 0;

	    {
	      this._alreadyInsertedOrderInsensitiveRule = false;
	    }
	  };

	  return StyleSheet;
	}();

	var MS = '-ms-';
	var MOZ = '-moz-';
	var WEBKIT = '-webkit-';

	var COMMENT = 'comm';
	var RULESET = 'rule';
	var DECLARATION = 'decl';
	var IMPORT = '@import';
	var KEYFRAMES = '@keyframes';

	/**
	 * @param {number}
	 * @return {number}
	 */
	var abs = Math.abs;

	/**
	 * @param {number}
	 * @return {string}
	 */
	var from = String.fromCharCode;

	/**
	 * @param {object}
	 * @return {object}
	 */
	var assign$1 = Object.assign;

	/**
	 * @param {string} value
	 * @param {number} length
	 * @return {number}
	 */
	function hash (value, length) {
		return charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0
	}

	/**
	 * @param {string} value
	 * @return {string}
	 */
	function trim (value) {
		return value.trim()
	}

	/**
	 * @param {string} value
	 * @param {RegExp} pattern
	 * @return {string?}
	 */
	function match (value, pattern) {
		return (value = pattern.exec(value)) ? value[0] : value
	}

	/**
	 * @param {string} value
	 * @param {(string|RegExp)} pattern
	 * @param {string} replacement
	 * @return {string}
	 */
	function replace (value, pattern, replacement) {
		return value.replace(pattern, replacement)
	}

	/**
	 * @param {string} value
	 * @param {string} search
	 * @return {number}
	 */
	function indexof (value, search) {
		return value.indexOf(search)
	}

	/**
	 * @param {string} value
	 * @param {number} index
	 * @return {number}
	 */
	function charat (value, index) {
		return value.charCodeAt(index) | 0
	}

	/**
	 * @param {string} value
	 * @param {number} begin
	 * @param {number} end
	 * @return {string}
	 */
	function substr (value, begin, end) {
		return value.slice(begin, end)
	}

	/**
	 * @param {string} value
	 * @return {number}
	 */
	function strlen (value) {
		return value.length
	}

	/**
	 * @param {any[]} value
	 * @return {number}
	 */
	function sizeof (value) {
		return value.length
	}

	/**
	 * @param {any} value
	 * @param {any[]} array
	 * @return {any}
	 */
	function append (value, array) {
		return array.push(value), value
	}

	/**
	 * @param {string[]} array
	 * @param {function} callback
	 * @return {string}
	 */
	function combine (array, callback) {
		return array.map(callback).join('')
	}

	var line = 1;
	var column = 1;
	var length = 0;
	var position = 0;
	var character = 0;
	var characters = '';

	/**
	 * @param {string} value
	 * @param {object | null} root
	 * @param {object | null} parent
	 * @param {string} type
	 * @param {string[] | string} props
	 * @param {object[] | string} children
	 * @param {number} length
	 */
	function node$1 (value, root, parent, type, props, children, length) {
		return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: ''}
	}

	/**
	 * @param {object} root
	 * @param {object} props
	 * @return {object}
	 */
	function copy (root, props) {
		return assign$1(node$1('', null, null, '', null, null, 0), root, {length: -root.length}, props)
	}

	/**
	 * @return {number}
	 */
	function char () {
		return character
	}

	/**
	 * @return {number}
	 */
	function prev () {
		character = position > 0 ? charat(characters, --position) : 0;

		if (column--, character === 10)
			column = 1, line--;

		return character
	}

	/**
	 * @return {number}
	 */
	function next () {
		character = position < length ? charat(characters, position++) : 0;

		if (column++, character === 10)
			column = 1, line++;

		return character
	}

	/**
	 * @return {number}
	 */
	function peek () {
		return charat(characters, position)
	}

	/**
	 * @return {number}
	 */
	function caret () {
		return position
	}

	/**
	 * @param {number} begin
	 * @param {number} end
	 * @return {string}
	 */
	function slice (begin, end) {
		return substr(characters, begin, end)
	}

	/**
	 * @param {number} type
	 * @return {number}
	 */
	function token (type) {
		switch (type) {
			// \0 \t \n \r \s whitespace token
			case 0: case 9: case 10: case 13: case 32:
				return 5
			// ! + , / > @ ~ isolate token
			case 33: case 43: case 44: case 47: case 62: case 64: case 126:
			// ; { } breakpoint token
			case 59: case 123: case 125:
				return 4
			// : accompanied token
			case 58:
				return 3
			// " ' ( [ opening delimit token
			case 34: case 39: case 40: case 91:
				return 2
			// ) ] closing delimit token
			case 41: case 93:
				return 1
		}

		return 0
	}

	/**
	 * @param {string} value
	 * @return {any[]}
	 */
	function alloc (value) {
		return line = column = 1, length = strlen(characters = value), position = 0, []
	}

	/**
	 * @param {any} value
	 * @return {any}
	 */
	function dealloc (value) {
		return characters = '', value
	}

	/**
	 * @param {number} type
	 * @return {string}
	 */
	function delimit (type) {
		return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
	}

	/**
	 * @param {number} type
	 * @return {string}
	 */
	function whitespace (type) {
		while (character = peek())
			if (character < 33)
				next();
			else
				break

		return token(type) > 2 || token(character) > 3 ? '' : ' '
	}

	/**
	 * @param {number} index
	 * @param {number} count
	 * @return {string}
	 */
	function escaping (index, count) {
		while (--count && next())
			// not 0-9 A-F a-f
			if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
				break

		return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
	}

	/**
	 * @param {number} type
	 * @return {number}
	 */
	function delimiter (type) {
		while (next())
			switch (character) {
				// ] ) " '
				case type:
					return position
				// " '
				case 34: case 39:
					if (type !== 34 && type !== 39)
						delimiter(character);
					break
				// (
				case 40:
					if (type === 41)
						delimiter(type);
					break
				// \
				case 92:
					next();
					break
			}

		return position
	}

	/**
	 * @param {number} type
	 * @param {number} index
	 * @return {number}
	 */
	function commenter (type, index) {
		while (next())
			// //
			if (type + character === 47 + 10)
				break
			// /*
			else if (type + character === 42 + 42 && peek() === 47)
				break

		return '/*' + slice(index, position - 1) + '*' + from(type === 47 ? type : next())
	}

	/**
	 * @param {number} index
	 * @return {string}
	 */
	function identifier (index) {
		while (!token(peek()))
			next();

		return slice(index, position)
	}

	/**
	 * @param {string} value
	 * @return {object[]}
	 */
	function compile (value) {
		return dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value))
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {string[]} rule
	 * @param {string[]} rules
	 * @param {string[]} rulesets
	 * @param {number[]} pseudo
	 * @param {number[]} points
	 * @param {string[]} declarations
	 * @return {object}
	 */
	function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
		var index = 0;
		var offset = 0;
		var length = pseudo;
		var atrule = 0;
		var property = 0;
		var previous = 0;
		var variable = 1;
		var scanning = 1;
		var ampersand = 1;
		var character = 0;
		var type = '';
		var props = rules;
		var children = rulesets;
		var reference = rule;
		var characters = type;

		while (scanning)
			switch (previous = character, character = next()) {
				// (
				case 40:
					if (previous != 108 && charat(characters, length - 1) == 58) {
						if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f') != -1)
							ampersand = -1;
						break
					}
				// " ' [
				case 34: case 39: case 91:
					characters += delimit(character);
					break
				// \t \n \r \s
				case 9: case 10: case 13: case 32:
					characters += whitespace(previous);
					break
				// \
				case 92:
					characters += escaping(caret() - 1, 7);
					continue
				// /
				case 47:
					switch (peek()) {
						case 42: case 47:
							append(comment(commenter(next(), caret()), root, parent), declarations);
							break
						default:
							characters += '/';
					}
					break
				// {
				case 123 * variable:
					points[index++] = strlen(characters) * ampersand;
				// } ; \0
				case 125 * variable: case 59: case 0:
					switch (character) {
						// \0 }
						case 0: case 125: scanning = 0;
						// ;
						case 59 + offset:
							if (property > 0 && (strlen(characters) - length))
								append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
							break
						// @ ;
						case 59: characters += ';';
						// { rule/at-rule
						default:
							append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);

							if (character === 123)
								if (offset === 0)
									parse(characters, root, reference, reference, props, rulesets, length, points, children);
								else
									switch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {
										// d m s
										case 100: case 109: case 115:
											parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
											break
										default:
											parse(characters, reference, reference, reference, [''], children, 0, points, children);
									}
					}

					index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
					break
				// :
				case 58:
					length = 1 + strlen(characters), property = previous;
				default:
					if (variable < 1)
						if (character == 123)
							--variable;
						else if (character == 125 && variable++ == 0 && prev() == 125)
							continue

					switch (characters += from(character), character * variable) {
						// &
						case 38:
							ampersand = offset > 0 ? 1 : (characters += '\f', -1);
							break
						// ,
						case 44:
							points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
							break
						// @
						case 64:
							// -
							if (peek() === 45)
								characters += delimit(next());

							atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
							break
						// -
						case 45:
							if (previous === 45 && strlen(characters) == 2)
								variable = 0;
					}
			}

		return rulesets
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {number} index
	 * @param {number} offset
	 * @param {string[]} rules
	 * @param {number[]} points
	 * @param {string} type
	 * @param {string[]} props
	 * @param {string[]} children
	 * @param {number} length
	 * @return {object}
	 */
	function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {
		var post = offset - 1;
		var rule = offset === 0 ? rules : [''];
		var size = sizeof(rule);

		for (var i = 0, j = 0, k = 0; i < index; ++i)
			for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
				if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x])))
					props[k++] = z;

		return node$1(value, root, parent, offset === 0 ? RULESET : type, props, children, length)
	}

	/**
	 * @param {number} value
	 * @param {object} root
	 * @param {object?} parent
	 * @return {object}
	 */
	function comment (value, root, parent) {
		return node$1(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0)
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {number} length
	 * @return {object}
	 */
	function declaration (value, root, parent, length) {
		return node$1(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length)
	}

	/**
	 * @param {object[]} children
	 * @param {function} callback
	 * @return {string}
	 */
	function serialize (children, callback) {
		var output = '';
		var length = sizeof(children);

		for (var i = 0; i < length; i++)
			output += callback(children[i], i, children, callback) || '';

		return output
	}

	/**
	 * @param {object} element
	 * @param {number} index
	 * @param {object[]} children
	 * @param {function} callback
	 * @return {string}
	 */
	function stringify (element, index, children, callback) {
		switch (element.type) {
			case IMPORT: case DECLARATION: return element.return = element.return || element.value
			case COMMENT: return ''
			case KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'
			case RULESET: element.value = element.props.join(',');
		}

		return strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''
	}

	/**
	 * @param {function[]} collection
	 * @return {function}
	 */
	function middleware (collection) {
		var length = sizeof(collection);

		return function (element, index, children, callback) {
			var output = '';

			for (var i = 0; i < length; i++)
				output += collection[i](element, index, children, callback) || '';

			return output
		}
	}

	var weakMemoize = function weakMemoize(func) {
	  // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
	  var cache = new WeakMap();
	  return function (arg) {
	    if (cache.has(arg)) {
	      // $FlowFixMe
	      return cache.get(arg);
	    }

	    var ret = func(arg);
	    cache.set(arg, ret);
	    return ret;
	  };
	};

	var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
	  var previous = 0;
	  var character = 0;

	  while (true) {
	    previous = character;
	    character = peek(); // &\f

	    if (previous === 38 && character === 12) {
	      points[index] = 1;
	    }

	    if (token(character)) {
	      break;
	    }

	    next();
	  }

	  return slice(begin, position);
	};

	var toRules = function toRules(parsed, points) {
	  // pretend we've started with a comma
	  var index = -1;
	  var character = 44;

	  do {
	    switch (token(character)) {
	      case 0:
	        // &\f
	        if (character === 38 && peek() === 12) {
	          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
	          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
	          // and when it should just concatenate the outer and inner selectors
	          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
	          points[index] = 1;
	        }

	        parsed[index] += identifierWithPointTracking(position - 1, points, index);
	        break;

	      case 2:
	        parsed[index] += delimit(character);
	        break;

	      case 4:
	        // comma
	        if (character === 44) {
	          // colon
	          parsed[++index] = peek() === 58 ? '&\f' : '';
	          points[index] = parsed[index].length;
	          break;
	        }

	      // fallthrough

	      default:
	        parsed[index] += from(character);
	    }
	  } while (character = next());

	  return parsed;
	};

	var getRules = function getRules(value, points) {
	  return dealloc(toRules(alloc(value), points));
	}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


	var fixedElements = /* #__PURE__ */new WeakMap();
	var compat = function compat(element) {
	  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
	  // negative .length indicates that this rule has been already prefixed
	  element.length < 1) {
	    return;
	  }

	  var value = element.value,
	      parent = element.parent;
	  var isImplicitRule = element.column === parent.column && element.line === parent.line;

	  while (parent.type !== 'rule') {
	    parent = parent.parent;
	    if (!parent) return;
	  } // short-circuit for the simplest case


	  if (element.props.length === 1 && value.charCodeAt(0) !== 58
	  /* colon */
	  && !fixedElements.get(parent)) {
	    return;
	  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
	  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


	  if (isImplicitRule) {
	    return;
	  }

	  fixedElements.set(element, true);
	  var points = [];
	  var rules = getRules(value, points);
	  var parentRules = parent.props;

	  for (var i = 0, k = 0; i < rules.length; i++) {
	    for (var j = 0; j < parentRules.length; j++, k++) {
	      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
	    }
	  }
	};
	var removeLabel = function removeLabel(element) {
	  if (element.type === 'decl') {
	    var value = element.value;

	    if ( // charcode for l
	    value.charCodeAt(0) === 108 && // charcode for b
	    value.charCodeAt(2) === 98) {
	      // this ignores label
	      element["return"] = '';
	      element.value = '';
	    }
	  }
	};
	var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';

	var isIgnoringComment = function isIgnoringComment(element) {
	  return element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
	};

	var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
	  return function (element, index, children) {
	    if (element.type !== 'rule' || cache.compat) return;
	    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);

	    if (unsafePseudoClasses) {
	      var isNested = element.parent === children[0]; // in nested rules comments become children of the "auto-inserted" rule
	      //
	      // considering this input:
	      // .a {
	      //   .b /* comm */ {}
	      //   color: hotpink;
	      // }
	      // we get output corresponding to this:
	      // .a {
	      //   & {
	      //     /* comm */
	      //     color: hotpink;
	      //   }
	      //   .b {}
	      // }

	      var commentContainer = isNested ? children[0].children : // global rule at the root level
	      children;

	      for (var i = commentContainer.length - 1; i >= 0; i--) {
	        var node = commentContainer[i];

	        if (node.line < element.line) {
	          break;
	        } // it is quite weird but comments are *usually* put at `column: element.column - 1`
	        // so we seek *from the end* for the node that is earlier than the rule's `element` and check that
	        // this will also match inputs like this:
	        // .a {
	        //   /* comm */
	        //   .b {}
	        // }
	        //
	        // but that is fine
	        //
	        // it would be the easiest to change the placement of the comment to be the first child of the rule:
	        // .a {
	        //   .b { /* comm */ }
	        // }
	        // with such inputs we wouldn't have to search for the comment at all
	        // TODO: consider changing this comment placement in the next major version


	        if (node.column < element.column) {
	          if (isIgnoringComment(node)) {
	            return;
	          }

	          break;
	        }
	      }

	      unsafePseudoClasses.forEach(function (unsafePseudoClass) {
	        console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
	      });
	    }
	  };
	};

	var isImportRule = function isImportRule(element) {
	  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
	};

	var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
	  for (var i = index - 1; i >= 0; i--) {
	    if (!isImportRule(children[i])) {
	      return true;
	    }
	  }

	  return false;
	}; // use this to remove incorrect elements from further processing
	// so they don't get handed to the `sheet` (or anything else)
	// as that could potentially lead to additional logs which in turn could be overhelming to the user


	var nullifyElement = function nullifyElement(element) {
	  element.type = '';
	  element.value = '';
	  element["return"] = '';
	  element.children = '';
	  element.props = '';
	};

	var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
	  if (!isImportRule(element)) {
	    return;
	  }

	  if (element.parent) {
	    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
	    nullifyElement(element);
	  } else if (isPrependedWithRegularRules(index, children)) {
	    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
	    nullifyElement(element);
	  }
	};

	/* eslint-disable no-fallthrough */

	function prefix(value, length) {
	  switch (hash(value, length)) {
	    // color-adjust
	    case 5103:
	      return WEBKIT + 'print-' + value + value;
	    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

	    case 5737:
	    case 4201:
	    case 3177:
	    case 3433:
	    case 1641:
	    case 4457:
	    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

	    case 5572:
	    case 6356:
	    case 5844:
	    case 3191:
	    case 6645:
	    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

	    case 6391:
	    case 5879:
	    case 5623:
	    case 6135:
	    case 4599:
	    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

	    case 4215:
	    case 6389:
	    case 5109:
	    case 5365:
	    case 5621:
	    case 3829:
	      return WEBKIT + value + value;
	    // appearance, user-select, transform, hyphens, text-size-adjust

	    case 5349:
	    case 4246:
	    case 4810:
	    case 6968:
	    case 2756:
	      return WEBKIT + value + MOZ + value + MS + value + value;
	    // flex, flex-direction

	    case 6828:
	    case 4268:
	      return WEBKIT + value + MS + value + value;
	    // order

	    case 6165:
	      return WEBKIT + value + MS + 'flex-' + value + value;
	    // align-items

	    case 5187:
	      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
	    // align-self

	    case 5443:
	      return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value;
	    // align-content

	    case 4675:
	      return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/, '') + value;
	    // flex-shrink

	    case 5548:
	      return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;
	    // flex-basis

	    case 5292:
	      return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;
	    // flex-grow

	    case 6060:
	      return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;
	    // transition

	    case 4554:
	      return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
	    // cursor

	    case 6187:
	      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
	    // background, background-image

	    case 5495:
	    case 3959:
	      return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
	    // justify-content

	    case 4968:
	      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
	    // (margin|padding)-inline-(start|end)

	    case 4095:
	    case 3583:
	    case 4068:
	    case 2532:
	      return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
	    // (min|max)?(width|height|inline-size|block-size)

	    case 8116:
	    case 7059:
	    case 5753:
	    case 5535:
	    case 5445:
	    case 5701:
	    case 4933:
	    case 4677:
	    case 5533:
	    case 5789:
	    case 5021:
	    case 4765:
	      // stretch, max-content, min-content, fill-available
	      if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {
	        // (m)ax-content, (m)in-content
	        case 109:
	          // -
	          if (charat(value, length + 4) !== 45) break;
	        // (f)ill-available, (f)it-content

	        case 102:
	          return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
	        // (s)tretch

	        case 115:
	          return ~indexof(value, 'stretch') ? prefix(replace(value, 'stretch', 'fill-available'), length) + value : value;
	      }
	      break;
	    // position: sticky

	    case 4949:
	      // (s)ticky?
	      if (charat(value, length + 1) !== 115) break;
	    // display: (flex|inline-flex)

	    case 6444:
	      switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
	        // stic(k)y
	        case 107:
	          return replace(value, ':', ':' + WEBKIT) + value;
	        // (inline-)?fl(e)x

	        case 101:
	          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
	      }

	      break;
	    // writing-mode

	    case 5936:
	      switch (charat(value, length + 11)) {
	        // vertical-l(r)
	        case 114:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
	        // vertical-r(l)

	        case 108:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
	        // horizontal(-)tb

	        case 45:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
	      }

	      return WEBKIT + value + MS + value + value;
	  }

	  return value;
	}

	var prefixer = function prefixer(element, index, children, callback) {
	  if (element.length > -1) if (!element["return"]) switch (element.type) {
	    case DECLARATION:
	      element["return"] = prefix(element.value, element.length);
	      break;

	    case KEYFRAMES:
	      return serialize([copy(element, {
	        value: replace(element.value, '@', '@' + WEBKIT)
	      })], callback);

	    case RULESET:
	      if (element.length) return combine(element.props, function (value) {
	        switch (match(value, /(::plac\w+|:read-\w+)/)) {
	          // :read-(only|write)
	          case ':read-only':
	          case ':read-write':
	            return serialize([copy(element, {
	              props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
	            })], callback);
	          // :placeholder

	          case '::placeholder':
	            return serialize([copy(element, {
	              props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
	            }), copy(element, {
	              props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
	            }), copy(element, {
	              props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
	            })], callback);
	        }

	        return '';
	      });
	  }
	};

	var defaultStylisPlugins = [prefixer];

	var createCache = function createCache(options) {
	  var key = options.key;

	  if (!key) {
	    throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\n" + "If multiple caches share the same key they might \"fight\" for each other's style elements.");
	  }

	  if ( key === 'css') {
	    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
	    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
	    // note this very very intentionally targets all style elements regardless of the key to ensure
	    // that creating a cache works inside of render of a React component

	    Array.prototype.forEach.call(ssrStyles, function (node) {
	      // we want to only move elements which have a space in the data-emotion attribute value
	      // because that indicates that it is an Emotion 11 server-side rendered style elements
	      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
	      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
	      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
	      // will not result in the Emotion 10 styles being destroyed
	      var dataEmotionAttribute = node.getAttribute('data-emotion');

	      if (dataEmotionAttribute.indexOf(' ') === -1) {
	        return;
	      }
	      document.head.appendChild(node);
	      node.setAttribute('data-s', '');
	    });
	  }

	  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

	  {
	    // $FlowFixMe
	    if (/[^a-z-]/.test(key)) {
	      throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
	    }
	  }

	  var inserted = {};
	  var container;
	  var nodesToHydrate = [];

	  {
	    container = options.container || document.head;
	    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
	    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
	    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
	      var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

	      for (var i = 1; i < attrib.length; i++) {
	        inserted[attrib[i]] = true;
	      }

	      nodesToHydrate.push(node);
	    });
	  }

	  var _insert;

	  var omnipresentPlugins = [compat, removeLabel];

	  {
	    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
	      get compat() {
	        return cache.compat;
	      }

	    }), incorrectImportAlarm);
	  }

	  {
	    var currentSheet;
	    var finalizingPlugins = [stringify, function (element) {
	      if (!element.root) {
	        if (element["return"]) {
	          currentSheet.insert(element["return"]);
	        } else if (element.value && element.type !== COMMENT) {
	          // insert empty rule in non-production environments
	          // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
	          currentSheet.insert(element.value + "{}");
	        }
	      }
	    } ];
	    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

	    var stylis = function stylis(styles) {
	      return serialize(compile(styles), serializer);
	    };

	    _insert = function insert(selector, serialized, sheet, shouldCache) {
	      currentSheet = sheet;

	      if (serialized.map !== undefined) {
	        currentSheet = {
	          insert: function insert(rule) {
	            sheet.insert(rule + serialized.map);
	          }
	        };
	      }

	      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

	      if (shouldCache) {
	        cache.inserted[serialized.name] = true;
	      }
	    };
	  }

	  var cache = {
	    key: key,
	    sheet: new StyleSheet({
	      key: key,
	      container: container,
	      nonce: options.nonce,
	      speedy: options.speedy,
	      prepend: options.prepend,
	      insertionPoint: options.insertionPoint
	    }),
	    nonce: options.nonce,
	    inserted: inserted,
	    registered: {},
	    insert: _insert
	  };
	  cache.sheet.hydrate(nodesToHydrate);
	  return cache;
	};

	var emotionCache_browser_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		default: createCache
	});

	var reactIs = requireReactIs$1();

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	  childContextTypes: true,
	  contextType: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDefaultProps: true,
	  getDerivedStateFromError: true,
	  getDerivedStateFromProps: true,
	  mixins: true,
	  propTypes: true,
	  type: true
	};
	var KNOWN_STATICS = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	function getStatics(component) {
	  // React v16.11 and below
	  if (reactIs.isMemo(component)) {
	    return MEMO_STATICS;
	  } // React v16.12 and above


	  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}

	var defineProperty$1 = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype$1 = Object.prototype;
	function hoistNonReactStatics$2(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components
	    if (objectPrototype$1) {
	      var inheritedComponent = getPrototypeOf(sourceComponent);

	      if (inheritedComponent && inheritedComponent !== objectPrototype$1) {
	        hoistNonReactStatics$2(targetComponent, inheritedComponent, blacklist);
	      }
	    }

	    var keys = getOwnPropertyNames(sourceComponent);

	    if (getOwnPropertySymbols) {
	      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	    }

	    var targetStatics = getStatics(targetComponent);
	    var sourceStatics = getStatics(sourceComponent);

	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i];

	      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

	        try {
	          // Avoid failures from read-only properties
	          defineProperty$1(targetComponent, key, descriptor);
	        } catch (e) {}
	      }
	    }
	  }

	  return targetComponent;
	}

	var hoistNonReactStatics_cjs = hoistNonReactStatics$2;

	// this file isolates this package that is not tree-shakeable
	// and if this module doesn't actually contain any logic of its own
	// then Rollup just use 'hoist-non-react-statics' directly in other chunks

	var hoistNonReactStatics = (function (targetComponent, sourceComponent) {
	  return hoistNonReactStatics_cjs(targetComponent, sourceComponent);
	});

	var hoistNonReactStatics$1 = hoistNonReactStatics;

	var isBrowser$1 = "object" !== 'undefined';
	function getRegisteredStyles(registered, registeredStyles, classNames) {
	  var rawClassName = '';
	  classNames.split(' ').forEach(function (className) {
	    if (registered[className] !== undefined) {
	      registeredStyles.push(registered[className] + ";");
	    } else {
	      rawClassName += className + " ";
	    }
	  });
	  return rawClassName;
	}
	var registerStyles = function registerStyles(cache, serialized, isStringTag) {
	  var className = cache.key + "-" + serialized.name;

	  if ( // we only need to add the styles to the registered cache if the
	  // class name could be used further down
	  // the tree but if it's a string tag, we know it won't
	  // so we don't have to add it to registered cache.
	  // this improves memory usage since we can avoid storing the whole style string
	  (isStringTag === false || // we need to always store it if we're in compat mode and
	  // in node since emotion-server relies on whether a style is in
	  // the registered cache to know whether a style is global or not
	  // also, note that this check will be dead code eliminated in the browser
	  isBrowser$1 === false ) && cache.registered[className] === undefined) {
	    cache.registered[className] = serialized.styles;
	  }
	};
	var insertStyles = function insertStyles(cache, serialized, isStringTag) {
	  registerStyles(cache, serialized, isStringTag);
	  var className = cache.key + "-" + serialized.name;

	  if (cache.inserted[serialized.name] === undefined) {
	    var current = serialized;

	    do {
	      cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

	      current = current.next;
	    } while (current !== undefined);
	  }
	};

	/* eslint-disable */
	// Inspired by https://github.com/garycourt/murmurhash-js
	// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
	function murmur2(str) {
	  // 'm' and 'r' are mixing constants generated offline.
	  // They're not really 'magic', they just happen to work well.
	  // const m = 0x5bd1e995;
	  // const r = 24;
	  // Initialize the hash
	  var h = 0; // Mix 4 bytes at a time into the hash

	  var k,
	      i = 0,
	      len = str.length;

	  for (; len >= 4; ++i, len -= 4) {
	    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
	    k =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
	    k ^=
	    /* k >>> r: */
	    k >>> 24;
	    h =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
	    /* Math.imul(h, m): */
	    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Handle the last few bytes of the input array


	  switch (len) {
	    case 3:
	      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

	    case 2:
	      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

	    case 1:
	      h ^= str.charCodeAt(i) & 0xff;
	      h =
	      /* Math.imul(h, m): */
	      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Do a few final mixes of the hash to ensure the last few
	  // bytes are well-incorporated.


	  h ^= h >>> 13;
	  h =
	  /* Math.imul(h, m): */
	  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  return ((h ^ h >>> 15) >>> 0).toString(36);
	}

	var unitlessKeys = {
	  animationIterationCount: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	var ILLEGAL_ESCAPE_SEQUENCE_ERROR$1 = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
	var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
	var hyphenateRegex = /[A-Z]|^ms/g;
	var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

	var isCustomProperty = function isCustomProperty(property) {
	  return property.charCodeAt(1) === 45;
	};

	var isProcessableValue = function isProcessableValue(value) {
	  return value != null && typeof value !== 'boolean';
	};

	var processStyleName = /* #__PURE__ */memoize$1(function (styleName) {
	  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
	});

	var processStyleValue = function processStyleValue(key, value) {
	  switch (key) {
	    case 'animation':
	    case 'animationName':
	      {
	        if (typeof value === 'string') {
	          return value.replace(animationRegex, function (match, p1, p2) {
	            cursor = {
	              name: p1,
	              styles: p2,
	              next: cursor
	            };
	            return p1;
	          });
	        }
	      }
	  }

	  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
	    return value + 'px';
	  }

	  return value;
	};

	{
	  var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
	  var contentValues = ['normal', 'none', 'initial', 'inherit', 'unset'];
	  var oldProcessStyleValue = processStyleValue;
	  var msPattern = /^-ms-/;
	  var hyphenPattern = /-(.)/g;
	  var hyphenatedCache = {};

	  processStyleValue = function processStyleValue(key, value) {
	    if (key === 'content') {
	      if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
	        throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
	      }
	    }

	    var processed = oldProcessStyleValue(key, value);

	    if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
	      hyphenatedCache[key] = true;
	      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function (str, _char) {
	        return _char.toUpperCase();
	      }) + "?");
	    }

	    return processed;
	  };
	}

	var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';

	function handleInterpolation(mergedProps, registered, interpolation) {
	  if (interpolation == null) {
	    return '';
	  }

	  if (interpolation.__emotion_styles !== undefined) {
	    if (interpolation.toString() === 'NO_COMPONENT_SELECTOR') {
	      throw new Error(noComponentSelectorMessage);
	    }

	    return interpolation;
	  }

	  switch (typeof interpolation) {
	    case 'boolean':
	      {
	        return '';
	      }

	    case 'object':
	      {
	        if (interpolation.anim === 1) {
	          cursor = {
	            name: interpolation.name,
	            styles: interpolation.styles,
	            next: cursor
	          };
	          return interpolation.name;
	        }

	        if (interpolation.styles !== undefined) {
	          var next = interpolation.next;

	          if (next !== undefined) {
	            // not the most efficient thing ever but this is a pretty rare case
	            // and there will be very few iterations of this generally
	            while (next !== undefined) {
	              cursor = {
	                name: next.name,
	                styles: next.styles,
	                next: cursor
	              };
	              next = next.next;
	            }
	          }

	          var styles = interpolation.styles + ";";

	          if (interpolation.map !== undefined) {
	            styles += interpolation.map;
	          }

	          return styles;
	        }

	        return createStringFromObject(mergedProps, registered, interpolation);
	      }

	    case 'function':
	      {
	        if (mergedProps !== undefined) {
	          var previousCursor = cursor;
	          var result = interpolation(mergedProps);
	          cursor = previousCursor;
	          return handleInterpolation(mergedProps, registered, result);
	        } else {
	          console.error('Functions that are interpolated in css calls will be stringified.\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\n' + 'It can be called directly with props or interpolated in a styled call like this\n' + "let SomeComponent = styled('div')`${dynamicStyle}`");
	        }

	        break;
	      }

	    case 'string':
	      {
	        var matched = [];
	        var replaced = interpolation.replace(animationRegex, function (match, p1, p2) {
	          var fakeVarName = "animation" + matched.length;
	          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
	          return "${" + fakeVarName + "}";
	        });

	        if (matched.length) {
	          console.error('`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\n' + 'Instead of doing this:\n\n' + [].concat(matched, ["`" + replaced + "`"]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
	        }
	      }

	      break;
	  } // finalize string values (regular strings and functions interpolated into css calls)


	  if (registered == null) {
	    return interpolation;
	  }

	  var cached = registered[interpolation];
	  return cached !== undefined ? cached : interpolation;
	}

	function createStringFromObject(mergedProps, registered, obj) {
	  var string = '';

	  if (Array.isArray(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
	    }
	  } else {
	    for (var _key in obj) {
	      var value = obj[_key];

	      if (typeof value !== 'object') {
	        if (registered != null && registered[value] !== undefined) {
	          string += _key + "{" + registered[value] + "}";
	        } else if (isProcessableValue(value)) {
	          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
	        }
	      } else {
	        if (_key === 'NO_COMPONENT_SELECTOR' && "development" !== 'production') {
	          throw new Error(noComponentSelectorMessage);
	        }

	        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
	          for (var _i = 0; _i < value.length; _i++) {
	            if (isProcessableValue(value[_i])) {
	              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
	            }
	          }
	        } else {
	          var interpolated = handleInterpolation(mergedProps, registered, value);

	          switch (_key) {
	            case 'animation':
	            case 'animationName':
	              {
	                string += processStyleName(_key) + ":" + interpolated + ";";
	                break;
	              }

	            default:
	              {
	                if (_key === 'undefined') {
	                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
	                }

	                string += _key + "{" + interpolated + "}";
	              }
	          }
	        }
	      }
	    }
	  }

	  return string;
	}

	var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
	var sourceMapPattern;

	{
	  sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
	} // this is the cursor for keyframes
	// keyframes are stored on the SerializedStyles object as a linked list


	var cursor;
	var serializeStyles = function serializeStyles(args, registered, mergedProps) {
	  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
	    return args[0];
	  }

	  var stringMode = true;
	  var styles = '';
	  cursor = undefined;
	  var strings = args[0];

	  if (strings == null || strings.raw === undefined) {
	    stringMode = false;
	    styles += handleInterpolation(mergedProps, registered, strings);
	  } else {
	    if (strings[0] === undefined) {
	      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
	    }

	    styles += strings[0];
	  } // we start at 1 since we've already handled the first arg


	  for (var i = 1; i < args.length; i++) {
	    styles += handleInterpolation(mergedProps, registered, args[i]);

	    if (stringMode) {
	      if (strings[i] === undefined) {
	        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
	      }

	      styles += strings[i];
	    }
	  }

	  var sourceMap;

	  {
	    styles = styles.replace(sourceMapPattern, function (match) {
	      sourceMap = match;
	      return '';
	    });
	  } // using a global regex with .exec is stateful so lastIndex has to be reset each time


	  labelPattern.lastIndex = 0;
	  var identifierName = '';
	  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

	  while ((match = labelPattern.exec(styles)) !== null) {
	    identifierName += '-' + // $FlowFixMe we know it's not null
	    match[1];
	  }

	  var name = murmur2(styles) + identifierName;

	  {
	    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
	    return {
	      name: name,
	      styles: styles,
	      map: sourceMap,
	      next: cursor,
	      toString: function toString() {
	        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
	      }
	    };
	  }
	};

	var syncFallback = function syncFallback(create) {
	  return create();
	};

	var useInsertionEffect = React$3['useInsertion' + 'Effect'] ? React$3['useInsertion' + 'Effect'] : false;
	var useInsertionEffectAlwaysWithSyncFallback =  useInsertionEffect || syncFallback;
	var useInsertionEffectWithLayoutFallback = useInsertionEffect || s$1;

	var hasOwnProperty = {}.hasOwnProperty;

	var EmotionCacheContext = /* #__PURE__ */B$2( // we're doing this to avoid preconstruct's dead code elimination in this one case
	// because this module is primarily intended for the browser and node
	// but it's also required in react native and similar environments sometimes
	// and we could have a special build just for that
	// but this is much easier and the native packages
	// might use a different theme context in the future anyway
	typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
	  key: 'css'
	}) : null);

	{
	  EmotionCacheContext.displayName = 'EmotionCacheContext';
	}

	var CacheProvider = EmotionCacheContext.Provider;
	var __unsafe_useEmotionCache = function useEmotionCache() {
	  return q$1(EmotionCacheContext);
	};

	var withEmotionCache = function withEmotionCache(func) {
	  // $FlowFixMe
	  return /*#__PURE__*/k(function (props, ref) {
	    // the cache will never be null in the browser
	    var cache = q$1(EmotionCacheContext);
	    return func(props, cache, ref);
	  });
	};

	var ThemeContext$1 = /* #__PURE__ */B$2({});

	{
	  ThemeContext$1.displayName = 'EmotionThemeContext';
	}

	var useTheme$4 = function useTheme() {
	  return q$1(ThemeContext$1);
	};

	var getTheme = function getTheme(outerTheme, theme) {
	  if (typeof theme === 'function') {
	    var mergedTheme = theme(outerTheme);

	    if ((mergedTheme == null || typeof mergedTheme !== 'object' || Array.isArray(mergedTheme))) {
	      throw new Error('[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!');
	    }

	    return mergedTheme;
	  }

	  if ((theme == null || typeof theme !== 'object' || Array.isArray(theme))) {
	    throw new Error('[ThemeProvider] Please make your theme prop a plain object');
	  }

	  return _extends$1({}, outerTheme, theme);
	};

	var createCacheWithTheme = /* #__PURE__ */weakMemoize(function (outerTheme) {
	  return weakMemoize(function (theme) {
	    return getTheme(outerTheme, theme);
	  });
	});
	var ThemeProvider$5 = function ThemeProvider(props) {
	  var theme = q$1(ThemeContext$1);

	  if (props.theme !== theme) {
	    theme = createCacheWithTheme(theme)(props.theme);
	  }

	  return /*#__PURE__*/h$1(ThemeContext$1.Provider, {
	    value: theme
	  }, props.children);
	};
	function withTheme$1(Component) {
	  var componentName = Component.displayName || Component.name || 'Component';

	  var render = function render(props, ref) {
	    var theme = q$1(ThemeContext$1);
	    return /*#__PURE__*/h$1(Component, _extends$1({
	      theme: theme,
	      ref: ref
	    }, props));
	  }; // $FlowFixMe


	  var WithTheme = /*#__PURE__*/k(render);
	  WithTheme.displayName = "WithTheme(" + componentName + ")";
	  return hoistNonReactStatics$1(WithTheme, Component);
	}

	var getLastPart = function getLastPart(functionName) {
	  // The match may be something like 'Object.createEmotionProps' or
	  // 'Loader.prototype.render'
	  var parts = functionName.split('.');
	  return parts[parts.length - 1];
	};

	var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine(line) {
	  // V8
	  var match = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);
	  if (match) return getLastPart(match[1]); // Safari / Firefox

	  match = /^([A-Za-z0-9$.]+)@/.exec(line);
	  if (match) return getLastPart(match[1]);
	  return undefined;
	};

	var internalReactFunctionNames = /* #__PURE__ */new Set(['renderWithHooks', 'processChild', 'finishClassComponent', 'renderToString']); // These identifiers come from error stacks, so they have to be valid JS
	// identifiers, thus we only need to replace what is a valid character for JS,
	// but not for CSS.

	var sanitizeIdentifier = function sanitizeIdentifier(identifier) {
	  return identifier.replace(/\$/g, '-');
	};

	var getLabelFromStackTrace = function getLabelFromStackTrace(stackTrace) {
	  if (!stackTrace) return undefined;
	  var lines = stackTrace.split('\n');

	  for (var i = 0; i < lines.length; i++) {
	    var functionName = getFunctionNameFromStackTraceLine(lines[i]); // The first line of V8 stack traces is just "Error"

	    if (!functionName) continue; // If we reach one of these, we have gone too far and should quit

	    if (internalReactFunctionNames.has(functionName)) break; // The component name is the first function in the stack that starts with an
	    // uppercase letter

	    if (/^[A-Z]/.test(functionName)) return sanitizeIdentifier(functionName);
	  }

	  return undefined;
	};

	var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
	var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';
	var createEmotionProps = function createEmotionProps(type, props) {
	  if (typeof props.css === 'string' && // check if there is a css declaration
	  props.css.indexOf(':') !== -1) {
	    throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
	  }

	  var newProps = {};

	  for (var key in props) {
	    if (hasOwnProperty.call(props, key)) {
	      newProps[key] = props[key];
	    }
	  }

	  newProps[typePropName] = type; // For performance, only call getLabelFromStackTrace in development and when
	  // the label hasn't already been computed

	  if (!!props.css && (typeof props.css !== 'object' || typeof props.css.name !== 'string' || props.css.name.indexOf('-') === -1)) {
	    var label = getLabelFromStackTrace(new Error().stack);
	    if (label) newProps[labelPropName] = label;
	  }

	  return newProps;
	};

	var Insertion$2 = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serialized = _ref.serialized,
	      isStringTag = _ref.isStringTag;
	  registerStyles(cache, serialized, isStringTag);
	  useInsertionEffectAlwaysWithSyncFallback(function () {
	    return insertStyles(cache, serialized, isStringTag);
	  });

	  return null;
	};

	var Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {
	  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
	  // not passing the registered cache to serializeStyles because it would
	  // make certain babel optimisations not possible

	  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
	    cssProp = cache.registered[cssProp];
	  }

	  var WrappedComponent = props[typePropName];
	  var registeredStyles = [cssProp];
	  var className = '';

	  if (typeof props.className === 'string') {
	    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
	  } else if (props.className != null) {
	    className = props.className + " ";
	  }

	  var serialized = serializeStyles(registeredStyles, undefined, q$1(ThemeContext$1));

	  if (serialized.name.indexOf('-') === -1) {
	    var labelFromStack = props[labelPropName];

	    if (labelFromStack) {
	      serialized = serializeStyles([serialized, 'label:' + labelFromStack + ';']);
	    }
	  }

	  className += cache.key + "-" + serialized.name;
	  var newProps = {};

	  for (var key in props) {
	    if (hasOwnProperty.call(props, key) && key !== 'css' && key !== typePropName && (key !== labelPropName)) {
	      newProps[key] = props[key];
	    }
	  }

	  newProps.ref = ref;
	  newProps.className = className;
	  return /*#__PURE__*/h$1(p$2, null, /*#__PURE__*/h$1(Insertion$2, {
	    cache: cache,
	    serialized: serialized,
	    isStringTag: typeof WrappedComponent === 'string'
	  }), /*#__PURE__*/h$1(WrappedComponent, newProps));
	});

	{
	  Emotion.displayName = 'EmotionCssPropInternal';
	}

	var pkg = {
		name: "@emotion/react",
		version: "11.10.5",
		main: "dist/emotion-react.cjs.js",
		module: "dist/emotion-react.esm.js",
		browser: {
			"./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
		},
		exports: {
			".": {
				module: {
					worker: "./dist/emotion-react.worker.esm.js",
					browser: "./dist/emotion-react.browser.esm.js",
					"default": "./dist/emotion-react.esm.js"
				},
				"default": "./dist/emotion-react.cjs.js"
			},
			"./jsx-runtime": {
				module: {
					worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
					browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
					"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
				},
				"default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
			},
			"./_isolated-hnrs": {
				module: {
					worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
					browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
					"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
				},
				"default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
			},
			"./jsx-dev-runtime": {
				module: {
					worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
					browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
					"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
				},
				"default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
			},
			"./package.json": "./package.json",
			"./types/css-prop": "./types/css-prop.d.ts",
			"./macro": "./macro.js"
		},
		types: "types/index.d.ts",
		files: [
			"src",
			"dist",
			"jsx-runtime",
			"jsx-dev-runtime",
			"_isolated-hnrs",
			"types/*.d.ts",
			"macro.js",
			"macro.d.ts",
			"macro.js.flow"
		],
		sideEffects: false,
		author: "Emotion Contributors",
		license: "MIT",
		scripts: {
			"test:typescript": "dtslint types"
		},
		dependencies: {
			"@babel/runtime": "^7.18.3",
			"@emotion/babel-plugin": "^11.10.5",
			"@emotion/cache": "^11.10.5",
			"@emotion/serialize": "^1.1.1",
			"@emotion/use-insertion-effect-with-fallbacks": "^1.0.0",
			"@emotion/utils": "^1.2.0",
			"@emotion/weak-memoize": "^0.3.0",
			"hoist-non-react-statics": "^3.3.1"
		},
		peerDependencies: {
			"@babel/core": "^7.0.0",
			react: ">=16.8.0"
		},
		peerDependenciesMeta: {
			"@babel/core": {
				optional: true
			},
			"@types/react": {
				optional: true
			}
		},
		devDependencies: {
			"@babel/core": "^7.18.5",
			"@definitelytyped/dtslint": "0.0.112",
			"@emotion/css": "11.10.5",
			"@emotion/css-prettifier": "1.1.1",
			"@emotion/server": "11.10.0",
			"@emotion/styled": "11.10.5",
			"html-tag-names": "^1.1.2",
			react: "16.14.0",
			"svg-tag-names": "^1.1.1",
			typescript: "^4.5.5"
		},
		repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
		publishConfig: {
			access: "public"
		},
		"umd:main": "dist/emotion-react.umd.min.js",
		preconstruct: {
			entrypoints: [
				"./index.js",
				"./jsx-runtime.js",
				"./jsx-dev-runtime.js",
				"./_isolated-hnrs.js"
			],
			umdName: "emotionReact",
			exports: {
				envConditions: [
					"browser",
					"worker"
				],
				extra: {
					"./types/css-prop": "./types/css-prop.d.ts",
					"./macro": "./macro.js"
				}
			}
		}
	};

	var jsx = function jsx(type, props) {
	  var args = arguments;

	  if (props == null || !hasOwnProperty.call(props, 'css')) {
	    // $FlowFixMe
	    return h$1.apply(undefined, args);
	  }

	  var argsLength = args.length;
	  var createElementArgArray = new Array(argsLength);
	  createElementArgArray[0] = Emotion;
	  createElementArgArray[1] = createEmotionProps(type, props);

	  for (var i = 2; i < argsLength; i++) {
	    createElementArgArray[i] = args[i];
	  } // $FlowFixMe


	  return h$1.apply(null, createElementArgArray);
	};

	var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
	// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
	// initial client-side render from SSR, use place of hydrating tag

	var Global = /* #__PURE__ */withEmotionCache(function (props, cache) {
	  if (!warnedAboutCssPropForGlobal && ( // check for className as well since the user is
	  // probably using the custom createElement which
	  // means it will be turned into a className prop
	  // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
	  props.className || props.css)) {
	    console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
	    warnedAboutCssPropForGlobal = true;
	  }

	  var styles = props.styles;
	  var serialized = serializeStyles([styles], undefined, q$1(ThemeContext$1));
	  // but it is based on a constant that will never change at runtime
	  // it's effectively like having two implementations and switching them out
	  // so it's not actually breaking anything


	  var sheetRef = _();
	  useInsertionEffectWithLayoutFallback(function () {
	    var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

	    var sheet = new cache.sheet.constructor({
	      key: key,
	      nonce: cache.sheet.nonce,
	      container: cache.sheet.container,
	      speedy: cache.sheet.isSpeedy
	    });
	    var rehydrating = false; // $FlowFixMe

	    var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");

	    if (cache.sheet.tags.length) {
	      sheet.before = cache.sheet.tags[0];
	    }

	    if (node !== null) {
	      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

	      node.setAttribute('data-emotion', key);
	      sheet.hydrate([node]);
	    }

	    sheetRef.current = [sheet, rehydrating];
	    return function () {
	      sheet.flush();
	    };
	  }, [cache]);
	  useInsertionEffectWithLayoutFallback(function () {
	    var sheetRefCurrent = sheetRef.current;
	    var sheet = sheetRefCurrent[0],
	        rehydrating = sheetRefCurrent[1];

	    if (rehydrating) {
	      sheetRefCurrent[1] = false;
	      return;
	    }

	    if (serialized.next !== undefined) {
	      // insert keyframes
	      insertStyles(cache, serialized.next, true);
	    }

	    if (sheet.tags.length) {
	      // if this doesn't exist then it will be null so the style element will be appended
	      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
	      sheet.before = element;
	      sheet.flush();
	    }

	    cache.insert("", serialized, sheet, false);
	  }, [cache, serialized.name]);
	  return null;
	});

	{
	  Global.displayName = 'EmotionGlobal';
	}

	function css() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  return serializeStyles(args);
	}

	var keyframes = function keyframes() {
	  var insertable = css.apply(void 0, arguments);
	  var name = "animation-" + insertable.name; // $FlowFixMe

	  return {
	    name: name,
	    styles: "@keyframes " + name + "{" + insertable.styles + "}",
	    anim: 1,
	    toString: function toString() {
	      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
	    }
	  };
	};

	var classnames = function classnames(args) {
	  var len = args.length;
	  var i = 0;
	  var cls = '';

	  for (; i < len; i++) {
	    var arg = args[i];
	    if (arg == null) continue;
	    var toAdd = void 0;

	    switch (typeof arg) {
	      case 'boolean':
	        break;

	      case 'object':
	        {
	          if (Array.isArray(arg)) {
	            toAdd = classnames(arg);
	          } else {
	            if (arg.styles !== undefined && arg.name !== undefined) {
	              console.error('You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n' + '`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.');
	            }

	            toAdd = '';

	            for (var k in arg) {
	              if (arg[k] && k) {
	                toAdd && (toAdd += ' ');
	                toAdd += k;
	              }
	            }
	          }

	          break;
	        }

	      default:
	        {
	          toAdd = arg;
	        }
	    }

	    if (toAdd) {
	      cls && (cls += ' ');
	      cls += toAdd;
	    }
	  }

	  return cls;
	};

	function merge$1(registered, css, className) {
	  var registeredStyles = [];
	  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);

	  if (registeredStyles.length < 2) {
	    return className;
	  }

	  return rawClassName + css(registeredStyles);
	}

	var Insertion$1 = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serializedArr = _ref.serializedArr;
	  useInsertionEffectAlwaysWithSyncFallback(function () {

	    for (var i = 0; i < serializedArr.length; i++) {
	      insertStyles(cache, serializedArr[i], false);
	    }
	  });

	  return null;
	};

	var ClassNames = /* #__PURE__ */withEmotionCache(function (props, cache) {
	  var hasRendered = false;
	  var serializedArr = [];

	  var css = function css() {
	    if (hasRendered && "development" !== 'production') {
	      throw new Error('css can only be used during render');
	    }

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var serialized = serializeStyles(args, cache.registered);
	    serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`

	    registerStyles(cache, serialized, false);
	    return cache.key + "-" + serialized.name;
	  };

	  var cx = function cx() {
	    if (hasRendered && "development" !== 'production') {
	      throw new Error('cx can only be used during render');
	    }

	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    return merge$1(cache.registered, css, classnames(args));
	  };

	  var content = {
	    css: css,
	    cx: cx,
	    theme: q$1(ThemeContext$1)
	  };
	  var ele = props.children(content);
	  hasRendered = true;
	  return /*#__PURE__*/h$1(p$2, null, /*#__PURE__*/h$1(Insertion$1, {
	    cache: cache,
	    serializedArr: serializedArr
	  }), ele);
	});

	{
	  ClassNames.displayName = 'EmotionClassNames';
	}

	{
	  var isBrowser = "object" !== 'undefined'; // #1727, #2905 for some reason Jest and Vitest evaluate modules twice if some consuming module gets mocked

	  var isTestEnv = typeof jest !== 'undefined' || typeof vi !== 'undefined';

	  if (isBrowser && !isTestEnv) {
	    // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
	    var globalContext = // $FlowIgnore
	    typeof globalThis !== 'undefined' ? globalThis // eslint-disable-line no-undef
	    : isBrowser ? window : global;
	    var globalKey = "__EMOTION_REACT_" + pkg.version.split('.')[0] + "__";

	    if (globalContext[globalKey]) {
	      console.warn('You are loading @emotion/react when it is already loaded. Running ' + 'multiple instances may cause problems. This can happen if multiple ' + 'versions are used, or if multiple builds of the same version are ' + 'used.');
	    }

	    globalContext[globalKey] = true;
	  }
	}

	var emotionReact_browser_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		ClassNames: ClassNames,
		Global: Global,
		createElement: jsx,
		css: css,
		jsx: jsx,
		keyframes: keyframes,
		CacheProvider: CacheProvider,
		ThemeContext: ThemeContext$1,
		ThemeProvider: ThemeProvider$5,
		__unsafe_useEmotionCache: __unsafe_useEmotionCache,
		useTheme: useTheme$4,
		withEmotionCache: withEmotionCache,
		withTheme: withTheme$1
	});

	var testOmitPropsOnStringTag = isPropValid;

	var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
	  return key !== 'theme';
	};

	var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
	  return typeof tag === 'string' && // 96 is one less than the char code
	  // for "a" so this is checking that
	  // it's a lowercase character
	  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
	};
	var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
	  var shouldForwardProp;

	  if (options) {
	    var optionsShouldForwardProp = options.shouldForwardProp;
	    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
	      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
	    } : optionsShouldForwardProp;
	  }

	  if (typeof shouldForwardProp !== 'function' && isReal) {
	    shouldForwardProp = tag.__emotion_forwardProp;
	  }

	  return shouldForwardProp;
	};

	var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";

	var Insertion = function Insertion(_ref) {
	  var cache = _ref.cache,
	      serialized = _ref.serialized,
	      isStringTag = _ref.isStringTag;
	  registerStyles(cache, serialized, isStringTag);
	  useInsertionEffectAlwaysWithSyncFallback(function () {
	    return insertStyles(cache, serialized, isStringTag);
	  });

	  return null;
	};

	var createStyled$1 = function createStyled(tag, options) {
	  {
	    if (tag === undefined) {
	      throw new Error('You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.');
	    }
	  }

	  var isReal = tag.__emotion_real === tag;
	  var baseTag = isReal && tag.__emotion_base || tag;
	  var identifierName;
	  var targetClassName;

	  if (options !== undefined) {
	    identifierName = options.label;
	    targetClassName = options.target;
	  }

	  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
	  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
	  var shouldUseAs = !defaultShouldForwardProp('as');
	  return function () {
	    var args = arguments;
	    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

	    if (identifierName !== undefined) {
	      styles.push("label:" + identifierName + ";");
	    }

	    if (args[0] == null || args[0].raw === undefined) {
	      styles.push.apply(styles, args);
	    } else {
	      if (args[0][0] === undefined) {
	        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
	      }

	      styles.push(args[0][0]);
	      var len = args.length;
	      var i = 1;

	      for (; i < len; i++) {
	        if (args[0][i] === undefined) {
	          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
	        }

	        styles.push(args[i], args[0][i]);
	      }
	    } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


	    var Styled = withEmotionCache(function (props, cache, ref) {
	      var FinalTag = shouldUseAs && props.as || baseTag;
	      var className = '';
	      var classInterpolations = [];
	      var mergedProps = props;

	      if (props.theme == null) {
	        mergedProps = {};

	        for (var key in props) {
	          mergedProps[key] = props[key];
	        }

	        mergedProps.theme = q$1(ThemeContext$1);
	      }

	      if (typeof props.className === 'string') {
	        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
	      } else if (props.className != null) {
	        className = props.className + " ";
	      }

	      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
	      className += cache.key + "-" + serialized.name;

	      if (targetClassName !== undefined) {
	        className += " " + targetClassName;
	      }

	      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
	      var newProps = {};

	      for (var _key in props) {
	        if (shouldUseAs && _key === 'as') continue;

	        if ( // $FlowFixMe
	        finalShouldForwardProp(_key)) {
	          newProps[_key] = props[_key];
	        }
	      }

	      newProps.className = className;
	      newProps.ref = ref;
	      return /*#__PURE__*/h$1(p$2, null, /*#__PURE__*/h$1(Insertion, {
	        cache: cache,
	        serialized: serialized,
	        isStringTag: typeof FinalTag === 'string'
	      }), /*#__PURE__*/h$1(FinalTag, newProps));
	    });
	    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
	    Styled.defaultProps = tag.defaultProps;
	    Styled.__emotion_real = Styled;
	    Styled.__emotion_base = baseTag;
	    Styled.__emotion_styles = styles;
	    Styled.__emotion_forwardProp = shouldForwardProp;
	    Object.defineProperty(Styled, 'toString', {
	      value: function value() {
	        if (targetClassName === undefined && "development" !== 'production') {
	          return 'NO_COMPONENT_SELECTOR';
	        } // $FlowFixMe: coerce undefined to string


	        return "." + targetClassName;
	      }
	    });

	    Styled.withComponent = function (nextTag, nextOptions) {
	      return createStyled(nextTag, _extends$1({}, options, nextOptions, {
	        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
	      })).apply(void 0, styles);
	    };

	    return Styled;
	  };
	};

	var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
	'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

	var newStyled = createStyled$1.bind();
	tags.forEach(function (tagName) {
	  // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
	  newStyled[tagName] = newStyled(tagName);
	});

	var emotionStyled_browser_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		default: newStyled
	});

	var require$$1 = /*@__PURE__*/getAugmentedNamespace(emotionStyled_browser_esm);

	var require$$2 = /*@__PURE__*/getAugmentedNamespace(emotionReact_browser_esm);

	var StyledEngineProvider$1 = {};

	var StyledEngineProvider = {};

	var require$$4 = /*@__PURE__*/getAugmentedNamespace(emotionCache_browser_esm);

	var hasRequiredStyledEngineProvider$1;

	function requireStyledEngineProvider$1 () {
		if (hasRequiredStyledEngineProvider$1) return StyledEngineProvider;
		hasRequiredStyledEngineProvider$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(StyledEngineProvider, "__esModule", {
		  value: true
		});
		StyledEngineProvider.default = StyledEngineProvider$1;
		_interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _react2 = require$$2;
		var _cache = _interopRequireDefault(require$$4);
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		// prepend: true moves MUI styles to the top of the <head> so they're loaded first.
		// It allows developers to easily override MUI styles with other styling solutions, like CSS modules.
		const cache = (0, _cache.default)({
		  key: 'css',
		  prepend: true
		});
		function StyledEngineProvider$1(props) {
		  const {
		    injectFirst,
		    children
		  } = props;
		  return injectFirst ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_react2.CacheProvider, {
		    value: cache,
		    children: children
		  }) : children;
		}
		StyledEngineProvider$1.propTypes = {
		  /**
		   * Your component tree.
		   */
		  children: _propTypes.default.node,
		  /**
		   * By default, the styles are injected last in the <head> element of the page.
		   * As a result, they gain more specificity than any other style sheet.
		   * If you want to override MUI's styles, set this prop.
		   */
		  injectFirst: _propTypes.default.bool
		} ;
		return StyledEngineProvider;
	}

	var hasRequiredStyledEngineProvider;

	function requireStyledEngineProvider () {
		if (hasRequiredStyledEngineProvider) return StyledEngineProvider$1;
		hasRequiredStyledEngineProvider = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _StyledEngineProvider.default;
			  }
			});
			var _StyledEngineProvider = _interopRequireDefault(requireStyledEngineProvider$1());
	} (StyledEngineProvider$1));
		return StyledEngineProvider$1;
	}

	var GlobalStyles$4 = {};

	var GlobalStyles$3 = {};

	var hasRequiredGlobalStyles$2;

	function requireGlobalStyles$2 () {
		if (hasRequiredGlobalStyles$2) return GlobalStyles$3;
		hasRequiredGlobalStyles$2 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(GlobalStyles$3, "__esModule", {
		  value: true
		});
		GlobalStyles$3.default = GlobalStyles;
		_interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _react2 = require$$2;
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function isEmpty(obj) {
		  return obj === undefined || obj === null || Object.keys(obj).length === 0;
		}
		function GlobalStyles(props) {
		  const {
		    styles,
		    defaultTheme = {}
		  } = props;
		  const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty(themeInput) ? defaultTheme : themeInput) : styles;
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_react2.Global, {
		    styles: globalStyles
		  });
		}
		GlobalStyles.propTypes = {
		  defaultTheme: _propTypes.default.object,
		  styles: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.func])
		} ;
		return GlobalStyles$3;
	}

	var hasRequiredGlobalStyles$1;

	function requireGlobalStyles$1 () {
		if (hasRequiredGlobalStyles$1) return GlobalStyles$4;
		hasRequiredGlobalStyles$1 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _GlobalStyles.default;
			  }
			});
			var _GlobalStyles = _interopRequireDefault(requireGlobalStyles$2());
	} (GlobalStyles$4));
		return GlobalStyles$4;
	}

	/** @license MUI v5.10.16
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredNode$1;

	function requireNode$1 () {
		if (hasRequiredNode$1) return node$2;
		hasRequiredNode$1 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "GlobalStyles", {
			  enumerable: true,
			  get: function () {
			    return _GlobalStyles.default;
			  }
			});
			Object.defineProperty(exports, "StyledEngineProvider", {
			  enumerable: true,
			  get: function () {
			    return _StyledEngineProvider.default;
			  }
			});
			Object.defineProperty(exports, "ThemeContext", {
			  enumerable: true,
			  get: function () {
			    return _react.ThemeContext;
			  }
			});
			Object.defineProperty(exports, "css", {
			  enumerable: true,
			  get: function () {
			    return _react.css;
			  }
			});
			exports.default = styled;
			exports.internal_processStyles = void 0;
			Object.defineProperty(exports, "keyframes", {
			  enumerable: true,
			  get: function () {
			    return _react.keyframes;
			  }
			});
			var _styled = _interopRequireDefault(require$$1);
			var _react = require$$2;
			var _StyledEngineProvider = _interopRequireDefault(requireStyledEngineProvider());
			var _GlobalStyles = _interopRequireDefault(requireGlobalStyles$1());
			/* eslint-disable no-underscore-dangle */

			function styled(tag, options) {
			  const stylesFactory = (0, _styled.default)(tag, options);
			  {
			    return (...styles) => {
			      const component = typeof tag === 'string' ? `"${tag}"` : 'component';
			      if (styles.length === 0) {
			        console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join('\n'));
			      } else if (styles.some(style => style === undefined)) {
			        console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
			      }
			      return stylesFactory(...styles);
			    };
			  }
			}

			// eslint-disable-next-line @typescript-eslint/naming-convention
			const internal_processStyles = (tag, processor) => {
			  // Emotion attaches all the styles as `__emotion_styles`.
			  // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186
			  if (Array.isArray(tag.__emotion_styles)) {
			    tag.__emotion_styles = processor(tag.__emotion_styles);
			  }
			};
			exports.internal_processStyles = internal_processStyles;
	} (node$2));
		return node$2;
	}

	var borders = {};

	var responsivePropType = {};

	var hasRequiredResponsivePropType;

	function requireResponsivePropType () {
		if (hasRequiredResponsivePropType) return responsivePropType;
		hasRequiredResponsivePropType = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(responsivePropType, "__esModule", {
		  value: true
		});
		responsivePropType.default = void 0;
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		const responsivePropType$1 = _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object, _propTypes.default.array]) ;
		var _default = responsivePropType$1;
		responsivePropType.default = _default;
		return responsivePropType;
	}

	var style = {};

	var breakpoints = {};

	var merge = {};

	var hasRequiredMerge;

	function requireMerge () {
		if (hasRequiredMerge) return merge;
		hasRequiredMerge = 1;

		Object.defineProperty(merge, "__esModule", {
		  value: true
		});
		merge.default = void 0;
		var _utils = requireUtils$4();
		function merge$1(acc, item) {
		  if (!item) {
		    return acc;
		  }
		  return (0, _utils.deepmerge)(acc, item, {
		    clone: false // No need to clone deep, it's way faster.
		  });
		}
		var _default = merge$1;
		merge.default = _default;
		return merge;
	}

	var hasRequiredBreakpoints;

	function requireBreakpoints () {
		if (hasRequiredBreakpoints) return breakpoints;
		hasRequiredBreakpoints = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(breakpoints, "__esModule", {
		  value: true
		});
		breakpoints.computeBreakpointsBase = computeBreakpointsBase;
		breakpoints.createEmptyBreakpointObject = createEmptyBreakpointObject;
		breakpoints.default = void 0;
		breakpoints.handleBreakpoints = handleBreakpoints;
		breakpoints.mergeBreakpointsInOrder = mergeBreakpointsInOrder;
		breakpoints.removeUnusedBreakpoints = removeUnusedBreakpoints;
		breakpoints.resolveBreakpointValues = resolveBreakpointValues;
		breakpoints.values = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _merge = _interopRequireDefault(requireMerge());
		// The breakpoint **start** at this value.
		// For instance with the first breakpoint xs: [xs, sm[.
		const values = {
		  xs: 0,
		  // phone
		  sm: 600,
		  // tablet
		  md: 900,
		  // small laptop
		  lg: 1200,
		  // desktop
		  xl: 1536 // large screen
		};
		breakpoints.values = values;
		const defaultBreakpoints = {
		  // Sorted ASC by size. That's important.
		  // It can't be configured as it's used statically for propTypes.
		  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
		  up: key => `@media (min-width:${values[key]}px)`
		};
		function handleBreakpoints(props, propValue, styleFromPropValue) {
		  const theme = props.theme || {};
		  if (Array.isArray(propValue)) {
		    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
		    return propValue.reduce((acc, item, index) => {
		      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
		      return acc;
		    }, {});
		  }
		  if (typeof propValue === 'object') {
		    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
		    return Object.keys(propValue).reduce((acc, breakpoint) => {
		      // key is breakpoint
		      if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
		        const mediaKey = themeBreakpoints.up(breakpoint);
		        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
		      } else {
		        const cssKey = breakpoint;
		        acc[cssKey] = propValue[cssKey];
		      }
		      return acc;
		    }, {});
		  }
		  const output = styleFromPropValue(propValue);
		  return output;
		}
		function breakpoints$1(styleFunction) {
		  const newStyleFunction = props => {
		    const theme = props.theme || {};
		    const base = styleFunction(props);
		    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
		    const extended = themeBreakpoints.keys.reduce((acc, key) => {
		      if (props[key]) {
		        acc = acc || {};
		        acc[themeBreakpoints.up(key)] = styleFunction((0, _extends2.default)({
		          theme
		        }, props[key]));
		      }
		      return acc;
		    }, null);
		    return (0, _merge.default)(base, extended);
		  };
		  newStyleFunction.propTypes = (0, _extends2.default)({}, styleFunction.propTypes, {
		    xs: _propTypes.default.object,
		    sm: _propTypes.default.object,
		    md: _propTypes.default.object,
		    lg: _propTypes.default.object,
		    xl: _propTypes.default.object
		  }) ;
		  newStyleFunction.filterProps = ['xs', 'sm', 'md', 'lg', 'xl', ...styleFunction.filterProps];
		  return newStyleFunction;
		}
		function createEmptyBreakpointObject(breakpointsInput = {}) {
		  var _breakpointsInput$key;
		  const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
		    const breakpointStyleKey = breakpointsInput.up(key);
		    acc[breakpointStyleKey] = {};
		    return acc;
		  }, {});
		  return breakpointsInOrder || {};
		}
		function removeUnusedBreakpoints(breakpointKeys, style) {
		  return breakpointKeys.reduce((acc, key) => {
		    const breakpointOutput = acc[key];
		    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
		    if (isBreakpointUnused) {
		      delete acc[key];
		    }
		    return acc;
		  }, style);
		}
		function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
		  const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
		  const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev, next) => (0, _utils.deepmerge)(prev, next), {});
		  return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
		}

		// compute base for responsive values; e.g.,
		// [1,2,3] => {xs: true, sm: true, md: true}
		// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}
		function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
		  // fixed value
		  if (typeof breakpointValues !== 'object') {
		    return {};
		  }
		  const base = {};
		  const breakpointsKeys = Object.keys(themeBreakpoints);
		  if (Array.isArray(breakpointValues)) {
		    breakpointsKeys.forEach((breakpoint, i) => {
		      if (i < breakpointValues.length) {
		        base[breakpoint] = true;
		      }
		    });
		  } else {
		    breakpointsKeys.forEach(breakpoint => {
		      if (breakpointValues[breakpoint] != null) {
		        base[breakpoint] = true;
		      }
		    });
		  }
		  return base;
		}
		function resolveBreakpointValues({
		  values: breakpointValues,
		  breakpoints: themeBreakpoints,
		  base: customBase
		}) {
		  const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
		  const keys = Object.keys(base);
		  if (keys.length === 0) {
		    return breakpointValues;
		  }
		  let previous;
		  return keys.reduce((acc, breakpoint, i) => {
		    if (Array.isArray(breakpointValues)) {
		      acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
		      previous = i;
		    } else if (typeof breakpointValues === 'object') {
		      acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
		      previous = breakpoint;
		    } else {
		      acc[breakpoint] = breakpointValues;
		    }
		    return acc;
		  }, {});
		}
		var _default = breakpoints$1;
		breakpoints.default = _default;
		return breakpoints;
	}

	var hasRequiredStyle;

	function requireStyle () {
		if (hasRequiredStyle) return style;
		hasRequiredStyle = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(style, "__esModule", {
		  value: true
		});
		style.default = void 0;
		style.getPath = getPath;
		style.getStyleValue = getStyleValue;
		var _utils = requireUtils$4();
		var _responsivePropType = _interopRequireDefault(requireResponsivePropType());
		var _breakpoints = requireBreakpoints();
		function getPath(obj, path, checkVars = true) {
		  if (!path || typeof path !== 'string') {
		    return null;
		  }

		  // Check if CSS variables are used
		  if (obj && obj.vars && checkVars) {
		    const val = `vars.${path}`.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
		    if (val != null) {
		      return val;
		    }
		  }
		  return path.split('.').reduce((acc, item) => {
		    if (acc && acc[item] != null) {
		      return acc[item];
		    }
		    return null;
		  }, obj);
		}
		function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
		  let value;
		  if (typeof themeMapping === 'function') {
		    value = themeMapping(propValueFinal);
		  } else if (Array.isArray(themeMapping)) {
		    value = themeMapping[propValueFinal] || userValue;
		  } else {
		    value = getPath(themeMapping, propValueFinal) || userValue;
		  }
		  if (transform) {
		    value = transform(value, userValue);
		  }
		  return value;
		}
		function style$1(options) {
		  const {
		    prop,
		    cssProperty = options.prop,
		    themeKey,
		    transform
		  } = options;
		  const fn = props => {
		    if (props[prop] == null) {
		      return null;
		    }
		    const propValue = props[prop];
		    const theme = props.theme;
		    const themeMapping = getPath(theme, themeKey) || {};
		    const styleFromPropValue = propValueFinal => {
		      let value = getStyleValue(themeMapping, transform, propValueFinal);
		      if (propValueFinal === value && typeof propValueFinal === 'string') {
		        // Haven't found value
		        value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : (0, _utils.unstable_capitalize)(propValueFinal)}`, propValueFinal);
		      }
		      if (cssProperty === false) {
		        return value;
		      }
		      return {
		        [cssProperty]: value
		      };
		    };
		    return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
		  };
		  fn.propTypes = {
		    [prop]: _responsivePropType.default
		  } ;
		  fn.filterProps = [prop];
		  return fn;
		}
		var _default = style$1;
		style.default = _default;
		return style;
	}

	var compose = {};

	var hasRequiredCompose;

	function requireCompose () {
		if (hasRequiredCompose) return compose;
		hasRequiredCompose = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(compose, "__esModule", {
		  value: true
		});
		compose.default = void 0;
		var _merge = _interopRequireDefault(requireMerge());
		function compose$1(...styles) {
		  const handlers = styles.reduce((acc, style) => {
		    style.filterProps.forEach(prop => {
		      acc[prop] = style;
		    });
		    return acc;
		  }, {});
		  const fn = props => {
		    return Object.keys(props).reduce((acc, prop) => {
		      if (handlers[prop]) {
		        return (0, _merge.default)(acc, handlers[prop](props));
		      }
		      return acc;
		    }, {});
		  };
		  fn.propTypes = styles.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) ;
		  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
		  return fn;
		}
		var _default = compose$1;
		compose.default = _default;
		return compose;
	}

	var spacing = {};

	var memoize = {};

	var hasRequiredMemoize;

	function requireMemoize () {
		if (hasRequiredMemoize) return memoize;
		hasRequiredMemoize = 1;

		Object.defineProperty(memoize, "__esModule", {
		  value: true
		});
		memoize.default = memoize$1;
		function memoize$1(fn) {
		  const cache = {};
		  return arg => {
		    if (cache[arg] === undefined) {
		      cache[arg] = fn(arg);
		    }
		    return cache[arg];
		  };
		}
		return memoize;
	}

	var hasRequiredSpacing;

	function requireSpacing () {
		if (hasRequiredSpacing) return spacing;
		hasRequiredSpacing = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(spacing, "__esModule", {
		  value: true
		});
		spacing.createUnarySpacing = createUnarySpacing;
		spacing.createUnaryUnit = createUnaryUnit;
		spacing.default = void 0;
		spacing.getStyleFromPropValue = getStyleFromPropValue;
		spacing.getValue = getValue;
		spacing.margin = margin;
		spacing.padding = padding;
		var _responsivePropType = _interopRequireDefault(requireResponsivePropType());
		var _breakpoints = requireBreakpoints();
		var _style = requireStyle();
		var _merge = _interopRequireDefault(requireMerge());
		var _memoize = _interopRequireDefault(requireMemoize());
		const properties = {
		  m: 'margin',
		  p: 'padding'
		};
		const directions = {
		  t: 'Top',
		  r: 'Right',
		  b: 'Bottom',
		  l: 'Left',
		  x: ['Left', 'Right'],
		  y: ['Top', 'Bottom']
		};
		const aliases = {
		  marginX: 'mx',
		  marginY: 'my',
		  paddingX: 'px',
		  paddingY: 'py'
		};

		// memoize() impact:
		// From 300,000 ops/sec
		// To 350,000 ops/sec
		const getCssProperties = (0, _memoize.default)(prop => {
		  // It's not a shorthand notation.
		  if (prop.length > 2) {
		    if (aliases[prop]) {
		      prop = aliases[prop];
		    } else {
		      return [prop];
		    }
		  }
		  const [a, b] = prop.split('');
		  const property = properties[a];
		  const direction = directions[b] || '';
		  return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
		});
		const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
		const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
		const spacingKeys = [...marginKeys, ...paddingKeys];
		function createUnaryUnit(theme, themeKey, defaultValue, propName) {
		  var _getPath;
		  const themeSpacing = (_getPath = (0, _style.getPath)(theme, themeKey, false)) != null ? _getPath : defaultValue;
		  if (typeof themeSpacing === 'number') {
		    return abs => {
		      if (typeof abs === 'string') {
		        return abs;
		      }
		      {
		        if (typeof abs !== 'number') {
		          console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs}.`);
		        }
		      }
		      return themeSpacing * abs;
		    };
		  }
		  if (Array.isArray(themeSpacing)) {
		    return abs => {
		      if (typeof abs === 'string') {
		        return abs;
		      }
		      {
		        if (!Number.isInteger(abs)) {
		          console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.` + `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join('\n'));
		        } else if (abs > themeSpacing.length - 1) {
		          console.error([`MUI: The value provided (${abs}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`].join('\n'));
		        }
		      }
		      return themeSpacing[abs];
		    };
		  }
		  if (typeof themeSpacing === 'function') {
		    return themeSpacing;
		  }
		  {
		    console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, 'It should be a number, an array or a function.'].join('\n'));
		  }
		  return () => undefined;
		}
		function createUnarySpacing(theme) {
		  return createUnaryUnit(theme, 'spacing', 8, 'spacing');
		}
		function getValue(transformer, propValue) {
		  if (typeof propValue === 'string' || propValue == null) {
		    return propValue;
		  }
		  const abs = Math.abs(propValue);
		  const transformed = transformer(abs);
		  if (propValue >= 0) {
		    return transformed;
		  }
		  if (typeof transformed === 'number') {
		    return -transformed;
		  }
		  return `-${transformed}`;
		}
		function getStyleFromPropValue(cssProperties, transformer) {
		  return propValue => cssProperties.reduce((acc, cssProperty) => {
		    acc[cssProperty] = getValue(transformer, propValue);
		    return acc;
		  }, {});
		}
		function resolveCssProperty(props, keys, prop, transformer) {
		  // Using a hash computation over an array iteration could be faster, but with only 28 items,
		  // it's doesn't worth the bundle size.
		  if (keys.indexOf(prop) === -1) {
		    return null;
		  }
		  const cssProperties = getCssProperties(prop);
		  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
		  const propValue = props[prop];
		  return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
		}
		function style(props, keys) {
		  const transformer = createUnarySpacing(props.theme);
		  return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(_merge.default, {});
		}
		function margin(props) {
		  return style(props, marginKeys);
		}
		margin.propTypes = marginKeys.reduce((obj, key) => {
		  obj[key] = _responsivePropType.default;
		  return obj;
		}, {}) ;
		margin.filterProps = marginKeys;
		function padding(props) {
		  return style(props, paddingKeys);
		}
		padding.propTypes = paddingKeys.reduce((obj, key) => {
		  obj[key] = _responsivePropType.default;
		  return obj;
		}, {}) ;
		padding.filterProps = paddingKeys;
		function spacing$1(props) {
		  return style(props, spacingKeys);
		}
		spacing$1.propTypes = spacingKeys.reduce((obj, key) => {
		  obj[key] = _responsivePropType.default;
		  return obj;
		}, {}) ;
		spacing$1.filterProps = spacingKeys;
		var _default = spacing$1;
		spacing.default = _default;
		return spacing;
	}

	var hasRequiredBorders;

	function requireBorders () {
		if (hasRequiredBorders) return borders;
		hasRequiredBorders = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(borders, "__esModule", {
		  value: true
		});
		borders.default = borders.borderTopColor = borders.borderTop = borders.borderRightColor = borders.borderRight = borders.borderRadius = borders.borderLeftColor = borders.borderLeft = borders.borderColor = borders.borderBottomColor = borders.borderBottom = borders.border = void 0;
		var _responsivePropType = _interopRequireDefault(requireResponsivePropType());
		var _style = _interopRequireDefault(requireStyle());
		var _compose = _interopRequireDefault(requireCompose());
		var _spacing = requireSpacing();
		var _breakpoints = requireBreakpoints();
		function getBorder(value) {
		  if (typeof value !== 'number') {
		    return value;
		  }
		  return `${value}px solid`;
		}
		const border = (0, _style.default)({
		  prop: 'border',
		  themeKey: 'borders',
		  transform: getBorder
		});
		borders.border = border;
		const borderTop = (0, _style.default)({
		  prop: 'borderTop',
		  themeKey: 'borders',
		  transform: getBorder
		});
		borders.borderTop = borderTop;
		const borderRight = (0, _style.default)({
		  prop: 'borderRight',
		  themeKey: 'borders',
		  transform: getBorder
		});
		borders.borderRight = borderRight;
		const borderBottom = (0, _style.default)({
		  prop: 'borderBottom',
		  themeKey: 'borders',
		  transform: getBorder
		});
		borders.borderBottom = borderBottom;
		const borderLeft = (0, _style.default)({
		  prop: 'borderLeft',
		  themeKey: 'borders',
		  transform: getBorder
		});
		borders.borderLeft = borderLeft;
		const borderColor = (0, _style.default)({
		  prop: 'borderColor',
		  themeKey: 'palette'
		});
		borders.borderColor = borderColor;
		const borderTopColor = (0, _style.default)({
		  prop: 'borderTopColor',
		  themeKey: 'palette'
		});
		borders.borderTopColor = borderTopColor;
		const borderRightColor = (0, _style.default)({
		  prop: 'borderRightColor',
		  themeKey: 'palette'
		});
		borders.borderRightColor = borderRightColor;
		const borderBottomColor = (0, _style.default)({
		  prop: 'borderBottomColor',
		  themeKey: 'palette'
		});
		borders.borderBottomColor = borderBottomColor;
		const borderLeftColor = (0, _style.default)({
		  prop: 'borderLeftColor',
		  themeKey: 'palette'
		});
		borders.borderLeftColor = borderLeftColor;
		const borderRadius = props => {
		  if (props.borderRadius !== undefined && props.borderRadius !== null) {
		    const transformer = (0, _spacing.createUnaryUnit)(props.theme, 'shape.borderRadius', 4, 'borderRadius');
		    const styleFromPropValue = propValue => ({
		      borderRadius: (0, _spacing.getValue)(transformer, propValue)
		    });
		    return (0, _breakpoints.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
		  }
		  return null;
		};
		borders.borderRadius = borderRadius;
		borderRadius.propTypes = {
		  borderRadius: _responsivePropType.default
		} ;
		borderRadius.filterProps = ['borderRadius'];
		const borders$1 = (0, _compose.default)(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
		var _default = borders$1;
		borders.default = _default;
		return borders;
	}

	var display = {};

	var hasRequiredDisplay;

	function requireDisplay () {
		if (hasRequiredDisplay) return display;
		hasRequiredDisplay = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(display, "__esModule", {
		  value: true
		});
		display.whiteSpace = display.visibility = display.textOverflow = display.overflow = display.displayRaw = display.displayPrint = display.default = void 0;
		var _style = _interopRequireDefault(requireStyle());
		var _compose = _interopRequireDefault(requireCompose());
		const displayPrint = (0, _style.default)({
		  prop: 'displayPrint',
		  cssProperty: false,
		  transform: value => ({
		    '@media print': {
		      display: value
		    }
		  })
		});
		display.displayPrint = displayPrint;
		const displayRaw = (0, _style.default)({
		  prop: 'display'
		});
		display.displayRaw = displayRaw;
		const overflow = (0, _style.default)({
		  prop: 'overflow'
		});
		display.overflow = overflow;
		const textOverflow = (0, _style.default)({
		  prop: 'textOverflow'
		});
		display.textOverflow = textOverflow;
		const visibility = (0, _style.default)({
		  prop: 'visibility'
		});
		display.visibility = visibility;
		const whiteSpace = (0, _style.default)({
		  prop: 'whiteSpace'
		});
		display.whiteSpace = whiteSpace;
		var _default = (0, _compose.default)(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);
		display.default = _default;
		return display;
	}

	var flexbox = {};

	var hasRequiredFlexbox;

	function requireFlexbox () {
		if (hasRequiredFlexbox) return flexbox;
		hasRequiredFlexbox = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(flexbox, "__esModule", {
		  value: true
		});
		flexbox.order = flexbox.justifySelf = flexbox.justifyItems = flexbox.justifyContent = flexbox.flexWrap = flexbox.flexShrink = flexbox.flexGrow = flexbox.flexDirection = flexbox.flexBasis = flexbox.flex = flexbox.default = flexbox.alignSelf = flexbox.alignItems = flexbox.alignContent = void 0;
		var _style = _interopRequireDefault(requireStyle());
		var _compose = _interopRequireDefault(requireCompose());
		const flexBasis = (0, _style.default)({
		  prop: 'flexBasis'
		});
		flexbox.flexBasis = flexBasis;
		const flexDirection = (0, _style.default)({
		  prop: 'flexDirection'
		});
		flexbox.flexDirection = flexDirection;
		const flexWrap = (0, _style.default)({
		  prop: 'flexWrap'
		});
		flexbox.flexWrap = flexWrap;
		const justifyContent = (0, _style.default)({
		  prop: 'justifyContent'
		});
		flexbox.justifyContent = justifyContent;
		const alignItems = (0, _style.default)({
		  prop: 'alignItems'
		});
		flexbox.alignItems = alignItems;
		const alignContent = (0, _style.default)({
		  prop: 'alignContent'
		});
		flexbox.alignContent = alignContent;
		const order = (0, _style.default)({
		  prop: 'order'
		});
		flexbox.order = order;
		const flex = (0, _style.default)({
		  prop: 'flex'
		});
		flexbox.flex = flex;
		const flexGrow = (0, _style.default)({
		  prop: 'flexGrow'
		});
		flexbox.flexGrow = flexGrow;
		const flexShrink = (0, _style.default)({
		  prop: 'flexShrink'
		});
		flexbox.flexShrink = flexShrink;
		const alignSelf = (0, _style.default)({
		  prop: 'alignSelf'
		});
		flexbox.alignSelf = alignSelf;
		const justifyItems = (0, _style.default)({
		  prop: 'justifyItems'
		});
		flexbox.justifyItems = justifyItems;
		const justifySelf = (0, _style.default)({
		  prop: 'justifySelf'
		});
		flexbox.justifySelf = justifySelf;
		const flexbox$1 = (0, _compose.default)(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
		var _default = flexbox$1;
		flexbox.default = _default;
		return flexbox;
	}

	var cssGrid = {};

	var hasRequiredCssGrid;

	function requireCssGrid () {
		if (hasRequiredCssGrid) return cssGrid;
		hasRequiredCssGrid = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(cssGrid, "__esModule", {
		  value: true
		});
		cssGrid.rowGap = cssGrid.gridTemplateRows = cssGrid.gridTemplateColumns = cssGrid.gridTemplateAreas = cssGrid.gridRow = cssGrid.gridColumn = cssGrid.gridAutoRows = cssGrid.gridAutoFlow = cssGrid.gridAutoColumns = cssGrid.gridArea = cssGrid.gap = cssGrid.default = cssGrid.columnGap = void 0;
		var _style = _interopRequireDefault(requireStyle());
		var _compose = _interopRequireDefault(requireCompose());
		var _spacing = requireSpacing();
		var _breakpoints = requireBreakpoints();
		var _responsivePropType = _interopRequireDefault(requireResponsivePropType());
		const gap = props => {
		  if (props.gap !== undefined && props.gap !== null) {
		    const transformer = (0, _spacing.createUnaryUnit)(props.theme, 'spacing', 8, 'gap');
		    const styleFromPropValue = propValue => ({
		      gap: (0, _spacing.getValue)(transformer, propValue)
		    });
		    return (0, _breakpoints.handleBreakpoints)(props, props.gap, styleFromPropValue);
		  }
		  return null;
		};
		cssGrid.gap = gap;
		gap.propTypes = {
		  gap: _responsivePropType.default
		} ;
		gap.filterProps = ['gap'];
		const columnGap = props => {
		  if (props.columnGap !== undefined && props.columnGap !== null) {
		    const transformer = (0, _spacing.createUnaryUnit)(props.theme, 'spacing', 8, 'columnGap');
		    const styleFromPropValue = propValue => ({
		      columnGap: (0, _spacing.getValue)(transformer, propValue)
		    });
		    return (0, _breakpoints.handleBreakpoints)(props, props.columnGap, styleFromPropValue);
		  }
		  return null;
		};
		cssGrid.columnGap = columnGap;
		columnGap.propTypes = {
		  columnGap: _responsivePropType.default
		} ;
		columnGap.filterProps = ['columnGap'];
		const rowGap = props => {
		  if (props.rowGap !== undefined && props.rowGap !== null) {
		    const transformer = (0, _spacing.createUnaryUnit)(props.theme, 'spacing', 8, 'rowGap');
		    const styleFromPropValue = propValue => ({
		      rowGap: (0, _spacing.getValue)(transformer, propValue)
		    });
		    return (0, _breakpoints.handleBreakpoints)(props, props.rowGap, styleFromPropValue);
		  }
		  return null;
		};
		cssGrid.rowGap = rowGap;
		rowGap.propTypes = {
		  rowGap: _responsivePropType.default
		} ;
		rowGap.filterProps = ['rowGap'];
		const gridColumn = (0, _style.default)({
		  prop: 'gridColumn'
		});
		cssGrid.gridColumn = gridColumn;
		const gridRow = (0, _style.default)({
		  prop: 'gridRow'
		});
		cssGrid.gridRow = gridRow;
		const gridAutoFlow = (0, _style.default)({
		  prop: 'gridAutoFlow'
		});
		cssGrid.gridAutoFlow = gridAutoFlow;
		const gridAutoColumns = (0, _style.default)({
		  prop: 'gridAutoColumns'
		});
		cssGrid.gridAutoColumns = gridAutoColumns;
		const gridAutoRows = (0, _style.default)({
		  prop: 'gridAutoRows'
		});
		cssGrid.gridAutoRows = gridAutoRows;
		const gridTemplateColumns = (0, _style.default)({
		  prop: 'gridTemplateColumns'
		});
		cssGrid.gridTemplateColumns = gridTemplateColumns;
		const gridTemplateRows = (0, _style.default)({
		  prop: 'gridTemplateRows'
		});
		cssGrid.gridTemplateRows = gridTemplateRows;
		const gridTemplateAreas = (0, _style.default)({
		  prop: 'gridTemplateAreas'
		});
		cssGrid.gridTemplateAreas = gridTemplateAreas;
		const gridArea = (0, _style.default)({
		  prop: 'gridArea'
		});
		cssGrid.gridArea = gridArea;
		const grid = (0, _compose.default)(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
		var _default = grid;
		cssGrid.default = _default;
		return cssGrid;
	}

	var palette = {};

	var hasRequiredPalette;

	function requirePalette () {
		if (hasRequiredPalette) return palette;
		hasRequiredPalette = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(palette, "__esModule", {
		  value: true
		});
		palette.default = palette.color = palette.bgcolor = palette.backgroundColor = void 0;
		var _style = _interopRequireDefault(requireStyle());
		var _compose = _interopRequireDefault(requireCompose());
		function transform(value, userValue) {
		  if (userValue === 'grey') {
		    return userValue;
		  }
		  return value;
		}
		const color = (0, _style.default)({
		  prop: 'color',
		  themeKey: 'palette',
		  transform
		});
		palette.color = color;
		const bgcolor = (0, _style.default)({
		  prop: 'bgcolor',
		  cssProperty: 'backgroundColor',
		  themeKey: 'palette',
		  transform
		});
		palette.bgcolor = bgcolor;
		const backgroundColor = (0, _style.default)({
		  prop: 'backgroundColor',
		  themeKey: 'palette',
		  transform
		});
		palette.backgroundColor = backgroundColor;
		const palette$1 = (0, _compose.default)(color, bgcolor, backgroundColor);
		var _default = palette$1;
		palette.default = _default;
		return palette;
	}

	var positions = {};

	var hasRequiredPositions;

	function requirePositions () {
		if (hasRequiredPositions) return positions;
		hasRequiredPositions = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(positions, "__esModule", {
		  value: true
		});
		positions.zIndex = positions.top = positions.right = positions.position = positions.left = positions.default = positions.bottom = void 0;
		var _style = _interopRequireDefault(requireStyle());
		var _compose = _interopRequireDefault(requireCompose());
		const position = (0, _style.default)({
		  prop: 'position'
		});
		positions.position = position;
		const zIndex = (0, _style.default)({
		  prop: 'zIndex',
		  themeKey: 'zIndex'
		});
		positions.zIndex = zIndex;
		const top = (0, _style.default)({
		  prop: 'top'
		});
		positions.top = top;
		const right = (0, _style.default)({
		  prop: 'right'
		});
		positions.right = right;
		const bottom = (0, _style.default)({
		  prop: 'bottom'
		});
		positions.bottom = bottom;
		const left = (0, _style.default)({
		  prop: 'left'
		});
		positions.left = left;
		var _default = (0, _compose.default)(position, zIndex, top, right, bottom, left);
		positions.default = _default;
		return positions;
	}

	var shadows$1 = {};

	var hasRequiredShadows$1;

	function requireShadows$1 () {
		if (hasRequiredShadows$1) return shadows$1;
		hasRequiredShadows$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(shadows$1, "__esModule", {
		  value: true
		});
		shadows$1.default = void 0;
		var _style = _interopRequireDefault(requireStyle());
		const boxShadow = (0, _style.default)({
		  prop: 'boxShadow',
		  themeKey: 'shadows'
		});
		var _default = boxShadow;
		shadows$1.default = _default;
		return shadows$1;
	}

	var sizing = {};

	var hasRequiredSizing;

	function requireSizing () {
		if (hasRequiredSizing) return sizing;
		hasRequiredSizing = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(sizing, "__esModule", {
		  value: true
		});
		sizing.width = sizing.sizeWidth = sizing.sizeHeight = sizing.minWidth = sizing.minHeight = sizing.maxWidth = sizing.maxHeight = sizing.height = sizing.default = sizing.boxSizing = void 0;
		var _style = _interopRequireDefault(requireStyle());
		var _compose = _interopRequireDefault(requireCompose());
		var _breakpoints = requireBreakpoints();
		function transform(value) {
		  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
		}
		const width = (0, _style.default)({
		  prop: 'width',
		  transform
		});
		sizing.width = width;
		const maxWidth = props => {
		  if (props.maxWidth !== undefined && props.maxWidth !== null) {
		    const styleFromPropValue = propValue => {
		      var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
		      const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || _breakpoints.values[propValue];
		      return {
		        maxWidth: breakpoint || transform(propValue)
		      };
		    };
		    return (0, _breakpoints.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
		  }
		  return null;
		};
		sizing.maxWidth = maxWidth;
		maxWidth.filterProps = ['maxWidth'];
		const minWidth = (0, _style.default)({
		  prop: 'minWidth',
		  transform
		});
		sizing.minWidth = minWidth;
		const height = (0, _style.default)({
		  prop: 'height',
		  transform
		});
		sizing.height = height;
		const maxHeight = (0, _style.default)({
		  prop: 'maxHeight',
		  transform
		});
		sizing.maxHeight = maxHeight;
		const minHeight = (0, _style.default)({
		  prop: 'minHeight',
		  transform
		});
		sizing.minHeight = minHeight;
		const sizeWidth = (0, _style.default)({
		  prop: 'size',
		  cssProperty: 'width',
		  transform
		});
		sizing.sizeWidth = sizeWidth;
		const sizeHeight = (0, _style.default)({
		  prop: 'size',
		  cssProperty: 'height',
		  transform
		});
		sizing.sizeHeight = sizeHeight;
		const boxSizing = (0, _style.default)({
		  prop: 'boxSizing'
		});
		sizing.boxSizing = boxSizing;
		const sizing$1 = (0, _compose.default)(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
		var _default = sizing$1;
		sizing.default = _default;
		return sizing;
	}

	var typography = {};

	var hasRequiredTypography$1;

	function requireTypography$1 () {
		if (hasRequiredTypography$1) return typography;
		hasRequiredTypography$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(typography, "__esModule", {
		  value: true
		});
		typography.typographyVariant = typography.textTransform = typography.textAlign = typography.lineHeight = typography.letterSpacing = typography.fontWeight = typography.fontStyle = typography.fontSize = typography.fontFamily = typography.default = void 0;
		var _style = _interopRequireDefault(requireStyle());
		var _compose = _interopRequireDefault(requireCompose());
		const fontFamily = (0, _style.default)({
		  prop: 'fontFamily',
		  themeKey: 'typography'
		});
		typography.fontFamily = fontFamily;
		const fontSize = (0, _style.default)({
		  prop: 'fontSize',
		  themeKey: 'typography'
		});
		typography.fontSize = fontSize;
		const fontStyle = (0, _style.default)({
		  prop: 'fontStyle',
		  themeKey: 'typography'
		});
		typography.fontStyle = fontStyle;
		const fontWeight = (0, _style.default)({
		  prop: 'fontWeight',
		  themeKey: 'typography'
		});
		typography.fontWeight = fontWeight;
		const letterSpacing = (0, _style.default)({
		  prop: 'letterSpacing'
		});
		typography.letterSpacing = letterSpacing;
		const textTransform = (0, _style.default)({
		  prop: 'textTransform'
		});
		typography.textTransform = textTransform;
		const lineHeight = (0, _style.default)({
		  prop: 'lineHeight'
		});
		typography.lineHeight = lineHeight;
		const textAlign = (0, _style.default)({
		  prop: 'textAlign'
		});
		typography.textAlign = textAlign;
		const typographyVariant = (0, _style.default)({
		  prop: 'typography',
		  cssProperty: false,
		  themeKey: 'typography'
		});
		typography.typographyVariant = typographyVariant;
		const typography$1 = (0, _compose.default)(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
		var _default = typography$1;
		typography.default = _default;
		return typography;
	}

	var styleFunctionSx$1 = {};

	var styleFunctionSx = {};

	var getThemeValue = {};

	var hasRequiredGetThemeValue;

	function requireGetThemeValue () {
		if (hasRequiredGetThemeValue) return getThemeValue;
		hasRequiredGetThemeValue = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(getThemeValue, "__esModule", {
		  value: true
		});
		getThemeValue.styleFunctionMapping = getThemeValue.propToStyleFunction = getThemeValue.default = void 0;
		var _borders = _interopRequireDefault(requireBorders());
		var _display = _interopRequireDefault(requireDisplay());
		var _flexbox = _interopRequireDefault(requireFlexbox());
		var _cssGrid = _interopRequireDefault(requireCssGrid());
		var _positions = _interopRequireDefault(requirePositions());
		var _palette = _interopRequireDefault(requirePalette());
		var _shadows = _interopRequireDefault(requireShadows$1());
		var _sizing = _interopRequireDefault(requireSizing());
		var _spacing = _interopRequireDefault(requireSpacing());
		var _typography = _interopRequireDefault(requireTypography$1());
		const filterPropsMapping = {
		  borders: _borders.default.filterProps,
		  display: _display.default.filterProps,
		  flexbox: _flexbox.default.filterProps,
		  grid: _cssGrid.default.filterProps,
		  positions: _positions.default.filterProps,
		  palette: _palette.default.filterProps,
		  shadows: _shadows.default.filterProps,
		  sizing: _sizing.default.filterProps,
		  spacing: _spacing.default.filterProps,
		  typography: _typography.default.filterProps
		};
		const styleFunctionMapping = {
		  borders: _borders.default,
		  display: _display.default,
		  flexbox: _flexbox.default,
		  grid: _cssGrid.default,
		  positions: _positions.default,
		  palette: _palette.default,
		  shadows: _shadows.default,
		  sizing: _sizing.default,
		  spacing: _spacing.default,
		  typography: _typography.default
		};
		getThemeValue.styleFunctionMapping = styleFunctionMapping;
		const propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
		  filterPropsMapping[styleFnName].forEach(propName => {
		    acc[propName] = styleFunctionMapping[styleFnName];
		  });
		  return acc;
		}, {});
		getThemeValue.propToStyleFunction = propToStyleFunction;
		function getThemeValue$1(prop, value, theme) {
		  const inputProps = {
		    [prop]: value,
		    theme
		  };
		  const styleFunction = propToStyleFunction[prop];
		  return styleFunction ? styleFunction(inputProps) : {
		    [prop]: value
		  };
		}
		var _default = getThemeValue$1;
		getThemeValue.default = _default;
		return getThemeValue;
	}

	var hasRequiredStyleFunctionSx$1;

	function requireStyleFunctionSx$1 () {
		if (hasRequiredStyleFunctionSx$1) return styleFunctionSx;
		hasRequiredStyleFunctionSx$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(styleFunctionSx, "__esModule", {
		  value: true
		});
		styleFunctionSx.default = void 0;
		styleFunctionSx.unstable_createStyleFunctionSx = unstable_createStyleFunctionSx;
		var _merge = _interopRequireDefault(requireMerge());
		var _getThemeValue = requireGetThemeValue();
		var _breakpoints = requireBreakpoints();
		function objectsHaveSameKeys(...objects) {
		  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
		  const union = new Set(allKeys);
		  return objects.every(object => union.size === Object.keys(object).length);
		}
		function callIfFn(maybeFn, arg) {
		  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
		}

		// eslint-disable-next-line @typescript-eslint/naming-convention
		function unstable_createStyleFunctionSx(styleFunctionMapping = _getThemeValue.styleFunctionMapping) {
		  const propToStyleFunction = Object.keys(styleFunctionMapping).reduce((acc, styleFnName) => {
		    styleFunctionMapping[styleFnName].filterProps.forEach(propName => {
		      acc[propName] = styleFunctionMapping[styleFnName];
		    });
		    return acc;
		  }, {});
		  function getThemeValue(prop, value, theme) {
		    const inputProps = {
		      [prop]: value,
		      theme
		    };
		    const styleFunction = propToStyleFunction[prop];
		    return styleFunction ? styleFunction(inputProps) : {
		      [prop]: value
		    };
		  }
		  function styleFunctionSx(props) {
		    const {
		      sx,
		      theme = {}
		    } = props || {};
		    if (!sx) {
		      return null; // Emotion & styled-components will neglect null
		    }

		    /*
		     * Receive `sxInput` as object or callback
		     * and then recursively check keys & values to create media query object styles.
		     * (the result will be used in `styled`)
		     */
		    function traverse(sxInput) {
		      let sxObject = sxInput;
		      if (typeof sxInput === 'function') {
		        sxObject = sxInput(theme);
		      } else if (typeof sxInput !== 'object') {
		        // value
		        return sxInput;
		      }
		      if (!sxObject) {
		        return null;
		      }
		      const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme.breakpoints);
		      const breakpointsKeys = Object.keys(emptyBreakpoints);
		      let css = emptyBreakpoints;
		      Object.keys(sxObject).forEach(styleKey => {
		        const value = callIfFn(sxObject[styleKey], theme);
		        if (value !== null && value !== undefined) {
		          if (typeof value === 'object') {
		            if (propToStyleFunction[styleKey]) {
		              css = (0, _merge.default)(css, getThemeValue(styleKey, value, theme));
		            } else {
		              const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
		                theme
		              }, value, x => ({
		                [styleKey]: x
		              }));
		              if (objectsHaveSameKeys(breakpointsValues, value)) {
		                css[styleKey] = styleFunctionSx({
		                  sx: value,
		                  theme
		                });
		              } else {
		                css = (0, _merge.default)(css, breakpointsValues);
		              }
		            }
		          } else {
		            css = (0, _merge.default)(css, getThemeValue(styleKey, value, theme));
		          }
		        }
		      });
		      return (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css);
		    }
		    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
		  }
		  return styleFunctionSx;
		}
		const styleFunctionSx$1 = unstable_createStyleFunctionSx();
		styleFunctionSx$1.filterProps = ['sx'];
		var _default = styleFunctionSx$1;
		styleFunctionSx.default = _default;
		return styleFunctionSx;
	}

	var extendSxProp = {};

	var hasRequiredExtendSxProp;

	function requireExtendSxProp () {
		if (hasRequiredExtendSxProp) return extendSxProp;
		hasRequiredExtendSxProp = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(extendSxProp, "__esModule", {
		  value: true
		});
		extendSxProp.default = extendSxProp$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _utils = requireUtils$4();
		var _getThemeValue = requireGetThemeValue();
		const _excluded = ["sx"];
		const splitProps = props => {
		  const result = {
		    systemProps: {},
		    otherProps: {}
		  };
		  Object.keys(props).forEach(prop => {
		    if (_getThemeValue.propToStyleFunction[prop]) {
		      result.systemProps[prop] = props[prop];
		    } else {
		      result.otherProps[prop] = props[prop];
		    }
		  });
		  return result;
		};
		function extendSxProp$1(props) {
		  const {
		      sx: inSx
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const {
		    systemProps,
		    otherProps
		  } = splitProps(other);
		  let finalSx;
		  if (Array.isArray(inSx)) {
		    finalSx = [systemProps, ...inSx];
		  } else if (typeof inSx === 'function') {
		    finalSx = (...args) => {
		      const result = inSx(...args);
		      if (!(0, _utils.isPlainObject)(result)) {
		        return systemProps;
		      }
		      return (0, _extends2.default)({}, systemProps, result);
		    };
		  } else {
		    finalSx = (0, _extends2.default)({}, systemProps, inSx);
		  }
		  return (0, _extends2.default)({}, otherProps, {
		    sx: finalSx
		  });
		}
		return extendSxProp;
	}

	var hasRequiredStyleFunctionSx;

	function requireStyleFunctionSx () {
		if (hasRequiredStyleFunctionSx) return styleFunctionSx$1;
		hasRequiredStyleFunctionSx = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _styleFunctionSx.default;
			  }
			});
			Object.defineProperty(exports, "extendSxProp", {
			  enumerable: true,
			  get: function () {
			    return _extendSxProp.default;
			  }
			});
			Object.defineProperty(exports, "unstable_createStyleFunctionSx", {
			  enumerable: true,
			  get: function () {
			    return _styleFunctionSx.unstable_createStyleFunctionSx;
			  }
			});
			var _styleFunctionSx = _interopRequireWildcard(requireStyleFunctionSx$1());
			var _extendSxProp = _interopRequireDefault(requireExtendSxProp());
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (styleFunctionSx$1));
		return styleFunctionSx$1;
	}

	var sx$1 = {};

	var sx = {};

	var hasRequiredSx$1;

	function requireSx$1 () {
		if (hasRequiredSx$1) return sx;
		hasRequiredSx$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(sx, "__esModule", {
		  value: true
		});
		sx.default = void 0;
		var _styleFunctionSx = _interopRequireDefault(requireStyleFunctionSx());
		function sx$1(styles) {
		  return ({
		    theme
		  }) => (0, _styleFunctionSx.default)({
		    sx: styles,
		    theme
		  });
		}
		var _default = sx$1;
		sx.default = _default;
		return sx;
	}

	var hasRequiredSx;

	function requireSx () {
		if (hasRequiredSx) return sx$1;
		hasRequiredSx = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _sx.default;
			  }
			});
			var _sx = _interopRequireDefault(requireSx$1());
	} (sx$1));
		return sx$1;
	}

	var Box$1 = {};

	var Box = {};

	var createBox = {};

	var useTheme$3 = {};

	var createTheme$2 = {};

	var createTheme$1 = {};

	var createBreakpoints = {};

	var hasRequiredCreateBreakpoints;

	function requireCreateBreakpoints () {
		if (hasRequiredCreateBreakpoints) return createBreakpoints;
		hasRequiredCreateBreakpoints = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createBreakpoints, "__esModule", {
		  value: true
		});
		createBreakpoints.breakpointKeys = void 0;
		createBreakpoints.default = createBreakpoints$1;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		const _excluded = ["values", "unit", "step"];
		// Sorted ASC by size. That's important.
		// It can't be configured as it's used statically for propTypes.
		const breakpointKeys = ['xs', 'sm', 'md', 'lg', 'xl'];
		createBreakpoints.breakpointKeys = breakpointKeys;
		const sortBreakpointsValues = values => {
		  const breakpointsAsArray = Object.keys(values).map(key => ({
		    key,
		    val: values[key]
		  })) || [];
		  // Sort in ascending order
		  breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
		  return breakpointsAsArray.reduce((acc, obj) => {
		    return (0, _extends2.default)({}, acc, {
		      [obj.key]: obj.val
		    });
		  }, {});
		};

		// Keep in mind that @media is inclusive by the CSS specification.
		function createBreakpoints$1(breakpoints) {
		  const {
		      // The breakpoint **start** at this value.
		      // For instance with the first breakpoint xs: [xs, sm).
		      values = {
		        xs: 0,
		        // phone
		        sm: 600,
		        // tablet
		        md: 900,
		        // small laptop
		        lg: 1200,
		        // desktop
		        xl: 1536 // large screen
		      },

		      unit = 'px',
		      step = 5
		    } = breakpoints,
		    other = (0, _objectWithoutPropertiesLoose2.default)(breakpoints, _excluded);
		  const sortedValues = sortBreakpointsValues(values);
		  const keys = Object.keys(sortedValues);
		  function up(key) {
		    const value = typeof values[key] === 'number' ? values[key] : key;
		    return `@media (min-width:${value}${unit})`;
		  }
		  function down(key) {
		    const value = typeof values[key] === 'number' ? values[key] : key;
		    return `@media (max-width:${value - step / 100}${unit})`;
		  }
		  function between(start, end) {
		    const endIndex = keys.indexOf(end);
		    return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
		  }
		  function only(key) {
		    if (keys.indexOf(key) + 1 < keys.length) {
		      return between(key, keys[keys.indexOf(key) + 1]);
		    }
		    return up(key);
		  }
		  function not(key) {
		    // handle first and last key separately, for better readability
		    const keyIndex = keys.indexOf(key);
		    if (keyIndex === 0) {
		      return up(keys[1]);
		    }
		    if (keyIndex === keys.length - 1) {
		      return down(keys[keyIndex]);
		    }
		    return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
		  }
		  return (0, _extends2.default)({
		    keys,
		    values: sortedValues,
		    up,
		    down,
		    between,
		    only,
		    not,
		    unit
		  }, other);
		}
		return createBreakpoints;
	}

	var shape = {};

	var hasRequiredShape;

	function requireShape () {
		if (hasRequiredShape) return shape;
		hasRequiredShape = 1;

		Object.defineProperty(shape, "__esModule", {
		  value: true
		});
		shape.default = void 0;
		const shape$1 = {
		  borderRadius: 4
		};
		var _default = shape$1;
		shape.default = _default;
		return shape;
	}

	var createSpacing = {};

	var hasRequiredCreateSpacing;

	function requireCreateSpacing () {
		if (hasRequiredCreateSpacing) return createSpacing;
		hasRequiredCreateSpacing = 1;

		Object.defineProperty(createSpacing, "__esModule", {
		  value: true
		});
		createSpacing.default = createSpacing$1;
		var _spacing = requireSpacing();
		/* tslint:enable:unified-signatures */

		function createSpacing$1(spacingInput = 8) {
		  // Already transformed.
		  if (spacingInput.mui) {
		    return spacingInput;
		  }

		  // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
		  // Smaller components, such as icons, can align to a 4dp grid.
		  // https://m2.material.io/design/layout/understanding-layout.html
		  const transform = (0, _spacing.createUnarySpacing)({
		    spacing: spacingInput
		  });
		  const spacing = (...argsInput) => {
		    {
		      if (!(argsInput.length <= 4)) {
		        console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
		      }
		    }
		    const args = argsInput.length === 0 ? [1] : argsInput;
		    return args.map(argument => {
		      const output = transform(argument);
		      return typeof output === 'number' ? `${output}px` : output;
		    }).join(' ');
		  };
		  spacing.mui = true;
		  return spacing;
		}
		return createSpacing;
	}

	var hasRequiredCreateTheme$2;

	function requireCreateTheme$2 () {
		if (hasRequiredCreateTheme$2) return createTheme$1;
		hasRequiredCreateTheme$2 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createTheme$1, "__esModule", {
		  value: true
		});
		createTheme$1.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _utils = requireUtils$4();
		var _createBreakpoints = _interopRequireDefault(requireCreateBreakpoints());
		var _shape = _interopRequireDefault(requireShape());
		var _createSpacing = _interopRequireDefault(requireCreateSpacing());
		const _excluded = ["breakpoints", "palette", "spacing", "shape"];
		function createTheme(options = {}, ...args) {
		  const {
		      breakpoints: breakpointsInput = {},
		      palette: paletteInput = {},
		      spacing: spacingInput,
		      shape: shapeInput = {}
		    } = options,
		    other = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded);
		  const breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
		  const spacing = (0, _createSpacing.default)(spacingInput);
		  let muiTheme = (0, _utils.deepmerge)({
		    breakpoints,
		    direction: 'ltr',
		    components: {},
		    // Inject component definitions.
		    palette: (0, _extends2.default)({
		      mode: 'light'
		    }, paletteInput),
		    spacing,
		    shape: (0, _extends2.default)({}, _shape.default, shapeInput)
		  }, other);
		  muiTheme = args.reduce((acc, argument) => (0, _utils.deepmerge)(acc, argument), muiTheme);
		  return muiTheme;
		}
		var _default = createTheme;
		createTheme$1.default = _default;
		return createTheme$1;
	}

	var hasRequiredCreateTheme$1;

	function requireCreateTheme$1 () {
		if (hasRequiredCreateTheme$1) return createTheme$2;
		hasRequiredCreateTheme$1 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _createTheme.default;
			  }
			});
			var _createTheme = _interopRequireDefault(requireCreateTheme$2());
	} (createTheme$2));
		return createTheme$2;
	}

	var useThemeWithoutDefault = {};

	var node = {};

	var ThemeProvider$4 = {};

	var ThemeProvider$3 = {};

	var ThemeContext = {};

	var hasRequiredThemeContext;

	function requireThemeContext () {
		if (hasRequiredThemeContext) return ThemeContext;
		hasRequiredThemeContext = 1;

		Object.defineProperty(ThemeContext, "__esModule", {
		  value: true
		});
		ThemeContext.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const ThemeContext$1 = /*#__PURE__*/React.createContext(null);
		{
		  ThemeContext$1.displayName = 'ThemeContext';
		}
		var _default = ThemeContext$1;
		ThemeContext.default = _default;
		return ThemeContext;
	}

	var useTheme$2 = {};

	var useTheme$1 = {};

	var hasRequiredUseTheme$3;

	function requireUseTheme$3 () {
		if (hasRequiredUseTheme$3) return useTheme$1;
		hasRequiredUseTheme$3 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useTheme$1, "__esModule", {
		  value: true
		});
		useTheme$1.default = useTheme;
		var React = _interopRequireWildcard(require$$3);
		var _ThemeContext = _interopRequireDefault(requireThemeContext());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function useTheme() {
		  const theme = React.useContext(_ThemeContext.default);
		  {
		    // eslint-disable-next-line react-hooks/rules-of-hooks
		    React.useDebugValue(theme);
		  }
		  return theme;
		}
		return useTheme$1;
	}

	var hasRequiredUseTheme$2;

	function requireUseTheme$2 () {
		if (hasRequiredUseTheme$2) return useTheme$2;
		hasRequiredUseTheme$2 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _useTheme.default;
			  }
			});
			var _useTheme = _interopRequireDefault(requireUseTheme$3());
	} (useTheme$2));
		return useTheme$2;
	}

	var nested = {};

	var hasRequiredNested;

	function requireNested () {
		if (hasRequiredNested) return nested;
		hasRequiredNested = 1;

		Object.defineProperty(nested, "__esModule", {
		  value: true
		});
		nested.default = void 0;
		const hasSymbol = typeof Symbol === 'function' && Symbol.for;
		var _default = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';
		nested.default = _default;
		return nested;
	}

	var hasRequiredThemeProvider$4;

	function requireThemeProvider$4 () {
		if (hasRequiredThemeProvider$4) return ThemeProvider$3;
		hasRequiredThemeProvider$4 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ThemeProvider$3, "__esModule", {
		  value: true
		});
		ThemeProvider$3.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _ThemeContext = _interopRequireDefault(requireThemeContext());
		var _useTheme = _interopRequireDefault(requireUseTheme$2());
		var _nested = _interopRequireDefault(requireNested());
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		// To support composition of theme.
		function mergeOuterLocalTheme(outerTheme, localTheme) {
		  if (typeof localTheme === 'function') {
		    const mergedTheme = localTheme(outerTheme);
		    {
		      if (!mergedTheme) {
		        console.error(['MUI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\n'));
		      }
		    }
		    return mergedTheme;
		  }
		  return (0, _extends2.default)({}, outerTheme, localTheme);
		}

		/**
		 * This component takes a `theme` prop.
		 * It makes the `theme` available down the React tree thanks to React context.
		 * This component should preferably be used at **the root of your component tree**.
		 */
		function ThemeProvider(props) {
		  const {
		    children,
		    theme: localTheme
		  } = props;
		  const outerTheme = (0, _useTheme.default)();
		  {
		    if (outerTheme === null && typeof localTheme === 'function') {
		      console.error(['MUI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
		    }
		  }
		  const theme = React.useMemo(() => {
		    const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
		    if (output != null) {
		      output[_nested.default] = outerTheme !== null;
		    }
		    return output;
		  }, [localTheme, outerTheme]);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ThemeContext.default.Provider, {
		    value: theme,
		    children: children
		  });
		}
		ThemeProvider.propTypes = {
		  /**
		   * Your component tree.
		   */
		  children: _propTypes.default.node,
		  /**
		   * A theme object. You can provide a function to extend the outer theme.
		   */
		  theme: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]).isRequired
		} ;
		{
		  ThemeProvider.propTypes = (0, _utils.exactProp)(ThemeProvider.propTypes) ;
		}
		var _default = ThemeProvider;
		ThemeProvider$3.default = _default;
		return ThemeProvider$3;
	}

	var hasRequiredThemeProvider$3;

	function requireThemeProvider$3 () {
		if (hasRequiredThemeProvider$3) return ThemeProvider$4;
		hasRequiredThemeProvider$3 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _ThemeProvider.default;
			  }
			});
			Object.defineProperty(exports, "unstable_nested", {
			  enumerable: true,
			  get: function () {
			    return _nested.default;
			  }
			});
			var _ThemeProvider = _interopRequireDefault(requireThemeProvider$4());
			var _nested = _interopRequireDefault(requireNested());
	} (ThemeProvider$4));
		return ThemeProvider$4;
	}

	/** @license MUI v5.10.16
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredNode;

	function requireNode () {
		if (hasRequiredNode) return node;
		hasRequiredNode = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  ThemeProvider: true,
			  useTheme: true
			};
			Object.defineProperty(exports, "ThemeProvider", {
			  enumerable: true,
			  get: function () {
			    return _ThemeProvider.default;
			  }
			});
			Object.defineProperty(exports, "useTheme", {
			  enumerable: true,
			  get: function () {
			    return _useTheme.default;
			  }
			});
			var _ThemeProvider = _interopRequireWildcard(requireThemeProvider$3());
			Object.keys(_ThemeProvider).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _ThemeProvider[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _ThemeProvider[key];
			    }
			  });
			});
			var _useTheme = _interopRequireDefault(requireUseTheme$2());
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (node));
		return node;
	}

	var hasRequiredUseThemeWithoutDefault;

	function requireUseThemeWithoutDefault () {
		if (hasRequiredUseThemeWithoutDefault) return useThemeWithoutDefault;
		hasRequiredUseThemeWithoutDefault = 1;

		Object.defineProperty(useThemeWithoutDefault, "__esModule", {
		  value: true
		});
		useThemeWithoutDefault.default = void 0;
		var _privateTheming = requireNode();
		function isObjectEmpty(obj) {
		  return Object.keys(obj).length === 0;
		}
		function useTheme(defaultTheme = null) {
		  const contextTheme = (0, _privateTheming.useTheme)();
		  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
		}
		var _default = useTheme;
		useThemeWithoutDefault.default = _default;
		return useThemeWithoutDefault;
	}

	var hasRequiredUseTheme$1;

	function requireUseTheme$1 () {
		if (hasRequiredUseTheme$1) return useTheme$3;
		hasRequiredUseTheme$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useTheme$3, "__esModule", {
		  value: true
		});
		useTheme$3.systemDefaultTheme = useTheme$3.default = void 0;
		var _createTheme = _interopRequireDefault(requireCreateTheme$1());
		var _useThemeWithoutDefault = _interopRequireDefault(requireUseThemeWithoutDefault());
		const systemDefaultTheme = (0, _createTheme.default)();
		useTheme$3.systemDefaultTheme = systemDefaultTheme;
		function useTheme(defaultTheme = systemDefaultTheme) {
		  return (0, _useThemeWithoutDefault.default)(defaultTheme);
		}
		var _default = useTheme;
		useTheme$3.default = _default;
		return useTheme$3;
	}

	var hasRequiredCreateBox;

	function requireCreateBox () {
		if (hasRequiredCreateBox) return createBox;
		hasRequiredCreateBox = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createBox, "__esModule", {
		  value: true
		});
		createBox.default = createBox$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _styledEngine = _interopRequireDefault(requireNode$1());
		var _styleFunctionSx = _interopRequireWildcard(requireStyleFunctionSx());
		var _useTheme = _interopRequireDefault(requireUseTheme$1());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className", "component"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function createBox$1(options = {}) {
		  const {
		    defaultTheme,
		    defaultClassName = 'MuiBox-root',
		    generateClassName,
		    styleFunctionSx = _styleFunctionSx.default
		  } = options;
		  const BoxRoot = (0, _styledEngine.default)('div', {
		    shouldForwardProp: prop => prop !== 'theme' && prop !== 'sx' && prop !== 'as'
		  })(styleFunctionSx);
		  const Box = /*#__PURE__*/React.forwardRef(function Box(inProps, ref) {
		    const theme = (0, _useTheme.default)(defaultTheme);
		    const _extendSxProp = (0, _styleFunctionSx.extendSxProp)(inProps),
		      {
		        className,
		        component = 'div'
		      } = _extendSxProp,
		      other = (0, _objectWithoutPropertiesLoose2.default)(_extendSxProp, _excluded);
		    return /*#__PURE__*/(0, _jsxRuntime.jsx)(BoxRoot, (0, _extends2.default)({
		      as: component,
		      ref: ref,
		      className: (0, _clsx.default)(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
		      theme: theme
		    }, other));
		  });
		  return Box;
		}
		return createBox;
	}

	var hasRequiredBox$1;

	function requireBox$1 () {
		if (hasRequiredBox$1) return Box;
		hasRequiredBox$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Box, "__esModule", {
		  value: true
		});
		Box.default = void 0;
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _createBox = _interopRequireDefault(requireCreateBox());
		const Box$1 = (0, _createBox.default)();
		Box$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = Box$1;
		Box.default = _default;
		return Box;
	}

	var hasRequiredBox;

	function requireBox () {
		if (hasRequiredBox) return Box$1;
		hasRequiredBox = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _Box.default;
			  }
			});
			var _Box = _interopRequireDefault(requireBox$1());
	} (Box$1));
		return Box$1;
	}

	var createStyled = {};

	var propsToClassKey = {};

	var hasRequiredPropsToClassKey;

	function requirePropsToClassKey () {
		if (hasRequiredPropsToClassKey) return propsToClassKey;
		hasRequiredPropsToClassKey = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(propsToClassKey, "__esModule", {
		  value: true
		});
		propsToClassKey.default = propsToClassKey$1;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _utils = requireUtils$4();
		const _excluded = ["variant"];
		function isEmpty(string) {
		  return string.length === 0;
		}

		/**
		 * Generates string classKey based on the properties provided. It starts with the
		 * variant if defined, and then it appends all other properties in alphabetical order.
		 * @param {object} props - the properties for which the classKey should be created.
		 */
		function propsToClassKey$1(props) {
		  const {
		      variant
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  let classKey = variant || '';
		  Object.keys(other).sort().forEach(key => {
		    if (key === 'color') {
		      classKey += isEmpty(classKey) ? props[key] : (0, _utils.unstable_capitalize)(props[key]);
		    } else {
		      classKey += `${isEmpty(classKey) ? key : (0, _utils.unstable_capitalize)(key)}${(0, _utils.unstable_capitalize)(props[key].toString())}`;
		    }
		  });
		  return classKey;
		}
		return propsToClassKey;
	}

	var hasRequiredCreateStyled;

	function requireCreateStyled () {
		if (hasRequiredCreateStyled) return createStyled;
		hasRequiredCreateStyled = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createStyled, "__esModule", {
		  value: true
		});
		createStyled.default = createStyled$1;
		createStyled.shouldForwardProp = shouldForwardProp;
		createStyled.systemDefaultTheme = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var _styledEngine = _interopRequireWildcard(requireNode$1());
		var _utils = requireUtils$4();
		var _createTheme = _interopRequireDefault(requireCreateTheme$1());
		var _propsToClassKey = _interopRequireDefault(requirePropsToClassKey());
		var _styleFunctionSx = _interopRequireDefault(requireStyleFunctionSx());
		const _excluded = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"],
		  _excluded2 = ["theme"],
		  _excluded3 = ["theme"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function isEmpty(obj) {
		  return Object.keys(obj).length === 0;
		}

		// https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
		function isStringTag(tag) {
		  return typeof tag === 'string' &&
		  // 96 is one less than the char code
		  // for "a" so this is checking that
		  // it's a lowercase character
		  tag.charCodeAt(0) > 96;
		}
		const getStyleOverrides = (name, theme) => {
		  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
		    return theme.components[name].styleOverrides;
		  }
		  return null;
		};
		const getVariantStyles = (name, theme) => {
		  let variants = [];
		  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
		    variants = theme.components[name].variants;
		  }
		  const variantsStyles = {};
		  variants.forEach(definition => {
		    const key = (0, _propsToClassKey.default)(definition.props);
		    variantsStyles[key] = definition.style;
		  });
		  return variantsStyles;
		};
		const variantsResolver = (props, styles, theme, name) => {
		  var _theme$components, _theme$components$nam;
		  const {
		    ownerState = {}
		  } = props;
		  const variantsStyles = [];
		  const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
		  if (themeVariants) {
		    themeVariants.forEach(themeVariant => {
		      let isMatch = true;
		      Object.keys(themeVariant.props).forEach(key => {
		        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
		          isMatch = false;
		        }
		      });
		      if (isMatch) {
		        variantsStyles.push(styles[(0, _propsToClassKey.default)(themeVariant.props)]);
		      }
		    });
		  }
		  return variantsStyles;
		};

		// Update /system/styled/#api in case if this changes
		function shouldForwardProp(prop) {
		  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
		}
		const systemDefaultTheme = (0, _createTheme.default)();
		createStyled.systemDefaultTheme = systemDefaultTheme;
		const lowercaseFirstLetter = string => {
		  return string.charAt(0).toLowerCase() + string.slice(1);
		};
		function createStyled$1(input = {}) {
		  const {
		    defaultTheme = systemDefaultTheme,
		    rootShouldForwardProp = shouldForwardProp,
		    slotShouldForwardProp = shouldForwardProp,
		    styleFunctionSx = _styleFunctionSx.default
		  } = input;
		  const systemSx = props => {
		    const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
		    return styleFunctionSx((0, _extends2.default)({}, props, {
		      theme
		    }));
		  };
		  systemSx.__mui_systemSx = true;
		  return (tag, inputOptions = {}) => {
		    // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
		    (0, _styledEngine.internal_processStyles)(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
		    const {
		        name: componentName,
		        slot: componentSlot,
		        skipVariantsResolver: inputSkipVariantsResolver,
		        skipSx: inputSkipSx,
		        overridesResolver
		      } = inputOptions,
		      options = (0, _objectWithoutPropertiesLoose2.default)(inputOptions, _excluded);

		    // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
		    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
		    const skipSx = inputSkipSx || false;
		    let label;
		    {
		      if (componentName) {
		        label = `${componentName}-${lowercaseFirstLetter(componentSlot || 'Root')}`;
		      }
		    }
		    let shouldForwardPropOption = shouldForwardProp;
		    if (componentSlot === 'Root') {
		      shouldForwardPropOption = rootShouldForwardProp;
		    } else if (componentSlot) {
		      // any other slot specified
		      shouldForwardPropOption = slotShouldForwardProp;
		    } else if (isStringTag(tag)) {
		      // for string (html) tag, preserve the behavior in emotion & styled-components.
		      shouldForwardPropOption = undefined;
		    }
		    const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends2.default)({
		      shouldForwardProp: shouldForwardPropOption,
		      label
		    }, options));
		    const muiStyledResolver = (styleArg, ...expressions) => {
		      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
		        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
		        // component stays as a function. This condition makes sure that we do not interpolate functions
		        // which are basically components used as a selectors.
		        return typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg ? _ref => {
		          let {
		              theme: themeInput
		            } = _ref,
		            other = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded2);
		          return stylesArg((0, _extends2.default)({
		            theme: isEmpty(themeInput) ? defaultTheme : themeInput
		          }, other));
		        } : stylesArg;
		      }) : [];
		      let transformedStyleArg = styleArg;
		      if (componentName && overridesResolver) {
		        expressionsWithDefaultTheme.push(props => {
		          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
		          const styleOverrides = getStyleOverrides(componentName, theme);
		          if (styleOverrides) {
		            const resolvedStyleOverrides = {};
		            Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
		              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle((0, _extends2.default)({}, props, {
		                theme
		              })) : slotStyle;
		            });
		            return overridesResolver(props, resolvedStyleOverrides);
		          }
		          return null;
		        });
		      }
		      if (componentName && !skipVariantsResolver) {
		        expressionsWithDefaultTheme.push(props => {
		          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
		          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
		        });
		      }
		      if (!skipSx) {
		        expressionsWithDefaultTheme.push(systemSx);
		      }
		      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
		      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
		        const placeholders = new Array(numOfCustomFnsApplied).fill('');
		        // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
		        transformedStyleArg = [...styleArg, ...placeholders];
		        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
		      } else if (typeof styleArg === 'function' &&
		      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
		      // component stays as a function. This condition makes sure that we do not interpolate functions
		      // which are basically components used as a selectors.
		      styleArg.__emotion_real !== styleArg) {
		        // If the type is function, we need to define the default theme.
		        transformedStyleArg = _ref2 => {
		          let {
		              theme: themeInput
		            } = _ref2,
		            other = (0, _objectWithoutPropertiesLoose2.default)(_ref2, _excluded3);
		          return styleArg((0, _extends2.default)({
		            theme: isEmpty(themeInput) ? defaultTheme : themeInput
		          }, other));
		        };
		      }
		      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
		      {
		        let displayName;
		        if (componentName) {
		          displayName = `${componentName}${componentSlot || ''}`;
		        }
		        if (displayName === undefined) {
		          displayName = `Styled(${(0, _utils.getDisplayName)(tag)})`;
		        }
		        Component.displayName = displayName;
		      }
		      return Component;
		    };
		    if (defaultStyledResolver.withConfig) {
		      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
		    }
		    return muiStyledResolver;
		  };
		}
		return createStyled;
	}

	var styled$1 = {};

	var hasRequiredStyled$1;

	function requireStyled$1 () {
		if (hasRequiredStyled$1) return styled$1;
		hasRequiredStyled$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(styled$1, "__esModule", {
		  value: true
		});
		styled$1.default = void 0;
		var _createStyled = _interopRequireDefault(requireCreateStyled());
		const styled = (0, _createStyled.default)();
		var _default = styled;
		styled$1.default = _default;
		return styled$1;
	}

	var useThemeProps$2 = {};

	var useThemeProps$1 = {};

	var getThemeProps = {};

	var hasRequiredGetThemeProps;

	function requireGetThemeProps () {
		if (hasRequiredGetThemeProps) return getThemeProps;
		hasRequiredGetThemeProps = 1;

		Object.defineProperty(getThemeProps, "__esModule", {
		  value: true
		});
		getThemeProps.default = getThemeProps$1;
		var _utils = requireUtils$4();
		function getThemeProps$1(params) {
		  const {
		    theme,
		    name,
		    props
		  } = params;
		  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
		    return props;
		  }
		  return (0, _utils.internal_resolveProps)(theme.components[name].defaultProps, props);
		}
		return getThemeProps;
	}

	var hasRequiredUseThemeProps$2;

	function requireUseThemeProps$2 () {
		if (hasRequiredUseThemeProps$2) return useThemeProps$1;
		hasRequiredUseThemeProps$2 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useThemeProps$1, "__esModule", {
		  value: true
		});
		useThemeProps$1.default = useThemeProps;
		var _getThemeProps = _interopRequireDefault(requireGetThemeProps());
		var _useTheme = _interopRequireDefault(requireUseTheme$1());
		function useThemeProps({
		  props,
		  name,
		  defaultTheme
		}) {
		  const theme = (0, _useTheme.default)(defaultTheme);
		  const mergedProps = (0, _getThemeProps.default)({
		    theme,
		    name,
		    props
		  });
		  return mergedProps;
		}
		return useThemeProps$1;
	}

	var hasRequiredUseThemeProps$1;

	function requireUseThemeProps$1 () {
		if (hasRequiredUseThemeProps$1) return useThemeProps$2;
		hasRequiredUseThemeProps$1 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _useThemeProps.default;
			  }
			});
			Object.defineProperty(exports, "getThemeProps", {
			  enumerable: true,
			  get: function () {
			    return _getThemeProps.default;
			  }
			});
			var _useThemeProps = _interopRequireDefault(requireUseThemeProps$2());
			var _getThemeProps = _interopRequireDefault(requireGetThemeProps());
	} (useThemeProps$2));
		return useThemeProps$2;
	}

	var colorManipulator = {};

	var hasRequiredColorManipulator;

	function requireColorManipulator () {
		if (hasRequiredColorManipulator) return colorManipulator;
		hasRequiredColorManipulator = 1;

		Object.defineProperty(colorManipulator, "__esModule", {
		  value: true
		});
		colorManipulator.alpha = alpha;
		colorManipulator.colorChannel = void 0;
		colorManipulator.darken = darken;
		colorManipulator.decomposeColor = decomposeColor;
		colorManipulator.emphasize = emphasize;
		colorManipulator.getContrastRatio = getContrastRatio;
		colorManipulator.getLuminance = getLuminance;
		colorManipulator.hexToRgb = hexToRgb;
		colorManipulator.hslToRgb = hslToRgb;
		colorManipulator.lighten = lighten;
		colorManipulator.private_safeAlpha = private_safeAlpha;
		colorManipulator.private_safeColorChannel = void 0;
		colorManipulator.private_safeDarken = private_safeDarken;
		colorManipulator.private_safeEmphasize = private_safeEmphasize;
		colorManipulator.private_safeLighten = private_safeLighten;
		colorManipulator.recomposeColor = recomposeColor;
		colorManipulator.rgbToHex = rgbToHex;
		requireUtils$4();
		/**
		 * Returns a number whose value is limited to the given range.
		 * @param {number} value The value to be clamped
		 * @param {number} min The lower boundary of the output range
		 * @param {number} max The upper boundary of the output range
		 * @returns {number} A number in the range [min, max]
		 */
		function clamp(value, min = 0, max = 1) {
		  {
		    if (value < min || value > max) {
		      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
		    }
		  }
		  return Math.min(Math.max(min, value), max);
		}

		/**
		 * Converts a color from CSS hex format to CSS rgb format.
		 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
		 * @returns {string} A CSS rgb color string
		 */
		function hexToRgb(color) {
		  color = color.slice(1);
		  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
		  let colors = color.match(re);
		  if (colors && colors[0].length === 1) {
		    colors = colors.map(n => n + n);
		  }
		  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
	    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
	  }).join(', ')})` : '';
		}
		function intToHex(int) {
		  const hex = int.toString(16);
		  return hex.length === 1 ? `0${hex}` : hex;
		}

		/**
		 * Returns an object with the type and values of a color.
		 *
		 * Note: Does not support rgb % values.
		 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
		 * @returns {object} - A MUI color object: {type: string, values: number[]}
		 */
		function decomposeColor(color) {
		  // Idempotent
		  if (color.type) {
		    return color;
		  }
		  if (color.charAt(0) === '#') {
		    return decomposeColor(hexToRgb(color));
		  }
		  const marker = color.indexOf('(');
		  const type = color.substring(0, marker);
		  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
		    throw new Error(`MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` );
		  }
		  let values = color.substring(marker + 1, color.length - 1);
		  let colorSpace;
		  if (type === 'color') {
		    values = values.split(' ');
		    colorSpace = values.shift();
		    if (values.length === 4 && values[3].charAt(0) === '/') {
		      values[3] = values[3].slice(1);
		    }
		    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
		      throw new Error(`MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` );
		    }
		  } else {
		    values = values.split(',');
		  }
		  values = values.map(value => parseFloat(value));
		  return {
		    type,
		    values,
		    colorSpace
		  };
		}

		/**
		 * Returns a channel created from the input color.
		 *
		 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
		 * @returns {string} - The channel for the color, that can be used in rgba or hsla colors
		 */
		const colorChannel = color => {
		  const decomposedColor = decomposeColor(color);
		  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');
		};
		colorManipulator.colorChannel = colorChannel;
		const private_safeColorChannel = (color, warning) => {
		  try {
		    return colorChannel(color);
		  } catch (error) {
		    if (warning && "development" !== 'production') {
		      console.warn(warning);
		    }
		    return color;
		  }
		};

		/**
		 * Converts a color object with type and values to a string.
		 * @param {object} color - Decomposed color
		 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
		 * @param {array} color.values - [n,n,n] or [n,n,n,n]
		 * @returns {string} A CSS color string
		 */
		colorManipulator.private_safeColorChannel = private_safeColorChannel;
		function recomposeColor(color) {
		  const {
		    type,
		    colorSpace
		  } = color;
		  let {
		    values
		  } = color;
		  if (type.indexOf('rgb') !== -1) {
		    // Only convert the first 3 values to int (i.e. not alpha)
		    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
		  } else if (type.indexOf('hsl') !== -1) {
		    values[1] = `${values[1]}%`;
		    values[2] = `${values[2]}%`;
		  }
		  if (type.indexOf('color') !== -1) {
		    values = `${colorSpace} ${values.join(' ')}`;
		  } else {
		    values = `${values.join(', ')}`;
		  }
		  return `${type}(${values})`;
		}

		/**
		 * Converts a color from CSS rgb format to CSS hex format.
		 * @param {string} color - RGB color, i.e. rgb(n, n, n)
		 * @returns {string} A CSS rgb color string, i.e. #nnnnnn
		 */
		function rgbToHex(color) {
		  // Idempotent
		  if (color.indexOf('#') === 0) {
		    return color;
		  }
		  const {
		    values
		  } = decomposeColor(color);
		  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;
		}

		/**
		 * Converts a color from hsl format to rgb format.
		 * @param {string} color - HSL color values
		 * @returns {string} rgb color values
		 */
		function hslToRgb(color) {
		  color = decomposeColor(color);
		  const {
		    values
		  } = color;
		  const h = values[0];
		  const s = values[1] / 100;
		  const l = values[2] / 100;
		  const a = s * Math.min(l, 1 - l);
		  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
		  let type = 'rgb';
		  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
		  if (color.type === 'hsla') {
		    type += 'a';
		    rgb.push(values[3]);
		  }
		  return recomposeColor({
		    type,
		    values: rgb
		  });
		}
		/**
		 * The relative brightness of any point in a color space,
		 * normalized to 0 for darkest black and 1 for lightest white.
		 *
		 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
		 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
		 * @returns {number} The relative brightness of the color in the range 0 - 1
		 */
		function getLuminance(color) {
		  color = decomposeColor(color);
		  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;
		  rgb = rgb.map(val => {
		    if (color.type !== 'color') {
		      val /= 255; // normalized
		    }

		    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
		  });

		  // Truncate at 3 digits
		  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
		}

		/**
		 * Calculates the contrast ratio between two colors.
		 *
		 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
		 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
		 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
		 * @returns {number} A contrast ratio value in the range 0 - 21.
		 */
		function getContrastRatio(foreground, background) {
		  const lumA = getLuminance(foreground);
		  const lumB = getLuminance(background);
		  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
		}

		/**
		 * Sets the absolute transparency of a color.
		 * Any existing alpha values are overwritten.
		 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
		 * @param {number} value - value to set the alpha channel to in the range 0 - 1
		 * @returns {string} A CSS color string. Hex input values are returned as rgb
		 */
		function alpha(color, value) {
		  color = decomposeColor(color);
		  value = clamp(value);
		  if (color.type === 'rgb' || color.type === 'hsl') {
		    color.type += 'a';
		  }
		  if (color.type === 'color') {
		    color.values[3] = `/${value}`;
		  } else {
		    color.values[3] = value;
		  }
		  return recomposeColor(color);
		}
		function private_safeAlpha(color, value, warning) {
		  try {
		    return alpha(color, value);
		  } catch (error) {
		    if (warning && "development" !== 'production') {
		      console.warn(warning);
		    }
		    return color;
		  }
		}

		/**
		 * Darkens a color.
		 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
		 * @param {number} coefficient - multiplier in the range 0 - 1
		 * @returns {string} A CSS color string. Hex input values are returned as rgb
		 */
		function darken(color, coefficient) {
		  color = decomposeColor(color);
		  coefficient = clamp(coefficient);
		  if (color.type.indexOf('hsl') !== -1) {
		    color.values[2] *= 1 - coefficient;
		  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
		    for (let i = 0; i < 3; i += 1) {
		      color.values[i] *= 1 - coefficient;
		    }
		  }
		  return recomposeColor(color);
		}
		function private_safeDarken(color, coefficient, warning) {
		  try {
		    return darken(color, coefficient);
		  } catch (error) {
		    if (warning && "development" !== 'production') {
		      console.warn(warning);
		    }
		    return color;
		  }
		}

		/**
		 * Lightens a color.
		 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
		 * @param {number} coefficient - multiplier in the range 0 - 1
		 * @returns {string} A CSS color string. Hex input values are returned as rgb
		 */
		function lighten(color, coefficient) {
		  color = decomposeColor(color);
		  coefficient = clamp(coefficient);
		  if (color.type.indexOf('hsl') !== -1) {
		    color.values[2] += (100 - color.values[2]) * coefficient;
		  } else if (color.type.indexOf('rgb') !== -1) {
		    for (let i = 0; i < 3; i += 1) {
		      color.values[i] += (255 - color.values[i]) * coefficient;
		    }
		  } else if (color.type.indexOf('color') !== -1) {
		    for (let i = 0; i < 3; i += 1) {
		      color.values[i] += (1 - color.values[i]) * coefficient;
		    }
		  }
		  return recomposeColor(color);
		}
		function private_safeLighten(color, coefficient, warning) {
		  try {
		    return lighten(color, coefficient);
		  } catch (error) {
		    if (warning && "development" !== 'production') {
		      console.warn(warning);
		    }
		    return color;
		  }
		}

		/**
		 * Darken or lighten a color, depending on its luminance.
		 * Light colors are darkened, dark colors are lightened.
		 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
		 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
		 * @returns {string} A CSS color string. Hex input values are returned as rgb
		 */
		function emphasize(color, coefficient = 0.15) {
		  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
		}
		function private_safeEmphasize(color, coefficient, warning) {
		  try {
		    return private_safeEmphasize(color, coefficient);
		  } catch (error) {
		    if (warning && "development" !== 'production') {
		      console.warn(warning);
		    }
		    return color;
		  }
		}
		return colorManipulator;
	}

	var ThemeProvider$2 = {};

	var ThemeProvider$1 = {};

	var hasRequiredThemeProvider$2;

	function requireThemeProvider$2 () {
		if (hasRequiredThemeProvider$2) return ThemeProvider$1;
		hasRequiredThemeProvider$2 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ThemeProvider$1, "__esModule", {
		  value: true
		});
		ThemeProvider$1.default = void 0;
		_interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _privateTheming = requireNode();
		var _utils = requireUtils$4();
		var _styledEngine = requireNode$1();
		var _useTheme = _interopRequireDefault(requireUseTheme$1());
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const EMPTY_THEME = {};
		function InnerThemeProvider(props) {
		  const theme = (0, _useTheme.default)();
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.ThemeContext.Provider, {
		    value: typeof theme === 'object' ? theme : EMPTY_THEME,
		    children: props.children
		  });
		}
		InnerThemeProvider.propTypes = {
		  /**
		   * Your component tree.
		   */
		  children: _propTypes.default.node
		} ;

		/**
		 * This component makes the `theme` available down the React tree.
		 * It should preferably be used at **the root of your component tree**.
		 */
		function ThemeProvider(props) {
		  const {
		    children,
		    theme: localTheme
		  } = props;
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_privateTheming.ThemeProvider, {
		    theme: localTheme,
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(InnerThemeProvider, {
		      children: children
		    })
		  });
		}
		ThemeProvider.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Your component tree.
		   */
		  children: _propTypes.default.node,
		  /**
		   * A theme object. You can provide a function to extend the outer theme.
		   */
		  theme: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]).isRequired
		} ;
		{
		  ThemeProvider.propTypes = (0, _utils.exactProp)(ThemeProvider.propTypes) ;
		}
		var _default = ThemeProvider;
		ThemeProvider$1.default = _default;
		return ThemeProvider$1;
	}

	var hasRequiredThemeProvider$1;

	function requireThemeProvider$1 () {
		if (hasRequiredThemeProvider$1) return ThemeProvider$2;
		hasRequiredThemeProvider$1 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _ThemeProvider.default;
			  }
			});
			var _ThemeProvider = _interopRequireDefault(requireThemeProvider$2());
	} (ThemeProvider$2));
		return ThemeProvider$2;
	}

	var createCssVarsProvider = {};

	var cssVarsParser = {};

	var hasRequiredCssVarsParser;

	function requireCssVarsParser () {
		if (hasRequiredCssVarsParser) return cssVarsParser;
		hasRequiredCssVarsParser = 1;

		Object.defineProperty(cssVarsParser, "__esModule", {
		  value: true
		});
		cssVarsParser.assignNestedKeys = void 0;
		cssVarsParser.default = cssVarsParser$1;
		cssVarsParser.walkObjectDeep = void 0;
		/**
		 * This function create an object from keys, value and then assign to target
		 *
		 * @param {Object} obj : the target object to be assigned
		 * @param {string[]} keys
		 * @param {string | number} value
		 *
		 * @example
		 * const source = {}
		 * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')
		 * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }
		 *
		 * @example
		 * const source = { palette: { primary: 'var(--palette-primary)' } }
		 * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')
		 * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }
		 */
		const assignNestedKeys = (obj, keys, value, arrayKeys = []) => {
		  let temp = obj;
		  keys.forEach((k, index) => {
		    if (index === keys.length - 1) {
		      if (Array.isArray(temp)) {
		        temp[Number(k)] = value;
		      } else if (temp && typeof temp === 'object') {
		        temp[k] = value;
		      }
		    } else if (temp && typeof temp === 'object') {
		      if (!temp[k]) {
		        temp[k] = arrayKeys.includes(k) ? [] : {};
		      }
		      temp = temp[k];
		    }
		  });
		};

		/**
		 *
		 * @param {Object} obj : source object
		 * @param {Function} callback : a function that will be called when
		 *                   - the deepest key in source object is reached
		 *                   - the value of the deepest key is NOT `undefined` | `null`
		 *
		 * @example
		 * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)
		 * // ['palette', 'primary', 'main'] '#000000'
		 */
		cssVarsParser.assignNestedKeys = assignNestedKeys;
		const walkObjectDeep = (obj, callback, shouldSkipPaths) => {
		  function recurse(object, parentKeys = [], arrayKeys = []) {
		    Object.entries(object).forEach(([key, value]) => {
		      if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
		        if (value !== undefined && value !== null) {
		          if (typeof value === 'object' && Object.keys(value).length > 0) {
		            recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
		          } else {
		            callback([...parentKeys, key], value, arrayKeys);
		          }
		        }
		      }
		    });
		  }
		  recurse(obj);
		};
		cssVarsParser.walkObjectDeep = walkObjectDeep;
		const getCssValue = (keys, value) => {
		  if (typeof value === 'number') {
		    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(prop => keys.includes(prop))) {
		      // CSS property that are unitless
		      return value;
		    }
		    const lastKey = keys[keys.length - 1];
		    if (lastKey.toLowerCase().indexOf('opacity') >= 0) {
		      // opacity values are unitless
		      return value;
		    }
		    return `${value}px`;
		  }
		  return value;
		};

		/**
		 * a function that parse theme and return { css, vars }
		 *
		 * @param {Object} theme
		 * @param {{
		 *  prefix?: string,
		 *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean
		 * }} options.
		 *  `prefix`: The prefix of the generated CSS variables. This function does not change the value.
		 *
		 * @returns {{ css: Object, vars: Object }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme).
		 *
		 * @example
		 * const { css, vars } = parser({
		 *   fontSize: 12,
		 *   lineHeight: 1.2,
		 *   palette: { primary: { 500: 'var(--color)' } }
		 * }, { prefix: 'foo' })
		 *
		 * console.log(css) // { '--foo-fontSize': '12px', '--foo-lineHeight': 1.2, '--foo-palette-primary-500': 'var(--color)' }
		 * console.log(vars) // { fontSize: 'var(--foo-fontSize)', lineHeight: 'var(--foo-lineHeight)', palette: { primary: { 500: 'var(--foo-palette-primary-500)' } } }
		 */
		function cssVarsParser$1(theme, options) {
		  const {
		    prefix,
		    shouldSkipGeneratingVar
		  } = options || {};
		  const css = {};
		  const vars = {};
		  walkObjectDeep(theme, (keys, value, arrayKeys) => {
		    if (typeof value === 'string' || typeof value === 'number') {
		      if (!shouldSkipGeneratingVar || !shouldSkipGeneratingVar(keys, value)) {
		        // only create css & var if `shouldSkipGeneratingVar` return false
		        const cssVar = `--${prefix ? `${prefix}-` : ''}${keys.join('-')}`;
		        Object.assign(css, {
		          [cssVar]: getCssValue(keys, value)
		        });
		        assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);
		      }
		    }
		  }, keys => keys[0] === 'vars' // skip 'vars/*' paths
		  );

		  return {
		    css,
		    vars
		  };
		}
		return cssVarsParser;
	}

	var getInitColorSchemeScript = {};

	var hasRequiredGetInitColorSchemeScript;

	function requireGetInitColorSchemeScript () {
		if (hasRequiredGetInitColorSchemeScript) return getInitColorSchemeScript;
		hasRequiredGetInitColorSchemeScript = 1;

		Object.defineProperty(getInitColorSchemeScript, "__esModule", {
		  value: true
		});
		getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY = getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY = getInitColorSchemeScript.DEFAULT_ATTRIBUTE = void 0;
		getInitColorSchemeScript.default = getInitColorSchemeScript$1;
		_interopRequireWildcard(require$$3);
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const DEFAULT_MODE_STORAGE_KEY = 'mode';
		getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY = DEFAULT_MODE_STORAGE_KEY;
		const DEFAULT_COLOR_SCHEME_STORAGE_KEY = 'color-scheme';
		getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY = DEFAULT_COLOR_SCHEME_STORAGE_KEY;
		const DEFAULT_ATTRIBUTE = 'data-color-scheme';
		getInitColorSchemeScript.DEFAULT_ATTRIBUTE = DEFAULT_ATTRIBUTE;
		function getInitColorSchemeScript$1(options) {
		  const {
		    defaultMode = 'light',
		    defaultLightColorScheme = 'light',
		    defaultDarkColorScheme = 'dark',
		    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
		    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
		    attribute = DEFAULT_ATTRIBUTE,
		    colorSchemeNode = 'document.documentElement'
		  } = options || {};
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)("script", {
		    // eslint-disable-next-line react/no-danger
		    dangerouslySetInnerHTML: {
		      __html: `(function() { try {
        var mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';
        var cssColorScheme = mode;
        var colorScheme = '';
        if (mode === 'system') {
          // handle system mode
          var mql = window.matchMedia('(prefers-color-scheme: dark)');
          if (mql.matches) {
            cssColorScheme = 'dark';
            colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
          } else {
            cssColorScheme = 'light';
            colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
          }
        }
        if (mode === 'light') {
          colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
        }
        if (mode === 'dark') {
          colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
        }
        if (colorScheme) {
          ${colorSchemeNode}.setAttribute('${attribute}', colorScheme);
        }
      } catch (e) {} })();`
		    }
		  }, "mui-color-scheme-init");
		}
		return getInitColorSchemeScript;
	}

	var useCurrentColorScheme = {};

	var hasRequiredUseCurrentColorScheme;

	function requireUseCurrentColorScheme () {
		if (hasRequiredUseCurrentColorScheme) return useCurrentColorScheme;
		hasRequiredUseCurrentColorScheme = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useCurrentColorScheme, "__esModule", {
		  value: true
		});
		useCurrentColorScheme.default = useCurrentColorScheme$1;
		useCurrentColorScheme.getColorScheme = getColorScheme;
		useCurrentColorScheme.getSystemMode = getSystemMode;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _getInitColorSchemeScript = requireGetInitColorSchemeScript();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function getSystemMode(mode) {
		  if (typeof window !== 'undefined' && mode === 'system') {
		    const mql = window.matchMedia('(prefers-color-scheme: dark)');
		    if (mql.matches) {
		      return 'dark';
		    }
		    return 'light';
		  }
		  return undefined;
		}
		function processState(state, callback) {
		  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {
		    return callback('light');
		  }
		  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {
		    return callback('dark');
		  }
		  return undefined;
		}
		function getColorScheme(state) {
		  return processState(state, mode => {
		    if (mode === 'light') {
		      return state.lightColorScheme;
		    }
		    if (mode === 'dark') {
		      return state.darkColorScheme;
		    }
		    return undefined;
		  });
		}
		function initializeValue(key, defaultValue) {
		  if (typeof window === 'undefined') {
		    return undefined;
		  }
		  let value;
		  try {
		    value = localStorage.getItem(key) || undefined;
		    if (!value) {
		      // the first time that user enters the site.
		      localStorage.setItem(key, defaultValue);
		    }
		  } catch (e) {
		    // Unsupported
		  }
		  return value || defaultValue;
		}
		function useCurrentColorScheme$1(options) {
		  const {
		    defaultMode = 'light',
		    defaultLightColorScheme,
		    defaultDarkColorScheme,
		    supportedColorSchemes = [],
		    modeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
		    colorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,
		    storageWindow = typeof window === 'undefined' ? undefined : window
		  } = options;
		  const joinedColorSchemes = supportedColorSchemes.join(',');
		  const [state, setState] = React.useState(() => {
		    const initialMode = initializeValue(modeStorageKey, defaultMode);
		    const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
		    const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
		    return {
		      mode: initialMode,
		      systemMode: getSystemMode(initialMode),
		      lightColorScheme,
		      darkColorScheme
		    };
		  });
		  const colorScheme = getColorScheme(state);
		  const setMode = React.useCallback(mode => {
		    setState(currentState => {
		      if (mode === currentState.mode) {
		        // do nothing if mode does not change
		        return currentState;
		      }
		      const newMode = !mode ? defaultMode : mode;
		      try {
		        localStorage.setItem(modeStorageKey, newMode);
		      } catch (e) {
		        // Unsupported
		      }
		      return (0, _extends2.default)({}, currentState, {
		        mode: newMode,
		        systemMode: getSystemMode(newMode)
		      });
		    });
		  }, [modeStorageKey, defaultMode]);
		  const setColorScheme = React.useCallback(value => {
		    if (!value) {
		      setState(currentState => {
		        try {
		          localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
		          localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
		        } catch (e) {
		          // Unsupported
		        }
		        return (0, _extends2.default)({}, currentState, {
		          lightColorScheme: defaultLightColorScheme,
		          darkColorScheme: defaultDarkColorScheme
		        });
		      });
		    } else if (typeof value === 'string') {
		      if (value && !joinedColorSchemes.includes(value)) {
		        console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
		      } else {
		        setState(currentState => {
		          const newState = (0, _extends2.default)({}, currentState);
		          processState(currentState, mode => {
		            try {
		              localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);
		            } catch (e) {
		              // Unsupported
		            }
		            if (mode === 'light') {
		              newState.lightColorScheme = value;
		            }
		            if (mode === 'dark') {
		              newState.darkColorScheme = value;
		            }
		          });
		          return newState;
		        });
		      }
		    } else {
		      setState(currentState => {
		        const newState = (0, _extends2.default)({}, currentState);
		        const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
		        const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
		        if (newLightColorScheme) {
		          if (!joinedColorSchemes.includes(newLightColorScheme)) {
		            console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
		          } else {
		            newState.lightColorScheme = newLightColorScheme;
		            try {
		              localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);
		            } catch (error) {
		              // Unsupported
		            }
		          }
		        }
		        if (newDarkColorScheme) {
		          if (!joinedColorSchemes.includes(newDarkColorScheme)) {
		            console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
		          } else {
		            newState.darkColorScheme = newDarkColorScheme;
		            try {
		              localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);
		            } catch (error) {
		              // Unsupported
		            }
		          }
		        }
		        return newState;
		      });
		    }
		  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);
		  const handleMediaQuery = React.useCallback(e => {
		    if (state.mode === 'system') {
		      setState(currentState => (0, _extends2.default)({}, currentState, {
		        systemMode: e != null && e.matches ? 'dark' : 'light'
		      }));
		    }
		  }, [state.mode]);

		  // Ref hack to avoid adding handleMediaQuery as a dep
		  const mediaListener = React.useRef(handleMediaQuery);
		  mediaListener.current = handleMediaQuery;
		  React.useEffect(() => {
		    const handler = (...args) => mediaListener.current(...args);

		    // Always listen to System preference
		    const media = window.matchMedia('(prefers-color-scheme: dark)');

		    // Intentionally use deprecated listener methods to support iOS & old browsers
		    media.addListener(handler);
		    handler(media);
		    return () => media.removeListener(handler);
		  }, []);

		  // Handle when localStorage has changed
		  React.useEffect(() => {
		    const handleStorage = event => {
		      const value = event.newValue;
		      if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {
		        // If the key is deleted, value will be null then reset color scheme to the default one.
		        if (event.key.endsWith('light')) {
		          setColorScheme({
		            light: value
		          });
		        }
		        if (event.key.endsWith('dark')) {
		          setColorScheme({
		            dark: value
		          });
		        }
		      }
		      if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {
		        setMode(value || defaultMode);
		      }
		    };
		    if (storageWindow) {
		      // For syncing color-scheme changes between iframes
		      storageWindow.addEventListener('storage', handleStorage);
		      return () => storageWindow.removeEventListener('storage', handleStorage);
		    }
		    return undefined;
		  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);
		  return (0, _extends2.default)({}, state, {
		    colorScheme,
		    setMode,
		    setColorScheme
		  });
		}
		return useCurrentColorScheme;
	}

	var hasRequiredCreateCssVarsProvider;

	function requireCreateCssVarsProvider () {
		if (hasRequiredCreateCssVarsProvider) return createCssVarsProvider;
		hasRequiredCreateCssVarsProvider = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createCssVarsProvider, "__esModule", {
		  value: true
		});
		createCssVarsProvider.DISABLE_CSS_TRANSITION = void 0;
		createCssVarsProvider.default = createCssVarsProvider$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _utils = requireUtils$4();
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _styledEngine = requireNode$1();
		var _privateTheming = requireNode();
		var _cssVarsParser = _interopRequireDefault(requireCssVarsParser());
		var _ThemeProvider = _interopRequireDefault(requireThemeProvider$1());
		var _getInitColorSchemeScript = _interopRequireWildcard(requireGetInitColorSchemeScript());
		var _useCurrentColorScheme = _interopRequireDefault(requireUseCurrentColorScheme());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["colorSchemes", "components", "cssVarPrefix"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';
		createCssVarsProvider.DISABLE_CSS_TRANSITION = DISABLE_CSS_TRANSITION;
		function createCssVarsProvider$1(options) {
		  const {
		    theme: defaultTheme = {},
		    attribute: defaultAttribute = _getInitColorSchemeScript.DEFAULT_ATTRIBUTE,
		    modeStorageKey: defaultModeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
		    colorSchemeStorageKey: defaultColorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,
		    defaultMode: designSystemMode = 'light',
		    defaultColorScheme: designSystemColorScheme,
		    disableTransitionOnChange: designSystemTransitionOnChange = false,
		    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,
		    resolveTheme,
		    excludeVariablesFromRoot
		  } = options;
		  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {
		    console.error(`MUI: \`${designSystemColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
		  }
		  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);
		  const useColorScheme = () => {
		    const value = React.useContext(ColorSchemeContext);
		    if (!value) {
		      throw new Error(`MUI: \`useColorScheme\` must be called under <CssVarsProvider />` );
		    }
		    return value;
		  };
		  function CssVarsProvider({
		    children,
		    theme: themeProp = defaultTheme,
		    modeStorageKey = defaultModeStorageKey,
		    colorSchemeStorageKey = defaultColorSchemeStorageKey,
		    attribute = defaultAttribute,
		    defaultMode = designSystemMode,
		    defaultColorScheme = designSystemColorScheme,
		    disableTransitionOnChange = designSystemTransitionOnChange,
		    storageWindow = typeof window === 'undefined' ? undefined : window,
		    documentNode = typeof document === 'undefined' ? undefined : document,
		    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,
		    colorSchemeSelector = ':root',
		    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar,
		    disableNestedContext = false,
		    disableStyleSheetGeneration = false
		  }) {
		    const hasMounted = React.useRef(false);
		    const upperTheme = (0, _privateTheming.useTheme)();
		    const ctx = React.useContext(ColorSchemeContext);
		    const nested = !!ctx && !disableNestedContext;
		    const {
		        colorSchemes = {},
		        components = {},
		        cssVarPrefix
		      } = themeProp,
		      restThemeProp = (0, _objectWithoutPropertiesLoose2.default)(themeProp, _excluded);
		    const allColorSchemes = Object.keys(colorSchemes);
		    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;
		    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;

		    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.
		    const {
		      mode: stateMode,
		      setMode,
		      systemMode,
		      lightColorScheme,
		      darkColorScheme,
		      colorScheme: stateColorScheme,
		      setColorScheme
		    } = (0, _useCurrentColorScheme.default)({
		      supportedColorSchemes: allColorSchemes,
		      defaultLightColorScheme,
		      defaultDarkColorScheme,
		      modeStorageKey,
		      colorSchemeStorageKey,
		      defaultMode,
		      storageWindow
		    });
		    let mode = stateMode;
		    let colorScheme = stateColorScheme;
		    if (nested) {
		      mode = ctx.mode;
		      colorScheme = ctx.colorScheme;
		    }
		    const calculatedMode = (() => {
		      if (!mode) {
		        // This scope occurs on the server
		        if (defaultMode === 'system') {
		          return designSystemMode;
		        }
		        return defaultMode;
		      }
		      return mode;
		    })();
		    const calculatedColorScheme = (() => {
		      if (!colorScheme) {
		        // This scope occurs on the server
		        if (calculatedMode === 'dark') {
		          return defaultDarkColorScheme;
		        }
		        // use light color scheme, if default mode is 'light' | 'system'
		        return defaultLightColorScheme;
		      }
		      return colorScheme;
		    })();

		    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)
		    const {
		      css: rootCss,
		      vars: rootVars
		    } = (0, _cssVarsParser.default)(restThemeProp, {
		      prefix: cssVarPrefix,
		      shouldSkipGeneratingVar
		    });

		    // 3. Start composing the theme object
		    const theme = (0, _extends2.default)({}, restThemeProp, {
		      components,
		      colorSchemes,
		      cssVarPrefix,
		      vars: rootVars,
		      getColorSchemeSelector: targetColorScheme => `[${attribute}="${targetColorScheme}"] &`
		    });

		    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)
		    //    The default color scheme stylesheet is constructed to have the least CSS specificity.
		    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.
		    const defaultColorSchemeStyleSheet = {};
		    const otherColorSchemesStyleSheet = {};
		    Object.entries(colorSchemes).forEach(([key, scheme]) => {
		      const {
		        css,
		        vars
		      } = (0, _cssVarsParser.default)(scheme, {
		        prefix: cssVarPrefix,
		        shouldSkipGeneratingVar
		      });
		      theme.vars = (0, _utils.deepmerge)(theme.vars, vars);
		      if (key === calculatedColorScheme) {
		        // 4.1 Merge the selected color scheme to the theme
		        Object.keys(scheme).forEach(schemeKey => {
		          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {
		            // shallow merge the 1st level structure of the theme.
		            theme[schemeKey] = (0, _extends2.default)({}, theme[schemeKey], scheme[schemeKey]);
		          } else {
		            theme[schemeKey] = scheme[schemeKey];
		          }
		        });
		        if (theme.palette) {
		          theme.palette.colorScheme = key;
		        }
		      }
		      const resolvedDefaultColorScheme = (() => {
		        if (typeof defaultColorScheme === 'string') {
		          return defaultColorScheme;
		        }
		        if (defaultMode === 'dark') {
		          return defaultColorScheme.dark;
		        }
		        return defaultColorScheme.light;
		      })();
		      if (key === resolvedDefaultColorScheme) {
		        if (excludeVariablesFromRoot) {
		          const excludedVariables = {};
		          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {
		            excludedVariables[cssVar] = css[cssVar];
		            delete css[cssVar];
		          });
		          defaultColorSchemeStyleSheet[`[${attribute}="${key}"]`] = excludedVariables;
		        }
		        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}="${key}"]`] = css;
		      } else {
		        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}="${key}"]`] = css;
		      }
		    });

		    // 5. Declaring effects
		    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.
		    React.useEffect(() => {
		      if (colorScheme && colorSchemeNode) {
		        // attaches attribute to <html> because the css variables are attached to :root (html)
		        colorSchemeNode.setAttribute(attribute, colorScheme);
		      }
		    }, [colorScheme, attribute, colorSchemeNode]);

		    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.
		    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313
		    React.useEffect(() => {
		      let timer;
		      if (disableTransitionOnChange && hasMounted.current && documentNode) {
		        const css = documentNode.createElement('style');
		        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
		        documentNode.head.appendChild(css);

		        // Force browser repaint
		        (() => window.getComputedStyle(documentNode.body))();
		        timer = setTimeout(() => {
		          documentNode.head.removeChild(css);
		        }, 1);
		      }
		      return () => {
		        clearTimeout(timer);
		      };
		    }, [colorScheme, disableTransitionOnChange, documentNode]);
		    React.useEffect(() => {
		      hasMounted.current = true;
		      return () => {
		        hasMounted.current = false;
		      };
		    }, []);
		    const contextValue = React.useMemo(() => ({
		      mode,
		      systemMode,
		      setMode,
		      lightColorScheme,
		      darkColorScheme,
		      colorScheme,
		      setColorScheme,
		      allColorSchemes
		    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);
		    let shouldGenerateStyleSheet = true;
		    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {
		      shouldGenerateStyleSheet = false;
		    }
		    const element = /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
		      children: [shouldGenerateStyleSheet && /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
		        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
		          styles: {
		            [colorSchemeSelector]: rootCss
		          }
		        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
		          styles: defaultColorSchemeStyleSheet
		        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
		          styles: otherColorSchemesStyleSheet
		        })]
		      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_ThemeProvider.default, {
		        theme: resolveTheme ? resolveTheme(theme) : theme,
		        children: children
		      })]
		    });
		    if (nested) {
		      return element;
		    }
		    return /*#__PURE__*/(0, _jsxRuntime.jsx)(ColorSchemeContext.Provider, {
		      value: contextValue,
		      children: element
		    });
		  }
		  CssVarsProvider.propTypes = {
		    /**
		     * The body attribute name to attach colorScheme.
		     */
		    attribute: _propTypes.default.string,
		    /**
		     * The component tree.
		     */
		    children: _propTypes.default.node,
		    /**
		     * The node used to attach the color-scheme attribute
		     */
		    colorSchemeNode: _propTypes.default.any,
		    /**
		     * The CSS selector for attaching the generated custom properties
		     */
		    colorSchemeSelector: _propTypes.default.string,
		    /**
		     * localStorage key used to store `colorScheme`
		     */
		    colorSchemeStorageKey: _propTypes.default.string,
		    /**
		     * The initial color scheme used.
		     */
		    defaultColorScheme: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
		    /**
		     * The initial mode used.
		     */
		    defaultMode: _propTypes.default.string,
		    /**
		     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.
		     */
		    disableNestedContext: _propTypes.default.bool,
		    /**
		     * If `true`, the style sheet won't be generated.
		     *
		     * This is useful for controlling nested CssVarsProvider behavior.
		     */
		    disableStyleSheetGeneration: _propTypes.default.bool,
		    /**
		     * Disable CSS transitions when switching between modes or color schemes
		     */
		    disableTransitionOnChange: _propTypes.default.bool,
		    /**
		     * The document to attach the attribute to
		     */
		    documentNode: _propTypes.default.any,
		    /**
		     * The key in the local storage used to store current color scheme.
		     */
		    modeStorageKey: _propTypes.default.string,
		    /**
		     * A function to determine if the key, value should be attached as CSS Variable
		     */
		    shouldSkipGeneratingVar: _propTypes.default.func,
		    /**
		     * The window that attaches the 'storage' event listener
		     * @default window
		     */
		    storageWindow: _propTypes.default.any,
		    /**
		     * The calculated theme object that will be passed through context.
		     */
		    theme: _propTypes.default.object
		  } ;
		  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;
		  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;
		  const getInitColorSchemeScript = params => (0, _getInitColorSchemeScript.default)((0, _extends2.default)({
		    attribute: defaultAttribute,
		    colorSchemeStorageKey: defaultColorSchemeStorageKey,
		    defaultMode: designSystemMode,
		    defaultLightColorScheme,
		    defaultDarkColorScheme,
		    modeStorageKey: defaultModeStorageKey
		  }, params));
		  return {
		    CssVarsProvider,
		    useColorScheme,
		    getInitColorSchemeScript
		  };
		}
		return createCssVarsProvider;
	}

	var createGetCssVar = {};

	var hasRequiredCreateGetCssVar;

	function requireCreateGetCssVar () {
		if (hasRequiredCreateGetCssVar) return createGetCssVar;
		hasRequiredCreateGetCssVar = 1;

		Object.defineProperty(createGetCssVar, "__esModule", {
		  value: true
		});
		createGetCssVar.default = createGetCssVar$1;
		/**
		 * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable
		 * and they does not need to remember the prefix (defined once).
		 */
		function createGetCssVar$1(prefix = '') {
		  function appendVar(...vars) {
		    if (!vars.length) {
		      return '';
		    }
		    const value = vars[0];
		    if (typeof value === 'string' && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {
		      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;
		    }
		    return `, ${value}`;
		  }

		  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.
		  const getCssVar = (field, ...fallbacks) => {
		    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;
		  };
		  return getCssVar;
		}
		return createGetCssVar;
	}

	var createContainer = {};

	var hasRequiredCreateContainer;

	function requireCreateContainer () {
		if (hasRequiredCreateContainer) return createContainer;
		hasRequiredCreateContainer = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createContainer, "__esModule", {
		  value: true
		});
		createContainer.default = createContainer$1;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _utils = requireUtils$4();
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps$1());
		var _styled = _interopRequireDefault(requireStyled$1());
		var _createTheme = _interopRequireDefault(requireCreateTheme$1());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className", "component", "disableGutters", "fixed", "maxWidth", "classes"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const defaultTheme = (0, _createTheme.default)();
		const defaultCreateStyledComponent = (0, _styled.default)('div', {
		  name: 'MuiContainer',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, styles[`maxWidth${(0, _utils.unstable_capitalize)(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];
		  }
		});
		const useThemePropsDefault = inProps => (0, _useThemeProps.default)({
		  props: inProps,
		  name: 'MuiContainer',
		  defaultTheme
		});
		const useUtilityClasses = (ownerState, componentName) => {
		  const getContainerUtilityClass = slot => {
		    return (0, _utils.unstable_generateUtilityClass)(componentName, slot);
		  };
		  const {
		    classes,
		    fixed,
		    disableGutters,
		    maxWidth
		  } = ownerState;
		  const slots = {
		    root: ['root', maxWidth && `maxWidth${(0, _utils.unstable_capitalize)(String(maxWidth))}`, fixed && 'fixed', disableGutters && 'disableGutters']
		  };
		  return (0, _utils.unstable_composeClasses)(slots, getContainerUtilityClass, classes);
		};
		function createContainer$1(options = {}) {
		  const {
		    // This will allow adding custom styled fn (for example for custom sx style function)
		    createStyledComponent = defaultCreateStyledComponent,
		    useThemeProps = useThemePropsDefault,
		    componentName = 'MuiContainer'
		  } = options;
		  const ContainerRoot = createStyledComponent(({
		    theme,
		    ownerState
		  }) => (0, _extends2.default)({
		    width: '100%',
		    marginLeft: 'auto',
		    boxSizing: 'border-box',
		    marginRight: 'auto',
		    display: 'block'
		  }, !ownerState.disableGutters && {
		    paddingLeft: theme.spacing(2),
		    paddingRight: theme.spacing(2),
		    // @ts-ignore module augmentation fails if custom breakpoints are used
		    [theme.breakpoints.up('sm')]: {
		      paddingLeft: theme.spacing(3),
		      paddingRight: theme.spacing(3)
		    }
		  }), ({
		    theme,
		    ownerState
		  }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {
		    const breakpoint = breakpointValueKey;
		    const value = theme.breakpoints.values[breakpoint];
		    if (value !== 0) {
		      // @ts-ignore
		      acc[theme.breakpoints.up(breakpoint)] = {
		        maxWidth: `${value}${theme.breakpoints.unit}`
		      };
		    }
		    return acc;
		  }, {}), ({
		    theme,
		    ownerState
		  }) => (0, _extends2.default)({}, ownerState.maxWidth === 'xs' && {
		    // @ts-ignore module augmentation fails if custom breakpoints are used
		    [theme.breakpoints.up('xs')]: {
		      // @ts-ignore module augmentation fails if custom breakpoints are used
		      maxWidth: Math.max(theme.breakpoints.values.xs, 444)
		    }
		  }, ownerState.maxWidth &&
		  // @ts-ignore module augmentation fails if custom breakpoints are used
		  ownerState.maxWidth !== 'xs' && {
		    // @ts-ignore module augmentation fails if custom breakpoints are used
		    [theme.breakpoints.up(ownerState.maxWidth)]: {
		      // @ts-ignore module augmentation fails if custom breakpoints are used
		      maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`
		    }
		  }));
		  const Container = /*#__PURE__*/React.forwardRef(function Container(inProps, ref) {
		    const props = useThemeProps(inProps);
		    const {
		        className,
		        component = 'div',
		        disableGutters = false,
		        fixed = false,
		        maxWidth = 'lg'
		      } = props,
		      other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		    const ownerState = (0, _extends2.default)({}, props, {
		      component,
		      disableGutters,
		      fixed,
		      maxWidth
		    });

		    // @ts-ignore module augmentation fails if custom breakpoints are used
		    const classes = useUtilityClasses(ownerState, componentName);
		    return (
		      /*#__PURE__*/
		      // @ts-ignore theme is injected by the styled util
		      (0, _jsxRuntime.jsx)(ContainerRoot, (0, _extends2.default)({
		        as: component
		        // @ts-ignore module augmentation fails if custom breakpoints are used
		        ,
		        ownerState: ownerState,
		        className: (0, _clsx.default)(classes.root, className),
		        ref: ref
		      }, other))
		    );
		  });
		  Container.propTypes /* remove-proptypes */ = {
		    children: _propTypes.default.node,
		    classes: _propTypes.default.object,
		    className: _propTypes.default.string,
		    component: _propTypes.default.elementType,
		    disableGutters: _propTypes.default.bool,
		    fixed: _propTypes.default.bool,
		    maxWidth: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), _propTypes.default.string]),
		    sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		  } ;
		  return Container;
		}
		return createContainer;
	}

	var Container$1 = {};

	var Container = {};

	var hasRequiredContainer$1;

	function requireContainer$1 () {
		if (hasRequiredContainer$1) return Container;
		hasRequiredContainer$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Container, "__esModule", {
		  value: true
		});
		Container.default = void 0;
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _createContainer = _interopRequireDefault(requireCreateContainer());
		/**
		 *
		 * Demos:
		 *
		 * - [Container (Material UI)](https://mui.com/material-ui/react-container/)
		 * - [Container (MUI System)](https://mui.com/system/react-container/)
		 *
		 * API:
		 *
		 * - [Container API](https://mui.com/system/api/container/)
		 */
		const Container$1 = (0, _createContainer.default)();
		Container$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * @ignore
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the left and right padding is removed.
		   * @default false
		   */
		  disableGutters: _propTypes.default.bool,
		  /**
		   * Set the max-width to match the min-width of the current breakpoint.
		   * This is useful if you'd prefer to design for a fixed set of sizes
		   * instead of trying to accommodate a fully fluid viewport.
		   * It's fluid by default.
		   * @default false
		   */
		  fixed: _propTypes.default.bool,
		  /**
		   * Determine the max-width of the container.
		   * The container width grows with the size of the screen.
		   * Set to `false` to disable `maxWidth`.
		   * @default 'lg'
		   */
		  maxWidth: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), _propTypes.default.string]),
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = Container$1;
		Container.default = _default;
		return Container;
	}

	var containerClasses = {};

	var hasRequiredContainerClasses;

	function requireContainerClasses () {
		if (hasRequiredContainerClasses) return containerClasses;
		hasRequiredContainerClasses = 1;

		Object.defineProperty(containerClasses, "__esModule", {
		  value: true
		});
		containerClasses.default = void 0;
		containerClasses.getContainerUtilityClass = getContainerUtilityClass;
		var _utils = requireUtils$4();
		function getContainerUtilityClass(slot) {
		  return (0, _utils.unstable_generateUtilityClass)('MuiContainer', slot);
		}
		const containerClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiContainer', ['root', 'disableGutters', 'fixed', 'maxWidthXs', 'maxWidthSm', 'maxWidthMd', 'maxWidthLg', 'maxWidthXl']);
		var _default = containerClasses$1;
		containerClasses.default = _default;
		return containerClasses;
	}

	var hasRequiredContainer;

	function requireContainer () {
		if (hasRequiredContainer) return Container$1;
		hasRequiredContainer = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  containerClasses: true
			};
			Object.defineProperty(exports, "containerClasses", {
			  enumerable: true,
			  get: function () {
			    return _containerClasses.default;
			  }
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _Container.default;
			  }
			});
			var _Container = _interopRequireDefault(requireContainer$1());
			var _containerClasses = _interopRequireWildcard(requireContainerClasses());
			Object.keys(_containerClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _containerClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _containerClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Container$1));
		return Container$1;
	}

	var Grid$3 = {};

	var createGrid = {};

	var gridGenerator = {};

	var hasRequiredGridGenerator;

	function requireGridGenerator () {
		if (hasRequiredGridGenerator) return gridGenerator;
		hasRequiredGridGenerator = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(gridGenerator, "__esModule", {
		  value: true
		});
		gridGenerator.traverseBreakpoints = gridGenerator.generateSpacingClassNames = gridGenerator.generateSizeClassNames = gridGenerator.generateGridStyles = gridGenerator.generateGridSizeStyles = gridGenerator.generateGridRowSpacingStyles = gridGenerator.generateGridOffsetStyles = gridGenerator.generateGridDirectionStyles = gridGenerator.generateGridColumnsStyles = gridGenerator.generateGridColumnSpacingStyles = gridGenerator.generateDirectionClasses = gridGenerator.filterBreakpointKeys = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		const filterBreakpointKeys = (breakpointsKeys, responsiveKeys) => breakpointsKeys.filter(key => responsiveKeys.includes(key));
		gridGenerator.filterBreakpointKeys = filterBreakpointKeys;
		const traverseBreakpoints = (breakpoints, responsive, iterator) => {
		  const smallestBreakpoint = breakpoints.keys[0]; // the keys is sorted from smallest to largest by `createBreakpoints`.

		  if (Array.isArray(responsive)) {
		    responsive.forEach((breakpointValue, index) => {
		      iterator((responsiveStyles, style) => {
		        if (index <= breakpoints.keys.length - 1) {
		          if (index === 0) {
		            Object.assign(responsiveStyles, style);
		          } else {
		            responsiveStyles[breakpoints.up(breakpoints.keys[index])] = style;
		          }
		        }
		      }, breakpointValue);
		    });
		  } else if (responsive && typeof responsive === 'object') {
		    // prevent null
		    // responsive could be a very big object, pick the smallest responsive values

		    const keys = Object.keys(responsive).length > breakpoints.keys.length ? breakpoints.keys : filterBreakpointKeys(breakpoints.keys, Object.keys(responsive));
		    keys.forEach(key => {
		      if (breakpoints.keys.indexOf(key) !== -1) {
		        // @ts-ignore already checked that responsive is an object
		        const breakpointValue = responsive[key];
		        if (breakpointValue !== undefined) {
		          iterator((responsiveStyles, style) => {
		            if (smallestBreakpoint === key) {
		              Object.assign(responsiveStyles, style);
		            } else {
		              responsiveStyles[breakpoints.up(key)] = style;
		            }
		          }, breakpointValue);
		        }
		      }
		    });
		  } else if (typeof responsive === 'number' || typeof responsive === 'string') {
		    iterator((responsiveStyles, style) => {
		      Object.assign(responsiveStyles, style);
		    }, responsive);
		  }
		};
		gridGenerator.traverseBreakpoints = traverseBreakpoints;
		const generateGridSizeStyles = ({
		  theme,
		  ownerState
		}) => {
		  const styles = {};
		  traverseBreakpoints(theme.breakpoints, ownerState.gridSize, (appendStyle, value) => {
		    let style = {};
		    if (value === true) {
		      style = {
		        flexBasis: 0,
		        flexGrow: 1,
		        maxWidth: '100%'
		      };
		    }
		    if (value === 'auto') {
		      style = {
		        flexBasis: 'auto',
		        flexGrow: 0,
		        flexShrink: 0,
		        maxWidth: 'none',
		        width: 'auto'
		      };
		    }
		    if (typeof value === 'number') {
		      style = {
		        flexGrow: 0,
		        flexBasis: 'auto',
		        width: `calc(100% * ${value} / var(--Grid-columns)${ownerState.nested && ownerState.container ? ` + var(--Grid-columnSpacing)` : ''})`
		      };
		    }
		    appendStyle(styles, style);
		  });
		  return styles;
		};
		gridGenerator.generateGridSizeStyles = generateGridSizeStyles;
		const generateGridOffsetStyles = ({
		  theme,
		  ownerState
		}) => {
		  const styles = {};
		  traverseBreakpoints(theme.breakpoints, ownerState.gridOffset, (appendStyle, value) => {
		    let style = {};
		    if (value === 'auto') {
		      style = {
		        marginLeft: 'auto'
		      };
		    }
		    if (typeof value === 'number') {
		      style = {
		        marginLeft: value === 0 ? '0px' : `calc(100% * ${value} / var(--Grid-columns))`
		      };
		    }
		    appendStyle(styles, style);
		  });
		  return styles;
		};
		gridGenerator.generateGridOffsetStyles = generateGridOffsetStyles;
		const generateGridColumnsStyles = ({
		  theme,
		  ownerState
		}) => {
		  if (!ownerState.container) {
		    return {};
		  }
		  const styles = {
		    '--Grid-columns': 12
		  };
		  traverseBreakpoints(theme.breakpoints, ownerState.columns, (appendStyle, value) => {
		    appendStyle(styles, {
		      '--Grid-columns': value
		    });
		  });
		  return styles;
		};
		gridGenerator.generateGridColumnsStyles = generateGridColumnsStyles;
		const generateGridRowSpacingStyles = ({
		  theme,
		  ownerState
		}) => {
		  if (!ownerState.container) {
		    return {};
		  }
		  const styles = {};
		  traverseBreakpoints(theme.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
		    var _theme$spacing;
		    appendStyle(styles, {
		      '--Grid-rowSpacing': typeof value === 'string' ? value : (_theme$spacing = theme.spacing) == null ? void 0 : _theme$spacing.call(theme, value)
		    });
		  });
		  return styles;
		};
		gridGenerator.generateGridRowSpacingStyles = generateGridRowSpacingStyles;
		const generateGridColumnSpacingStyles = ({
		  theme,
		  ownerState
		}) => {
		  if (!ownerState.container) {
		    return {};
		  }
		  const styles = {};
		  traverseBreakpoints(theme.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
		    var _theme$spacing2;
		    appendStyle(styles, {
		      '--Grid-columnSpacing': typeof value === 'string' ? value : (_theme$spacing2 = theme.spacing) == null ? void 0 : _theme$spacing2.call(theme, value)
		    });
		  });
		  return styles;
		};
		gridGenerator.generateGridColumnSpacingStyles = generateGridColumnSpacingStyles;
		const generateGridDirectionStyles = ({
		  theme,
		  ownerState
		}) => {
		  if (!ownerState.container) {
		    return {};
		  }
		  const styles = {};
		  traverseBreakpoints(theme.breakpoints, ownerState.direction, (appendStyle, value) => {
		    appendStyle(styles, {
		      flexDirection: value
		    });
		  });
		  return styles;
		};
		gridGenerator.generateGridDirectionStyles = generateGridDirectionStyles;
		const generateGridStyles = ({
		  ownerState
		}) => {
		  return (0, _extends2.default)({
		    minWidth: 0,
		    boxSizing: 'border-box'
		  }, ownerState.container ? (0, _extends2.default)({
		    display: 'flex',
		    flexWrap: 'wrap'
		  }, ownerState.wrap && ownerState.wrap !== 'wrap' && {
		    flexWrap: ownerState.wrap
		  }, {
		    margin: `calc(var(--Grid-rowSpacing) / -2) calc(var(--Grid-columnSpacing) / -2)`
		  }, ownerState.disableEqualOverflow && {
		    margin: `calc(var(--Grid-rowSpacing) * -1) 0px 0px calc(var(--Grid-columnSpacing) * -1)`
		  }, ownerState.nested ? (0, _extends2.default)({
		    padding: `calc(var(--Grid-nested-rowSpacing) / 2) calc(var(--Grid-nested-columnSpacing) / 2)`
		  }, (ownerState.disableEqualOverflow || ownerState.parentDisableEqualOverflow) && {
		    padding: `calc(var(--Grid-nested-rowSpacing)) 0px 0px calc(var(--Grid-nested-columnSpacing))`
		  }) : {
		    '--Grid-nested-rowSpacing': 'var(--Grid-rowSpacing)',
		    '--Grid-nested-columnSpacing': 'var(--Grid-columnSpacing)'
		  }) : (0, _extends2.default)({
		    padding: `calc(var(--Grid-rowSpacing) / 2) calc(var(--Grid-columnSpacing) / 2)`
		  }, ownerState.disableEqualOverflow && {
		    padding: `calc(var(--Grid-rowSpacing)) 0px 0px calc(var(--Grid-columnSpacing))`
		  }));
		};
		gridGenerator.generateGridStyles = generateGridStyles;
		const generateSizeClassNames = gridSize => {
		  const classNames = [];
		  Object.entries(gridSize).forEach(([key, value]) => {
		    if (value !== false && value !== undefined) {
		      classNames.push(`grid-${key}-${String(value)}`);
		    }
		  });
		  return classNames;
		};
		gridGenerator.generateSizeClassNames = generateSizeClassNames;
		const generateSpacingClassNames = (spacing, smallestBreakpoint = 'xs') => {
		  function isValidSpacing(val) {
		    if (val === undefined) {
		      return false;
		    }
		    return typeof val === 'string' && !Number.isNaN(Number(val)) || typeof val === 'number' && val > 0;
		  }
		  if (isValidSpacing(spacing)) {
		    return [`spacing-${smallestBreakpoint}-${String(spacing)}`];
		  }
		  if (typeof spacing === 'object' && !Array.isArray(spacing)) {
		    const classNames = [];
		    Object.entries(spacing).forEach(([key, value]) => {
		      if (isValidSpacing(value)) {
		        classNames.push(`spacing-${key}-${String(value)}`);
		      }
		    });
		    return classNames;
		  }
		  return [];
		};
		gridGenerator.generateSpacingClassNames = generateSpacingClassNames;
		const generateDirectionClasses = direction => {
		  if (direction === undefined) {
		    return [];
		  }
		  if (typeof direction === 'object') {
		    return Object.entries(direction).map(([key, value]) => `direction-${key}-${value}`);
		  }
		  return [`direction-xs-${String(direction)}`];
		};
		gridGenerator.generateDirectionClasses = generateDirectionClasses;
		return gridGenerator;
	}

	var hasRequiredCreateGrid;

	function requireCreateGrid () {
		if (hasRequiredCreateGrid) return createGrid;
		hasRequiredCreateGrid = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createGrid, "__esModule", {
		  value: true
		});
		createGrid.default = createGrid$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _utils = requireUtils$4();
		var _styled = _interopRequireDefault(requireStyled$1());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps$1());
		var _useTheme = _interopRequireDefault(requireUseTheme$1());
		var _styleFunctionSx = requireStyleFunctionSx();
		var _createTheme = _interopRequireDefault(requireCreateTheme$1());
		var _gridGenerator = requireGridGenerator();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className", "columns", "container", "component", "direction", "wrap", "spacing", "rowSpacing", "columnSpacing", "disableEqualOverflow"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const defaultTheme = (0, _createTheme.default)();

		// widening Theme to any so that the consumer can own the theme structure.
		const defaultCreateStyledComponent = (0, _styled.default)('div', {
		  name: 'MuiGrid',
		  slot: 'Root',
		  overridesResolver: (props, styles) => styles.root
		});
		function useThemePropsDefault(props) {
		  return (0, _useThemeProps.default)({
		    props,
		    name: 'MuiGrid',
		    defaultTheme
		  });
		}
		function createGrid$1(options = {}) {
		  const {
		    // This will allow adding custom styled fn (for example for custom sx style function)
		    createStyledComponent = defaultCreateStyledComponent,
		    useThemeProps = useThemePropsDefault,
		    componentName = 'MuiGrid'
		  } = options;
		  const NestedContext = /*#__PURE__*/React.createContext(false);
		  const OverflowContext = /*#__PURE__*/React.createContext(undefined);
		  const useUtilityClasses = (ownerState, theme) => {
		    const {
		      container,
		      direction,
		      spacing,
		      wrap,
		      gridSize
		    } = ownerState;
		    const slots = {
		      root: ['root', container && 'container', wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...(0, _gridGenerator.generateDirectionClasses)(direction), ...(0, _gridGenerator.generateSizeClassNames)(gridSize), ...(container ? (0, _gridGenerator.generateSpacingClassNames)(spacing, theme.breakpoints.keys[0]) : [])]
		    };
		    return (0, _utils.unstable_composeClasses)(slots, slot => (0, _utils.unstable_generateUtilityClass)(componentName, slot), {});
		  };
		  const GridRoot = createStyledComponent(_gridGenerator.generateGridColumnsStyles, _gridGenerator.generateGridColumnSpacingStyles, _gridGenerator.generateGridRowSpacingStyles, _gridGenerator.generateGridSizeStyles, _gridGenerator.generateGridDirectionStyles, _gridGenerator.generateGridStyles, _gridGenerator.generateGridOffsetStyles);
		  const Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {
		    var _inProps$columns, _inProps$spacing, _ref, _inProps$rowSpacing, _ref2, _inProps$columnSpacin, _ref3, _disableEqualOverflow;
		    const theme = (0, _useTheme.default)();
		    const themeProps = useThemeProps(inProps);
		    const props = (0, _styleFunctionSx.extendSxProp)(themeProps); // `color` type conflicts with html color attribute.
		    const nested = React.useContext(NestedContext);
		    const overflow = React.useContext(OverflowContext);
		    const {
		        className,
		        columns: columnsProp = 12,
		        container = false,
		        component = 'div',
		        direction = 'row',
		        wrap = 'wrap',
		        spacing: spacingProp = 0,
		        rowSpacing: rowSpacingProp = spacingProp,
		        columnSpacing: columnSpacingProp = spacingProp,
		        disableEqualOverflow: themeDisableEqualOverflow
		      } = props,
		      rest = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		    // Because `disableEqualOverflow` can be set from the theme's defaultProps, the **nested** grid should look at the instance props instead.
		    let disableEqualOverflow = themeDisableEqualOverflow;
		    if (nested && themeDisableEqualOverflow !== undefined) {
		      disableEqualOverflow = inProps.disableEqualOverflow;
		    }
		    // collect breakpoints related props because they can be customized from the theme.
		    const gridSize = {};
		    const gridOffset = {};
		    const other = {};
		    Object.entries(rest).forEach(([key, val]) => {
		      if (theme.breakpoints.values[key] !== undefined) {
		        gridSize[key] = val;
		      } else if (theme.breakpoints.values[key.replace('Offset', '')] !== undefined) {
		        gridOffset[key.replace('Offset', '')] = val;
		      } else {
		        other[key] = val;
		      }
		    });
		    const columns = (_inProps$columns = inProps.columns) != null ? _inProps$columns : nested ? undefined : columnsProp;
		    const spacing = (_inProps$spacing = inProps.spacing) != null ? _inProps$spacing : nested ? undefined : spacingProp;
		    const rowSpacing = (_ref = (_inProps$rowSpacing = inProps.rowSpacing) != null ? _inProps$rowSpacing : inProps.spacing) != null ? _ref : nested ? undefined : rowSpacingProp;
		    const columnSpacing = (_ref2 = (_inProps$columnSpacin = inProps.columnSpacing) != null ? _inProps$columnSpacin : inProps.spacing) != null ? _ref2 : nested ? undefined : columnSpacingProp;
		    const ownerState = (0, _extends2.default)({}, props, {
		      nested,
		      columns,
		      container,
		      direction,
		      wrap,
		      spacing,
		      rowSpacing,
		      columnSpacing,
		      gridSize,
		      gridOffset,
		      disableEqualOverflow: (_ref3 = (_disableEqualOverflow = disableEqualOverflow) != null ? _disableEqualOverflow : overflow) != null ? _ref3 : false,
		      // use context value if exists.
		      parentDisableEqualOverflow: overflow // for nested grid
		    });

		    const classes = useUtilityClasses(ownerState, theme);
		    let result = /*#__PURE__*/(0, _jsxRuntime.jsx)(GridRoot, (0, _extends2.default)({
		      ref: ref,
		      as: component,
		      ownerState: ownerState,
		      className: (0, _clsx.default)(classes.root, className)
		    }, other));
		    if (!nested) {
		      result = /*#__PURE__*/(0, _jsxRuntime.jsx)(NestedContext.Provider, {
		        value: true,
		        children: result
		      });
		    }
		    if (disableEqualOverflow !== undefined && disableEqualOverflow !== (overflow != null ? overflow : false)) {
		      // There are 2 possibilities that should wrap with the OverflowContext to communicate with the nested grids:
		      // 1. It is the root grid with `disableEqualOverflow`.
		      // 2. It is a nested grid with different `disableEqualOverflow` from the context.
		      result = /*#__PURE__*/(0, _jsxRuntime.jsx)(OverflowContext.Provider, {
		        value: disableEqualOverflow,
		        children: result
		      });
		    }
		    return result;
		  });
		  Grid.propTypes /* remove-proptypes */ = {
		    children: _propTypes.default.node,
		    className: _propTypes.default.string,
		    columns: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
		    columnSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
		    component: _propTypes.default.elementType,
		    container: _propTypes.default.bool,
		    direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), _propTypes.default.arrayOf(_propTypes.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), _propTypes.default.object]),
		    disableEqualOverflow: _propTypes.default.bool,
		    lg: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		    lgOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number]),
		    md: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		    mdOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number]),
		    rowSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
		    sm: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		    smOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number]),
		    spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
		    sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		    wrap: _propTypes.default.oneOf(['nowrap', 'wrap-reverse', 'wrap']),
		    xl: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		    xlOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number]),
		    xs: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		    xsOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number])
		  } ;
		  return Grid;
		}
		return createGrid;
	}

	var hasRequiredGrid$1;

	function requireGrid$1 () {
		if (hasRequiredGrid$1) return Grid$3;
		hasRequiredGrid$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Grid$3, "__esModule", {
		  value: true
		});
		Grid$3.default = void 0;
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _createGrid = _interopRequireDefault(requireCreateGrid());
		/**
		 *
		 * Demos:
		 *
		 * - [Grid (Material UI)](https://mui.com/material-ui/react-grid/)
		 *
		 * API:
		 *
		 * - [Grid API](https://mui.com/system/api/grid/)
		 */
		const Grid = (0, _createGrid.default)();
		Grid.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * The number of columns.
		   * @default 12
		   */
		  columns: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
		  /**
		   * Defines the horizontal space between the type `item` components.
		   * It overrides the value of the `spacing` prop.
		   */
		  columnSpacing: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
		  /**
		   * If `true`, the component will have the flex *container* behavior.
		   * You should be wrapping *items* with a *container*.
		   * @default false
		   */
		  container: _propTypes.default.bool,
		  /**
		   * Defines the `flex-direction` style property.
		   * It is applied for all screen sizes.
		   * @default 'row'
		   */
		  direction: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), _propTypes.default.arrayOf(_propTypes.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), _propTypes.default.object]),
		  /**
		   * If `true`, the negative margin and padding are apply only to the top and left sides of the grid.
		   */
		  disableEqualOverflow: _propTypes.default.bool,
		  /**
		   * If a number, it sets the number of columns the grid item uses.
		   * It can't be greater than the total number of columns of the container (12 by default).
		   * If 'auto', the grid item's width matches its content.
		   * If false, the prop is ignored.
		   * If true, the grid item's width grows to use the space available in the grid container.
		   * The value is applied for the `lg` breakpoint and wider screens if not overridden.
		   * @default false
		   */
		  lg: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		  /**
		   * If a number, it sets the margin-left equals to the number of columns the grid item uses.
		   * If 'auto', the grid item push itself to the right-end of the container.
		   * The value is applied for the `lg` breakpoint and wider screens if not overridden.
		   */
		  lgOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number]),
		  /**
		   * If a number, it sets the number of columns the grid item uses.
		   * It can't be greater than the total number of columns of the container (12 by default).
		   * If 'auto', the grid item's width matches its content.
		   * If false, the prop is ignored.
		   * If true, the grid item's width grows to use the space available in the grid container.
		   * The value is applied for the `md` breakpoint and wider screens if not overridden.
		   * @default false
		   */
		  md: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		  /**
		   * If a number, it sets the margin-left equals to the number of columns the grid item uses.
		   * If 'auto', the grid item push itself to the right-end of the container.
		   * The value is applied for the `md` breakpoint and wider screens if not overridden.
		   */
		  mdOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number]),
		  /**
		   * Defines the vertical space between the type `item` components.
		   * It overrides the value of the `spacing` prop.
		   */
		  rowSpacing: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
		  /**
		   * If a number, it sets the number of columns the grid item uses.
		   * It can't be greater than the total number of columns of the container (12 by default).
		   * If 'auto', the grid item's width matches its content.
		   * If false, the prop is ignored.
		   * If true, the grid item's width grows to use the space available in the grid container.
		   * The value is applied for the `sm` breakpoint and wider screens if not overridden.
		   * @default false
		   */
		  sm: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		  /**
		   * If a number, it sets the margin-left equals to the number of columns the grid item uses.
		   * If 'auto', the grid item push itself to the right-end of the container.
		   * The value is applied for the `sm` breakpoint and wider screens if not overridden.
		   */
		  smOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number]),
		  /**
		   * Defines the space between the type `item` components.
		   * It can only be used on a type `container` component.
		   * @default 0
		   */
		  spacing: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
		  /**
		   * @ignore
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * Defines the `flex-wrap` style property.
		   * It's applied for all screen sizes.
		   * @default 'wrap'
		   */
		  wrap: _propTypes.default.oneOf(['nowrap', 'wrap-reverse', 'wrap']),
		  /**
		   * If a number, it sets the number of columns the grid item uses.
		   * It can't be greater than the total number of columns of the container (12 by default).
		   * If 'auto', the grid item's width matches its content.
		   * If false, the prop is ignored.
		   * If true, the grid item's width grows to use the space available in the grid container.
		   * The value is applied for the `xl` breakpoint and wider screens if not overridden.
		   * @default false
		   */
		  xl: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		  /**
		   * If a number, it sets the margin-left equals to the number of columns the grid item uses.
		   * If 'auto', the grid item push itself to the right-end of the container.
		   * The value is applied for the `xl` breakpoint and wider screens if not overridden.
		   */
		  xlOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number]),
		  /**
		   * If a number, it sets the number of columns the grid item uses.
		   * It can't be greater than the total number of columns of the container (12 by default).
		   * If 'auto', the grid item's width matches its content.
		   * If false, the prop is ignored.
		   * If true, the grid item's width grows to use the space available in the grid container.
		   * The value is applied for all the screen sizes with the lowest priority.
		   * @default false
		   */
		  xs: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		  /**
		   * If a number, it sets the margin-left equals to the number of columns the grid item uses.
		   * If 'auto', the grid item push itself to the right-end of the container.
		   * The value is applied for the `xs` breakpoint and wider screens if not overridden.
		   */
		  xsOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number])
		} ;
		var _default = Grid;
		Grid$3.default = _default;
		return Grid$3;
	}

	var Unstable_Grid = {};

	var GridProps = {};

	var hasRequiredGridProps;

	function requireGridProps () {
		if (hasRequiredGridProps) return GridProps;
		hasRequiredGridProps = 1;

		Object.defineProperty(GridProps, "__esModule", {
		  value: true
		});
		return GridProps;
	}

	var gridClasses$1 = {};

	var hasRequiredGridClasses$1;

	function requireGridClasses$1 () {
		if (hasRequiredGridClasses$1) return gridClasses$1;
		hasRequiredGridClasses$1 = 1;

		Object.defineProperty(gridClasses$1, "__esModule", {
		  value: true
		});
		gridClasses$1.default = void 0;
		gridClasses$1.getGridUtilityClass = getGridUtilityClass;
		var _utils = requireUtils$4();
		function getGridUtilityClass(slot) {
		  return (0, _utils.unstable_generateUtilityClass)('MuiGrid', slot);
		}
		const SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
		const DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];
		const WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];
		const GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
		const gridClasses = (0, _utils.unstable_generateUtilityClasses)('MuiGrid', ['root', 'container', 'item',
		// spacings
		...SPACINGS.map(spacing => `spacing-xs-${spacing}`),
		// direction values
		...DIRECTIONS.map(direction => `direction-xs-${direction}`),
		// wrap values
		...WRAPS.map(wrap => `wrap-xs-${wrap}`),
		// grid sizes for all breakpoints
		...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);
		var _default = gridClasses;
		gridClasses$1.default = _default;
		return gridClasses$1;
	}

	var hasRequiredUnstable_Grid;

	function requireUnstable_Grid () {
		if (hasRequiredUnstable_Grid) return Unstable_Grid;
		hasRequiredUnstable_Grid = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  createGrid: true,
			  gridClasses: true
			};
			Object.defineProperty(exports, "createGrid", {
			  enumerable: true,
			  get: function () {
			    return _createGrid.default;
			  }
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _Grid.default;
			  }
			});
			Object.defineProperty(exports, "gridClasses", {
			  enumerable: true,
			  get: function () {
			    return _gridClasses.default;
			  }
			});
			var _Grid = _interopRequireDefault(requireGrid$1());
			var _createGrid = _interopRequireDefault(requireCreateGrid());
			var _GridProps = requireGridProps();
			Object.keys(_GridProps).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _GridProps[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _GridProps[key];
			    }
			  });
			});
			var _gridClasses = _interopRequireWildcard(requireGridClasses$1());
			Object.keys(_gridClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _gridClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _gridClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Unstable_Grid));
		return Unstable_Grid;
	}

	var Stack$4 = {};

	var createStack = {};

	var hasRequiredCreateStack;

	function requireCreateStack () {
		if (hasRequiredCreateStack) return createStack;
		hasRequiredCreateStack = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createStack, "__esModule", {
		  value: true
		});
		createStack.default = createStack$1;
		createStack.style = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _utils = requireUtils$4();
		var _styled = _interopRequireDefault(requireStyled$1());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps$1());
		var _styleFunctionSx = requireStyleFunctionSx();
		var _createTheme = _interopRequireDefault(requireCreateTheme$1());
		var _breakpoints = requireBreakpoints();
		var _spacing = requireSpacing();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["component", "direction", "spacing", "divider", "children", "className"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const defaultTheme = (0, _createTheme.default)();
		// widening Theme to any so that the consumer can own the theme structure.
		const defaultCreateStyledComponent = (0, _styled.default)('div', {
		  name: 'MuiStack',
		  slot: 'Root',
		  overridesResolver: (props, styles) => styles.root
		});
		function useThemePropsDefault(props) {
		  return (0, _useThemeProps.default)({
		    props,
		    name: 'MuiStack',
		    defaultTheme
		  });
		}

		/**
		 * Return an array with the separator React element interspersed between
		 * each React node of the input children.
		 *
		 * > joinChildren([1,2,3], 0)
		 * [1,0,2,0,3]
		 */
		function joinChildren(children, separator) {
		  const childrenArray = React.Children.toArray(children).filter(Boolean);
		  return childrenArray.reduce((output, child, index) => {
		    output.push(child);
		    if (index < childrenArray.length - 1) {
		      output.push( /*#__PURE__*/React.cloneElement(separator, {
		        key: `separator-${index}`
		      }));
		    }
		    return output;
		  }, []);
		}
		const getSideFromDirection = direction => {
		  return {
		    row: 'Left',
		    'row-reverse': 'Right',
		    column: 'Top',
		    'column-reverse': 'Bottom'
		  }[direction];
		};
		const style = ({
		  ownerState,
		  theme
		}) => {
		  let styles = (0, _extends2.default)({
		    display: 'flex',
		    flexDirection: 'column'
		  }, (0, _breakpoints.handleBreakpoints)({
		    theme
		  }, (0, _breakpoints.resolveBreakpointValues)({
		    values: ownerState.direction,
		    breakpoints: theme.breakpoints.values
		  }), propValue => ({
		    flexDirection: propValue
		  })));
		  if (ownerState.spacing) {
		    const transformer = (0, _spacing.createUnarySpacing)(theme);
		    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
		      if (typeof ownerState.spacing === 'object' && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === 'object' && ownerState.direction[breakpoint] != null) {
		        acc[breakpoint] = true;
		      }
		      return acc;
		    }, {});
		    const directionValues = (0, _breakpoints.resolveBreakpointValues)({
		      values: ownerState.direction,
		      base
		    });
		    const spacingValues = (0, _breakpoints.resolveBreakpointValues)({
		      values: ownerState.spacing,
		      base
		    });
		    if (typeof directionValues === 'object') {
		      Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
		        const directionValue = directionValues[breakpoint];
		        if (!directionValue) {
		          const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : 'column';
		          directionValues[breakpoint] = previousDirectionValue;
		        }
		      });
		    }
		    const styleFromPropValue = (propValue, breakpoint) => {
		      return {
		        '& > :not(style) + :not(style)': {
		          margin: 0,
		          [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: (0, _spacing.getValue)(transformer, propValue)
		        }
		      };
		    };
		    styles = (0, _utils.deepmerge)(styles, (0, _breakpoints.handleBreakpoints)({
		      theme
		    }, spacingValues, styleFromPropValue));
		  }
		  styles = (0, _breakpoints.mergeBreakpointsInOrder)(theme.breakpoints, styles);
		  return styles;
		};
		createStack.style = style;
		function createStack$1(options = {}) {
		  const {
		    // This will allow adding custom styled fn (for example for custom sx style function)
		    createStyledComponent = defaultCreateStyledComponent,
		    useThemeProps = useThemePropsDefault,
		    componentName = 'MuiStack'
		  } = options;
		  const useUtilityClasses = () => {
		    const slots = {
		      root: ['root']
		    };
		    return (0, _utils.unstable_composeClasses)(slots, slot => (0, _utils.unstable_generateUtilityClass)(componentName, slot), {});
		  };
		  const StackRoot = createStyledComponent(style);
		  const Stack = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {
		    const themeProps = useThemeProps(inProps);
		    const props = (0, _styleFunctionSx.extendSxProp)(themeProps); // `color` type conflicts with html color attribute.
		    const {
		        component = 'div',
		        direction = 'column',
		        spacing = 0,
		        divider,
		        children,
		        className
		      } = props,
		      other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		    const ownerState = {
		      direction,
		      spacing
		    };
		    const classes = useUtilityClasses();
		    return /*#__PURE__*/(0, _jsxRuntime.jsx)(StackRoot, (0, _extends2.default)({
		      as: component,
		      ownerState: ownerState,
		      ref: ref,
		      className: (0, _clsx.default)(classes.root, className)
		    }, other, {
		      children: divider ? joinChildren(children, divider) : children
		    }));
		  });
		  Stack.propTypes /* remove-proptypes */ = {
		    children: _propTypes.default.node,
		    direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), _propTypes.default.arrayOf(_propTypes.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), _propTypes.default.object]),
		    divider: _propTypes.default.node,
		    spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
		    sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		  } ;
		  return Stack;
		}
		return createStack;
	}

	var hasRequiredStack$2;

	function requireStack$2 () {
		if (hasRequiredStack$2) return Stack$4;
		hasRequiredStack$2 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Stack$4, "__esModule", {
		  value: true
		});
		Stack$4.default = void 0;
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _createStack = _interopRequireDefault(requireCreateStack());
		/**
		 *
		 * Demos:
		 *
		 * - [Stack (Material UI)](https://mui.com/material-ui/react-stack/)
		 * - [Stack (MUI System)](https://mui.com/system/react-stack/)
		 *
		 * API:
		 *
		 * - [Stack API](https://mui.com/system/api/stack/)
		 */
		const Stack = (0, _createStack.default)();
		Stack.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Defines the `flex-direction` style property.
		   * It is applied for all screen sizes.
		   * @default 'column'
		   */
		  direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), _propTypes.default.arrayOf(_propTypes.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), _propTypes.default.object]),
		  /**
		   * Add an element between each child.
		   */
		  divider: _propTypes.default.node,
		  /**
		   * Defines the space between immediate children.
		   * @default 0
		   */
		  spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
		  /**
		   * The system prop, which allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = Stack;
		Stack$4.default = _default;
		return Stack$4;
	}

	var Stack$3 = {};

	var StackProps = {};

	var hasRequiredStackProps;

	function requireStackProps () {
		if (hasRequiredStackProps) return StackProps;
		hasRequiredStackProps = 1;

		Object.defineProperty(StackProps, "__esModule", {
		  value: true
		});
		return StackProps;
	}

	var stackClasses = {};

	var hasRequiredStackClasses;

	function requireStackClasses () {
		if (hasRequiredStackClasses) return stackClasses;
		hasRequiredStackClasses = 1;

		Object.defineProperty(stackClasses, "__esModule", {
		  value: true
		});
		stackClasses.default = void 0;
		stackClasses.getStackUtilityClass = getStackUtilityClass;
		var _utils = requireUtils$4();
		function getStackUtilityClass(slot) {
		  return (0, _utils.unstable_generateUtilityClass)('MuiStack', slot);
		}
		const stackClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiStack', ['root']);
		var _default = stackClasses$1;
		stackClasses.default = _default;
		return stackClasses;
	}

	var hasRequiredStack$1;

	function requireStack$1 () {
		if (hasRequiredStack$1) return Stack$3;
		hasRequiredStack$1 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  createStack: true,
			  stackClasses: true
			};
			Object.defineProperty(exports, "createStack", {
			  enumerable: true,
			  get: function () {
			    return _createStack.default;
			  }
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _Stack.default;
			  }
			});
			Object.defineProperty(exports, "stackClasses", {
			  enumerable: true,
			  get: function () {
			    return _stackClasses.default;
			  }
			});
			var _Stack = _interopRequireDefault(requireStack$2());
			var _createStack = _interopRequireDefault(requireCreateStack());
			var _StackProps = requireStackProps();
			Object.keys(_StackProps).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _StackProps[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _StackProps[key];
			    }
			  });
			});
			var _stackClasses = _interopRequireWildcard(requireStackClasses());
			Object.keys(_stackClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _stackClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _stackClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Stack$3));
		return Stack$3;
	}

	/** @license MUI v5.10.17
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredSystem;

	function requireSystem () {
		if (hasRequiredSystem) return system;
		hasRequiredSystem = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  css: true,
			  keyframes: true,
			  GlobalStyles: true,
			  StyledEngineProvider: true,
			  borders: true,
			  breakpoints: true,
			  handleBreakpoints: true,
			  mergeBreakpointsInOrder: true,
			  unstable_resolveBreakpointValues: true,
			  compose: true,
			  display: true,
			  flexbox: true,
			  grid: true,
			  palette: true,
			  positions: true,
			  shadows: true,
			  sizing: true,
			  spacing: true,
			  style: true,
			  getPath: true,
			  getStyleValue: true,
			  typography: true,
			  unstable_styleFunctionSx: true,
			  unstable_createStyleFunctionSx: true,
			  unstable_extendSxProp: true,
			  experimental_sx: true,
			  unstable_getThemeValue: true,
			  Box: true,
			  createBox: true,
			  createStyled: true,
			  styled: true,
			  createTheme: true,
			  createBreakpoints: true,
			  createSpacing: true,
			  shape: true,
			  useThemeProps: true,
			  getThemeProps: true,
			  useTheme: true,
			  useThemeWithoutDefault: true,
			  ThemeProvider: true,
			  unstable_createCssVarsProvider: true,
			  unstable_createGetCssVar: true,
			  responsivePropType: true,
			  createContainer: true,
			  Container: true,
			  Unstable_Grid: true,
			  Stack: true
			};
			Object.defineProperty(exports, "Box", {
			  enumerable: true,
			  get: function () {
			    return _Box.default;
			  }
			});
			Object.defineProperty(exports, "Container", {
			  enumerable: true,
			  get: function () {
			    return _Container.default;
			  }
			});
			Object.defineProperty(exports, "GlobalStyles", {
			  enumerable: true,
			  get: function () {
			    return _styledEngine.GlobalStyles;
			  }
			});
			Object.defineProperty(exports, "Stack", {
			  enumerable: true,
			  get: function () {
			    return _Stack.default;
			  }
			});
			Object.defineProperty(exports, "StyledEngineProvider", {
			  enumerable: true,
			  get: function () {
			    return _styledEngine.StyledEngineProvider;
			  }
			});
			Object.defineProperty(exports, "ThemeProvider", {
			  enumerable: true,
			  get: function () {
			    return _ThemeProvider.default;
			  }
			});
			Object.defineProperty(exports, "Unstable_Grid", {
			  enumerable: true,
			  get: function () {
			    return _Grid.default;
			  }
			});
			Object.defineProperty(exports, "borders", {
			  enumerable: true,
			  get: function () {
			    return _borders.default;
			  }
			});
			Object.defineProperty(exports, "breakpoints", {
			  enumerable: true,
			  get: function () {
			    return _breakpoints.default;
			  }
			});
			Object.defineProperty(exports, "compose", {
			  enumerable: true,
			  get: function () {
			    return _compose.default;
			  }
			});
			Object.defineProperty(exports, "createBox", {
			  enumerable: true,
			  get: function () {
			    return _createBox.default;
			  }
			});
			Object.defineProperty(exports, "createBreakpoints", {
			  enumerable: true,
			  get: function () {
			    return _createBreakpoints.default;
			  }
			});
			Object.defineProperty(exports, "createContainer", {
			  enumerable: true,
			  get: function () {
			    return _createContainer.default;
			  }
			});
			Object.defineProperty(exports, "createSpacing", {
			  enumerable: true,
			  get: function () {
			    return _createSpacing.default;
			  }
			});
			Object.defineProperty(exports, "createStyled", {
			  enumerable: true,
			  get: function () {
			    return _createStyled.default;
			  }
			});
			Object.defineProperty(exports, "createTheme", {
			  enumerable: true,
			  get: function () {
			    return _createTheme.default;
			  }
			});
			Object.defineProperty(exports, "css", {
			  enumerable: true,
			  get: function () {
			    return _styledEngine.css;
			  }
			});
			Object.defineProperty(exports, "display", {
			  enumerable: true,
			  get: function () {
			    return _display.default;
			  }
			});
			Object.defineProperty(exports, "experimental_sx", {
			  enumerable: true,
			  get: function () {
			    return _sx.default;
			  }
			});
			Object.defineProperty(exports, "flexbox", {
			  enumerable: true,
			  get: function () {
			    return _flexbox.default;
			  }
			});
			Object.defineProperty(exports, "getPath", {
			  enumerable: true,
			  get: function () {
			    return _style.getPath;
			  }
			});
			Object.defineProperty(exports, "getStyleValue", {
			  enumerable: true,
			  get: function () {
			    return _style.getStyleValue;
			  }
			});
			Object.defineProperty(exports, "getThemeProps", {
			  enumerable: true,
			  get: function () {
			    return _useThemeProps.getThemeProps;
			  }
			});
			Object.defineProperty(exports, "grid", {
			  enumerable: true,
			  get: function () {
			    return _cssGrid.default;
			  }
			});
			Object.defineProperty(exports, "handleBreakpoints", {
			  enumerable: true,
			  get: function () {
			    return _breakpoints.handleBreakpoints;
			  }
			});
			Object.defineProperty(exports, "keyframes", {
			  enumerable: true,
			  get: function () {
			    return _styledEngine.keyframes;
			  }
			});
			Object.defineProperty(exports, "mergeBreakpointsInOrder", {
			  enumerable: true,
			  get: function () {
			    return _breakpoints.mergeBreakpointsInOrder;
			  }
			});
			Object.defineProperty(exports, "palette", {
			  enumerable: true,
			  get: function () {
			    return _palette.default;
			  }
			});
			Object.defineProperty(exports, "positions", {
			  enumerable: true,
			  get: function () {
			    return _positions.default;
			  }
			});
			Object.defineProperty(exports, "responsivePropType", {
			  enumerable: true,
			  get: function () {
			    return _responsivePropType.default;
			  }
			});
			Object.defineProperty(exports, "shadows", {
			  enumerable: true,
			  get: function () {
			    return _shadows.default;
			  }
			});
			Object.defineProperty(exports, "shape", {
			  enumerable: true,
			  get: function () {
			    return _shape.default;
			  }
			});
			Object.defineProperty(exports, "sizing", {
			  enumerable: true,
			  get: function () {
			    return _sizing.default;
			  }
			});
			Object.defineProperty(exports, "spacing", {
			  enumerable: true,
			  get: function () {
			    return _spacing.default;
			  }
			});
			Object.defineProperty(exports, "style", {
			  enumerable: true,
			  get: function () {
			    return _style.default;
			  }
			});
			Object.defineProperty(exports, "styled", {
			  enumerable: true,
			  get: function () {
			    return _styled.default;
			  }
			});
			Object.defineProperty(exports, "typography", {
			  enumerable: true,
			  get: function () {
			    return _typography.default;
			  }
			});
			Object.defineProperty(exports, "unstable_createCssVarsProvider", {
			  enumerable: true,
			  get: function () {
			    return _createCssVarsProvider.default;
			  }
			});
			Object.defineProperty(exports, "unstable_createGetCssVar", {
			  enumerable: true,
			  get: function () {
			    return _createGetCssVar.default;
			  }
			});
			Object.defineProperty(exports, "unstable_createStyleFunctionSx", {
			  enumerable: true,
			  get: function () {
			    return _styleFunctionSx.unstable_createStyleFunctionSx;
			  }
			});
			Object.defineProperty(exports, "unstable_extendSxProp", {
			  enumerable: true,
			  get: function () {
			    return _styleFunctionSx.extendSxProp;
			  }
			});
			Object.defineProperty(exports, "unstable_getThemeValue", {
			  enumerable: true,
			  get: function () {
			    return _getThemeValue.default;
			  }
			});
			Object.defineProperty(exports, "unstable_resolveBreakpointValues", {
			  enumerable: true,
			  get: function () {
			    return _breakpoints.resolveBreakpointValues;
			  }
			});
			Object.defineProperty(exports, "unstable_styleFunctionSx", {
			  enumerable: true,
			  get: function () {
			    return _styleFunctionSx.default;
			  }
			});
			Object.defineProperty(exports, "useTheme", {
			  enumerable: true,
			  get: function () {
			    return _useTheme.default;
			  }
			});
			Object.defineProperty(exports, "useThemeProps", {
			  enumerable: true,
			  get: function () {
			    return _useThemeProps.default;
			  }
			});
			Object.defineProperty(exports, "useThemeWithoutDefault", {
			  enumerable: true,
			  get: function () {
			    return _useThemeWithoutDefault.default;
			  }
			});
			var _styledEngine = requireNode$1();
			var _borders = _interopRequireWildcard(requireBorders());
			Object.keys(_borders).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _borders[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _borders[key];
			    }
			  });
			});
			var _breakpoints = _interopRequireWildcard(requireBreakpoints());
			var _compose = _interopRequireDefault(requireCompose());
			var _display = _interopRequireDefault(requireDisplay());
			var _flexbox = _interopRequireWildcard(requireFlexbox());
			Object.keys(_flexbox).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _flexbox[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _flexbox[key];
			    }
			  });
			});
			var _cssGrid = _interopRequireWildcard(requireCssGrid());
			Object.keys(_cssGrid).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _cssGrid[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _cssGrid[key];
			    }
			  });
			});
			var _palette = _interopRequireWildcard(requirePalette());
			Object.keys(_palette).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _palette[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _palette[key];
			    }
			  });
			});
			var _positions = _interopRequireWildcard(requirePositions());
			Object.keys(_positions).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _positions[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _positions[key];
			    }
			  });
			});
			var _shadows = _interopRequireDefault(requireShadows$1());
			var _sizing = _interopRequireWildcard(requireSizing());
			Object.keys(_sizing).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _sizing[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _sizing[key];
			    }
			  });
			});
			var _spacing = _interopRequireWildcard(requireSpacing());
			Object.keys(_spacing).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _spacing[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _spacing[key];
			    }
			  });
			});
			var _style = _interopRequireWildcard(requireStyle());
			var _typography = _interopRequireWildcard(requireTypography$1());
			Object.keys(_typography).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _typography[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _typography[key];
			    }
			  });
			});
			var _styleFunctionSx = _interopRequireWildcard(requireStyleFunctionSx());
			var _sx = _interopRequireDefault(requireSx());
			var _getThemeValue = _interopRequireDefault(requireGetThemeValue());
			var _Box = _interopRequireDefault(requireBox());
			var _createBox = _interopRequireDefault(requireCreateBox());
			var _createStyled = _interopRequireWildcard(requireCreateStyled());
			Object.keys(_createStyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _createStyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _createStyled[key];
			    }
			  });
			});
			var _styled = _interopRequireDefault(requireStyled$1());
			var _createTheme = _interopRequireDefault(requireCreateTheme$1());
			var _createBreakpoints = _interopRequireDefault(requireCreateBreakpoints());
			var _createSpacing = _interopRequireDefault(requireCreateSpacing());
			var _shape = _interopRequireDefault(requireShape());
			var _useThemeProps = _interopRequireWildcard(requireUseThemeProps$1());
			var _useTheme = _interopRequireDefault(requireUseTheme$1());
			var _useThemeWithoutDefault = _interopRequireDefault(requireUseThemeWithoutDefault());
			var _colorManipulator = requireColorManipulator();
			Object.keys(_colorManipulator).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _colorManipulator[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _colorManipulator[key];
			    }
			  });
			});
			var _ThemeProvider = _interopRequireDefault(requireThemeProvider$1());
			var _createCssVarsProvider = _interopRequireDefault(requireCreateCssVarsProvider());
			var _createGetCssVar = _interopRequireDefault(requireCreateGetCssVar());
			var _responsivePropType = _interopRequireDefault(requireResponsivePropType());
			var _createContainer = _interopRequireDefault(requireCreateContainer());
			var _Container = _interopRequireWildcard(requireContainer());
			Object.keys(_Container).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _Container[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _Container[key];
			    }
			  });
			});
			var _Grid = _interopRequireDefault(requireGrid$1());
			var _Unstable_Grid = requireUnstable_Grid();
			Object.keys(_Unstable_Grid).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _Unstable_Grid[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _Unstable_Grid[key];
			    }
			  });
			});
			var _Stack = _interopRequireDefault(requireStack$2());
			var _Stack2 = requireStack$1();
			Object.keys(_Stack2).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _Stack2[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _Stack2[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (system));
		return system;
	}

	var styled = {};

	var defaultTheme = {};

	var createTheme = {};

	var generateUtilityClass = {};

	var hasRequiredGenerateUtilityClass;

	function requireGenerateUtilityClass () {
		if (hasRequiredGenerateUtilityClass) return generateUtilityClass;
		hasRequiredGenerateUtilityClass = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _utils.unstable_generateUtilityClass;
			  }
			});
			var _utils = requireUtils$4();
	} (generateUtilityClass));
		return generateUtilityClass;
	}

	var createMixins = {};

	var hasRequiredCreateMixins;

	function requireCreateMixins () {
		if (hasRequiredCreateMixins) return createMixins;
		hasRequiredCreateMixins = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createMixins, "__esModule", {
		  value: true
		});
		createMixins.default = createMixins$1;
		var _extends2 = _interopRequireDefault(require_extends());
		function createMixins$1(breakpoints, mixins) {
		  return (0, _extends2.default)({
		    toolbar: {
		      minHeight: 56,
		      [breakpoints.up('xs')]: {
		        '@media (orientation: landscape)': {
		          minHeight: 48
		        }
		      },
		      [breakpoints.up('sm')]: {
		        minHeight: 64
		      }
		    }
		  }, mixins);
		}
		return createMixins;
	}

	var createPalette = {};

	var common = {};

	var hasRequiredCommon;

	function requireCommon () {
		if (hasRequiredCommon) return common;
		hasRequiredCommon = 1;

		Object.defineProperty(common, "__esModule", {
		  value: true
		});
		common.default = void 0;
		const common$1 = {
		  black: '#000',
		  white: '#fff'
		};
		var _default = common$1;
		common.default = _default;
		return common;
	}

	var grey = {};

	var hasRequiredGrey;

	function requireGrey () {
		if (hasRequiredGrey) return grey;
		hasRequiredGrey = 1;

		Object.defineProperty(grey, "__esModule", {
		  value: true
		});
		grey.default = void 0;
		const grey$1 = {
		  50: '#fafafa',
		  100: '#f5f5f5',
		  200: '#eeeeee',
		  300: '#e0e0e0',
		  400: '#bdbdbd',
		  500: '#9e9e9e',
		  600: '#757575',
		  700: '#616161',
		  800: '#424242',
		  900: '#212121',
		  A100: '#f5f5f5',
		  A200: '#eeeeee',
		  A400: '#bdbdbd',
		  A700: '#616161'
		};
		var _default = grey$1;
		grey.default = _default;
		return grey;
	}

	var purple = {};

	var hasRequiredPurple;

	function requirePurple () {
		if (hasRequiredPurple) return purple;
		hasRequiredPurple = 1;

		Object.defineProperty(purple, "__esModule", {
		  value: true
		});
		purple.default = void 0;
		const purple$1 = {
		  50: '#f3e5f5',
		  100: '#e1bee7',
		  200: '#ce93d8',
		  300: '#ba68c8',
		  400: '#ab47bc',
		  500: '#9c27b0',
		  600: '#8e24aa',
		  700: '#7b1fa2',
		  800: '#6a1b9a',
		  900: '#4a148c',
		  A100: '#ea80fc',
		  A200: '#e040fb',
		  A400: '#d500f9',
		  A700: '#aa00ff'
		};
		var _default = purple$1;
		purple.default = _default;
		return purple;
	}

	var red = {};

	var hasRequiredRed;

	function requireRed () {
		if (hasRequiredRed) return red;
		hasRequiredRed = 1;

		Object.defineProperty(red, "__esModule", {
		  value: true
		});
		red.default = void 0;
		const red$1 = {
		  50: '#ffebee',
		  100: '#ffcdd2',
		  200: '#ef9a9a',
		  300: '#e57373',
		  400: '#ef5350',
		  500: '#f44336',
		  600: '#e53935',
		  700: '#d32f2f',
		  800: '#c62828',
		  900: '#b71c1c',
		  A100: '#ff8a80',
		  A200: '#ff5252',
		  A400: '#ff1744',
		  A700: '#d50000'
		};
		var _default = red$1;
		red.default = _default;
		return red;
	}

	var orange = {};

	var hasRequiredOrange;

	function requireOrange () {
		if (hasRequiredOrange) return orange;
		hasRequiredOrange = 1;

		Object.defineProperty(orange, "__esModule", {
		  value: true
		});
		orange.default = void 0;
		const orange$1 = {
		  50: '#fff3e0',
		  100: '#ffe0b2',
		  200: '#ffcc80',
		  300: '#ffb74d',
		  400: '#ffa726',
		  500: '#ff9800',
		  600: '#fb8c00',
		  700: '#f57c00',
		  800: '#ef6c00',
		  900: '#e65100',
		  A100: '#ffd180',
		  A200: '#ffab40',
		  A400: '#ff9100',
		  A700: '#ff6d00'
		};
		var _default = orange$1;
		orange.default = _default;
		return orange;
	}

	var blue = {};

	var hasRequiredBlue;

	function requireBlue () {
		if (hasRequiredBlue) return blue;
		hasRequiredBlue = 1;

		Object.defineProperty(blue, "__esModule", {
		  value: true
		});
		blue.default = void 0;
		const blue$1 = {
		  50: '#e3f2fd',
		  100: '#bbdefb',
		  200: '#90caf9',
		  300: '#64b5f6',
		  400: '#42a5f5',
		  500: '#2196f3',
		  600: '#1e88e5',
		  700: '#1976d2',
		  800: '#1565c0',
		  900: '#0d47a1',
		  A100: '#82b1ff',
		  A200: '#448aff',
		  A400: '#2979ff',
		  A700: '#2962ff'
		};
		var _default = blue$1;
		blue.default = _default;
		return blue;
	}

	var lightBlue = {};

	var hasRequiredLightBlue;

	function requireLightBlue () {
		if (hasRequiredLightBlue) return lightBlue;
		hasRequiredLightBlue = 1;

		Object.defineProperty(lightBlue, "__esModule", {
		  value: true
		});
		lightBlue.default = void 0;
		const lightBlue$1 = {
		  50: '#e1f5fe',
		  100: '#b3e5fc',
		  200: '#81d4fa',
		  300: '#4fc3f7',
		  400: '#29b6f6',
		  500: '#03a9f4',
		  600: '#039be5',
		  700: '#0288d1',
		  800: '#0277bd',
		  900: '#01579b',
		  A100: '#80d8ff',
		  A200: '#40c4ff',
		  A400: '#00b0ff',
		  A700: '#0091ea'
		};
		var _default = lightBlue$1;
		lightBlue.default = _default;
		return lightBlue;
	}

	var green = {};

	var hasRequiredGreen;

	function requireGreen () {
		if (hasRequiredGreen) return green;
		hasRequiredGreen = 1;

		Object.defineProperty(green, "__esModule", {
		  value: true
		});
		green.default = void 0;
		const green$1 = {
		  50: '#e8f5e9',
		  100: '#c8e6c9',
		  200: '#a5d6a7',
		  300: '#81c784',
		  400: '#66bb6a',
		  500: '#4caf50',
		  600: '#43a047',
		  700: '#388e3c',
		  800: '#2e7d32',
		  900: '#1b5e20',
		  A100: '#b9f6ca',
		  A200: '#69f0ae',
		  A400: '#00e676',
		  A700: '#00c853'
		};
		var _default = green$1;
		green.default = _default;
		return green;
	}

	var hasRequiredCreatePalette;

	function requireCreatePalette () {
		if (hasRequiredCreatePalette) return createPalette;
		hasRequiredCreatePalette = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createPalette, "__esModule", {
		  value: true
		});
		createPalette.dark = void 0;
		createPalette.default = createPalette$1;
		createPalette.light = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _utils = requireUtils$4();
		var _system = requireSystem();
		var _common = _interopRequireDefault(requireCommon());
		var _grey = _interopRequireDefault(requireGrey());
		var _purple = _interopRequireDefault(requirePurple());
		var _red = _interopRequireDefault(requireRed());
		var _orange = _interopRequireDefault(requireOrange());
		var _blue = _interopRequireDefault(requireBlue());
		var _lightBlue = _interopRequireDefault(requireLightBlue());
		var _green = _interopRequireDefault(requireGreen());
		const _excluded = ["mode", "contrastThreshold", "tonalOffset"];
		const light = {
		  // The colors used to style the text.
		  text: {
		    // The most important text.
		    primary: 'rgba(0, 0, 0, 0.87)',
		    // Secondary text.
		    secondary: 'rgba(0, 0, 0, 0.6)',
		    // Disabled text have even lower visual prominence.
		    disabled: 'rgba(0, 0, 0, 0.38)'
		  },
		  // The color used to divide different elements.
		  divider: 'rgba(0, 0, 0, 0.12)',
		  // The background colors used to style the surfaces.
		  // Consistency between these values is important.
		  background: {
		    paper: _common.default.white,
		    default: _common.default.white
		  },
		  // The colors used to style the action elements.
		  action: {
		    // The color of an active action like an icon button.
		    active: 'rgba(0, 0, 0, 0.54)',
		    // The color of an hovered action.
		    hover: 'rgba(0, 0, 0, 0.04)',
		    hoverOpacity: 0.04,
		    // The color of a selected action.
		    selected: 'rgba(0, 0, 0, 0.08)',
		    selectedOpacity: 0.08,
		    // The color of a disabled action.
		    disabled: 'rgba(0, 0, 0, 0.26)',
		    // The background color of a disabled action.
		    disabledBackground: 'rgba(0, 0, 0, 0.12)',
		    disabledOpacity: 0.38,
		    focus: 'rgba(0, 0, 0, 0.12)',
		    focusOpacity: 0.12,
		    activatedOpacity: 0.12
		  }
		};
		createPalette.light = light;
		const dark = {
		  text: {
		    primary: _common.default.white,
		    secondary: 'rgba(255, 255, 255, 0.7)',
		    disabled: 'rgba(255, 255, 255, 0.5)',
		    icon: 'rgba(255, 255, 255, 0.5)'
		  },
		  divider: 'rgba(255, 255, 255, 0.12)',
		  background: {
		    paper: '#121212',
		    default: '#121212'
		  },
		  action: {
		    active: _common.default.white,
		    hover: 'rgba(255, 255, 255, 0.08)',
		    hoverOpacity: 0.08,
		    selected: 'rgba(255, 255, 255, 0.16)',
		    selectedOpacity: 0.16,
		    disabled: 'rgba(255, 255, 255, 0.3)',
		    disabledBackground: 'rgba(255, 255, 255, 0.12)',
		    disabledOpacity: 0.38,
		    focus: 'rgba(255, 255, 255, 0.12)',
		    focusOpacity: 0.12,
		    activatedOpacity: 0.24
		  }
		};
		createPalette.dark = dark;
		function addLightOrDark(intent, direction, shade, tonalOffset) {
		  const tonalOffsetLight = tonalOffset.light || tonalOffset;
		  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
		  if (!intent[direction]) {
		    if (intent.hasOwnProperty(shade)) {
		      intent[direction] = intent[shade];
		    } else if (direction === 'light') {
		      intent.light = (0, _system.lighten)(intent.main, tonalOffsetLight);
		    } else if (direction === 'dark') {
		      intent.dark = (0, _system.darken)(intent.main, tonalOffsetDark);
		    }
		  }
		}
		function getDefaultPrimary(mode = 'light') {
		  if (mode === 'dark') {
		    return {
		      main: _blue.default[200],
		      light: _blue.default[50],
		      dark: _blue.default[400]
		    };
		  }
		  return {
		    main: _blue.default[700],
		    light: _blue.default[400],
		    dark: _blue.default[800]
		  };
		}
		function getDefaultSecondary(mode = 'light') {
		  if (mode === 'dark') {
		    return {
		      main: _purple.default[200],
		      light: _purple.default[50],
		      dark: _purple.default[400]
		    };
		  }
		  return {
		    main: _purple.default[500],
		    light: _purple.default[300],
		    dark: _purple.default[700]
		  };
		}
		function getDefaultError(mode = 'light') {
		  if (mode === 'dark') {
		    return {
		      main: _red.default[500],
		      light: _red.default[300],
		      dark: _red.default[700]
		    };
		  }
		  return {
		    main: _red.default[700],
		    light: _red.default[400],
		    dark: _red.default[800]
		  };
		}
		function getDefaultInfo(mode = 'light') {
		  if (mode === 'dark') {
		    return {
		      main: _lightBlue.default[400],
		      light: _lightBlue.default[300],
		      dark: _lightBlue.default[700]
		    };
		  }
		  return {
		    main: _lightBlue.default[700],
		    light: _lightBlue.default[500],
		    dark: _lightBlue.default[900]
		  };
		}
		function getDefaultSuccess(mode = 'light') {
		  if (mode === 'dark') {
		    return {
		      main: _green.default[400],
		      light: _green.default[300],
		      dark: _green.default[700]
		    };
		  }
		  return {
		    main: _green.default[800],
		    light: _green.default[500],
		    dark: _green.default[900]
		  };
		}
		function getDefaultWarning(mode = 'light') {
		  if (mode === 'dark') {
		    return {
		      main: _orange.default[400],
		      light: _orange.default[300],
		      dark: _orange.default[700]
		    };
		  }
		  return {
		    main: '#ed6c02',
		    // closest to orange[800] that pass 3:1.
		    light: _orange.default[500],
		    dark: _orange.default[900]
		  };
		}
		function createPalette$1(palette) {
		  const {
		      mode = 'light',
		      contrastThreshold = 3,
		      tonalOffset = 0.2
		    } = palette,
		    other = (0, _objectWithoutPropertiesLoose2.default)(palette, _excluded);
		  const primary = palette.primary || getDefaultPrimary(mode);
		  const secondary = palette.secondary || getDefaultSecondary(mode);
		  const error = palette.error || getDefaultError(mode);
		  const info = palette.info || getDefaultInfo(mode);
		  const success = palette.success || getDefaultSuccess(mode);
		  const warning = palette.warning || getDefaultWarning(mode);

		  // Use the same logic as
		  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
		  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
		  function getContrastText(background) {
		    const contrastText = (0, _system.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
		    {
		      const contrast = (0, _system.getContrastRatio)(background, contrastText);
		      if (contrast < 3) {
		        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
		      }
		    }
		    return contrastText;
		  }
		  const augmentColor = ({
		    color,
		    name,
		    mainShade = 500,
		    lightShade = 300,
		    darkShade = 700
		  }) => {
		    color = (0, _extends2.default)({}, color);
		    if (!color.main && color[mainShade]) {
		      color.main = color[mainShade];
		    }
		    if (!color.hasOwnProperty('main')) {
		      throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` );
		    }
		    if (typeof color.main !== 'string') {
		      throw new Error(`MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` );
		    }
		    addLightOrDark(color, 'light', lightShade, tonalOffset);
		    addLightOrDark(color, 'dark', darkShade, tonalOffset);
		    if (!color.contrastText) {
		      color.contrastText = getContrastText(color.main);
		    }
		    return color;
		  };
		  const modes = {
		    dark,
		    light
		  };
		  {
		    if (!modes[mode]) {
		      console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
		    }
		  }
		  const paletteOutput = (0, _utils.deepmerge)((0, _extends2.default)({
		    // A collection of common colors.
		    common: (0, _extends2.default)({}, _common.default),
		    // prevent mutable object.
		    // The palette mode, can be light or dark.
		    mode,
		    // The colors used to represent primary interface elements for a user.
		    primary: augmentColor({
		      color: primary,
		      name: 'primary'
		    }),
		    // The colors used to represent secondary interface elements for a user.
		    secondary: augmentColor({
		      color: secondary,
		      name: 'secondary',
		      mainShade: 'A400',
		      lightShade: 'A200',
		      darkShade: 'A700'
		    }),
		    // The colors used to represent interface elements that the user should be made aware of.
		    error: augmentColor({
		      color: error,
		      name: 'error'
		    }),
		    // The colors used to represent potentially dangerous actions or important messages.
		    warning: augmentColor({
		      color: warning,
		      name: 'warning'
		    }),
		    // The colors used to present information to the user that is neutral and not necessarily important.
		    info: augmentColor({
		      color: info,
		      name: 'info'
		    }),
		    // The colors used to indicate the successful completion of an action that user triggered.
		    success: augmentColor({
		      color: success,
		      name: 'success'
		    }),
		    // The grey colors.
		    grey: _grey.default,
		    // Used by `getContrastText()` to maximize the contrast between
		    // the background and the text.
		    contrastThreshold,
		    // Takes a background color and returns the text color that maximizes the contrast.
		    getContrastText,
		    // Generate a rich color object.
		    augmentColor,
		    // Used by the functions below to shift a color's luminance by approximately
		    // two indexes within its tonal palette.
		    // E.g., shift from Red 500 to Red 300 or Red 700.
		    tonalOffset
		  }, modes[mode]), other);
		  return paletteOutput;
		}
		return createPalette;
	}

	var createTypography = {};

	var hasRequiredCreateTypography;

	function requireCreateTypography () {
		if (hasRequiredCreateTypography) return createTypography;
		hasRequiredCreateTypography = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createTypography, "__esModule", {
		  value: true
		});
		createTypography.default = createTypography$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _utils = requireUtils$4();
		const _excluded = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
		function round(value) {
		  return Math.round(value * 1e5) / 1e5;
		}
		const caseAllCaps = {
		  textTransform: 'uppercase'
		};
		const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';

		/**
		 * @see @link{https://m2.material.io/design/typography/the-type-system.html}
		 * @see @link{https://m2.material.io/design/typography/understanding-typography.html}
		 */
		function createTypography$1(palette, typography) {
		  const _ref = typeof typography === 'function' ? typography(palette) : typography,
		    {
		      fontFamily = defaultFontFamily,
		      // The default font size of the Material Specification.
		      fontSize = 14,
		      // px
		      fontWeightLight = 300,
		      fontWeightRegular = 400,
		      fontWeightMedium = 500,
		      fontWeightBold = 700,
		      // Tell MUI what's the font-size on the html element.
		      // 16px is the default font-size used by browsers.
		      htmlFontSize = 16,
		      // Apply the CSS properties to all the variants.
		      allVariants,
		      pxToRem: pxToRem2
		    } = _ref,
		    other = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
		  {
		    if (typeof fontSize !== 'number') {
		      console.error('MUI: `fontSize` is required to be a number.');
		    }
		    if (typeof htmlFontSize !== 'number') {
		      console.error('MUI: `htmlFontSize` is required to be a number.');
		    }
		  }
		  const coef = fontSize / 14;
		  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);
		  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => (0, _extends2.default)({
		    fontFamily,
		    fontWeight,
		    fontSize: pxToRem(size),
		    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
		    lineHeight
		  }, fontFamily === defaultFontFamily ? {
		    letterSpacing: `${round(letterSpacing / size)}em`
		  } : {}, casing, allVariants);
		  const variants = {
		    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
		    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
		    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
		    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
		    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
		    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
		    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
		    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
		    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
		    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
		    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
		    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
		    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
		  };
		  return (0, _utils.deepmerge)((0, _extends2.default)({
		    htmlFontSize,
		    pxToRem,
		    fontFamily,
		    fontSize,
		    fontWeightLight,
		    fontWeightRegular,
		    fontWeightMedium,
		    fontWeightBold
		  }, variants), other, {
		    clone: false // No need to clone deep
		  });
		}
		return createTypography;
	}

	var shadows = {};

	var hasRequiredShadows;

	function requireShadows () {
		if (hasRequiredShadows) return shadows;
		hasRequiredShadows = 1;

		Object.defineProperty(shadows, "__esModule", {
		  value: true
		});
		shadows.default = void 0;
		const shadowKeyUmbraOpacity = 0.2;
		const shadowKeyPenumbraOpacity = 0.14;
		const shadowAmbientShadowOpacity = 0.12;
		function createShadow(...px) {
		  return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
		}

		// Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
		const shadows$1 = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
		var _default = shadows$1;
		shadows.default = _default;
		return shadows;
	}

	var createTransitions = {};

	var hasRequiredCreateTransitions;

	function requireCreateTransitions () {
		if (hasRequiredCreateTransitions) return createTransitions;
		hasRequiredCreateTransitions = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createTransitions, "__esModule", {
		  value: true
		});
		createTransitions.default = createTransitions$1;
		createTransitions.easing = createTransitions.duration = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		const _excluded = ["duration", "easing", "delay"];
		// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
		// to learn the context in which each easing should be used.
		const easing = {
		  // This is the most common easing curve.
		  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
		  // Objects enter the screen at full velocity from off-screen and
		  // slowly decelerate to a resting point.
		  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
		  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
		  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
		  // The sharp curve is used by objects that may return to the screen at any time.
		  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
		};

		// Follow https://m2.material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
		// to learn when use what timing
		createTransitions.easing = easing;
		const duration = {
		  shortest: 150,
		  shorter: 200,
		  short: 250,
		  // most basic recommended timing
		  standard: 300,
		  // this is to be used in complex animations
		  complex: 375,
		  // recommended when something is entering screen
		  enteringScreen: 225,
		  // recommended when something is leaving screen
		  leavingScreen: 195
		};
		createTransitions.duration = duration;
		function formatMs(milliseconds) {
		  return `${Math.round(milliseconds)}ms`;
		}
		function getAutoHeightDuration(height) {
		  if (!height) {
		    return 0;
		  }
		  const constant = height / 36;

		  // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
		  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
		}
		function createTransitions$1(inputTransitions) {
		  const mergedEasing = (0, _extends2.default)({}, easing, inputTransitions.easing);
		  const mergedDuration = (0, _extends2.default)({}, duration, inputTransitions.duration);
		  const create = (props = ['all'], options = {}) => {
		    const {
		        duration: durationOption = mergedDuration.standard,
		        easing: easingOption = mergedEasing.easeInOut,
		        delay = 0
		      } = options,
		      other = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded);
		    {
		      const isString = value => typeof value === 'string';
		      // IE11 support, replace with Number.isNaN
		      // eslint-disable-next-line no-restricted-globals
		      const isNumber = value => !isNaN(parseFloat(value));
		      if (!isString(props) && !Array.isArray(props)) {
		        console.error('MUI: Argument "props" must be a string or Array.');
		      }
		      if (!isNumber(durationOption) && !isString(durationOption)) {
		        console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
		      }
		      if (!isString(easingOption)) {
		        console.error('MUI: Argument "easing" must be a string.');
		      }
		      if (!isNumber(delay) && !isString(delay)) {
		        console.error('MUI: Argument "delay" must be a number or a string.');
		      }
		      if (Object.keys(other).length !== 0) {
		        console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);
		      }
		    }
		    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
		  };
		  return (0, _extends2.default)({
		    getAutoHeightDuration,
		    create
		  }, inputTransitions, {
		    easing: mergedEasing,
		    duration: mergedDuration
		  });
		}
		return createTransitions;
	}

	var zIndex = {};

	var hasRequiredZIndex;

	function requireZIndex () {
		if (hasRequiredZIndex) return zIndex;
		hasRequiredZIndex = 1;

		Object.defineProperty(zIndex, "__esModule", {
		  value: true
		});
		zIndex.default = void 0;
		// We need to centralize the zIndex definitions as they work
		// like global values in the browser.
		const zIndex$1 = {
		  mobileStepper: 1000,
		  fab: 1050,
		  speedDial: 1050,
		  appBar: 1100,
		  drawer: 1200,
		  modal: 1300,
		  snackbar: 1400,
		  tooltip: 1500
		};
		var _default = zIndex$1;
		zIndex.default = _default;
		return zIndex;
	}

	var hasRequiredCreateTheme;

	function requireCreateTheme () {
		if (hasRequiredCreateTheme) return createTheme;
		hasRequiredCreateTheme = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createTheme, "__esModule", {
		  value: true
		});
		createTheme.createMuiTheme = createMuiTheme;
		createTheme.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _utils = requireUtils$4();
		var _system = requireSystem();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		var _createMixins = _interopRequireDefault(requireCreateMixins());
		var _createPalette = _interopRequireDefault(requireCreatePalette());
		var _createTypography = _interopRequireDefault(requireCreateTypography());
		var _shadows = _interopRequireDefault(requireShadows());
		var _createTransitions = _interopRequireDefault(requireCreateTransitions());
		var _zIndex = _interopRequireDefault(requireZIndex());
		const _excluded = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
		function createTheme$1(options = {}, ...args) {
		  const {
		      mixins: mixinsInput = {},
		      palette: paletteInput = {},
		      transitions: transitionsInput = {},
		      typography: typographyInput = {}
		    } = options,
		    other = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded);
		  if (options.vars) {
		    throw new Error(`MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` );
		  }
		  const palette = (0, _createPalette.default)(paletteInput);
		  const systemTheme = (0, _system.createTheme)(options);
		  let muiTheme = (0, _utils.deepmerge)(systemTheme, {
		    mixins: (0, _createMixins.default)(systemTheme.breakpoints, mixinsInput),
		    palette,
		    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
		    shadows: _shadows.default.slice(),
		    typography: (0, _createTypography.default)(palette, typographyInput),
		    transitions: (0, _createTransitions.default)(transitionsInput),
		    zIndex: (0, _extends2.default)({}, _zIndex.default)
		  });
		  muiTheme = (0, _utils.deepmerge)(muiTheme, other);
		  muiTheme = args.reduce((acc, argument) => (0, _utils.deepmerge)(acc, argument), muiTheme);
		  {
		    const stateClasses = ['active', 'checked', 'completed', 'disabled', 'error', 'expanded', 'focused', 'focusVisible', 'required', 'selected'];
		    const traverse = (node, component) => {
		      let key;

		      // eslint-disable-next-line guard-for-in, no-restricted-syntax
		      for (key in node) {
		        const child = node[key];
		        if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
		          {
		            const stateClass = (0, _generateUtilityClass.default)('', key);
		            console.error([`MUI: The \`${component}\` component increases ` + `the CSS specificity of the \`${key}\` internal state.`, 'You can not override it like this: ', JSON.stringify(node, null, 2), '', `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
		              root: {
		                [`&.${stateClass}`]: child
		              }
		            }, null, 2), '', 'https://mui.com/r/state-classes-guide'].join('\n'));
		          }
		          // Remove the style to prevent global conflicts.
		          node[key] = {};
		        }
		      }
		    };
		    Object.keys(muiTheme.components).forEach(component => {
		      const styleOverrides = muiTheme.components[component].styleOverrides;
		      if (styleOverrides && component.indexOf('Mui') === 0) {
		        traverse(styleOverrides, component);
		      }
		    });
		  }
		  return muiTheme;
		}
		let warnedOnce = false;
		function createMuiTheme(...args) {
		  {
		    if (!warnedOnce) {
		      warnedOnce = true;
		      console.error(['MUI: the createMuiTheme function was renamed to createTheme.', '', "You should use `import { createTheme } from '@mui/material/styles'`"].join('\n'));
		    }
		  }
		  return createTheme$1(...args);
		}
		var _default = createTheme$1;
		createTheme.default = _default;
		return createTheme;
	}

	var hasRequiredDefaultTheme;

	function requireDefaultTheme () {
		if (hasRequiredDefaultTheme) return defaultTheme;
		hasRequiredDefaultTheme = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(defaultTheme, "__esModule", {
		  value: true
		});
		defaultTheme.default = void 0;
		var _createTheme = _interopRequireDefault(requireCreateTheme());
		const defaultTheme$1 = (0, _createTheme.default)();
		var _default = defaultTheme$1;
		defaultTheme.default = _default;
		return defaultTheme;
	}

	var hasRequiredStyled;

	function requireStyled () {
		if (hasRequiredStyled) return styled;
		hasRequiredStyled = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(styled, "__esModule", {
		  value: true
		});
		styled.slotShouldForwardProp = styled.rootShouldForwardProp = styled.default = void 0;
		var _system = requireSystem();
		var _defaultTheme = _interopRequireDefault(requireDefaultTheme());
		const rootShouldForwardProp = prop => (0, _system.shouldForwardProp)(prop) && prop !== 'classes';
		styled.rootShouldForwardProp = rootShouldForwardProp;
		const slotShouldForwardProp = _system.shouldForwardProp;
		styled.slotShouldForwardProp = slotShouldForwardProp;
		const styled$1 = (0, _system.createStyled)({
		  defaultTheme: _defaultTheme.default,
		  rootShouldForwardProp
		});
		var _default = styled$1;
		styled.default = _default;
		return styled;
	}

	var useThemeProps = {};

	var hasRequiredUseThemeProps;

	function requireUseThemeProps () {
		if (hasRequiredUseThemeProps) return useThemeProps;
		hasRequiredUseThemeProps = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useThemeProps, "__esModule", {
		  value: true
		});
		useThemeProps.default = useThemeProps$1;
		var _system = requireSystem();
		var _defaultTheme = _interopRequireDefault(requireDefaultTheme());
		function useThemeProps$1({
		  props,
		  name
		}) {
		  return (0, _system.useThemeProps)({
		    props,
		    name,
		    defaultTheme: _defaultTheme.default
		  });
		}
		return useThemeProps;
	}

	var ButtonBase$1 = {};

	var ButtonBase = {};

	var useForkRef = {};

	var hasRequiredUseForkRef;

	function requireUseForkRef () {
		if (hasRequiredUseForkRef) return useForkRef;
		hasRequiredUseForkRef = 1;

		Object.defineProperty(useForkRef, "__esModule", {
		  value: true
		});
		useForkRef.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_useForkRef;
		useForkRef.default = _default;
		return useForkRef;
	}

	var useEventCallback = {};

	var hasRequiredUseEventCallback;

	function requireUseEventCallback () {
		if (hasRequiredUseEventCallback) return useEventCallback;
		hasRequiredUseEventCallback = 1;

		Object.defineProperty(useEventCallback, "__esModule", {
		  value: true
		});
		useEventCallback.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_useEventCallback;
		useEventCallback.default = _default;
		return useEventCallback;
	}

	var useIsFocusVisible = {};

	var hasRequiredUseIsFocusVisible;

	function requireUseIsFocusVisible () {
		if (hasRequiredUseIsFocusVisible) return useIsFocusVisible;
		hasRequiredUseIsFocusVisible = 1;

		Object.defineProperty(useIsFocusVisible, "__esModule", {
		  value: true
		});
		useIsFocusVisible.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_useIsFocusVisible;
		useIsFocusVisible.default = _default;
		return useIsFocusVisible;
	}

	var TouchRipple = {};

	var cjs = {};

	var CSSTransition = {exports: {}};

	var addClass = {exports: {}};

	var hasClass = {exports: {}};

	var hasRequiredHasClass;

	function requireHasClass () {
		if (hasRequiredHasClass) return hasClass.exports;
		hasRequiredHasClass = 1;
		(function (module, exports) {

			exports.__esModule = true;
			exports.default = hasClass;

			/**
			 * Checks if a given element has a CSS class.
			 * 
			 * @param element the element
			 * @param className the CSS class name
			 */
			function hasClass(element, className) {
			  if (element.classList) return !!className && element.classList.contains(className);
			  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
			}

			module.exports = exports["default"];
	} (hasClass, hasClass.exports));
		return hasClass.exports;
	}

	var hasRequiredAddClass;

	function requireAddClass () {
		if (hasRequiredAddClass) return addClass.exports;
		hasRequiredAddClass = 1;
		(function (module, exports) {

			var _interopRequireDefault = interopRequireDefault.exports;

			exports.__esModule = true;
			exports.default = addClass;

			var _hasClass = _interopRequireDefault(requireHasClass());

			/**
			 * Adds a CSS class to a given element.
			 * 
			 * @param element the element
			 * @param className the CSS class name
			 */
			function addClass(element, className) {
			  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
			}

			module.exports = exports["default"];
	} (addClass, addClass.exports));
		return addClass.exports;
	}

	var removeClass = {exports: {}};

	var hasRequiredRemoveClass;

	function requireRemoveClass () {
		if (hasRequiredRemoveClass) return removeClass.exports;
		hasRequiredRemoveClass = 1;
		(function (module, exports) {

			exports.__esModule = true;
			exports.default = removeClass;

			function replaceClassName(origClass, classToRemove) {
			  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
			}
			/**
			 * Removes a CSS class from a given element.
			 * 
			 * @param element the element
			 * @param className the CSS class name
			 */


			function removeClass(element, className) {
			  if (element.classList) {
			    element.classList.remove(className);
			  } else if (typeof element.className === 'string') {
			    element.className = replaceClassName(element.className, className);
			  } else {
			    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
			  }
			}

			module.exports = exports["default"];
	} (removeClass, removeClass.exports));
		return removeClass.exports;
	}

	var Transition = {};

	var config = {exports: {}};

	var hasRequiredConfig;

	function requireConfig () {
		if (hasRequiredConfig) return config.exports;
		hasRequiredConfig = 1;
		(function (module, exports) {

			exports.__esModule = true;
			exports.default = void 0;
			var _default = {
			  disabled: false
			};
			exports.default = _default;
			module.exports = exports.default;
	} (config, config.exports));
		return config.exports;
	}

	var PropTypes = {};

	var hasRequiredPropTypes;

	function requirePropTypes () {
		if (hasRequiredPropTypes) return PropTypes;
		hasRequiredPropTypes = 1;

		PropTypes.__esModule = true;
		PropTypes.classNamesShape = PropTypes.timeoutsShape = void 0;

		var _propTypes = _interopRequireDefault(requirePropTypes$1());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var timeoutsShape = _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
		  enter: _propTypes.default.number,
		  exit: _propTypes.default.number,
		  appear: _propTypes.default.number
		}).isRequired]) ;
		PropTypes.timeoutsShape = timeoutsShape;
		var classNamesShape = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
		  enter: _propTypes.default.string,
		  exit: _propTypes.default.string,
		  active: _propTypes.default.string
		}), _propTypes.default.shape({
		  enter: _propTypes.default.string,
		  enterDone: _propTypes.default.string,
		  enterActive: _propTypes.default.string,
		  exit: _propTypes.default.string,
		  exitDone: _propTypes.default.string,
		  exitActive: _propTypes.default.string
		})]) ;
		PropTypes.classNamesShape = classNamesShape;
		return PropTypes;
	}

	var TransitionGroupContext = {exports: {}};

	var hasRequiredTransitionGroupContext;

	function requireTransitionGroupContext () {
		if (hasRequiredTransitionGroupContext) return TransitionGroupContext.exports;
		hasRequiredTransitionGroupContext = 1;
		(function (module, exports) {

			exports.__esModule = true;
			exports.default = void 0;

			var _react = _interopRequireDefault(require$$3);

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			var _default = _react.default.createContext(null);

			exports.default = _default;
			module.exports = exports.default;
	} (TransitionGroupContext, TransitionGroupContext.exports));
		return TransitionGroupContext.exports;
	}

	var reflow = {};

	var hasRequiredReflow;

	function requireReflow () {
		if (hasRequiredReflow) return reflow;
		hasRequiredReflow = 1;

		reflow.__esModule = true;
		reflow.forceReflow = void 0;

		var forceReflow = function forceReflow(node) {
		  return node.scrollTop;
		};

		reflow.forceReflow = forceReflow;
		return reflow;
	}

	var hasRequiredTransition;

	function requireTransition () {
		if (hasRequiredTransition) return Transition;
		hasRequiredTransition = 1;

		Transition.__esModule = true;
		Transition.default = Transition.EXITING = Transition.ENTERED = Transition.ENTERING = Transition.EXITED = Transition.UNMOUNTED = void 0;

		var _propTypes = _interopRequireDefault(requirePropTypes$1());

		var _react = _interopRequireDefault(require$$3);

		var _reactDom = _interopRequireDefault(require$$3);

		var _config = _interopRequireDefault(requireConfig());

		var _PropTypes = requirePropTypes();

		var _TransitionGroupContext = _interopRequireDefault(requireTransitionGroupContext());

		var _reflow = requireReflow();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

		var UNMOUNTED = 'unmounted';
		Transition.UNMOUNTED = UNMOUNTED;
		var EXITED = 'exited';
		Transition.EXITED = EXITED;
		var ENTERING = 'entering';
		Transition.ENTERING = ENTERING;
		var ENTERED = 'entered';
		Transition.ENTERED = ENTERED;
		var EXITING = 'exiting';
		/**
		 * The Transition component lets you describe a transition from one component
		 * state to another _over time_ with a simple declarative API. Most commonly
		 * it's used to animate the mounting and unmounting of a component, but can also
		 * be used to describe in-place transition states as well.
		 *
		 * ---
		 *
		 * **Note**: `Transition` is a platform-agnostic base component. If you're using
		 * transitions in CSS, you'll probably want to use
		 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
		 * instead. It inherits all the features of `Transition`, but contains
		 * additional features necessary to play nice with CSS transitions (hence the
		 * name of the component).
		 *
		 * ---
		 *
		 * By default the `Transition` component does not alter the behavior of the
		 * component it renders, it only tracks "enter" and "exit" states for the
		 * components. It's up to you to give meaning and effect to those states. For
		 * example we can add styles to a component when it enters or exits:
		 *
		 * ```jsx
		 * import { Transition } from 'react-transition-group';
		 *
		 * const duration = 300;
		 *
		 * const defaultStyle = {
		 *   transition: `opacity ${duration}ms ease-in-out`,
		 *   opacity: 0,
		 * }
		 *
		 * const transitionStyles = {
		 *   entering: { opacity: 1 },
		 *   entered:  { opacity: 1 },
		 *   exiting:  { opacity: 0 },
		 *   exited:  { opacity: 0 },
		 * };
		 *
		 * const Fade = ({ in: inProp }) => (
		 *   <Transition in={inProp} timeout={duration}>
		 *     {state => (
		 *       <div style={{
		 *         ...defaultStyle,
		 *         ...transitionStyles[state]
		 *       }}>
		 *         I'm a fade Transition!
		 *       </div>
		 *     )}
		 *   </Transition>
		 * );
		 * ```
		 *
		 * There are 4 main states a Transition can be in:
		 *  - `'entering'`
		 *  - `'entered'`
		 *  - `'exiting'`
		 *  - `'exited'`
		 *
		 * Transition state is toggled via the `in` prop. When `true` the component
		 * begins the "Enter" stage. During this stage, the component will shift from
		 * its current transition state, to `'entering'` for the duration of the
		 * transition and then to the `'entered'` stage once it's complete. Let's take
		 * the following example (we'll use the
		 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
		 *
		 * ```jsx
		 * function App() {
		 *   const [inProp, setInProp] = useState(false);
		 *   return (
		 *     <div>
		 *       <Transition in={inProp} timeout={500}>
		 *         {state => (
		 *           // ...
		 *         )}
		 *       </Transition>
		 *       <button onClick={() => setInProp(true)}>
		 *         Click to Enter
		 *       </button>
		 *     </div>
		 *   );
		 * }
		 * ```
		 *
		 * When the button is clicked the component will shift to the `'entering'` state
		 * and stay there for 500ms (the value of `timeout`) before it finally switches
		 * to `'entered'`.
		 *
		 * When `in` is `false` the same thing happens except the state moves from
		 * `'exiting'` to `'exited'`.
		 */

		Transition.EXITING = EXITING;

		var Transition$1 = /*#__PURE__*/function (_React$Component) {
		  _inheritsLoose(Transition, _React$Component);

		  function Transition(props, context) {
		    var _this;

		    _this = _React$Component.call(this, props, context) || this;
		    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

		    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
		    var initialStatus;
		    _this.appearStatus = null;

		    if (props.in) {
		      if (appear) {
		        initialStatus = EXITED;
		        _this.appearStatus = ENTERING;
		      } else {
		        initialStatus = ENTERED;
		      }
		    } else {
		      if (props.unmountOnExit || props.mountOnEnter) {
		        initialStatus = UNMOUNTED;
		      } else {
		        initialStatus = EXITED;
		      }
		    }

		    _this.state = {
		      status: initialStatus
		    };
		    _this.nextCallback = null;
		    return _this;
		  }

		  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
		    var nextIn = _ref.in;

		    if (nextIn && prevState.status === UNMOUNTED) {
		      return {
		        status: EXITED
		      };
		    }

		    return null;
		  } // getSnapshotBeforeUpdate(prevProps) {
		  //   let nextStatus = null
		  //   if (prevProps !== this.props) {
		  //     const { status } = this.state
		  //     if (this.props.in) {
		  //       if (status !== ENTERING && status !== ENTERED) {
		  //         nextStatus = ENTERING
		  //       }
		  //     } else {
		  //       if (status === ENTERING || status === ENTERED) {
		  //         nextStatus = EXITING
		  //       }
		  //     }
		  //   }
		  //   return { nextStatus }
		  // }
		  ;

		  var _proto = Transition.prototype;

		  _proto.componentDidMount = function componentDidMount() {
		    this.updateStatus(true, this.appearStatus);
		  };

		  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
		    var nextStatus = null;

		    if (prevProps !== this.props) {
		      var status = this.state.status;

		      if (this.props.in) {
		        if (status !== ENTERING && status !== ENTERED) {
		          nextStatus = ENTERING;
		        }
		      } else {
		        if (status === ENTERING || status === ENTERED) {
		          nextStatus = EXITING;
		        }
		      }
		    }

		    this.updateStatus(false, nextStatus);
		  };

		  _proto.componentWillUnmount = function componentWillUnmount() {
		    this.cancelNextCallback();
		  };

		  _proto.getTimeouts = function getTimeouts() {
		    var timeout = this.props.timeout;
		    var exit, enter, appear;
		    exit = enter = appear = timeout;

		    if (timeout != null && typeof timeout !== 'number') {
		      exit = timeout.exit;
		      enter = timeout.enter; // TODO: remove fallback for next major

		      appear = timeout.appear !== undefined ? timeout.appear : enter;
		    }

		    return {
		      exit: exit,
		      enter: enter,
		      appear: appear
		    };
		  };

		  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
		    if (mounting === void 0) {
		      mounting = false;
		    }

		    if (nextStatus !== null) {
		      // nextStatus will always be ENTERING or EXITING.
		      this.cancelNextCallback();

		      if (nextStatus === ENTERING) {
		        if (this.props.unmountOnExit || this.props.mountOnEnter) {
		          var node = this.props.nodeRef ? this.props.nodeRef.current : _reactDom.default.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749
		          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.
		          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

		          if (node) (0, _reflow.forceReflow)(node);
		        }

		        this.performEnter(mounting);
		      } else {
		        this.performExit();
		      }
		    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
		      this.setState({
		        status: UNMOUNTED
		      });
		    }
		  };

		  _proto.performEnter = function performEnter(mounting) {
		    var _this2 = this;

		    var enter = this.props.enter;
		    var appearing = this.context ? this.context.isMounting : mounting;

		    var _ref2 = this.props.nodeRef ? [appearing] : [_reactDom.default.findDOMNode(this), appearing],
		        maybeNode = _ref2[0],
		        maybeAppearing = _ref2[1];

		    var timeouts = this.getTimeouts();
		    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
		    // if we are mounting and running this it means appear _must_ be set

		    if (!mounting && !enter || _config.default.disabled) {
		      this.safeSetState({
		        status: ENTERED
		      }, function () {
		        _this2.props.onEntered(maybeNode);
		      });
		      return;
		    }

		    this.props.onEnter(maybeNode, maybeAppearing);
		    this.safeSetState({
		      status: ENTERING
		    }, function () {
		      _this2.props.onEntering(maybeNode, maybeAppearing);

		      _this2.onTransitionEnd(enterTimeout, function () {
		        _this2.safeSetState({
		          status: ENTERED
		        }, function () {
		          _this2.props.onEntered(maybeNode, maybeAppearing);
		        });
		      });
		    });
		  };

		  _proto.performExit = function performExit() {
		    var _this3 = this;

		    var exit = this.props.exit;
		    var timeouts = this.getTimeouts();
		    var maybeNode = this.props.nodeRef ? undefined : _reactDom.default.findDOMNode(this); // no exit animation skip right to EXITED

		    if (!exit || _config.default.disabled) {
		      this.safeSetState({
		        status: EXITED
		      }, function () {
		        _this3.props.onExited(maybeNode);
		      });
		      return;
		    }

		    this.props.onExit(maybeNode);
		    this.safeSetState({
		      status: EXITING
		    }, function () {
		      _this3.props.onExiting(maybeNode);

		      _this3.onTransitionEnd(timeouts.exit, function () {
		        _this3.safeSetState({
		          status: EXITED
		        }, function () {
		          _this3.props.onExited(maybeNode);
		        });
		      });
		    });
		  };

		  _proto.cancelNextCallback = function cancelNextCallback() {
		    if (this.nextCallback !== null) {
		      this.nextCallback.cancel();
		      this.nextCallback = null;
		    }
		  };

		  _proto.safeSetState = function safeSetState(nextState, callback) {
		    // This shouldn't be necessary, but there are weird race conditions with
		    // setState callbacks and unmounting in testing, so always make sure that
		    // we can cancel any pending setState callbacks after we unmount.
		    callback = this.setNextCallback(callback);
		    this.setState(nextState, callback);
		  };

		  _proto.setNextCallback = function setNextCallback(callback) {
		    var _this4 = this;

		    var active = true;

		    this.nextCallback = function (event) {
		      if (active) {
		        active = false;
		        _this4.nextCallback = null;
		        callback(event);
		      }
		    };

		    this.nextCallback.cancel = function () {
		      active = false;
		    };

		    return this.nextCallback;
		  };

		  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
		    this.setNextCallback(handler);
		    var node = this.props.nodeRef ? this.props.nodeRef.current : _reactDom.default.findDOMNode(this);
		    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

		    if (!node || doesNotHaveTimeoutOrListener) {
		      setTimeout(this.nextCallback, 0);
		      return;
		    }

		    if (this.props.addEndListener) {
		      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
		          maybeNode = _ref3[0],
		          maybeNextCallback = _ref3[1];

		      this.props.addEndListener(maybeNode, maybeNextCallback);
		    }

		    if (timeout != null) {
		      setTimeout(this.nextCallback, timeout);
		    }
		  };

		  _proto.render = function render() {
		    var status = this.state.status;

		    if (status === UNMOUNTED) {
		      return null;
		    }

		    var _this$props = this.props,
		        children = _this$props.children;
		        _this$props.in;
		        _this$props.mountOnEnter;
		        _this$props.unmountOnExit;
		        _this$props.appear;
		        _this$props.enter;
		        _this$props.exit;
		        _this$props.timeout;
		        _this$props.addEndListener;
		        _this$props.onEnter;
		        _this$props.onEntering;
		        _this$props.onEntered;
		        _this$props.onExit;
		        _this$props.onExiting;
		        _this$props.onExited;
		        _this$props.nodeRef;
		        var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

		    return (
		      /*#__PURE__*/
		      // allows for nested Transitions
		      _react.default.createElement(_TransitionGroupContext.default.Provider, {
		        value: null
		      }, typeof children === 'function' ? children(status, childProps) : _react.default.cloneElement(_react.default.Children.only(children), childProps))
		    );
		  };

		  return Transition;
		}(_react.default.Component);

		Transition$1.contextType = _TransitionGroupContext.default;
		Transition$1.propTypes = {
		  /**
		   * A React reference to DOM element that need to transition:
		   * https://stackoverflow.com/a/51127130/4671932
		   *
		   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
		   *      (e.g. `onEnter`) because user already has direct access to the node.
		   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
		   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
		   *     (see
		   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
		   */
		  nodeRef: _propTypes.default.shape({
		    current: typeof Element === 'undefined' ? _propTypes.default.any : function (propValue, key, componentName, location, propFullName, secret) {
		      var value = propValue[key];
		      return _propTypes.default.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
		    }
		  }),

		  /**
		   * A `function` child can be used instead of a React element. This function is
		   * called with the current transition status (`'entering'`, `'entered'`,
		   * `'exiting'`, `'exited'`), which can be used to apply context
		   * specific props to a component.
		   *
		   * ```jsx
		   * <Transition in={this.state.in} timeout={150}>
		   *   {state => (
		   *     <MyComponent className={`fade fade-${state}`} />
		   *   )}
		   * </Transition>
		   * ```
		   */
		  children: _propTypes.default.oneOfType([_propTypes.default.func.isRequired, _propTypes.default.element.isRequired]).isRequired,

		  /**
		   * Show the component; triggers the enter or exit states
		   */
		  in: _propTypes.default.bool,

		  /**
		   * By default the child component is mounted immediately along with
		   * the parent `Transition` component. If you want to "lazy mount" the component on the
		   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
		   * mounted, even on "exited", unless you also specify `unmountOnExit`.
		   */
		  mountOnEnter: _propTypes.default.bool,

		  /**
		   * By default the child component stays mounted after it reaches the `'exited'` state.
		   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
		   */
		  unmountOnExit: _propTypes.default.bool,

		  /**
		   * By default the child component does not perform the enter transition when
		   * it first mounts, regardless of the value of `in`. If you want this
		   * behavior, set both `appear` and `in` to `true`.
		   *
		   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
		   * > only adds an additional enter transition. However, in the
		   * > `<CSSTransition>` component that first enter transition does result in
		   * > additional `.appear-*` classes, that way you can choose to style it
		   * > differently.
		   */
		  appear: _propTypes.default.bool,

		  /**
		   * Enable or disable enter transitions.
		   */
		  enter: _propTypes.default.bool,

		  /**
		   * Enable or disable exit transitions.
		   */
		  exit: _propTypes.default.bool,

		  /**
		   * The duration of the transition, in milliseconds.
		   * Required unless `addEndListener` is provided.
		   *
		   * You may specify a single timeout for all transitions:
		   *
		   * ```jsx
		   * timeout={500}
		   * ```
		   *
		   * or individually:
		   *
		   * ```jsx
		   * timeout={{
		   *  appear: 500,
		   *  enter: 300,
		   *  exit: 500,
		   * }}
		   * ```
		   *
		   * - `appear` defaults to the value of `enter`
		   * - `enter` defaults to `0`
		   * - `exit` defaults to `0`
		   *
		   * @type {number | { enter?: number, exit?: number, appear?: number }}
		   */
		  timeout: function timeout(props) {
		    var pt = _PropTypes.timeoutsShape;
		    if (!props.addEndListener) pt = pt.isRequired;

		    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		      args[_key - 1] = arguments[_key];
		    }

		    return pt.apply(void 0, [props].concat(args));
		  },

		  /**
		   * Add a custom transition end trigger. Called with the transitioning
		   * DOM node and a `done` callback. Allows for more fine grained transition end
		   * logic. Timeouts are still used as a fallback if provided.
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
		   *
		   * ```jsx
		   * addEndListener={(node, done) => {
		   *   // use the css transitionend event to mark the finish of a transition
		   *   node.addEventListener('transitionend', done, false);
		   * }}
		   * ```
		   */
		  addEndListener: _propTypes.default.func,

		  /**
		   * Callback fired before the "entering" status is applied. An extra parameter
		   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
		   *
		   * @type Function(node: HtmlElement, isAppearing: bool) -> void
		   */
		  onEnter: _propTypes.default.func,

		  /**
		   * Callback fired after the "entering" status is applied. An extra parameter
		   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
		   *
		   * @type Function(node: HtmlElement, isAppearing: bool)
		   */
		  onEntering: _propTypes.default.func,

		  /**
		   * Callback fired after the "entered" status is applied. An extra parameter
		   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
		   *
		   * @type Function(node: HtmlElement, isAppearing: bool) -> void
		   */
		  onEntered: _propTypes.default.func,

		  /**
		   * Callback fired before the "exiting" status is applied.
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
		   *
		   * @type Function(node: HtmlElement) -> void
		   */
		  onExit: _propTypes.default.func,

		  /**
		   * Callback fired after the "exiting" status is applied.
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
		   *
		   * @type Function(node: HtmlElement) -> void
		   */
		  onExiting: _propTypes.default.func,

		  /**
		   * Callback fired after the "exited" status is applied.
		   *
		   * **Note**: when `nodeRef` prop is passed, `node` is not passed
		   *
		   * @type Function(node: HtmlElement) -> void
		   */
		  onExited: _propTypes.default.func
		} ; // Name the function so it is clearer in the documentation

		function noop() {}

		Transition$1.defaultProps = {
		  in: false,
		  mountOnEnter: false,
		  unmountOnExit: false,
		  appear: false,
		  enter: true,
		  exit: true,
		  onEnter: noop,
		  onEntering: noop,
		  onEntered: noop,
		  onExit: noop,
		  onExiting: noop,
		  onExited: noop
		};
		Transition$1.UNMOUNTED = UNMOUNTED;
		Transition$1.EXITED = EXITED;
		Transition$1.ENTERING = ENTERING;
		Transition$1.ENTERED = ENTERED;
		Transition$1.EXITING = EXITING;
		var _default = Transition$1;
		Transition.default = _default;
		return Transition;
	}

	var hasRequiredCSSTransition;

	function requireCSSTransition () {
		if (hasRequiredCSSTransition) return CSSTransition.exports;
		hasRequiredCSSTransition = 1;
		(function (module, exports) {

			exports.__esModule = true;
			exports.default = void 0;

			var _propTypes = _interopRequireDefault(requirePropTypes$1());

			var _addClass2 = _interopRequireDefault(requireAddClass());

			var _removeClass = _interopRequireDefault(requireRemoveClass());

			var _react = _interopRequireDefault(require$$3);

			var _Transition = _interopRequireDefault(requireTransition());

			var _PropTypes = requirePropTypes();

			var _reflow = requireReflow();

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

			function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

			function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

			var _addClass = function addClass(node, classes) {
			  return node && classes && classes.split(' ').forEach(function (c) {
			    return (0, _addClass2.default)(node, c);
			  });
			};

			var removeClass = function removeClass(node, classes) {
			  return node && classes && classes.split(' ').forEach(function (c) {
			    return (0, _removeClass.default)(node, c);
			  });
			};
			/**
			 * A transition component inspired by the excellent
			 * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
			 * use it if you're using CSS transitions or animations. It's built upon the
			 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
			 * component, so it inherits all of its props.
			 *
			 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
			 * and `exit` states of the transition. The first class is applied and then a
			 * second `*-active` class in order to activate the CSS transition. After the
			 * transition, matching `*-done` class names are applied to persist the
			 * transition state.
			 *
			 * ```jsx
			 * function App() {
			 *   const [inProp, setInProp] = useState(false);
			 *   return (
			 *     <div>
			 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
			 *         <div>
			 *           {"I'll receive my-node-* classes"}
			 *         </div>
			 *       </CSSTransition>
			 *       <button type="button" onClick={() => setInProp(true)}>
			 *         Click to Enter
			 *       </button>
			 *     </div>
			 *   );
			 * }
			 * ```
			 *
			 * When the `in` prop is set to `true`, the child component will first receive
			 * the class `example-enter`, then the `example-enter-active` will be added in
			 * the next tick. `CSSTransition` [forces a
			 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
			 * between before adding the `example-enter-active`. This is an important trick
			 * because it allows us to transition between `example-enter` and
			 * `example-enter-active` even though they were added immediately one after
			 * another. Most notably, this is what makes it possible for us to animate
			 * _appearance_.
			 *
			 * ```css
			 * .my-node-enter {
			 *   opacity: 0;
			 * }
			 * .my-node-enter-active {
			 *   opacity: 1;
			 *   transition: opacity 200ms;
			 * }
			 * .my-node-exit {
			 *   opacity: 1;
			 * }
			 * .my-node-exit-active {
			 *   opacity: 0;
			 *   transition: opacity 200ms;
			 * }
			 * ```
			 *
			 * `*-active` classes represent which styles you want to animate **to**, so it's
			 * important to add `transition` declaration only to them, otherwise transitions
			 * might not behave as intended! This might not be obvious when the transitions
			 * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
			 * the example above (minus `transition`), but it becomes apparent in more
			 * complex transitions.
			 *
			 * **Note**: If you're using the
			 * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
			 * prop, make sure to define styles for `.appear-*` classes as well.
			 */


			var CSSTransition = /*#__PURE__*/function (_React$Component) {
			  _inheritsLoose(CSSTransition, _React$Component);

			  function CSSTransition() {
			    var _this;

			    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
			      args[_key] = arguments[_key];
			    }

			    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
			    _this.appliedClasses = {
			      appear: {},
			      enter: {},
			      exit: {}
			    };

			    _this.onEnter = function (maybeNode, maybeAppearing) {
			      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
			          node = _this$resolveArgument[0],
			          appearing = _this$resolveArgument[1];

			      _this.removeClasses(node, 'exit');

			      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

			      if (_this.props.onEnter) {
			        _this.props.onEnter(maybeNode, maybeAppearing);
			      }
			    };

			    _this.onEntering = function (maybeNode, maybeAppearing) {
			      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
			          node = _this$resolveArgument2[0],
			          appearing = _this$resolveArgument2[1];

			      var type = appearing ? 'appear' : 'enter';

			      _this.addClass(node, type, 'active');

			      if (_this.props.onEntering) {
			        _this.props.onEntering(maybeNode, maybeAppearing);
			      }
			    };

			    _this.onEntered = function (maybeNode, maybeAppearing) {
			      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
			          node = _this$resolveArgument3[0],
			          appearing = _this$resolveArgument3[1];

			      var type = appearing ? 'appear' : 'enter';

			      _this.removeClasses(node, type);

			      _this.addClass(node, type, 'done');

			      if (_this.props.onEntered) {
			        _this.props.onEntered(maybeNode, maybeAppearing);
			      }
			    };

			    _this.onExit = function (maybeNode) {
			      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
			          node = _this$resolveArgument4[0];

			      _this.removeClasses(node, 'appear');

			      _this.removeClasses(node, 'enter');

			      _this.addClass(node, 'exit', 'base');

			      if (_this.props.onExit) {
			        _this.props.onExit(maybeNode);
			      }
			    };

			    _this.onExiting = function (maybeNode) {
			      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
			          node = _this$resolveArgument5[0];

			      _this.addClass(node, 'exit', 'active');

			      if (_this.props.onExiting) {
			        _this.props.onExiting(maybeNode);
			      }
			    };

			    _this.onExited = function (maybeNode) {
			      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
			          node = _this$resolveArgument6[0];

			      _this.removeClasses(node, 'exit');

			      _this.addClass(node, 'exit', 'done');

			      if (_this.props.onExited) {
			        _this.props.onExited(maybeNode);
			      }
			    };

			    _this.resolveArguments = function (maybeNode, maybeAppearing) {
			      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
			      : [maybeNode, maybeAppearing];
			    };

			    _this.getClassNames = function (type) {
			      var classNames = _this.props.classNames;
			      var isStringClassNames = typeof classNames === 'string';
			      var prefix = isStringClassNames && classNames ? classNames + "-" : '';
			      var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
			      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
			      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
			      return {
			        baseClassName: baseClassName,
			        activeClassName: activeClassName,
			        doneClassName: doneClassName
			      };
			    };

			    return _this;
			  }

			  var _proto = CSSTransition.prototype;

			  _proto.addClass = function addClass(node, type, phase) {
			    var className = this.getClassNames(type)[phase + "ClassName"];

			    var _this$getClassNames = this.getClassNames('enter'),
			        doneClassName = _this$getClassNames.doneClassName;

			    if (type === 'appear' && phase === 'done' && doneClassName) {
			      className += " " + doneClassName;
			    } // This is to force a repaint,
			    // which is necessary in order to transition styles when adding a class name.


			    if (phase === 'active') {
			      if (node) (0, _reflow.forceReflow)(node);
			    }

			    if (className) {
			      this.appliedClasses[type][phase] = className;

			      _addClass(node, className);
			    }
			  };

			  _proto.removeClasses = function removeClasses(node, type) {
			    var _this$appliedClasses$ = this.appliedClasses[type],
			        baseClassName = _this$appliedClasses$.base,
			        activeClassName = _this$appliedClasses$.active,
			        doneClassName = _this$appliedClasses$.done;
			    this.appliedClasses[type] = {};

			    if (baseClassName) {
			      removeClass(node, baseClassName);
			    }

			    if (activeClassName) {
			      removeClass(node, activeClassName);
			    }

			    if (doneClassName) {
			      removeClass(node, doneClassName);
			    }
			  };

			  _proto.render = function render() {
			    var _this$props = this.props;
			        _this$props.classNames;
			        var props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);

			    return /*#__PURE__*/_react.default.createElement(_Transition.default, _extends({}, props, {
			      onEnter: this.onEnter,
			      onEntered: this.onEntered,
			      onEntering: this.onEntering,
			      onExit: this.onExit,
			      onExiting: this.onExiting,
			      onExited: this.onExited
			    }));
			  };

			  return CSSTransition;
			}(_react.default.Component);

			CSSTransition.defaultProps = {
			  classNames: ''
			};
			CSSTransition.propTypes = _extends({}, _Transition.default.propTypes, {
			  /**
			   * The animation classNames applied to the component as it appears, enters,
			   * exits or has finished the transition. A single name can be provided, which
			   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
			   *
			   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
			   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
			   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
			   *
			   * A few details to note about how these classes are applied:
			   *
			   * 1. They are _joined_ with the ones that are already defined on the child
			   *    component, so if you want to add some base styles, you can use
			   *    `className` without worrying that it will be overridden.
			   *
			   * 2. If the transition component mounts with `in={false}`, no classes are
			   *    applied yet. You might be expecting `*-exit-done`, but if you think
			   *    about it, a component cannot finish exiting if it hasn't entered yet.
			   *
			   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
			   *    allows you to define different behavior for when appearing is done and
			   *    when regular entering is done, using selectors like
			   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
			   *    an epic entrance animation when element first appears in the DOM using
			   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
			   *    simply use `fade-enter-done` for defining both cases.
			   *
			   * Each individual classNames can also be specified independently like:
			   *
			   * ```js
			   * classNames={{
			   *  appear: 'my-appear',
			   *  appearActive: 'my-active-appear',
			   *  appearDone: 'my-done-appear',
			   *  enter: 'my-enter',
			   *  enterActive: 'my-active-enter',
			   *  enterDone: 'my-done-enter',
			   *  exit: 'my-exit',
			   *  exitActive: 'my-active-exit',
			   *  exitDone: 'my-done-exit',
			   * }}
			   * ```
			   *
			   * If you want to set these classes using CSS Modules:
			   *
			   * ```js
			   * import styles from './styles.css';
			   * ```
			   *
			   * you might want to use camelCase in your CSS file, that way could simply
			   * spread them instead of listing them one by one:
			   *
			   * ```js
			   * classNames={{ ...styles }}
			   * ```
			   *
			   * @type {string | {
			   *  appear?: string,
			   *  appearActive?: string,
			   *  appearDone?: string,
			   *  enter?: string,
			   *  enterActive?: string,
			   *  enterDone?: string,
			   *  exit?: string,
			   *  exitActive?: string,
			   *  exitDone?: string,
			   * }}
			   */
			  classNames: _PropTypes.classNamesShape,

			  /**
			   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
			   * applied.
			   *
			   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
			   *
			   * @type Function(node: HtmlElement, isAppearing: bool)
			   */
			  onEnter: _propTypes.default.func,

			  /**
			   * A `<Transition>` callback fired immediately after the 'enter-active' or
			   * 'appear-active' class is applied.
			   *
			   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
			   *
			   * @type Function(node: HtmlElement, isAppearing: bool)
			   */
			  onEntering: _propTypes.default.func,

			  /**
			   * A `<Transition>` callback fired immediately after the 'enter' or
			   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
			   *
			   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
			   *
			   * @type Function(node: HtmlElement, isAppearing: bool)
			   */
			  onEntered: _propTypes.default.func,

			  /**
			   * A `<Transition>` callback fired immediately after the 'exit' class is
			   * applied.
			   *
			   * **Note**: when `nodeRef` prop is passed, `node` is not passed
			   *
			   * @type Function(node: HtmlElement)
			   */
			  onExit: _propTypes.default.func,

			  /**
			   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
			   *
			   * **Note**: when `nodeRef` prop is passed, `node` is not passed
			   *
			   * @type Function(node: HtmlElement)
			   */
			  onExiting: _propTypes.default.func,

			  /**
			   * A `<Transition>` callback fired immediately after the 'exit' classes
			   * are **removed** and the `exit-done` class is added to the DOM node.
			   *
			   * **Note**: when `nodeRef` prop is passed, `node` is not passed
			   *
			   * @type Function(node: HtmlElement)
			   */
			  onExited: _propTypes.default.func
			}) ;
			var _default = CSSTransition;
			exports.default = _default;
			module.exports = exports.default;
	} (CSSTransition, CSSTransition.exports));
		return CSSTransition.exports;
	}

	var ReplaceTransition = {exports: {}};

	var TransitionGroup = {exports: {}};

	var ChildMapping = {};

	var hasRequiredChildMapping;

	function requireChildMapping () {
		if (hasRequiredChildMapping) return ChildMapping;
		hasRequiredChildMapping = 1;

		ChildMapping.__esModule = true;
		ChildMapping.getChildMapping = getChildMapping;
		ChildMapping.mergeChildMappings = mergeChildMappings;
		ChildMapping.getInitialChildMapping = getInitialChildMapping;
		ChildMapping.getNextChildMapping = getNextChildMapping;

		var _react = require$$3;

		/**
		 * Given `this.props.children`, return an object mapping key to child.
		 *
		 * @param {*} children `this.props.children`
		 * @return {object} Mapping of key to child
		 */
		function getChildMapping(children, mapFn) {
		  var mapper = function mapper(child) {
		    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
		  };

		  var result = Object.create(null);
		  if (children) _react.Children.map(children, function (c) {
		    return c;
		  }).forEach(function (child) {
		    // run the map function here instead so that the key is the computed one
		    result[child.key] = mapper(child);
		  });
		  return result;
		}
		/**
		 * When you're adding or removing children some may be added or removed in the
		 * same render pass. We want to show *both* since we want to simultaneously
		 * animate elements in and out. This function takes a previous set of keys
		 * and a new set of keys and merges them with its best guess of the correct
		 * ordering. In the future we may expose some of the utilities in
		 * ReactMultiChild to make this easy, but for now React itself does not
		 * directly have this concept of the union of prevChildren and nextChildren
		 * so we implement it here.
		 *
		 * @param {object} prev prev children as returned from
		 * `ReactTransitionChildMapping.getChildMapping()`.
		 * @param {object} next next children as returned from
		 * `ReactTransitionChildMapping.getChildMapping()`.
		 * @return {object} a key set that contains all keys in `prev` and all keys
		 * in `next` in a reasonable order.
		 */


		function mergeChildMappings(prev, next) {
		  prev = prev || {};
		  next = next || {};

		  function getValueForKey(key) {
		    return key in next ? next[key] : prev[key];
		  } // For each key of `next`, the list of keys to insert before that key in
		  // the combined list


		  var nextKeysPending = Object.create(null);
		  var pendingKeys = [];

		  for (var prevKey in prev) {
		    if (prevKey in next) {
		      if (pendingKeys.length) {
		        nextKeysPending[prevKey] = pendingKeys;
		        pendingKeys = [];
		      }
		    } else {
		      pendingKeys.push(prevKey);
		    }
		  }

		  var i;
		  var childMapping = {};

		  for (var nextKey in next) {
		    if (nextKeysPending[nextKey]) {
		      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
		        var pendingNextKey = nextKeysPending[nextKey][i];
		        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
		      }
		    }

		    childMapping[nextKey] = getValueForKey(nextKey);
		  } // Finally, add the keys which didn't appear before any key in `next`


		  for (i = 0; i < pendingKeys.length; i++) {
		    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
		  }

		  return childMapping;
		}

		function getProp(child, prop, props) {
		  return props[prop] != null ? props[prop] : child.props[prop];
		}

		function getInitialChildMapping(props, onExited) {
		  return getChildMapping(props.children, function (child) {
		    return (0, _react.cloneElement)(child, {
		      onExited: onExited.bind(null, child),
		      in: true,
		      appear: getProp(child, 'appear', props),
		      enter: getProp(child, 'enter', props),
		      exit: getProp(child, 'exit', props)
		    });
		  });
		}

		function getNextChildMapping(nextProps, prevChildMapping, onExited) {
		  var nextChildMapping = getChildMapping(nextProps.children);
		  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
		  Object.keys(children).forEach(function (key) {
		    var child = children[key];
		    if (!(0, _react.isValidElement)(child)) return;
		    var hasPrev = (key in prevChildMapping);
		    var hasNext = (key in nextChildMapping);
		    var prevChild = prevChildMapping[key];
		    var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

		    if (hasNext && (!hasPrev || isLeaving)) {
		      // console.log('entering', key)
		      children[key] = (0, _react.cloneElement)(child, {
		        onExited: onExited.bind(null, child),
		        in: true,
		        exit: getProp(child, 'exit', nextProps),
		        enter: getProp(child, 'enter', nextProps)
		      });
		    } else if (!hasNext && hasPrev && !isLeaving) {
		      // item is old (exiting)
		      // console.log('leaving', key)
		      children[key] = (0, _react.cloneElement)(child, {
		        in: false
		      });
		    } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
		      // item hasn't changed transition states
		      // copy over the last transition props;
		      // console.log('unchanged', key)
		      children[key] = (0, _react.cloneElement)(child, {
		        onExited: onExited.bind(null, child),
		        in: prevChild.props.in,
		        exit: getProp(child, 'exit', nextProps),
		        enter: getProp(child, 'enter', nextProps)
		      });
		    }
		  });
		  return children;
		}
		return ChildMapping;
	}

	var hasRequiredTransitionGroup;

	function requireTransitionGroup () {
		if (hasRequiredTransitionGroup) return TransitionGroup.exports;
		hasRequiredTransitionGroup = 1;
		(function (module, exports) {

			exports.__esModule = true;
			exports.default = void 0;

			var _propTypes = _interopRequireDefault(requirePropTypes$1());

			var _react = _interopRequireDefault(require$$3);

			var _TransitionGroupContext = _interopRequireDefault(requireTransitionGroupContext());

			var _ChildMapping = requireChildMapping();

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

			function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

			function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

			function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

			var values = Object.values || function (obj) {
			  return Object.keys(obj).map(function (k) {
			    return obj[k];
			  });
			};

			var defaultProps = {
			  component: 'div',
			  childFactory: function childFactory(child) {
			    return child;
			  }
			};
			/**
			 * The `<TransitionGroup>` component manages a set of transition components
			 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
			 * components, `<TransitionGroup>` is a state machine for managing the mounting
			 * and unmounting of components over time.
			 *
			 * Consider the example below. As items are removed or added to the TodoList the
			 * `in` prop is toggled automatically by the `<TransitionGroup>`.
			 *
			 * Note that `<TransitionGroup>`  does not define any animation behavior!
			 * Exactly _how_ a list item animates is up to the individual transition
			 * component. This means you can mix and match animations across different list
			 * items.
			 */

			var TransitionGroup = /*#__PURE__*/function (_React$Component) {
			  _inheritsLoose(TransitionGroup, _React$Component);

			  function TransitionGroup(props, context) {
			    var _this;

			    _this = _React$Component.call(this, props, context) || this;

			    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


			    _this.state = {
			      contextValue: {
			        isMounting: true
			      },
			      handleExited: handleExited,
			      firstRender: true
			    };
			    return _this;
			  }

			  var _proto = TransitionGroup.prototype;

			  _proto.componentDidMount = function componentDidMount() {
			    this.mounted = true;
			    this.setState({
			      contextValue: {
			        isMounting: false
			      }
			    });
			  };

			  _proto.componentWillUnmount = function componentWillUnmount() {
			    this.mounted = false;
			  };

			  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
			    var prevChildMapping = _ref.children,
			        handleExited = _ref.handleExited,
			        firstRender = _ref.firstRender;
			    return {
			      children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
			      firstRender: false
			    };
			  } // node is `undefined` when user provided `nodeRef` prop
			  ;

			  _proto.handleExited = function handleExited(child, node) {
			    var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
			    if (child.key in currentChildMapping) return;

			    if (child.props.onExited) {
			      child.props.onExited(node);
			    }

			    if (this.mounted) {
			      this.setState(function (state) {
			        var children = _extends({}, state.children);

			        delete children[child.key];
			        return {
			          children: children
			        };
			      });
			    }
			  };

			  _proto.render = function render() {
			    var _this$props = this.props,
			        Component = _this$props.component,
			        childFactory = _this$props.childFactory,
			        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

			    var contextValue = this.state.contextValue;
			    var children = values(this.state.children).map(childFactory);
			    delete props.appear;
			    delete props.enter;
			    delete props.exit;

			    if (Component === null) {
			      return /*#__PURE__*/_react.default.createElement(_TransitionGroupContext.default.Provider, {
			        value: contextValue
			      }, children);
			    }

			    return /*#__PURE__*/_react.default.createElement(_TransitionGroupContext.default.Provider, {
			      value: contextValue
			    }, /*#__PURE__*/_react.default.createElement(Component, props, children));
			  };

			  return TransitionGroup;
			}(_react.default.Component);

			TransitionGroup.propTypes = {
			  /**
			   * `<TransitionGroup>` renders a `<div>` by default. You can change this
			   * behavior by providing a `component` prop.
			   * If you use React v16+ and would like to avoid a wrapping `<div>` element
			   * you can pass in `component={null}`. This is useful if the wrapping div
			   * borks your css styles.
			   */
			  component: _propTypes.default.any,

			  /**
			   * A set of `<Transition>` components, that are toggled `in` and out as they
			   * leave. the `<TransitionGroup>` will inject specific transition props, so
			   * remember to spread them through if you are wrapping the `<Transition>` as
			   * with our `<Fade>` example.
			   *
			   * While this component is meant for multiple `Transition` or `CSSTransition`
			   * children, sometimes you may want to have a single transition child with
			   * content that you want to be transitioned out and in when you change it
			   * (e.g. routes, images etc.) In that case you can change the `key` prop of
			   * the transition child as you change its content, this will cause
			   * `TransitionGroup` to transition the child out and back in.
			   */
			  children: _propTypes.default.node,

			  /**
			   * A convenience prop that enables or disables appear animations
			   * for all children. Note that specifying this will override any defaults set
			   * on individual children Transitions.
			   */
			  appear: _propTypes.default.bool,

			  /**
			   * A convenience prop that enables or disables enter animations
			   * for all children. Note that specifying this will override any defaults set
			   * on individual children Transitions.
			   */
			  enter: _propTypes.default.bool,

			  /**
			   * A convenience prop that enables or disables exit animations
			   * for all children. Note that specifying this will override any defaults set
			   * on individual children Transitions.
			   */
			  exit: _propTypes.default.bool,

			  /**
			   * You may need to apply reactive updates to a child as it is exiting.
			   * This is generally done by using `cloneElement` however in the case of an exiting
			   * child the element has already been removed and not accessible to the consumer.
			   *
			   * If you do need to update a child as it leaves you can provide a `childFactory`
			   * to wrap every child, even the ones that are leaving.
			   *
			   * @type Function(child: ReactElement) -> ReactElement
			   */
			  childFactory: _propTypes.default.func
			} ;
			TransitionGroup.defaultProps = defaultProps;
			var _default = TransitionGroup;
			exports.default = _default;
			module.exports = exports.default;
	} (TransitionGroup, TransitionGroup.exports));
		return TransitionGroup.exports;
	}

	var hasRequiredReplaceTransition;

	function requireReplaceTransition () {
		if (hasRequiredReplaceTransition) return ReplaceTransition.exports;
		hasRequiredReplaceTransition = 1;
		(function (module, exports) {

			exports.__esModule = true;
			exports.default = void 0;

			var _propTypes = _interopRequireDefault(requirePropTypes$1());

			var _react = _interopRequireDefault(require$$3);

			var _reactDom = _interopRequireDefault(require$$3);

			var _TransitionGroup = _interopRequireDefault(requireTransitionGroup());

			function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

			function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

			function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

			/**
			 * The `<ReplaceTransition>` component is a specialized `Transition` component
			 * that animates between two children.
			 *
			 * ```jsx
			 * <ReplaceTransition in>
			 *   <Fade><div>I appear first</div></Fade>
			 *   <Fade><div>I replace the above</div></Fade>
			 * </ReplaceTransition>
			 * ```
			 */
			var ReplaceTransition = /*#__PURE__*/function (_React$Component) {
			  _inheritsLoose(ReplaceTransition, _React$Component);

			  function ReplaceTransition() {
			    var _this;

			    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
			      _args[_key] = arguments[_key];
			    }

			    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

			    _this.handleEnter = function () {
			      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
			        args[_key2] = arguments[_key2];
			      }

			      return _this.handleLifecycle('onEnter', 0, args);
			    };

			    _this.handleEntering = function () {
			      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
			        args[_key3] = arguments[_key3];
			      }

			      return _this.handleLifecycle('onEntering', 0, args);
			    };

			    _this.handleEntered = function () {
			      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
			        args[_key4] = arguments[_key4];
			      }

			      return _this.handleLifecycle('onEntered', 0, args);
			    };

			    _this.handleExit = function () {
			      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
			        args[_key5] = arguments[_key5];
			      }

			      return _this.handleLifecycle('onExit', 1, args);
			    };

			    _this.handleExiting = function () {
			      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
			        args[_key6] = arguments[_key6];
			      }

			      return _this.handleLifecycle('onExiting', 1, args);
			    };

			    _this.handleExited = function () {
			      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
			        args[_key7] = arguments[_key7];
			      }

			      return _this.handleLifecycle('onExited', 1, args);
			    };

			    return _this;
			  }

			  var _proto = ReplaceTransition.prototype;

			  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
			    var _child$props;

			    var children = this.props.children;

			    var child = _react.default.Children.toArray(children)[idx];

			    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);

			    if (this.props[handler]) {
			      var maybeNode = child.props.nodeRef ? undefined : _reactDom.default.findDOMNode(this);
			      this.props[handler](maybeNode);
			    }
			  };

			  _proto.render = function render() {
			    var _this$props = this.props,
			        children = _this$props.children,
			        inProp = _this$props.in,
			        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

			    var _React$Children$toArr = _react.default.Children.toArray(children),
			        first = _React$Children$toArr[0],
			        second = _React$Children$toArr[1];

			    delete props.onEnter;
			    delete props.onEntering;
			    delete props.onEntered;
			    delete props.onExit;
			    delete props.onExiting;
			    delete props.onExited;
			    return /*#__PURE__*/_react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
			      key: 'first',
			      onEnter: this.handleEnter,
			      onEntering: this.handleEntering,
			      onEntered: this.handleEntered
			    }) : _react.default.cloneElement(second, {
			      key: 'second',
			      onEnter: this.handleExit,
			      onEntering: this.handleExiting,
			      onEntered: this.handleExited
			    }));
			  };

			  return ReplaceTransition;
			}(_react.default.Component);

			ReplaceTransition.propTypes = {
			  in: _propTypes.default.bool.isRequired,
			  children: function children(props, propName) {
			    if (_react.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
			    return null;
			  }
			} ;
			var _default = ReplaceTransition;
			exports.default = _default;
			module.exports = exports.default;
	} (ReplaceTransition, ReplaceTransition.exports));
		return ReplaceTransition.exports;
	}

	var SwitchTransition = {};

	var hasRequiredSwitchTransition;

	function requireSwitchTransition () {
		if (hasRequiredSwitchTransition) return SwitchTransition;
		hasRequiredSwitchTransition = 1;

		SwitchTransition.__esModule = true;
		SwitchTransition.default = SwitchTransition.modes = void 0;

		var _react = _interopRequireDefault(require$$3);

		var _propTypes = _interopRequireDefault(requirePropTypes$1());

		var _Transition = requireTransition();

		var _TransitionGroupContext = _interopRequireDefault(requireTransitionGroupContext());

		var _leaveRenders, _enterRenders;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

		function areChildrenDifferent(oldChildren, newChildren) {
		  if (oldChildren === newChildren) return false;

		  if (_react.default.isValidElement(oldChildren) && _react.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
		    return false;
		  }

		  return true;
		}
		/**
		 * Enum of modes for SwitchTransition component
		 * @enum { string }
		 */


		var modes = {
		  out: 'out-in',
		  in: 'in-out'
		};
		SwitchTransition.modes = modes;

		var callHook = function callHook(element, name, cb) {
		  return function () {
		    var _element$props;

		    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
		    cb();
		  };
		};

		var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function (_ref) {
		  var current = _ref.current,
		      changeState = _ref.changeState;
		  return _react.default.cloneElement(current, {
		    in: false,
		    onExited: callHook(current, 'onExited', function () {
		      changeState(_Transition.ENTERING, null);
		    })
		  });
		}, _leaveRenders[modes.in] = function (_ref2) {
		  var current = _ref2.current,
		      changeState = _ref2.changeState,
		      children = _ref2.children;
		  return [current, _react.default.cloneElement(children, {
		    in: true,
		    onEntered: callHook(children, 'onEntered', function () {
		      changeState(_Transition.ENTERING);
		    })
		  })];
		}, _leaveRenders);
		var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function (_ref3) {
		  var children = _ref3.children,
		      changeState = _ref3.changeState;
		  return _react.default.cloneElement(children, {
		    in: true,
		    onEntered: callHook(children, 'onEntered', function () {
		      changeState(_Transition.ENTERED, _react.default.cloneElement(children, {
		        in: true
		      }));
		    })
		  });
		}, _enterRenders[modes.in] = function (_ref4) {
		  var current = _ref4.current,
		      children = _ref4.children,
		      changeState = _ref4.changeState;
		  return [_react.default.cloneElement(current, {
		    in: false,
		    onExited: callHook(current, 'onExited', function () {
		      changeState(_Transition.ENTERED, _react.default.cloneElement(children, {
		        in: true
		      }));
		    })
		  }), _react.default.cloneElement(children, {
		    in: true
		  })];
		}, _enterRenders);
		/**
		 * A transition component inspired by the [vue transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes).
		 * You can use it when you want to control the render between state transitions.
		 * Based on the selected mode and the child's key which is the `Transition` or `CSSTransition` component, the `SwitchTransition` makes a consistent transition between them.
		 *
		 * If the `out-in` mode is selected, the `SwitchTransition` waits until the old child leaves and then inserts a new child.
		 * If the `in-out` mode is selected, the `SwitchTransition` inserts a new child first, waits for the new child to enter and then removes the old child.
		 *
		 * **Note**: If you want the animation to happen simultaneously
		 * (that is, to have the old child removed and a new child inserted **at the same time**),
		 * you should use
		 * [`TransitionGroup`](https://reactcommunity.org/react-transition-group/transition-group)
		 * instead.
		 *
		 * ```jsx
		 * function App() {
		 *  const [state, setState] = useState(false);
		 *  return (
		 *    <SwitchTransition>
		 *      <CSSTransition
		 *        key={state ? "Goodbye, world!" : "Hello, world!"}
		 *        addEndListener={(node, done) => node.addEventListener("transitionend", done, false)}
		 *        classNames='fade'
		 *      >
		 *        <button onClick={() => setState(state => !state)}>
		 *          {state ? "Goodbye, world!" : "Hello, world!"}
		 *        </button>
		 *      </CSSTransition>
		 *    </SwitchTransition>
		 *  );
		 * }
		 * ```
		 *
		 * ```css
		 * .fade-enter{
		 *    opacity: 0;
		 * }
		 * .fade-exit{
		 *    opacity: 1;
		 * }
		 * .fade-enter-active{
		 *    opacity: 1;
		 * }
		 * .fade-exit-active{
		 *    opacity: 0;
		 * }
		 * .fade-enter-active,
		 * .fade-exit-active{
		 *    transition: opacity 500ms;
		 * }
		 * ```
		 */

		var SwitchTransition$1 = /*#__PURE__*/function (_React$Component) {
		  _inheritsLoose(SwitchTransition, _React$Component);

		  function SwitchTransition() {
		    var _this;

		    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
		    _this.state = {
		      status: _Transition.ENTERED,
		      current: null
		    };
		    _this.appeared = false;

		    _this.changeState = function (status, current) {
		      if (current === void 0) {
		        current = _this.state.current;
		      }

		      _this.setState({
		        status: status,
		        current: current
		      });
		    };

		    return _this;
		  }

		  var _proto = SwitchTransition.prototype;

		  _proto.componentDidMount = function componentDidMount() {
		    this.appeared = true;
		  };

		  SwitchTransition.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
		    if (props.children == null) {
		      return {
		        current: null
		      };
		    }

		    if (state.status === _Transition.ENTERING && props.mode === modes.in) {
		      return {
		        status: _Transition.ENTERING
		      };
		    }

		    if (state.current && areChildrenDifferent(state.current, props.children)) {
		      return {
		        status: _Transition.EXITING
		      };
		    }

		    return {
		      current: _react.default.cloneElement(props.children, {
		        in: true
		      })
		    };
		  };

		  _proto.render = function render() {
		    var _this$props = this.props,
		        children = _this$props.children,
		        mode = _this$props.mode,
		        _this$state = this.state,
		        status = _this$state.status,
		        current = _this$state.current;
		    var data = {
		      children: children,
		      current: current,
		      changeState: this.changeState,
		      status: status
		    };
		    var component;

		    switch (status) {
		      case _Transition.ENTERING:
		        component = enterRenders[mode](data);
		        break;

		      case _Transition.EXITING:
		        component = leaveRenders[mode](data);
		        break;

		      case _Transition.ENTERED:
		        component = current;
		    }

		    return /*#__PURE__*/_react.default.createElement(_TransitionGroupContext.default.Provider, {
		      value: {
		        isMounting: !this.appeared
		      }
		    }, component);
		  };

		  return SwitchTransition;
		}(_react.default.Component);

		SwitchTransition$1.propTypes = {
		  /**
		   * Transition modes.
		   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
		   * `in-out`: New element transitions in first, then when complete, the current element transitions out.
		   *
		   * @type {'out-in'|'in-out'}
		   */
		  mode: _propTypes.default.oneOf([modes.in, modes.out]),

		  /**
		   * Any `Transition` or `CSSTransition` component.
		   */
		  children: _propTypes.default.oneOfType([_propTypes.default.element.isRequired])
		} ;
		SwitchTransition$1.defaultProps = {
		  mode: modes.out
		};
		var _default = SwitchTransition$1;
		SwitchTransition.default = _default;
		return SwitchTransition;
	}

	var hasRequiredCjs;

	function requireCjs () {
		if (hasRequiredCjs) return cjs;
		hasRequiredCjs = 1;

		cjs.__esModule = true;
		cjs.config = cjs.Transition = cjs.TransitionGroup = cjs.SwitchTransition = cjs.ReplaceTransition = cjs.CSSTransition = void 0;

		var _CSSTransition = _interopRequireDefault(requireCSSTransition());

		cjs.CSSTransition = _CSSTransition.default;

		var _ReplaceTransition = _interopRequireDefault(requireReplaceTransition());

		cjs.ReplaceTransition = _ReplaceTransition.default;

		var _SwitchTransition = _interopRequireDefault(requireSwitchTransition());

		cjs.SwitchTransition = _SwitchTransition.default;

		var _TransitionGroup = _interopRequireDefault(requireTransitionGroup());

		cjs.TransitionGroup = _TransitionGroup.default;

		var _Transition = _interopRequireDefault(requireTransition());

		cjs.Transition = _Transition.default;

		var _config = _interopRequireDefault(requireConfig());

		cjs.config = _config.default;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		return cjs;
	}

	var Ripple = {};

	var hasRequiredRipple;

	function requireRipple () {
		if (hasRequiredRipple) return Ripple;
		hasRequiredRipple = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Ripple, "__esModule", {
		  value: true
		});
		Ripple.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * @ignore - internal component.
		 */
		function Ripple$1(props) {
		  const {
		    className,
		    classes,
		    pulsate = false,
		    rippleX,
		    rippleY,
		    rippleSize,
		    in: inProp,
		    onExited,
		    timeout
		  } = props;
		  const [leaving, setLeaving] = React.useState(false);
		  const rippleClassName = (0, _clsx.default)(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
		  const rippleStyles = {
		    width: rippleSize,
		    height: rippleSize,
		    top: -(rippleSize / 2) + rippleY,
		    left: -(rippleSize / 2) + rippleX
		  };
		  const childClassName = (0, _clsx.default)(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
		  if (!inProp && !leaving) {
		    setLeaving(true);
		  }
		  React.useEffect(() => {
		    if (!inProp && onExited != null) {
		      // react-transition-group#onExited
		      const timeoutId = setTimeout(onExited, timeout);
		      return () => {
		        clearTimeout(timeoutId);
		      };
		    }
		    return undefined;
		  }, [onExited, inProp, timeout]);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
		    className: rippleClassName,
		    style: rippleStyles,
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
		      className: childClassName
		    })
		  });
		}
		Ripple$1.propTypes = {
		  /**
		   * Override or extend the styles applied to the component.
		   * See [CSS API](#css) below for more details.
		   */
		  classes: _propTypes.default.object.isRequired,
		  className: _propTypes.default.string,
		  /**
		   * @ignore - injected from TransitionGroup
		   */
		  in: _propTypes.default.bool,
		  /**
		   * @ignore - injected from TransitionGroup
		   */
		  onExited: _propTypes.default.func,
		  /**
		   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
		   */
		  pulsate: _propTypes.default.bool,
		  /**
		   * Diameter of the ripple.
		   */
		  rippleSize: _propTypes.default.number,
		  /**
		   * Horizontal position of the ripple center.
		   */
		  rippleX: _propTypes.default.number,
		  /**
		   * Vertical position of the ripple center.
		   */
		  rippleY: _propTypes.default.number,
		  /**
		   * exit delay
		   */
		  timeout: _propTypes.default.number.isRequired
		} ;
		var _default = Ripple$1;
		Ripple.default = _default;
		return Ripple;
	}

	var touchRippleClasses = {};

	var hasRequiredTouchRippleClasses;

	function requireTouchRippleClasses () {
		if (hasRequiredTouchRippleClasses) return touchRippleClasses;
		hasRequiredTouchRippleClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(touchRippleClasses, "__esModule", {
		  value: true
		});
		touchRippleClasses.default = void 0;
		touchRippleClasses.getTouchRippleUtilityClass = getTouchRippleUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getTouchRippleUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiTouchRipple', slot);
		}
		const touchRippleClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);
		var _default = touchRippleClasses$1;
		touchRippleClasses.default = _default;
		return touchRippleClasses;
	}

	var hasRequiredTouchRipple;

	function requireTouchRipple () {
		if (hasRequiredTouchRipple) return TouchRipple;
		hasRequiredTouchRipple = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(TouchRipple, "__esModule", {
		  value: true
		});
		TouchRipple.default = TouchRipple.TouchRippleRoot = TouchRipple.TouchRippleRipple = TouchRipple.DELAY_RIPPLE = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _reactTransitionGroup = requireCjs();
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _system = requireSystem();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _Ripple = _interopRequireDefault(requireRipple());
		var _touchRippleClasses = _interopRequireDefault(requireTouchRippleClasses());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["center", "classes", "className"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const DURATION = 550;
		const DELAY_RIPPLE = 80;
		TouchRipple.DELAY_RIPPLE = DELAY_RIPPLE;
		const enterKeyframe = (0, _system.keyframes)`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`;
		const exitKeyframe = (0, _system.keyframes)`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`;
		const pulsateKeyframe = (0, _system.keyframes)`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`;
		const TouchRippleRoot = (0, _styled.default)('span', {
		  name: 'MuiTouchRipple',
		  slot: 'Root'
		})({
		  overflow: 'hidden',
		  pointerEvents: 'none',
		  position: 'absolute',
		  zIndex: 0,
		  top: 0,
		  right: 0,
		  bottom: 0,
		  left: 0,
		  borderRadius: 'inherit'
		});

		// This `styled()` function invokes keyframes. `styled-components` only supports keyframes
		// in string templates. Do not convert these styles in JS object as it will break.
		TouchRipple.TouchRippleRoot = TouchRippleRoot;
		const TouchRippleRipple = (0, _styled.default)(_Ripple.default, {
		  name: 'MuiTouchRipple',
		  slot: 'Ripple'
		})`
  opacity: 0;
  position: absolute;

  &.${_touchRippleClasses.default.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${enterKeyframe};
    animation-duration: ${DURATION}ms;
    animation-timing-function: ${({
	  theme
	}) => theme.transitions.easing.easeInOut};
  }

  &.${_touchRippleClasses.default.ripplePulsate} {
    animation-duration: ${({
	  theme
	}) => theme.transitions.duration.shorter}ms;
  }

  & .${_touchRippleClasses.default.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${_touchRippleClasses.default.childLeaving} {
    opacity: 0;
    animation-name: ${exitKeyframe};
    animation-duration: ${DURATION}ms;
    animation-timing-function: ${({
	  theme
	}) => theme.transitions.easing.easeInOut};
  }

  & .${_touchRippleClasses.default.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${pulsateKeyframe};
    animation-duration: 2500ms;
    animation-timing-function: ${({
	  theme
	}) => theme.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`;

		/**
		 * @ignore - internal component.
		 *
		 * TODO v5: Make private
		 */
		TouchRipple.TouchRippleRipple = TouchRippleRipple;
		const TouchRipple$1 = /*#__PURE__*/React.forwardRef(function TouchRipple(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiTouchRipple'
		  });
		  const {
		      center: centerProp = false,
		      classes = {},
		      className
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const [ripples, setRipples] = React.useState([]);
		  const nextKey = React.useRef(0);
		  const rippleCallback = React.useRef(null);
		  React.useEffect(() => {
		    if (rippleCallback.current) {
		      rippleCallback.current();
		      rippleCallback.current = null;
		    }
		  }, [ripples]);

		  // Used to filter out mouse emulated events on mobile.
		  const ignoringMouseDown = React.useRef(false);
		  // We use a timer in order to only show the ripples for touch "click" like events.
		  // We don't want to display the ripple for touch scroll events.
		  const startTimer = React.useRef(null);

		  // This is the hook called once the previous timeout is ready.
		  const startTimerCommit = React.useRef(null);
		  const container = React.useRef(null);
		  React.useEffect(() => {
		    return () => {
		      clearTimeout(startTimer.current);
		    };
		  }, []);
		  const startCommit = React.useCallback(params => {
		    const {
		      pulsate,
		      rippleX,
		      rippleY,
		      rippleSize,
		      cb
		    } = params;
		    setRipples(oldRipples => [...oldRipples, /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchRippleRipple, {
		      classes: {
		        ripple: (0, _clsx.default)(classes.ripple, _touchRippleClasses.default.ripple),
		        rippleVisible: (0, _clsx.default)(classes.rippleVisible, _touchRippleClasses.default.rippleVisible),
		        ripplePulsate: (0, _clsx.default)(classes.ripplePulsate, _touchRippleClasses.default.ripplePulsate),
		        child: (0, _clsx.default)(classes.child, _touchRippleClasses.default.child),
		        childLeaving: (0, _clsx.default)(classes.childLeaving, _touchRippleClasses.default.childLeaving),
		        childPulsate: (0, _clsx.default)(classes.childPulsate, _touchRippleClasses.default.childPulsate)
		      },
		      timeout: DURATION,
		      pulsate: pulsate,
		      rippleX: rippleX,
		      rippleY: rippleY,
		      rippleSize: rippleSize
		    }, nextKey.current)]);
		    nextKey.current += 1;
		    rippleCallback.current = cb;
		  }, [classes]);
		  const start = React.useCallback((event = {}, options = {}, cb = () => {}) => {
		    const {
		      pulsate = false,
		      center = centerProp || options.pulsate,
		      fakeElement = false // For test purposes
		    } = options;
		    if ((event == null ? void 0 : event.type) === 'mousedown' && ignoringMouseDown.current) {
		      ignoringMouseDown.current = false;
		      return;
		    }
		    if ((event == null ? void 0 : event.type) === 'touchstart') {
		      ignoringMouseDown.current = true;
		    }
		    const element = fakeElement ? null : container.current;
		    const rect = element ? element.getBoundingClientRect() : {
		      width: 0,
		      height: 0,
		      left: 0,
		      top: 0
		    };

		    // Get the size of the ripple
		    let rippleX;
		    let rippleY;
		    let rippleSize;
		    if (center || event === undefined || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
		      rippleX = Math.round(rect.width / 2);
		      rippleY = Math.round(rect.height / 2);
		    } else {
		      const {
		        clientX,
		        clientY
		      } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
		      rippleX = Math.round(clientX - rect.left);
		      rippleY = Math.round(clientY - rect.top);
		    }
		    if (center) {
		      rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);

		      // For some reason the animation is broken on Mobile Chrome if the size is even.
		      if (rippleSize % 2 === 0) {
		        rippleSize += 1;
		      }
		    } else {
		      const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
		      const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
		      rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
		    }

		    // Touche devices
		    if (event != null && event.touches) {
		      // check that this isn't another touchstart due to multitouch
		      // otherwise we will only clear a single timer when unmounting while two
		      // are running
		      if (startTimerCommit.current === null) {
		        // Prepare the ripple effect.
		        startTimerCommit.current = () => {
		          startCommit({
		            pulsate,
		            rippleX,
		            rippleY,
		            rippleSize,
		            cb
		          });
		        };
		        // Delay the execution of the ripple effect.
		        startTimer.current = setTimeout(() => {
		          if (startTimerCommit.current) {
		            startTimerCommit.current();
		            startTimerCommit.current = null;
		          }
		        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
		      }
		    } else {
		      startCommit({
		        pulsate,
		        rippleX,
		        rippleY,
		        rippleSize,
		        cb
		      });
		    }
		  }, [centerProp, startCommit]);
		  const pulsate = React.useCallback(() => {
		    start({}, {
		      pulsate: true
		    });
		  }, [start]);
		  const stop = React.useCallback((event, cb) => {
		    clearTimeout(startTimer.current);

		    // The touch interaction occurs too quickly.
		    // We still want to show ripple effect.
		    if ((event == null ? void 0 : event.type) === 'touchend' && startTimerCommit.current) {
		      startTimerCommit.current();
		      startTimerCommit.current = null;
		      startTimer.current = setTimeout(() => {
		        stop(event, cb);
		      });
		      return;
		    }
		    startTimerCommit.current = null;
		    setRipples(oldRipples => {
		      if (oldRipples.length > 0) {
		        return oldRipples.slice(1);
		      }
		      return oldRipples;
		    });
		    rippleCallback.current = cb;
		  }, []);
		  React.useImperativeHandle(ref, () => ({
		    pulsate,
		    start,
		    stop
		  }), [pulsate, start, stop]);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchRippleRoot, (0, _extends2.default)({
		    className: (0, _clsx.default)(_touchRippleClasses.default.root, classes.root, className),
		    ref: container
		  }, other, {
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactTransitionGroup.TransitionGroup, {
		      component: null,
		      exit: true,
		      children: ripples
		    })
		  }));
		});
		TouchRipple$1.propTypes = {
		  /**
		   * If `true`, the ripple starts at the center of the component
		   * rather than at the point of interaction.
		   */
		  center: _propTypes.default.bool,
		  /**
		   * Override or extend the styles applied to the component.
		   * See [CSS API](#css) below for more details.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string
		} ;
		var _default = TouchRipple$1;
		TouchRipple.default = _default;
		return TouchRipple;
	}

	var buttonBaseClasses = {};

	var hasRequiredButtonBaseClasses;

	function requireButtonBaseClasses () {
		if (hasRequiredButtonBaseClasses) return buttonBaseClasses;
		hasRequiredButtonBaseClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(buttonBaseClasses, "__esModule", {
		  value: true
		});
		buttonBaseClasses.default = void 0;
		buttonBaseClasses.getButtonBaseUtilityClass = getButtonBaseUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getButtonBaseUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiButtonBase', slot);
		}
		const buttonBaseClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiButtonBase', ['root', 'disabled', 'focusVisible']);
		var _default = buttonBaseClasses$1;
		buttonBaseClasses.default = _default;
		return buttonBaseClasses;
	}

	var hasRequiredButtonBase$1;

	function requireButtonBase$1 () {
		if (hasRequiredButtonBase$1) return ButtonBase;
		hasRequiredButtonBase$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ButtonBase, "__esModule", {
		  value: true
		});
		ButtonBase.default = ButtonBase.ButtonBaseRoot = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _utils = requireUtils$4();
		var _composeClasses = _interopRequireDefault(requireComposeClasses());
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _useForkRef = _interopRequireDefault(requireUseForkRef());
		var _useEventCallback = _interopRequireDefault(requireUseEventCallback());
		var _useIsFocusVisible = _interopRequireDefault(requireUseIsFocusVisible());
		var _TouchRipple = _interopRequireDefault(requireTouchRipple());
		var _buttonBaseClasses = _interopRequireWildcard(requireButtonBaseClasses());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    disabled,
		    focusVisible,
		    focusVisibleClassName,
		    classes
		  } = ownerState;
		  const slots = {
		    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
		  };
		  const composedClasses = (0, _composeClasses.default)(slots, _buttonBaseClasses.getButtonBaseUtilityClass, classes);
		  if (focusVisible && focusVisibleClassName) {
		    composedClasses.root += ` ${focusVisibleClassName}`;
		  }
		  return composedClasses;
		};
		const ButtonBaseRoot = (0, _styled.default)('button', {
		  name: 'MuiButtonBase',
		  slot: 'Root',
		  overridesResolver: (props, styles) => styles.root
		})({
		  display: 'inline-flex',
		  alignItems: 'center',
		  justifyContent: 'center',
		  position: 'relative',
		  boxSizing: 'border-box',
		  WebkitTapHighlightColor: 'transparent',
		  backgroundColor: 'transparent',
		  // Reset default value
		  // We disable the focus ring for mouse, touch and keyboard users.
		  outline: 0,
		  border: 0,
		  margin: 0,
		  // Remove the margin in Safari
		  borderRadius: 0,
		  padding: 0,
		  // Remove the padding in Firefox
		  cursor: 'pointer',
		  userSelect: 'none',
		  verticalAlign: 'middle',
		  MozAppearance: 'none',
		  // Reset
		  WebkitAppearance: 'none',
		  // Reset
		  textDecoration: 'none',
		  // So we take precedent over the style of a native <a /> element.
		  color: 'inherit',
		  '&::-moz-focus-inner': {
		    borderStyle: 'none' // Remove Firefox dotted outline.
		  },

		  [`&.${_buttonBaseClasses.default.disabled}`]: {
		    pointerEvents: 'none',
		    // Disable link interactions
		    cursor: 'default'
		  },
		  '@media print': {
		    colorAdjust: 'exact'
		  }
		});

		/**
		 * `ButtonBase` contains as few styles as possible.
		 * It aims to be a simple building block for creating a button.
		 * It contains a load of style reset and some focus/ripple logic.
		 */
		ButtonBase.ButtonBaseRoot = ButtonBaseRoot;
		const ButtonBase$1 = /*#__PURE__*/React.forwardRef(function ButtonBase(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiButtonBase'
		  });
		  const {
		      action,
		      centerRipple = false,
		      children,
		      className,
		      component = 'button',
		      disabled = false,
		      disableRipple = false,
		      disableTouchRipple = false,
		      focusRipple = false,
		      LinkComponent = 'a',
		      onBlur,
		      onClick,
		      onContextMenu,
		      onDragLeave,
		      onFocus,
		      onFocusVisible,
		      onKeyDown,
		      onKeyUp,
		      onMouseDown,
		      onMouseLeave,
		      onMouseUp,
		      onTouchEnd,
		      onTouchMove,
		      onTouchStart,
		      tabIndex = 0,
		      TouchRippleProps,
		      touchRippleRef,
		      type
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const buttonRef = React.useRef(null);
		  const rippleRef = React.useRef(null);
		  const handleRippleRef = (0, _useForkRef.default)(rippleRef, touchRippleRef);
		  const {
		    isFocusVisibleRef,
		    onFocus: handleFocusVisible,
		    onBlur: handleBlurVisible,
		    ref: focusVisibleRef
		  } = (0, _useIsFocusVisible.default)();
		  const [focusVisible, setFocusVisible] = React.useState(false);
		  if (disabled && focusVisible) {
		    setFocusVisible(false);
		  }
		  React.useImperativeHandle(action, () => ({
		    focusVisible: () => {
		      setFocusVisible(true);
		      buttonRef.current.focus();
		    }
		  }), []);
		  const [mountedState, setMountedState] = React.useState(false);
		  React.useEffect(() => {
		    setMountedState(true);
		  }, []);
		  const enableTouchRipple = mountedState && !disableRipple && !disabled;
		  React.useEffect(() => {
		    if (focusVisible && focusRipple && !disableRipple && mountedState) {
		      rippleRef.current.pulsate();
		    }
		  }, [disableRipple, focusRipple, focusVisible, mountedState]);
		  function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
		    return (0, _useEventCallback.default)(event => {
		      if (eventCallback) {
		        eventCallback(event);
		      }
		      const ignore = skipRippleAction;
		      if (!ignore && rippleRef.current) {
		        rippleRef.current[rippleAction](event);
		      }
		      return true;
		    });
		  }
		  const handleMouseDown = useRippleHandler('start', onMouseDown);
		  const handleContextMenu = useRippleHandler('stop', onContextMenu);
		  const handleDragLeave = useRippleHandler('stop', onDragLeave);
		  const handleMouseUp = useRippleHandler('stop', onMouseUp);
		  const handleMouseLeave = useRippleHandler('stop', event => {
		    if (focusVisible) {
		      event.preventDefault();
		    }
		    if (onMouseLeave) {
		      onMouseLeave(event);
		    }
		  });
		  const handleTouchStart = useRippleHandler('start', onTouchStart);
		  const handleTouchEnd = useRippleHandler('stop', onTouchEnd);
		  const handleTouchMove = useRippleHandler('stop', onTouchMove);
		  const handleBlur = useRippleHandler('stop', event => {
		    handleBlurVisible(event);
		    if (isFocusVisibleRef.current === false) {
		      setFocusVisible(false);
		    }
		    if (onBlur) {
		      onBlur(event);
		    }
		  }, false);
		  const handleFocus = (0, _useEventCallback.default)(event => {
		    // Fix for https://github.com/facebook/react/issues/7769
		    if (!buttonRef.current) {
		      buttonRef.current = event.currentTarget;
		    }
		    handleFocusVisible(event);
		    if (isFocusVisibleRef.current === true) {
		      setFocusVisible(true);
		      if (onFocusVisible) {
		        onFocusVisible(event);
		      }
		    }
		    if (onFocus) {
		      onFocus(event);
		    }
		  });
		  const isNonNativeButton = () => {
		    const button = buttonRef.current;
		    return component && component !== 'button' && !(button.tagName === 'A' && button.href);
		  };

		  /**
		   * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
		   */
		  const keydownRef = React.useRef(false);
		  const handleKeyDown = (0, _useEventCallback.default)(event => {
		    // Check if key is already down to avoid repeats being counted as multiple activations
		    if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
		      keydownRef.current = true;
		      rippleRef.current.stop(event, () => {
		        rippleRef.current.start(event);
		      });
		    }
		    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
		      event.preventDefault();
		    }
		    if (onKeyDown) {
		      onKeyDown(event);
		    }

		    // Keyboard accessibility for non interactive elements
		    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
		      event.preventDefault();
		      if (onClick) {
		        onClick(event);
		      }
		    }
		  });
		  const handleKeyUp = (0, _useEventCallback.default)(event => {
		    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
		    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
		    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
		      keydownRef.current = false;
		      rippleRef.current.stop(event, () => {
		        rippleRef.current.pulsate(event);
		      });
		    }
		    if (onKeyUp) {
		      onKeyUp(event);
		    }

		    // Keyboard accessibility for non interactive elements
		    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
		      onClick(event);
		    }
		  });
		  let ComponentProp = component;
		  if (ComponentProp === 'button' && (other.href || other.to)) {
		    ComponentProp = LinkComponent;
		  }
		  const buttonProps = {};
		  if (ComponentProp === 'button') {
		    buttonProps.type = type === undefined ? 'button' : type;
		    buttonProps.disabled = disabled;
		  } else {
		    if (!other.href && !other.to) {
		      buttonProps.role = 'button';
		    }
		    if (disabled) {
		      buttonProps['aria-disabled'] = disabled;
		    }
		  }
		  const handleRef = (0, _useForkRef.default)(ref, focusVisibleRef, buttonRef);
		  {
		    // eslint-disable-next-line react-hooks/rules-of-hooks
		    React.useEffect(() => {
		      if (enableTouchRipple && !rippleRef.current) {
		        console.error(['MUI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
		      }
		    }, [enableTouchRipple]);
		  }
		  const ownerState = (0, _extends2.default)({}, props, {
		    centerRipple,
		    component,
		    disabled,
		    disableRipple,
		    disableTouchRipple,
		    focusRipple,
		    tabIndex,
		    focusVisible
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(ButtonBaseRoot, (0, _extends2.default)({
		    as: ComponentProp,
		    className: (0, _clsx.default)(classes.root, className),
		    ownerState: ownerState,
		    onBlur: handleBlur,
		    onClick: onClick,
		    onContextMenu: handleContextMenu,
		    onFocus: handleFocus,
		    onKeyDown: handleKeyDown,
		    onKeyUp: handleKeyUp,
		    onMouseDown: handleMouseDown,
		    onMouseLeave: handleMouseLeave,
		    onMouseUp: handleMouseUp,
		    onDragLeave: handleDragLeave,
		    onTouchEnd: handleTouchEnd,
		    onTouchMove: handleTouchMove,
		    onTouchStart: handleTouchStart,
		    ref: handleRef,
		    tabIndex: disabled ? -1 : tabIndex,
		    type: type
		  }, buttonProps, other, {
		    children: [children, enableTouchRipple ?
		    /*#__PURE__*/
		    /* TouchRipple is only needed client-side, x2 boost on the server. */
		    (0, _jsxRuntime.jsx)(_TouchRipple.default, (0, _extends2.default)({
		      ref: handleRippleRef,
		      center: centerRipple
		    }, TouchRippleProps)) : null]
		  }));
		});
		ButtonBase$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * A ref for imperative actions.
		   * It currently only supports `focusVisible()` action.
		   */
		  action: _utils.refType,
		  /**
		   * If `true`, the ripples are centered.
		   * They won't start at the cursor interaction position.
		   * @default false
		   */
		  centerRipple: _propTypes.default.bool,
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _utils.elementTypeAcceptingRef,
		  /**
		   * If `true`, the component is disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * If `true`, the ripple effect is disabled.
		   *
		   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
		   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
		   * @default false
		   */
		  disableRipple: _propTypes.default.bool,
		  /**
		   * If `true`, the touch ripple effect is disabled.
		   * @default false
		   */
		  disableTouchRipple: _propTypes.default.bool,
		  /**
		   * If `true`, the base button will have a keyboard focus ripple.
		   * @default false
		   */
		  focusRipple: _propTypes.default.bool,
		  /**
		   * This prop can help identify which element has keyboard focus.
		   * The class name will be applied when the element gains the focus through keyboard interaction.
		   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
		   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
		   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
		   * if needed.
		   */
		  focusVisibleClassName: _propTypes.default.string,
		  /**
		   * @ignore
		   */
		  href: _propTypes.default /* @typescript-to-proptypes-ignore */.any,
		  /**
		   * The component used to render a link when the `href` prop is provided.
		   * @default 'a'
		   */
		  LinkComponent: _propTypes.default.elementType,
		  /**
		   * @ignore
		   */
		  onBlur: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onClick: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onContextMenu: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onDragLeave: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onFocus: _propTypes.default.func,
		  /**
		   * Callback fired when the component is focused with a keyboard.
		   * We trigger a `onFocus` callback too.
		   */
		  onFocusVisible: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onKeyDown: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onKeyUp: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onMouseDown: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onMouseLeave: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onMouseUp: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onTouchEnd: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onTouchMove: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onTouchStart: _propTypes.default.func,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * @default 0
		   */
		  tabIndex: _propTypes.default.number,
		  /**
		   * Props applied to the `TouchRipple` element.
		   */
		  TouchRippleProps: _propTypes.default.object,
		  /**
		   * A ref that points to the `TouchRipple` element.
		   */
		  touchRippleRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.shape({
		    current: _propTypes.default.shape({
		      pulsate: _propTypes.default.func.isRequired,
		      start: _propTypes.default.func.isRequired,
		      stop: _propTypes.default.func.isRequired
		    })
		  })]),
		  /**
		   * @ignore
		   */
		  type: _propTypes.default.oneOfType([_propTypes.default.oneOf(['button', 'reset', 'submit']), _propTypes.default.string])
		} ;
		var _default = ButtonBase$1;
		ButtonBase.default = _default;
		return ButtonBase;
	}

	var hasRequiredButtonBase;

	function requireButtonBase () {
		if (hasRequiredButtonBase) return ButtonBase$1;
		hasRequiredButtonBase = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  buttonBaseClasses: true,
			  touchRippleClasses: true
			};
			Object.defineProperty(exports, "buttonBaseClasses", {
			  enumerable: true,
			  get: function () {
			    return _buttonBaseClasses.default;
			  }
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _ButtonBase.default;
			  }
			});
			Object.defineProperty(exports, "touchRippleClasses", {
			  enumerable: true,
			  get: function () {
			    return _touchRippleClasses.default;
			  }
			});
			var _ButtonBase = _interopRequireDefault(requireButtonBase$1());
			var _buttonBaseClasses = _interopRequireWildcard(requireButtonBaseClasses());
			Object.keys(_buttonBaseClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _buttonBaseClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _buttonBaseClasses[key];
			    }
			  });
			});
			var _touchRippleClasses = _interopRequireWildcard(requireTouchRippleClasses());
			Object.keys(_touchRippleClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _touchRippleClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _touchRippleClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ButtonBase$1));
		return ButtonBase$1;
	}

	var capitalize = {};

	var hasRequiredCapitalize;

	function requireCapitalize () {
		if (hasRequiredCapitalize) return capitalize;
		hasRequiredCapitalize = 1;

		Object.defineProperty(capitalize, "__esModule", {
		  value: true
		});
		capitalize.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_capitalize;
		capitalize.default = _default;
		return capitalize;
	}

	var buttonClasses = {};

	var hasRequiredButtonClasses;

	function requireButtonClasses () {
		if (hasRequiredButtonClasses) return buttonClasses;
		hasRequiredButtonClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(buttonClasses, "__esModule", {
		  value: true
		});
		buttonClasses.default = void 0;
		buttonClasses.getButtonUtilityClass = getButtonUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getButtonUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiButton', slot);
		}
		const buttonClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiButton', ['root', 'text', 'textInherit', 'textPrimary', 'textSecondary', 'textSuccess', 'textError', 'textInfo', 'textWarning', 'outlined', 'outlinedInherit', 'outlinedPrimary', 'outlinedSecondary', 'outlinedSuccess', 'outlinedError', 'outlinedInfo', 'outlinedWarning', 'contained', 'containedInherit', 'containedPrimary', 'containedSecondary', 'containedSuccess', 'containedError', 'containedInfo', 'containedWarning', 'disableElevation', 'focusVisible', 'disabled', 'colorInherit', 'textSizeSmall', 'textSizeMedium', 'textSizeLarge', 'outlinedSizeSmall', 'outlinedSizeMedium', 'outlinedSizeLarge', 'containedSizeSmall', 'containedSizeMedium', 'containedSizeLarge', 'sizeMedium', 'sizeSmall', 'sizeLarge', 'fullWidth', 'startIcon', 'endIcon', 'iconSizeSmall', 'iconSizeMedium', 'iconSizeLarge']);
		var _default = buttonClasses$1;
		buttonClasses.default = _default;
		return buttonClasses;
	}

	var ButtonGroupContext = {};

	var hasRequiredButtonGroupContext;

	function requireButtonGroupContext () {
		if (hasRequiredButtonGroupContext) return ButtonGroupContext;
		hasRequiredButtonGroupContext = 1;

		Object.defineProperty(ButtonGroupContext, "__esModule", {
		  value: true
		});
		ButtonGroupContext.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * @ignore - internal component.
		 */
		const ButtonGroupContext$1 = /*#__PURE__*/React.createContext({});
		{
		  ButtonGroupContext$1.displayName = 'ButtonGroupContext';
		}
		var _default = ButtonGroupContext$1;
		ButtonGroupContext.default = _default;
		return ButtonGroupContext;
	}

	var hasRequiredButton;

	function requireButton () {
		if (hasRequiredButton) return Button$1;
		hasRequiredButton = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Button$1, "__esModule", {
		  value: true
		});
		Button$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _utils = requireUtils$4();
		var _base = requireNode$2();
		var _system = requireSystem();
		var _styled = _interopRequireWildcard(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _ButtonBase = _interopRequireDefault(requireButtonBase());
		var _capitalize = _interopRequireDefault(requireCapitalize());
		var _buttonClasses = _interopRequireWildcard(requireButtonClasses());
		var _ButtonGroupContext = _interopRequireDefault(requireButtonGroupContext());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    color,
		    disableElevation,
		    fullWidth,
		    size,
		    variant,
		    classes
		  } = ownerState;
		  const slots = {
		    root: ['root', variant, `${variant}${(0, _capitalize.default)(color)}`, `size${(0, _capitalize.default)(size)}`, `${variant}Size${(0, _capitalize.default)(size)}`, color === 'inherit' && 'colorInherit', disableElevation && 'disableElevation', fullWidth && 'fullWidth'],
		    label: ['label'],
		    startIcon: ['startIcon', `iconSize${(0, _capitalize.default)(size)}`],
		    endIcon: ['endIcon', `iconSize${(0, _capitalize.default)(size)}`]
		  };
		  const composedClasses = (0, _base.unstable_composeClasses)(slots, _buttonClasses.getButtonUtilityClass, classes);
		  return (0, _extends2.default)({}, classes, composedClasses);
		};
		const commonIconStyles = ownerState => (0, _extends2.default)({}, ownerState.size === 'small' && {
		  '& > *:nth-of-type(1)': {
		    fontSize: 18
		  }
		}, ownerState.size === 'medium' && {
		  '& > *:nth-of-type(1)': {
		    fontSize: 20
		  }
		}, ownerState.size === 'large' && {
		  '& > *:nth-of-type(1)': {
		    fontSize: 22
		  }
		});
		const ButtonRoot = (0, _styled.default)(_ButtonBase.default, {
		  shouldForwardProp: prop => (0, _styled.rootShouldForwardProp)(prop) || prop === 'classes',
		  name: 'MuiButton',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${(0, _capitalize.default)(ownerState.color)}`], styles[`size${(0, _capitalize.default)(ownerState.size)}`], styles[`${ownerState.variant}Size${(0, _capitalize.default)(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
		  }
		})(({
		  theme,
		  ownerState
		}) => {
		  var _theme$palette$getCon, _theme$palette;
		  return (0, _extends2.default)({}, theme.typography.button, {
		    minWidth: 64,
		    padding: '6px 16px',
		    borderRadius: (theme.vars || theme).shape.borderRadius,
		    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {
		      duration: theme.transitions.duration.short
		    }),
		    '&:hover': (0, _extends2.default)({
		      textDecoration: 'none',
		      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, _system.alpha)(theme.palette.text.primary, theme.palette.action.hoverOpacity),
		      // Reset on touch devices, it doesn't add specificity
		      '@media (hover: none)': {
		        backgroundColor: 'transparent'
		      }
		    }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
		      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, _system.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
		      // Reset on touch devices, it doesn't add specificity
		      '@media (hover: none)': {
		        backgroundColor: 'transparent'
		      }
		    }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
		      border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
		      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, _system.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
		      // Reset on touch devices, it doesn't add specificity
		      '@media (hover: none)': {
		        backgroundColor: 'transparent'
		      }
		    }, ownerState.variant === 'contained' && {
		      backgroundColor: (theme.vars || theme).palette.grey.A100,
		      boxShadow: (theme.vars || theme).shadows[4],
		      // Reset on touch devices, it doesn't add specificity
		      '@media (hover: none)': {
		        boxShadow: (theme.vars || theme).shadows[2],
		        backgroundColor: (theme.vars || theme).palette.grey[300]
		      }
		    }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
		      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
		      // Reset on touch devices, it doesn't add specificity
		      '@media (hover: none)': {
		        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
		      }
		    }),
		    '&:active': (0, _extends2.default)({}, ownerState.variant === 'contained' && {
		      boxShadow: (theme.vars || theme).shadows[8]
		    }),
		    [`&.${_buttonClasses.default.focusVisible}`]: (0, _extends2.default)({}, ownerState.variant === 'contained' && {
		      boxShadow: (theme.vars || theme).shadows[6]
		    }),
		    [`&.${_buttonClasses.default.disabled}`]: (0, _extends2.default)({
		      color: (theme.vars || theme).palette.action.disabled
		    }, ownerState.variant === 'outlined' && {
		      border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
		    }, ownerState.variant === 'outlined' && ownerState.color === 'secondary' && {
		      border: `1px solid ${(theme.vars || theme).palette.action.disabled}`
		    }, ownerState.variant === 'contained' && {
		      color: (theme.vars || theme).palette.action.disabled,
		      boxShadow: (theme.vars || theme).shadows[0],
		      backgroundColor: (theme.vars || theme).palette.action.disabledBackground
		    })
		  }, ownerState.variant === 'text' && {
		    padding: '6px 8px'
		  }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
		    color: (theme.vars || theme).palette[ownerState.color].main
		  }, ownerState.variant === 'outlined' && {
		    padding: '5px 15px',
		    border: '1px solid currentColor'
		  }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
		    color: (theme.vars || theme).palette[ownerState.color].main,
		    border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${(0, _system.alpha)(theme.palette[ownerState.color].main, 0.5)}`
		  }, ownerState.variant === 'contained' && {
		    color: theme.vars ?
		    // this is safe because grey does not change between default light/dark mode
		    theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
		    backgroundColor: (theme.vars || theme).palette.grey[300],
		    boxShadow: (theme.vars || theme).shadows[2]
		  }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
		    color: (theme.vars || theme).palette[ownerState.color].contrastText,
		    backgroundColor: (theme.vars || theme).palette[ownerState.color].main
		  }, ownerState.color === 'inherit' && {
		    color: 'inherit',
		    borderColor: 'currentColor'
		  }, ownerState.size === 'small' && ownerState.variant === 'text' && {
		    padding: '4px 5px',
		    fontSize: theme.typography.pxToRem(13)
		  }, ownerState.size === 'large' && ownerState.variant === 'text' && {
		    padding: '8px 11px',
		    fontSize: theme.typography.pxToRem(15)
		  }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
		    padding: '3px 9px',
		    fontSize: theme.typography.pxToRem(13)
		  }, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
		    padding: '7px 21px',
		    fontSize: theme.typography.pxToRem(15)
		  }, ownerState.size === 'small' && ownerState.variant === 'contained' && {
		    padding: '4px 10px',
		    fontSize: theme.typography.pxToRem(13)
		  }, ownerState.size === 'large' && ownerState.variant === 'contained' && {
		    padding: '8px 22px',
		    fontSize: theme.typography.pxToRem(15)
		  }, ownerState.fullWidth && {
		    width: '100%'
		  });
		}, ({
		  ownerState
		}) => ownerState.disableElevation && {
		  boxShadow: 'none',
		  '&:hover': {
		    boxShadow: 'none'
		  },
		  [`&.${_buttonClasses.default.focusVisible}`]: {
		    boxShadow: 'none'
		  },
		  '&:active': {
		    boxShadow: 'none'
		  },
		  [`&.${_buttonClasses.default.disabled}`]: {
		    boxShadow: 'none'
		  }
		});
		const ButtonStartIcon = (0, _styled.default)('span', {
		  name: 'MuiButton',
		  slot: 'StartIcon',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.startIcon, styles[`iconSize${(0, _capitalize.default)(ownerState.size)}`]];
		  }
		})(({
		  ownerState
		}) => (0, _extends2.default)({
		  display: 'inherit',
		  marginRight: 8,
		  marginLeft: -4
		}, ownerState.size === 'small' && {
		  marginLeft: -2
		}, commonIconStyles(ownerState)));
		const ButtonEndIcon = (0, _styled.default)('span', {
		  name: 'MuiButton',
		  slot: 'EndIcon',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.endIcon, styles[`iconSize${(0, _capitalize.default)(ownerState.size)}`]];
		  }
		})(({
		  ownerState
		}) => (0, _extends2.default)({
		  display: 'inherit',
		  marginRight: -4,
		  marginLeft: 8
		}, ownerState.size === 'small' && {
		  marginRight: -2
		}, commonIconStyles(ownerState)));
		const Button = /*#__PURE__*/React.forwardRef(function Button(inProps, ref) {
		  // props priority: `inProps` > `contextProps` > `themeDefaultProps`
		  const contextProps = React.useContext(_ButtonGroupContext.default);
		  const resolvedProps = (0, _utils.internal_resolveProps)(contextProps, inProps);
		  const props = (0, _useThemeProps.default)({
		    props: resolvedProps,
		    name: 'MuiButton'
		  });
		  const {
		      children,
		      color = 'primary',
		      component = 'button',
		      className,
		      disabled = false,
		      disableElevation = false,
		      disableFocusRipple = false,
		      endIcon: endIconProp,
		      focusVisibleClassName,
		      fullWidth = false,
		      size = 'medium',
		      startIcon: startIconProp,
		      type,
		      variant = 'text'
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    color,
		    component,
		    disabled,
		    disableElevation,
		    disableFocusRipple,
		    fullWidth,
		    size,
		    type,
		    variant
		  });
		  const classes = useUtilityClasses(ownerState);
		  const startIcon = startIconProp && /*#__PURE__*/(0, _jsxRuntime.jsx)(ButtonStartIcon, {
		    className: classes.startIcon,
		    ownerState: ownerState,
		    children: startIconProp
		  });
		  const endIcon = endIconProp && /*#__PURE__*/(0, _jsxRuntime.jsx)(ButtonEndIcon, {
		    className: classes.endIcon,
		    ownerState: ownerState,
		    children: endIconProp
		  });
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(ButtonRoot, (0, _extends2.default)({
		    ownerState: ownerState,
		    className: (0, _clsx.default)(contextProps.className, classes.root, className),
		    component: component,
		    disabled: disabled,
		    focusRipple: !disableFocusRipple,
		    focusVisibleClassName: (0, _clsx.default)(classes.focusVisible, focusVisibleClassName),
		    ref: ref,
		    type: type
		  }, other, {
		    classes: classes,
		    children: [startIcon, children, endIcon]
		  }));
		});
		Button.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The color of the component.
		   * It supports both default and custom theme colors, which can be added as shown in the
		   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
		   * @default 'primary'
		   */
		  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['inherit', 'primary', 'secondary', 'success', 'error', 'info', 'warning']), _propTypes.default.string]),
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the component is disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * If `true`, no elevation is used.
		   * @default false
		   */
		  disableElevation: _propTypes.default.bool,
		  /**
		   * If `true`, the  keyboard focus ripple is disabled.
		   * @default false
		   */
		  disableFocusRipple: _propTypes.default.bool,
		  /**
		   * If `true`, the ripple effect is disabled.
		   *
		   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
		   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
		   * @default false
		   */
		  disableRipple: _propTypes.default.bool,
		  /**
		   * Element placed after the children.
		   */
		  endIcon: _propTypes.default.node,
		  /**
		   * @ignore
		   */
		  focusVisibleClassName: _propTypes.default.string,
		  /**
		   * If `true`, the button will take up the full width of its container.
		   * @default false
		   */
		  fullWidth: _propTypes.default.bool,
		  /**
		   * The URL to link to when the button is clicked.
		   * If defined, an `a` element will be used as the root node.
		   */
		  href: _propTypes.default.string,
		  /**
		   * The size of the component.
		   * `small` is equivalent to the dense button styling.
		   * @default 'medium'
		   */
		  size: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['small', 'medium', 'large']), _propTypes.default.string]),
		  /**
		   * Element placed before the children.
		   */
		  startIcon: _propTypes.default.node,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * @ignore
		   */
		  type: _propTypes.default.oneOfType([_propTypes.default.oneOf(['button', 'reset', 'submit']), _propTypes.default.string]),
		  /**
		   * The variant to use.
		   * @default 'text'
		   */
		  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['contained', 'outlined', 'text']), _propTypes.default.string])
		} ;
		var _default = Button;
		Button$1.default = _default;
		return Button$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  buttonClasses: true
		};
		Object.defineProperty(exports, "buttonClasses", {
		  enumerable: true,
		  get: function () {
		    return _buttonClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Button.default;
		  }
		});
		var _Button = _interopRequireDefault(requireButton());
		var _buttonClasses = _interopRequireWildcard(requireButtonClasses());
		Object.keys(_buttonClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _buttonClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _buttonClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Button$2));

	var Button = /*@__PURE__*/getDefaultExportFromCjs(Button$2);

	var dist$2 = {exports: {}};

	var mobx_cjs_development = {};

	Object.defineProperty(mobx_cjs_development, '__esModule', { value: true });

	var niceErrors = {
	  0: "Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'",
	  1: function _(annotationType, key) {
	    return "Cannot apply '" + annotationType + "' to '" + key.toString() + "': Field not found.";
	  },

	  /*
	  2(prop) {
	      return `invalid decorator for '${prop.toString()}'`
	  },
	  3(prop) {
	      return `Cannot decorate '${prop.toString()}': action can only be used on properties with a function value.`
	  },
	  4(prop) {
	      return `Cannot decorate '${prop.toString()}': computed can only be used on getter properties.`
	  },
	  */
	  5: "'keys()' can only be used on observable objects, arrays, sets and maps",
	  6: "'values()' can only be used on observable objects, arrays, sets and maps",
	  7: "'entries()' can only be used on observable objects, arrays and maps",
	  8: "'set()' can only be used on observable objects, arrays and maps",
	  9: "'remove()' can only be used on observable objects, arrays and maps",
	  10: "'has()' can only be used on observable objects, arrays and maps",
	  11: "'get()' can only be used on observable objects, arrays and maps",
	  12: "Invalid annotation",
	  13: "Dynamic observable objects cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
	  14: "Intercept handlers should return nothing or a change object",
	  15: "Observable arrays cannot be frozen. If you're passing observables to 3rd party component/function that calls Object.freeze, pass copy instead: toJS(observable)",
	  16: "Modification exception: the internal structure of an observable array was changed.",
	  17: function _(index, length) {
	    return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;
	  },
	  18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",
	  19: function _(other) {
	    return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;
	  },
	  20: function _(other) {
	    return "Cannot initialize map from " + other;
	  },
	  21: function _(dataStructure) {
	    return "Cannot convert to map from '" + dataStructure + "'";
	  },
	  22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",
	  23: "It is not possible to get index atoms from arrays",
	  24: function _(thing) {
	    return "Cannot obtain administration from " + thing;
	  },
	  25: function _(property, name) {
	    return "the entry '" + property + "' does not exist in the observable map '" + name + "'";
	  },
	  26: "please specify a property",
	  27: function _(property, name) {
	    return "no observable property '" + property.toString() + "' found on the observable object '" + name + "'";
	  },
	  28: function _(thing) {
	    return "Cannot obtain atom from " + thing;
	  },
	  29: "Expecting some object",
	  30: "invalid action stack. did you forget to finish an action?",
	  31: "missing option for computed: get",
	  32: function _(name, derivation) {
	    return "Cycle detected in computation " + name + ": " + derivation;
	  },
	  33: function _(name) {
	    return "The setter of computed value '" + name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";
	  },
	  34: function _(name) {
	    return "[ComputedValue '" + name + "'] It is not possible to assign a new value to a computed value.";
	  },
	  35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",
	  36: "isolateGlobalState should be called before MobX is running any reactions",
	  37: function _(method) {
	    return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";
	  },
	  38: "'ownKeys()' can only be used on observable objects",
	  39: "'defineProperty()' can only be used on observable objects"
	};
	var errors =  niceErrors ;
	function die(error) {
	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  {
	    var e = typeof error === "string" ? error : errors[error];
	    if (typeof e === "function") e = e.apply(null, args);
	    throw new Error("[MobX] " + e);
	  }
	}

	var mockGlobal = {};
	function getGlobal() {
	  if (typeof globalThis !== "undefined") {
	    return globalThis;
	  }

	  if (typeof window !== "undefined") {
	    return window;
	  }

	  if (typeof commonjsGlobal !== "undefined") {
	    return commonjsGlobal;
	  }

	  if (typeof self !== "undefined") {
	    return self;
	  }

	  return mockGlobal;
	}

	var assign = Object.assign;
	var getDescriptor = Object.getOwnPropertyDescriptor;
	var defineProperty = Object.defineProperty;
	var objectPrototype = Object.prototype;
	var EMPTY_ARRAY = [];
	Object.freeze(EMPTY_ARRAY);
	var EMPTY_OBJECT = {};
	Object.freeze(EMPTY_OBJECT);
	var hasProxy = typeof Proxy !== "undefined";
	var plainObjectString = /*#__PURE__*/Object.toString();
	function assertProxies() {
	  if (!hasProxy) {
	    die( "`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`" );
	  }
	}
	function warnAboutProxyRequirement(msg) {
	  if ( globalState.verifyProxies) {
	    die("MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to " + msg);
	  }
	}
	function getNextId() {
	  return ++globalState.mobxGuid;
	}
	/**
	 * Makes sure that the provided function is invoked at most once.
	 */

	function once(func) {
	  var invoked = false;
	  return function () {
	    if (invoked) {
	      return;
	    }

	    invoked = true;
	    return func.apply(this, arguments);
	  };
	}
	var noop = function noop() {};
	function isFunction(fn) {
	  return typeof fn === "function";
	}
	function isStringish(value) {
	  var t = typeof value;

	  switch (t) {
	    case "string":
	    case "symbol":
	    case "number":
	      return true;
	  }

	  return false;
	}
	function isObject(value) {
	  return value !== null && typeof value === "object";
	}
	function isPlainObject(value) {
	  if (!isObject(value)) {
	    return false;
	  }

	  var proto = Object.getPrototypeOf(value);

	  if (proto == null) {
	    return true;
	  }

	  var protoConstructor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
	  return typeof protoConstructor === "function" && protoConstructor.toString() === plainObjectString;
	} // https://stackoverflow.com/a/37865170

	function isGenerator(obj) {
	  var constructor = obj == null ? void 0 : obj.constructor;

	  if (!constructor) {
	    return false;
	  }

	  if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) {
	    return true;
	  }

	  return false;
	}
	function addHiddenProp(object, propName, value) {
	  defineProperty(object, propName, {
	    enumerable: false,
	    writable: true,
	    configurable: true,
	    value: value
	  });
	}
	function addHiddenFinalProp(object, propName, value) {
	  defineProperty(object, propName, {
	    enumerable: false,
	    writable: false,
	    configurable: true,
	    value: value
	  });
	}
	function createInstanceofPredicate(name, theClass) {
	  var propName = "isMobX" + name;
	  theClass.prototype[propName] = true;
	  return function (x) {
	    return isObject(x) && x[propName] === true;
	  };
	}
	function isES6Map(thing) {
	  return thing instanceof Map;
	}
	function isES6Set(thing) {
	  return thing instanceof Set;
	}
	var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";
	/**
	 * Returns the following: own enumerable keys and symbols.
	 */

	function getPlainObjectKeys(object) {
	  var keys = Object.keys(object); // Not supported in IE, so there are not going to be symbol props anyway...

	  if (!hasGetOwnPropertySymbols) {
	    return keys;
	  }

	  var symbols = Object.getOwnPropertySymbols(object);

	  if (!symbols.length) {
	    return keys;
	  }

	  return [].concat(keys, symbols.filter(function (s) {
	    return objectPrototype.propertyIsEnumerable.call(object, s);
	  }));
	} // From Immer utils
	// Returns all own keys, including non-enumerable and symbolic

	var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {
	  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
	} :
	/* istanbul ignore next */
	Object.getOwnPropertyNames;
	function stringifyKey(key) {
	  if (typeof key === "string") {
	    return key;
	  }

	  if (typeof key === "symbol") {
	    return key.toString();
	  }

	  return new String(key).toString();
	}
	function toPrimitive(value) {
	  return value === null ? null : typeof value === "object" ? "" + value : value;
	}
	function hasProp(target, prop) {
	  return objectPrototype.hasOwnProperty.call(target, prop);
	} // From Immer utils

	var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {
	  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274
	  var res = {}; // Note: without polyfill for ownKeys, symbols won't be picked up

	  ownKeys(target).forEach(function (key) {
	    res[key] = getDescriptor(target, key);
	  });
	  return res;
	};

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  Object.defineProperty(Constructor, "prototype", {
	    writable: false
	  });
	  return Constructor;
	}

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;

	  _setPrototypeOf(subClass, superClass);
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _unsupportedIterableToArray$1(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
	}

	function _arrayLikeToArray$1(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	  return arr2;
	}

	function _createForOfIteratorHelperLoose$1(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
	  if (it) return (it = it.call(o)).next.bind(it);

	  if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
	    if (it) o = it;
	    var i = 0;
	    return function () {
	      if (i >= o.length) return {
	        done: true
	      };
	      return {
	        done: false,
	        value: o[i++]
	      };
	    };
	  }

	  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	var storedAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-stored-annotations");
	/**
	 * Creates a function that acts as
	 * - decorator
	 * - annotation object
	 */

	function createDecoratorAnnotation(annotation) {
	  function decorator(target, property) {
	    storeAnnotation(target, property, annotation);
	  }

	  return Object.assign(decorator, annotation);
	}
	/**
	 * Stores annotation to prototype,
	 * so it can be inspected later by `makeObservable` called from constructor
	 */

	function storeAnnotation(prototype, key, annotation) {
	  if (!hasProp(prototype, storedAnnotationsSymbol)) {
	    addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));
	  } // @override must override something


	  if ( isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {
	    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
	    die("'" + fieldName + "' is decorated with 'override', " + "but no such decorated member was found on prototype.");
	  } // Cannot re-decorate


	  assertNotDecorated(prototype, annotation, key); // Ignore override

	  if (!isOverride(annotation)) {
	    prototype[storedAnnotationsSymbol][key] = annotation;
	  }
	}

	function assertNotDecorated(prototype, annotation, key) {
	  if ( !isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {
	    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
	    var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;
	    var requestedAnnotationType = annotation.annotationType_;
	    die("Cannot apply '@" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already decorated with '@" + currentAnnotationType + "'.") + "\nRe-decorating fields is not allowed." + "\nUse '@override' decorator for methods overridden by subclass.");
	  }
	}
	/**
	 * Collects annotations from prototypes and stores them on target (instance)
	 */


	function collectStoredAnnotations(target) {
	  if (!hasProp(target, storedAnnotationsSymbol)) {
	    if ( !target[storedAnnotationsSymbol]) {
	      die("No annotations were passed to makeObservable, but no decorated members have been found either");
	    } // We need a copy as we will remove annotation from the list once it's applied.


	    addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));
	  }

	  return target[storedAnnotationsSymbol];
	}

	var $mobx = /*#__PURE__*/Symbol("mobx administration");
	var Atom = /*#__PURE__*/function () {
	  // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed

	  /**
	   * Create a new atom. For debugging purposes it is recommended to give it a name.
	   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
	   */
	  function Atom(name_) {
	    if (name_ === void 0) {
	      name_ =  "Atom@" + getNextId() ;
	    }

	    this.name_ = void 0;
	    this.isPendingUnobservation_ = false;
	    this.isBeingObserved_ = false;
	    this.observers_ = new Set();
	    this.diffValue_ = 0;
	    this.lastAccessedBy_ = 0;
	    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
	    this.onBOL = void 0;
	    this.onBUOL = void 0;
	    this.name_ = name_;
	  } // onBecomeObservedListeners


	  var _proto = Atom.prototype;

	  _proto.onBO = function onBO() {
	    if (this.onBOL) {
	      this.onBOL.forEach(function (listener) {
	        return listener();
	      });
	    }
	  };

	  _proto.onBUO = function onBUO() {
	    if (this.onBUOL) {
	      this.onBUOL.forEach(function (listener) {
	        return listener();
	      });
	    }
	  }
	  /**
	   * Invoke this method to notify mobx that your atom has been used somehow.
	   * Returns true if there is currently a reactive context.
	   */
	  ;

	  _proto.reportObserved = function reportObserved$1() {
	    return reportObserved(this);
	  }
	  /**
	   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
	   */
	  ;

	  _proto.reportChanged = function reportChanged() {
	    startBatch();
	    propagateChanged(this);
	    endBatch();
	  };

	  _proto.toString = function toString() {
	    return this.name_;
	  };

	  return Atom;
	}();
	var isAtom = /*#__PURE__*/createInstanceofPredicate("Atom", Atom);
	function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
	  if (onBecomeObservedHandler === void 0) {
	    onBecomeObservedHandler = noop;
	  }

	  if (onBecomeUnobservedHandler === void 0) {
	    onBecomeUnobservedHandler = noop;
	  }

	  var atom = new Atom(name); // default `noop` listener will not initialize the hook Set

	  if (onBecomeObservedHandler !== noop) {
	    onBecomeObserved(atom, onBecomeObservedHandler);
	  }

	  if (onBecomeUnobservedHandler !== noop) {
	    onBecomeUnobserved(atom, onBecomeUnobservedHandler);
	  }

	  return atom;
	}

	function identityComparer(a, b) {
	  return a === b;
	}

	function structuralComparer(a, b) {
	  return deepEqual(a, b);
	}

	function shallowComparer(a, b) {
	  return deepEqual(a, b, 1);
	}

	function defaultComparer(a, b) {
	  if (Object.is) {
	    return Object.is(a, b);
	  }

	  return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b;
	}

	var comparer = {
	  identity: identityComparer,
	  structural: structuralComparer,
	  "default": defaultComparer,
	  shallow: shallowComparer
	};

	function deepEnhancer(v, _, name) {
	  // it is an observable already, done
	  if (isObservable(v)) {
	    return v;
	  } // something that can be converted and mutated?


	  if (Array.isArray(v)) {
	    return observable.array(v, {
	      name: name
	    });
	  }

	  if (isPlainObject(v)) {
	    return observable.object(v, undefined, {
	      name: name
	    });
	  }

	  if (isES6Map(v)) {
	    return observable.map(v, {
	      name: name
	    });
	  }

	  if (isES6Set(v)) {
	    return observable.set(v, {
	      name: name
	    });
	  }

	  if (typeof v === "function" && !isAction(v) && !isFlow(v)) {
	    if (isGenerator(v)) {
	      return flow(v);
	    } else {
	      return autoAction(name, v);
	    }
	  }

	  return v;
	}
	function shallowEnhancer(v, _, name) {
	  if (v === undefined || v === null) {
	    return v;
	  }

	  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) {
	    return v;
	  }

	  if (Array.isArray(v)) {
	    return observable.array(v, {
	      name: name,
	      deep: false
	    });
	  }

	  if (isPlainObject(v)) {
	    return observable.object(v, undefined, {
	      name: name,
	      deep: false
	    });
	  }

	  if (isES6Map(v)) {
	    return observable.map(v, {
	      name: name,
	      deep: false
	    });
	  }

	  if (isES6Set(v)) {
	    return observable.set(v, {
	      name: name,
	      deep: false
	    });
	  }

	  {
	    die("The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
	  }
	}
	function referenceEnhancer(newValue) {
	  // never turn into an observable
	  return newValue;
	}
	function refStructEnhancer(v, oldValue) {
	  if ( isObservable(v)) {
	    die("observable.struct should not be used with observable values");
	  }

	  if (deepEqual(v, oldValue)) {
	    return oldValue;
	  }

	  return v;
	}

	var OVERRIDE = "override";
	var override = /*#__PURE__*/createDecoratorAnnotation({
	  annotationType_: OVERRIDE,
	  make_: make_,
	  extend_: extend_
	});
	function isOverride(annotation) {
	  return annotation.annotationType_ === OVERRIDE;
	}

	function make_(adm, key) {
	  // Must not be plain object
	  if ( adm.isPlainObject_) {
	    die("Cannot apply '" + this.annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + this.annotationType_ + "' cannot be used on plain objects."));
	  } // Must override something


	  if ( !hasProp(adm.appliedAnnotations_, key)) {
	    die("'" + adm.name_ + "." + key.toString() + "' is annotated with '" + this.annotationType_ + "', " + "but no such annotated member was found on prototype.");
	  }

	  return 0
	  /* Cancel */
	  ;
	}

	function extend_(adm, key, descriptor, proxyTrap) {
	  die("'" + this.annotationType_ + "' can only be used with 'makeObservable'");
	}

	function createActionAnnotation(name, options) {
	  return {
	    annotationType_: name,
	    options_: options,
	    make_: make_$1,
	    extend_: extend_$1
	  };
	}

	function make_$1(adm, key, descriptor, source) {
	  var _this$options_;

	  // bound
	  if ((_this$options_ = this.options_) != null && _this$options_.bound) {
	    return this.extend_(adm, key, descriptor, false) === null ? 0
	    /* Cancel */
	    : 1
	    /* Break */
	    ;
	  } // own


	  if (source === adm.target_) {
	    return this.extend_(adm, key, descriptor, false) === null ? 0
	    /* Cancel */
	    : 2
	    /* Continue */
	    ;
	  } // prototype


	  if (isAction(descriptor.value)) {
	    // A prototype could have been annotated already by other constructor,
	    // rest of the proto chain must be annotated already
	    return 1
	    /* Break */
	    ;
	  }

	  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);
	  defineProperty(source, key, actionDescriptor);
	  return 2
	  /* Continue */
	  ;
	}

	function extend_$1(adm, key, descriptor, proxyTrap) {
	  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
	  return adm.defineProperty_(key, actionDescriptor, proxyTrap);
	}

	function assertActionDescriptor(adm, _ref, key, _ref2) {
	  var annotationType_ = _ref.annotationType_;
	  var value = _ref2.value;

	  if ( !isFunction(value)) {
	    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a function value."));
	  }
	}

	function createActionDescriptor(adm, annotation, key, descriptor, // provides ability to disable safeDescriptors for prototypes
	safeDescriptors) {
	  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3, _annotation$options_4, _adm$proxy_2;

	  if (safeDescriptors === void 0) {
	    safeDescriptors = globalState.safeDescriptors;
	  }

	  assertActionDescriptor(adm, annotation, key, descriptor);
	  var value = descriptor.value;

	  if ((_annotation$options_ = annotation.options_) != null && _annotation$options_.bound) {
	    var _adm$proxy_;

	    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
	  }

	  return {
	    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false, // https://github.com/mobxjs/mobx/discussions/3140
	    (_annotation$options_4 = annotation.options_) != null && _annotation$options_4.bound ? (_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_ : undefined),
	    // Non-configurable for classes
	    // prevents accidental field redefinition in subclass
	    configurable: safeDescriptors ? adm.isPlainObject_ : true,
	    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
	    enumerable: false,
	    // Non-obsevable, therefore non-writable
	    // Also prevents rewriting in subclass constructor
	    writable: safeDescriptors ? false : true
	  };
	}

	function createFlowAnnotation(name, options) {
	  return {
	    annotationType_: name,
	    options_: options,
	    make_: make_$2,
	    extend_: extend_$2
	  };
	}

	function make_$2(adm, key, descriptor, source) {
	  var _this$options_;

	  // own
	  if (source === adm.target_) {
	    return this.extend_(adm, key, descriptor, false) === null ? 0
	    /* Cancel */
	    : 2
	    /* Continue */
	    ;
	  } // prototype
	  // bound - must annotate protos to support super.flow()


	  if ((_this$options_ = this.options_) != null && _this$options_.bound && (!hasProp(adm.target_, key) || !isFlow(adm.target_[key]))) {
	    if (this.extend_(adm, key, descriptor, false) === null) {
	      return 0
	      /* Cancel */
	      ;
	    }
	  }

	  if (isFlow(descriptor.value)) {
	    // A prototype could have been annotated already by other constructor,
	    // rest of the proto chain must be annotated already
	    return 1
	    /* Break */
	    ;
	  }

	  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);
	  defineProperty(source, key, flowDescriptor);
	  return 2
	  /* Continue */
	  ;
	}

	function extend_$2(adm, key, descriptor, proxyTrap) {
	  var _this$options_2;

	  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);
	  return adm.defineProperty_(key, flowDescriptor, proxyTrap);
	}

	function assertFlowDescriptor(adm, _ref, key, _ref2) {
	  var annotationType_ = _ref.annotationType_;
	  var value = _ref2.value;

	  if ( !isFunction(value)) {
	    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a generator function value."));
	  }
	}

	function createFlowDescriptor(adm, annotation, key, descriptor, bound, // provides ability to disable safeDescriptors for prototypes
	safeDescriptors) {
	  if (safeDescriptors === void 0) {
	    safeDescriptors = globalState.safeDescriptors;
	  }

	  assertFlowDescriptor(adm, annotation, key, descriptor);
	  var value = descriptor.value; // In case of flow.bound, the descriptor can be from already annotated prototype

	  if (!isFlow(value)) {
	    value = flow(value);
	  }

	  if (bound) {
	    var _adm$proxy_;

	    // We do not keep original function around, so we bind the existing flow
	    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_); // This is normally set by `flow`, but `bind` returns new function...

	    value.isMobXFlow = true;
	  }

	  return {
	    value: value,
	    // Non-configurable for classes
	    // prevents accidental field redefinition in subclass
	    configurable: safeDescriptors ? adm.isPlainObject_ : true,
	    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
	    enumerable: false,
	    // Non-obsevable, therefore non-writable
	    // Also prevents rewriting in subclass constructor
	    writable: safeDescriptors ? false : true
	  };
	}

	function createComputedAnnotation(name, options) {
	  return {
	    annotationType_: name,
	    options_: options,
	    make_: make_$3,
	    extend_: extend_$3
	  };
	}

	function make_$3(adm, key, descriptor) {
	  return this.extend_(adm, key, descriptor, false) === null ? 0
	  /* Cancel */
	  : 1
	  /* Break */
	  ;
	}

	function extend_$3(adm, key, descriptor, proxyTrap) {
	  assertComputedDescriptor(adm, this, key, descriptor);
	  return adm.defineComputedProperty_(key, _extends({}, this.options_, {
	    get: descriptor.get,
	    set: descriptor.set
	  }), proxyTrap);
	}

	function assertComputedDescriptor(adm, _ref, key, _ref2) {
	  var annotationType_ = _ref.annotationType_;
	  var get = _ref2.get;

	  if ( !get) {
	    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on getter(+setter) properties."));
	  }
	}

	function createObservableAnnotation(name, options) {
	  return {
	    annotationType_: name,
	    options_: options,
	    make_: make_$4,
	    extend_: extend_$4
	  };
	}

	function make_$4(adm, key, descriptor) {
	  return this.extend_(adm, key, descriptor, false) === null ? 0
	  /* Cancel */
	  : 1
	  /* Break */
	  ;
	}

	function extend_$4(adm, key, descriptor, proxyTrap) {
	  var _this$options_$enhanc, _this$options_;

	  assertObservableDescriptor(adm, this, key, descriptor);
	  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);
	}

	function assertObservableDescriptor(adm, _ref, key, descriptor) {
	  var annotationType_ = _ref.annotationType_;

	  if ( !("value" in descriptor)) {
	    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' cannot be used on getter/setter properties"));
	  }
	}

	var AUTO = "true";
	var autoAnnotation = /*#__PURE__*/createAutoAnnotation();
	function createAutoAnnotation(options) {
	  return {
	    annotationType_: AUTO,
	    options_: options,
	    make_: make_$5,
	    extend_: extend_$5
	  };
	}

	function make_$5(adm, key, descriptor, source) {
	  var _this$options_3, _this$options_4;

	  // getter -> computed
	  if (descriptor.get) {
	    return computed.make_(adm, key, descriptor, source);
	  } // lone setter -> action setter


	  if (descriptor.set) {
	    // TODO make action applicable to setter and delegate to action.make_
	    var set = createAction(key.toString(), descriptor.set); // own

	    if (source === adm.target_) {
	      return adm.defineProperty_(key, {
	        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
	        set: set
	      }) === null ? 0
	      /* Cancel */
	      : 2
	      /* Continue */
	      ;
	    } // proto


	    defineProperty(source, key, {
	      configurable: true,
	      set: set
	    });
	    return 2
	    /* Continue */
	    ;
	  } // function on proto -> autoAction/flow


	  if (source !== adm.target_ && typeof descriptor.value === "function") {
	    var _this$options_2;

	    if (isGenerator(descriptor.value)) {
	      var _this$options_;

	      var flowAnnotation = (_this$options_ = this.options_) != null && _this$options_.autoBind ? flow.bound : flow;
	      return flowAnnotation.make_(adm, key, descriptor, source);
	    }

	    var actionAnnotation = (_this$options_2 = this.options_) != null && _this$options_2.autoBind ? autoAction.bound : autoAction;
	    return actionAnnotation.make_(adm, key, descriptor, source);
	  } // other -> observable
	  // Copy props from proto as well, see test:
	  // "decorate should work with Object.create"


	  var observableAnnotation = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable; // if function respect autoBind option

	  if (typeof descriptor.value === "function" && (_this$options_4 = this.options_) != null && _this$options_4.autoBind) {
	    var _adm$proxy_;

	    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
	  }

	  return observableAnnotation.make_(adm, key, descriptor, source);
	}

	function extend_$5(adm, key, descriptor, proxyTrap) {
	  var _this$options_5, _this$options_6;

	  // getter -> computed
	  if (descriptor.get) {
	    return computed.extend_(adm, key, descriptor, proxyTrap);
	  } // lone setter -> action setter


	  if (descriptor.set) {
	    // TODO make action applicable to setter and delegate to action.extend_
	    return adm.defineProperty_(key, {
	      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
	      set: createAction(key.toString(), descriptor.set)
	    }, proxyTrap);
	  } // other -> observable
	  // if function respect autoBind option


	  if (typeof descriptor.value === "function" && (_this$options_5 = this.options_) != null && _this$options_5.autoBind) {
	    var _adm$proxy_2;

	    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);
	  }

	  var observableAnnotation = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;
	  return observableAnnotation.extend_(adm, key, descriptor, proxyTrap);
	}

	var OBSERVABLE = "observable";
	var OBSERVABLE_REF = "observable.ref";
	var OBSERVABLE_SHALLOW = "observable.shallow";
	var OBSERVABLE_STRUCT = "observable.struct"; // Predefined bags of create observable options, to avoid allocating temporarily option objects
	// in the majority of cases

	var defaultCreateObservableOptions = {
	  deep: true,
	  name: undefined,
	  defaultDecorator: undefined,
	  proxy: true
	};
	Object.freeze(defaultCreateObservableOptions);
	function asCreateObservableOptions(thing) {
	  return thing || defaultCreateObservableOptions;
	}
	var observableAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE);
	var observableRefAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_REF, {
	  enhancer: referenceEnhancer
	});
	var observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_SHALLOW, {
	  enhancer: shallowEnhancer
	});
	var observableStructAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_STRUCT, {
	  enhancer: refStructEnhancer
	});
	var observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);
	function getEnhancerFromOptions(options) {
	  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);
	}
	function getAnnotationFromOptions(options) {
	  var _options$defaultDecor;

	  return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : undefined;
	}
	function getEnhancerFromAnnotation(annotation) {
	  var _annotation$options_$, _annotation$options_;

	  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
	}
	/**
	 * Turns an object, array or function into a reactive structure.
	 * @param v the value which should become observable.
	 */

	function createObservable(v, arg2, arg3) {
	  // @observable someProp;
	  if (isStringish(arg2)) {
	    storeAnnotation(v, arg2, observableAnnotation);
	    return;
	  } // already observable - ignore


	  if (isObservable(v)) {
	    return v;
	  } // plain object


	  if (isPlainObject(v)) {
	    return observable.object(v, arg2, arg3);
	  } // Array


	  if (Array.isArray(v)) {
	    return observable.array(v, arg2);
	  } // Map


	  if (isES6Map(v)) {
	    return observable.map(v, arg2);
	  } // Set


	  if (isES6Set(v)) {
	    return observable.set(v, arg2);
	  } // other object - ignore


	  if (typeof v === "object" && v !== null) {
	    return v;
	  } // anything else


	  return observable.box(v, arg2);
	}

	Object.assign(createObservable, observableDecoratorAnnotation);
	var observableFactories = {
	  box: function box(value, options) {
	    var o = asCreateObservableOptions(options);
	    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
	  },
	  array: function array(initialValues, options) {
	    var o = asCreateObservableOptions(options);
	    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);
	  },
	  map: function map(initialValues, options) {
	    var o = asCreateObservableOptions(options);
	    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
	  },
	  set: function set(initialValues, options) {
	    var o = asCreateObservableOptions(options);
	    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
	  },
	  object: function object(props, decorators, options) {
	    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);
	  },
	  ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),
	  shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),
	  deep: observableDecoratorAnnotation,
	  struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)
	}; // eslint-disable-next-line

	var observable = /*#__PURE__*/assign(createObservable, observableFactories);

	var COMPUTED = "computed";
	var COMPUTED_STRUCT = "computed.struct";
	var computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);
	var computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {
	  equals: comparer.structural
	});
	/**
	 * Decorator for class properties: @computed get value() { return expr; }.
	 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
	 */

	var computed = function computed(arg1, arg2) {
	  if (isStringish(arg2)) {
	    // @computed
	    return storeAnnotation(arg1, arg2, computedAnnotation);
	  }

	  if (isPlainObject(arg1)) {
	    // @computed({ options })
	    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
	  } // computed(expr, options?)


	  {
	    if (!isFunction(arg1)) {
	      die("First argument to `computed` should be an expression.");
	    }

	    if (isFunction(arg2)) {
	      die("A setter as second argument is no longer supported, use `{ set: fn }` option instead");
	    }
	  }

	  var opts = isPlainObject(arg2) ? arg2 : {};
	  opts.get = arg1;
	  opts.name || (opts.name = arg1.name || "");
	  /* for generated name */

	  return new ComputedValue(opts);
	};
	Object.assign(computed, computedAnnotation);
	computed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);

	var _getDescriptor$config, _getDescriptor;
	// mobx versions

	var currentActionId = 0;
	var nextActionId = 1;
	var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false; // we can safely recycle this object

	var tmpNameDescriptor = {
	  value: "action",
	  configurable: true,
	  writable: false,
	  enumerable: false
	};
	function createAction(actionName, fn, autoAction, ref) {
	  if (autoAction === void 0) {
	    autoAction = false;
	  }

	  {
	    if (!isFunction(fn)) {
	      die("`action` can only be invoked on functions");
	    }

	    if (typeof actionName !== "string" || !actionName) {
	      die("actions should have valid names, got: '" + actionName + "'");
	    }
	  }

	  function res() {
	    return executeAction(actionName, autoAction, fn, ref || this, arguments);
	  }

	  res.isMobxAction = true;

	  if (isFunctionNameConfigurable) {
	    tmpNameDescriptor.value = actionName;
	    Object.defineProperty(res, "name", tmpNameDescriptor);
	  }

	  return res;
	}
	function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
	  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);

	  try {
	    return fn.apply(scope, args);
	  } catch (err) {
	    runInfo.error_ = err;
	    throw err;
	  } finally {
	    _endAction(runInfo);
	  }
	}
	function _startAction(actionName, canRunAsDerivation, // true for autoAction
	scope, args) {
	  var notifySpy_ =  isSpyEnabled() && !!actionName;
	  var startTime_ = 0;

	  if ( notifySpy_) {
	    startTime_ = Date.now();
	    var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;
	    spyReportStart({
	      type: ACTION,
	      name: actionName,
	      object: scope,
	      arguments: flattenedArgs
	    });
	  }

	  var prevDerivation_ = globalState.trackingDerivation;
	  var runAsAction = !canRunAsDerivation || !prevDerivation_;
	  startBatch();
	  var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow

	  if (runAsAction) {
	    untrackedStart();
	    prevAllowStateChanges_ = allowStateChangesStart(true);
	  }

	  var prevAllowStateReads_ = allowStateReadsStart(true);
	  var runInfo = {
	    runAsAction_: runAsAction,
	    prevDerivation_: prevDerivation_,
	    prevAllowStateChanges_: prevAllowStateChanges_,
	    prevAllowStateReads_: prevAllowStateReads_,
	    notifySpy_: notifySpy_,
	    startTime_: startTime_,
	    actionId_: nextActionId++,
	    parentActionId_: currentActionId
	  };
	  currentActionId = runInfo.actionId_;
	  return runInfo;
	}
	function _endAction(runInfo) {
	  if (currentActionId !== runInfo.actionId_) {
	    die(30);
	  }

	  currentActionId = runInfo.parentActionId_;

	  if (runInfo.error_ !== undefined) {
	    globalState.suppressReactionErrors = true;
	  }

	  allowStateChangesEnd(runInfo.prevAllowStateChanges_);
	  allowStateReadsEnd(runInfo.prevAllowStateReads_);
	  endBatch();

	  if (runInfo.runAsAction_) {
	    untrackedEnd(runInfo.prevDerivation_);
	  }

	  if ( runInfo.notifySpy_) {
	    spyReportEnd({
	      time: Date.now() - runInfo.startTime_
	    });
	  }

	  globalState.suppressReactionErrors = false;
	}
	function allowStateChanges(allowStateChanges, func) {
	  var prev = allowStateChangesStart(allowStateChanges);

	  try {
	    return func();
	  } finally {
	    allowStateChangesEnd(prev);
	  }
	}
	function allowStateChangesStart(allowStateChanges) {
	  var prev = globalState.allowStateChanges;
	  globalState.allowStateChanges = allowStateChanges;
	  return prev;
	}
	function allowStateChangesEnd(prev) {
	  globalState.allowStateChanges = prev;
	}

	var _Symbol$toPrimitive;
	var CREATE = "create";
	_Symbol$toPrimitive = Symbol.toPrimitive;
	var ObservableValue = /*#__PURE__*/function (_Atom) {
	  _inheritsLoose(ObservableValue, _Atom);

	  function ObservableValue(value, enhancer, name_, notifySpy, equals) {
	    var _this;

	    if (name_ === void 0) {
	      name_ =  "ObservableValue@" + getNextId() ;
	    }

	    if (notifySpy === void 0) {
	      notifySpy = true;
	    }

	    if (equals === void 0) {
	      equals = comparer["default"];
	    }

	    _this = _Atom.call(this, name_) || this;
	    _this.enhancer = void 0;
	    _this.name_ = void 0;
	    _this.equals = void 0;
	    _this.hasUnreportedChange_ = false;
	    _this.interceptors_ = void 0;
	    _this.changeListeners_ = void 0;
	    _this.value_ = void 0;
	    _this.dehancer = void 0;
	    _this.enhancer = enhancer;
	    _this.name_ = name_;
	    _this.equals = equals;
	    _this.value_ = enhancer(value, undefined, name_);

	    if ( notifySpy && isSpyEnabled()) {
	      // only notify spy if this is a stand-alone observable
	      spyReport({
	        type: CREATE,
	        object: _assertThisInitialized(_this),
	        observableKind: "value",
	        debugObjectName: _this.name_,
	        newValue: "" + _this.value_
	      });
	    }

	    return _this;
	  }

	  var _proto = ObservableValue.prototype;

	  _proto.dehanceValue = function dehanceValue(value) {
	    if (this.dehancer !== undefined) {
	      return this.dehancer(value);
	    }

	    return value;
	  };

	  _proto.set = function set(newValue) {
	    var oldValue = this.value_;
	    newValue = this.prepareNewValue_(newValue);

	    if (newValue !== globalState.UNCHANGED) {
	      var notifySpy = isSpyEnabled();

	      if ( notifySpy) {
	        spyReportStart({
	          type: UPDATE,
	          object: this,
	          observableKind: "value",
	          debugObjectName: this.name_,
	          newValue: newValue,
	          oldValue: oldValue
	        });
	      }

	      this.setNewValue_(newValue);

	      if ( notifySpy) {
	        spyReportEnd();
	      }
	    }
	  };

	  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
	    checkIfStateModificationsAreAllowed(this);

	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        object: this,
	        type: UPDATE,
	        newValue: newValue
	      });

	      if (!change) {
	        return globalState.UNCHANGED;
	      }

	      newValue = change.newValue;
	    } // apply modifier


	    newValue = this.enhancer(newValue, this.value_, this.name_);
	    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
	  };

	  _proto.setNewValue_ = function setNewValue_(newValue) {
	    var oldValue = this.value_;
	    this.value_ = newValue;
	    this.reportChanged();

	    if (hasListeners(this)) {
	      notifyListeners(this, {
	        type: UPDATE,
	        object: this,
	        newValue: newValue,
	        oldValue: oldValue
	      });
	    }
	  };

	  _proto.get = function get() {
	    this.reportObserved();
	    return this.dehanceValue(this.value_);
	  };

	  _proto.intercept_ = function intercept_(handler) {
	    return registerInterceptor(this, handler);
	  };

	  _proto.observe_ = function observe_(listener, fireImmediately) {
	    if (fireImmediately) {
	      listener({
	        observableKind: "value",
	        debugObjectName: this.name_,
	        object: this,
	        type: UPDATE,
	        newValue: this.value_,
	        oldValue: undefined
	      });
	    }

	    return registerListener(this, listener);
	  };

	  _proto.raw = function raw() {
	    // used by MST ot get undehanced value
	    return this.value_;
	  };

	  _proto.toJSON = function toJSON() {
	    return this.get();
	  };

	  _proto.toString = function toString() {
	    return this.name_ + "[" + this.value_ + "]";
	  };

	  _proto.valueOf = function valueOf() {
	    return toPrimitive(this.get());
	  };

	  _proto[_Symbol$toPrimitive] = function () {
	    return this.valueOf();
	  };

	  return ObservableValue;
	}(Atom);
	var isObservableValue = /*#__PURE__*/createInstanceofPredicate("ObservableValue", ObservableValue);

	var _Symbol$toPrimitive$1;
	/**
	 * A node in the state dependency root that observes other nodes, and can be observed itself.
	 *
	 * ComputedValue will remember the result of the computation for the duration of the batch, or
	 * while being observed.
	 *
	 * During this time it will recompute only when one of its direct dependencies changed,
	 * but only when it is being accessed with `ComputedValue.get()`.
	 *
	 * Implementation description:
	 * 1. First time it's being accessed it will compute and remember result
	 *    give back remembered result until 2. happens
	 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
	 * 3. When it's being accessed, recompute if any shallow dependency changed.
	 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
	 *    go to step 2. either way
	 *
	 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
	 */

	_Symbol$toPrimitive$1 = Symbol.toPrimitive;
	var ComputedValue = /*#__PURE__*/function () {
	  // nodes we are looking at. Our value depends on these nodes
	  // during tracking it's an array with new observed observers
	  // to check for cycles
	  // N.B: unminified as it is used by MST

	  /**
	   * Create a new computed value based on a function expression.
	   *
	   * The `name` property is for debug purposes only.
	   *
	   * The `equals` property specifies the comparer function to use to determine if a newly produced
	   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
	   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.
	   * Structural comparison can be convenient if you always produce a new aggregated object and
	   * don't want to notify observers if it is structurally the same.
	   * This is useful for working with vectors, mouse coordinates etc.
	   */
	  function ComputedValue(options) {
	    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
	    this.observing_ = [];
	    this.newObserving_ = null;
	    this.isBeingObserved_ = false;
	    this.isPendingUnobservation_ = false;
	    this.observers_ = new Set();
	    this.diffValue_ = 0;
	    this.runId_ = 0;
	    this.lastAccessedBy_ = 0;
	    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
	    this.unboundDepsCount_ = 0;
	    this.value_ = new CaughtException(null);
	    this.name_ = void 0;
	    this.triggeredBy_ = void 0;
	    this.isComputing_ = false;
	    this.isRunningSetter_ = false;
	    this.derivation = void 0;
	    this.setter_ = void 0;
	    this.isTracing_ = TraceMode.NONE;
	    this.scope_ = void 0;
	    this.equals_ = void 0;
	    this.requiresReaction_ = void 0;
	    this.keepAlive_ = void 0;
	    this.onBOL = void 0;
	    this.onBUOL = void 0;

	    if (!options.get) {
	      die(31);
	    }

	    this.derivation = options.get;
	    this.name_ = options.name || ( "ComputedValue@" + getNextId() );

	    if (options.set) {
	      this.setter_ = createAction( this.name_ + "-setter" , options.set);
	    }

	    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);
	    this.scope_ = options.context;
	    this.requiresReaction_ = options.requiresReaction;
	    this.keepAlive_ = !!options.keepAlive;
	  }

	  var _proto = ComputedValue.prototype;

	  _proto.onBecomeStale_ = function onBecomeStale_() {
	    propagateMaybeChanged(this);
	  };

	  _proto.onBO = function onBO() {
	    if (this.onBOL) {
	      this.onBOL.forEach(function (listener) {
	        return listener();
	      });
	    }
	  };

	  _proto.onBUO = function onBUO() {
	    if (this.onBUOL) {
	      this.onBUOL.forEach(function (listener) {
	        return listener();
	      });
	    }
	  }
	  /**
	   * Returns the current value of this computed value.
	   * Will evaluate its computation first if needed.
	   */
	  ;

	  _proto.get = function get() {
	    if (this.isComputing_) {
	      die(32, this.name_, this.derivation);
	    }

	    if (globalState.inBatch === 0 && // !globalState.trackingDerivatpion &&
	    this.observers_.size === 0 && !this.keepAlive_) {
	      if (shouldCompute(this)) {
	        this.warnAboutUntrackedRead_();
	        startBatch(); // See perf test 'computed memoization'

	        this.value_ = this.computeValue_(false);
	        endBatch();
	      }
	    } else {
	      reportObserved(this);

	      if (shouldCompute(this)) {
	        var prevTrackingContext = globalState.trackingContext;

	        if (this.keepAlive_ && !prevTrackingContext) {
	          globalState.trackingContext = this;
	        }

	        if (this.trackAndCompute()) {
	          propagateChangeConfirmed(this);
	        }

	        globalState.trackingContext = prevTrackingContext;
	      }
	    }

	    var result = this.value_;

	    if (isCaughtException(result)) {
	      throw result.cause;
	    }

	    return result;
	  };

	  _proto.set = function set(value) {
	    if (this.setter_) {
	      if (this.isRunningSetter_) {
	        die(33, this.name_);
	      }

	      this.isRunningSetter_ = true;

	      try {
	        this.setter_.call(this.scope_, value);
	      } finally {
	        this.isRunningSetter_ = false;
	      }
	    } else {
	      die(34, this.name_);
	    }
	  };

	  _proto.trackAndCompute = function trackAndCompute() {
	    // N.B: unminified as it is used by MST
	    var oldValue = this.value_;
	    var wasSuspended =
	    /* see #1208 */
	    this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;
	    var newValue = this.computeValue_(true);
	    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);

	    if (changed) {
	      this.value_ = newValue;

	      if ( isSpyEnabled()) {
	        spyReport({
	          observableKind: "computed",
	          debugObjectName: this.name_,
	          object: this.scope_,
	          type: "update",
	          oldValue: oldValue,
	          newValue: newValue
	        });
	      }
	    }

	    return changed;
	  };

	  _proto.computeValue_ = function computeValue_(track) {
	    this.isComputing_ = true; // don't allow state changes during computation

	    var prev = allowStateChangesStart(false);
	    var res;

	    if (track) {
	      res = trackDerivedFunction(this, this.derivation, this.scope_);
	    } else {
	      if (globalState.disableErrorBoundaries === true) {
	        res = this.derivation.call(this.scope_);
	      } else {
	        try {
	          res = this.derivation.call(this.scope_);
	        } catch (e) {
	          res = new CaughtException(e);
	        }
	      }
	    }

	    allowStateChangesEnd(prev);
	    this.isComputing_ = false;
	    return res;
	  };

	  _proto.suspend_ = function suspend_() {
	    if (!this.keepAlive_) {
	      clearObserving(this);
	      this.value_ = undefined; // don't hold on to computed value!

	      if ( this.isTracing_ !== TraceMode.NONE) {
	        console.log("[mobx.trace] Computed value '" + this.name_ + "' was suspended and it will recompute on the next access.");
	      }
	    }
	  };

	  _proto.observe_ = function observe_(listener, fireImmediately) {
	    var _this = this;

	    var firstTime = true;
	    var prevValue = undefined;
	    return autorun(function () {
	      // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place
	      var newValue = _this.get();

	      if (!firstTime || fireImmediately) {
	        var prevU = untrackedStart();
	        listener({
	          observableKind: "computed",
	          debugObjectName: _this.name_,
	          type: UPDATE,
	          object: _this,
	          newValue: newValue,
	          oldValue: prevValue
	        });
	        untrackedEnd(prevU);
	      }

	      firstTime = false;
	      prevValue = newValue;
	    });
	  };

	  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {

	    if (this.isTracing_ !== TraceMode.NONE) {
	      console.log("[mobx.trace] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
	    }

	    if (typeof this.requiresReaction_ === "boolean" ? this.requiresReaction_ : globalState.computedRequiresReaction) {
	      console.warn("[mobx] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
	    }
	  };

	  _proto.toString = function toString() {
	    return this.name_ + "[" + this.derivation.toString() + "]";
	  };

	  _proto.valueOf = function valueOf() {
	    return toPrimitive(this.get());
	  };

	  _proto[_Symbol$toPrimitive$1] = function () {
	    return this.valueOf();
	  };

	  return ComputedValue;
	}();
	var isComputedValue = /*#__PURE__*/createInstanceofPredicate("ComputedValue", ComputedValue);

	var IDerivationState_;

	(function (IDerivationState_) {
	  // before being run or (outside batch and not being observed)
	  // at this point derivation is not holding any data about dependency tree
	  IDerivationState_[IDerivationState_["NOT_TRACKING_"] = -1] = "NOT_TRACKING_"; // no shallow dependency changed since last computation
	  // won't recalculate derivation
	  // this is what makes mobx fast

	  IDerivationState_[IDerivationState_["UP_TO_DATE_"] = 0] = "UP_TO_DATE_"; // some deep dependency changed, but don't know if shallow dependency changed
	  // will require to check first if UP_TO_DATE or POSSIBLY_STALE
	  // currently only ComputedValue will propagate POSSIBLY_STALE
	  //
	  // having this state is second big optimization:
	  // don't have to recompute on every dependency change, but only when it's needed

	  IDerivationState_[IDerivationState_["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_"; // A shallow dependency has changed since last computation and the derivation
	  // will need to recompute when it's needed next.

	  IDerivationState_[IDerivationState_["STALE_"] = 2] = "STALE_";
	})(IDerivationState_ || (IDerivationState_ = {}));

	var TraceMode;

	(function (TraceMode) {
	  TraceMode[TraceMode["NONE"] = 0] = "NONE";
	  TraceMode[TraceMode["LOG"] = 1] = "LOG";
	  TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
	})(TraceMode || (TraceMode = {}));

	var CaughtException = function CaughtException(cause) {
	  this.cause = void 0;
	  this.cause = cause; // Empty
	};
	function isCaughtException(e) {
	  return e instanceof CaughtException;
	}
	/**
	 * Finds out whether any dependency of the derivation has actually changed.
	 * If dependenciesState is 1 then it will recalculate dependencies,
	 * if any dependency changed it will propagate it by changing dependenciesState to 2.
	 *
	 * By iterating over the dependencies in the same order that they were reported and
	 * stopping on the first change, all the recalculations are only called for ComputedValues
	 * that will be tracked by derivation. That is because we assume that if the first x
	 * dependencies of the derivation doesn't change then the derivation should run the same way
	 * up until accessing x-th dependency.
	 */

	function shouldCompute(derivation) {
	  switch (derivation.dependenciesState_) {
	    case IDerivationState_.UP_TO_DATE_:
	      return false;

	    case IDerivationState_.NOT_TRACKING_:
	    case IDerivationState_.STALE_:
	      return true;

	    case IDerivationState_.POSSIBLY_STALE_:
	      {
	        // state propagation can occur outside of action/reactive context #2195
	        var prevAllowStateReads = allowStateReadsStart(true);
	        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.

	        var obs = derivation.observing_,
	            l = obs.length;

	        for (var i = 0; i < l; i++) {
	          var obj = obs[i];

	          if (isComputedValue(obj)) {
	            if (globalState.disableErrorBoundaries) {
	              obj.get();
	            } else {
	              try {
	                obj.get();
	              } catch (e) {
	                // we are not interested in the value *or* exception at this moment, but if there is one, notify all
	                untrackedEnd(prevUntracked);
	                allowStateReadsEnd(prevAllowStateReads);
	                return true;
	              }
	            } // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
	            // and `derivation` is an observer of `obj`
	            // invariantShouldCompute(derivation)


	            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
	              untrackedEnd(prevUntracked);
	              allowStateReadsEnd(prevAllowStateReads);
	              return true;
	            }
	          }
	        }

	        changeDependenciesStateTo0(derivation);
	        untrackedEnd(prevUntracked);
	        allowStateReadsEnd(prevAllowStateReads);
	        return false;
	      }
	  }
	}
	function isComputingDerivation() {
	  return globalState.trackingDerivation !== null; // filter out actions inside computations
	}
	function checkIfStateModificationsAreAllowed(atom) {

	  var hasObservers = atom.observers_.size > 0; // Should not be possible to change observed state outside strict mode, except during initialization, see #563

	  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always")) {
	    console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ") + atom.name_);
	  }
	}
	function checkIfStateReadsAreAllowed(observable) {
	  if ( !globalState.allowStateReads && globalState.observableRequiresReaction) {
	    console.warn("[mobx] Observable '" + observable.name_ + "' being read outside a reactive context.");
	  }
	}
	/**
	 * Executes the provided function `f` and tracks which observables are being accessed.
	 * The tracking information is stored on the `derivation` object and the derivation is registered
	 * as observer of any of the accessed observables.
	 */

	function trackDerivedFunction(derivation, f, context) {
	  var prevAllowStateReads = allowStateReadsStart(true); // pre allocate array allocation + room for variation in deps
	  // array will be trimmed by bindDependencies

	  changeDependenciesStateTo0(derivation);
	  derivation.newObserving_ = new Array(derivation.observing_.length + 100);
	  derivation.unboundDepsCount_ = 0;
	  derivation.runId_ = ++globalState.runId;
	  var prevTracking = globalState.trackingDerivation;
	  globalState.trackingDerivation = derivation;
	  globalState.inBatch++;
	  var result;

	  if (globalState.disableErrorBoundaries === true) {
	    result = f.call(context);
	  } else {
	    try {
	      result = f.call(context);
	    } catch (e) {
	      result = new CaughtException(e);
	    }
	  }

	  globalState.inBatch--;
	  globalState.trackingDerivation = prevTracking;
	  bindDependencies(derivation);
	  warnAboutDerivationWithoutDependencies(derivation);
	  allowStateReadsEnd(prevAllowStateReads);
	  return result;
	}

	function warnAboutDerivationWithoutDependencies(derivation) {

	  if (derivation.observing_.length !== 0) {
	    return;
	  }

	  if (typeof derivation.requiresObservable_ === "boolean" ? derivation.requiresObservable_ : globalState.reactionRequiresObservable) {
	    console.warn("[mobx] Derivation '" + derivation.name_ + "' is created/updated without reading any observable value.");
	  }
	}
	/**
	 * diffs newObserving with observing.
	 * update observing to be newObserving with unique observables
	 * notify observers that become observed/unobserved
	 */


	function bindDependencies(derivation) {
	  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
	  var prevObserving = derivation.observing_;
	  var observing = derivation.observing_ = derivation.newObserving_;
	  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_; // Go through all new observables and check diffValue: (this list can contain duplicates):
	  //   0: first occurrence, change to 1 and keep it
	  //   1: extra occurrence, drop it

	  var i0 = 0,
	      l = derivation.unboundDepsCount_;

	  for (var i = 0; i < l; i++) {
	    var dep = observing[i];

	    if (dep.diffValue_ === 0) {
	      dep.diffValue_ = 1;

	      if (i0 !== i) {
	        observing[i0] = dep;
	      }

	      i0++;
	    } // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
	    // not hitting the condition


	    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
	      lowestNewObservingDerivationState = dep.dependenciesState_;
	    }
	  }

	  observing.length = i0;
	  derivation.newObserving_ = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
	  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
	  //   0: it's not in new observables, unobserve it
	  //   1: it keeps being observed, don't want to notify it. change to 0

	  l = prevObserving.length;

	  while (l--) {
	    var _dep = prevObserving[l];

	    if (_dep.diffValue_ === 0) {
	      removeObserver(_dep, derivation);
	    }

	    _dep.diffValue_ = 0;
	  } // Go through all new observables and check diffValue: (now it should be unique)
	  //   0: it was set to 0 in last loop. don't need to do anything.
	  //   1: it wasn't observed, let's observe it. set back to 0


	  while (i0--) {
	    var _dep2 = observing[i0];

	    if (_dep2.diffValue_ === 1) {
	      _dep2.diffValue_ = 0;
	      addObserver(_dep2, derivation);
	    }
	  } // Some new observed derivations may become stale during this derivation computation
	  // so they have had no chance to propagate staleness (#916)


	  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
	    derivation.dependenciesState_ = lowestNewObservingDerivationState;
	    derivation.onBecomeStale_();
	  }
	}

	function clearObserving(derivation) {
	  // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
	  var obs = derivation.observing_;
	  derivation.observing_ = [];
	  var i = obs.length;

	  while (i--) {
	    removeObserver(obs[i], derivation);
	  }

	  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
	}
	function untracked(action) {
	  var prev = untrackedStart();

	  try {
	    return action();
	  } finally {
	    untrackedEnd(prev);
	  }
	}
	function untrackedStart() {
	  var prev = globalState.trackingDerivation;
	  globalState.trackingDerivation = null;
	  return prev;
	}
	function untrackedEnd(prev) {
	  globalState.trackingDerivation = prev;
	}
	function allowStateReadsStart(allowStateReads) {
	  var prev = globalState.allowStateReads;
	  globalState.allowStateReads = allowStateReads;
	  return prev;
	}
	function allowStateReadsEnd(prev) {
	  globalState.allowStateReads = prev;
	}
	/**
	 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
	 *
	 */

	function changeDependenciesStateTo0(derivation) {
	  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
	    return;
	  }

	  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
	  var obs = derivation.observing_;
	  var i = obs.length;

	  while (i--) {
	    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
	  }
	}

	/**
	 * These values will persist if global state is reset
	 */

	var persistentKeys = ["mobxGuid", "spyListeners", "enforceActions", "computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "allowStateReads", "disableErrorBoundaries", "runId", "UNCHANGED", "useProxies"];
	var MobXGlobals = function MobXGlobals() {
	  this.version = 6;
	  this.UNCHANGED = {};
	  this.trackingDerivation = null;
	  this.trackingContext = null;
	  this.runId = 0;
	  this.mobxGuid = 0;
	  this.inBatch = 0;
	  this.pendingUnobservations = [];
	  this.pendingReactions = [];
	  this.isRunningReactions = false;
	  this.allowStateChanges = false;
	  this.allowStateReads = true;
	  this.enforceActions = true;
	  this.spyListeners = [];
	  this.globalReactionErrorHandlers = [];
	  this.computedRequiresReaction = false;
	  this.reactionRequiresObservable = false;
	  this.observableRequiresReaction = false;
	  this.disableErrorBoundaries = false;
	  this.suppressReactionErrors = false;
	  this.useProxies = true;
	  this.verifyProxies = false;
	  this.safeDescriptors = true;
	};
	var canMergeGlobalState = true;
	var isolateCalled = false;
	var globalState = /*#__PURE__*/function () {
	  var global = /*#__PURE__*/getGlobal();

	  if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) {
	    canMergeGlobalState = false;
	  }

	  if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) {
	    canMergeGlobalState = false;
	  }

	  if (!canMergeGlobalState) {
	    // Because this is a IIFE we need to let isolateCalled a chance to change
	    // so we run it after the event loop completed at least 1 iteration
	    setTimeout(function () {
	      if (!isolateCalled) {
	        die(35);
	      }
	    }, 1);
	    return new MobXGlobals();
	  } else if (global.__mobxGlobals) {
	    global.__mobxInstanceCount += 1;

	    if (!global.__mobxGlobals.UNCHANGED) {
	      global.__mobxGlobals.UNCHANGED = {};
	    } // make merge backward compatible


	    return global.__mobxGlobals;
	  } else {
	    global.__mobxInstanceCount = 1;
	    return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();
	  }
	}();
	function isolateGlobalState() {
	  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) {
	    die(36);
	  }

	  isolateCalled = true;

	  if (canMergeGlobalState) {
	    var global = getGlobal();

	    if (--global.__mobxInstanceCount === 0) {
	      global.__mobxGlobals = undefined;
	    }

	    globalState = new MobXGlobals();
	  }
	}
	function getGlobalState() {
	  return globalState;
	}
	/**
	 * For testing purposes only; this will break the internal state of existing observables,
	 * but can be used to get back at a stable state after throwing errors
	 */

	function resetGlobalState() {
	  var defaultGlobals = new MobXGlobals();

	  for (var key in defaultGlobals) {
	    if (persistentKeys.indexOf(key) === -1) {
	      globalState[key] = defaultGlobals[key];
	    }
	  }

	  globalState.allowStateChanges = !globalState.enforceActions;
	}

	function hasObservers(observable) {
	  return observable.observers_ && observable.observers_.size > 0;
	}
	function getObservers(observable) {
	  return observable.observers_;
	} // function invariantObservers(observable: IObservable) {
	//     const list = observable.observers
	//     const map = observable.observersIndexes
	//     const l = list.length
	//     for (let i = 0; i < l; i++) {
	//         const id = list[i].__mapid
	//         if (i) {
	//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
	//         } else {
	//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
	//         }
	//     }
	//     invariant(
	//         list.length === 0 || Object.keys(map).length === list.length - 1,
	//         "INTERNAL ERROR there is no junk in map"
	//     )
	// }

	function addObserver(observable, node) {
	  // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
	  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
	  // invariantObservers(observable);
	  observable.observers_.add(node);

	  if (observable.lowestObserverState_ > node.dependenciesState_) {
	    observable.lowestObserverState_ = node.dependenciesState_;
	  } // invariantObservers(observable);
	  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");

	}
	function removeObserver(observable, node) {
	  // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
	  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
	  // invariantObservers(observable);
	  observable.observers_["delete"](node);

	  if (observable.observers_.size === 0) {
	    // deleting last observer
	    queueForUnobservation(observable);
	  } // invariantObservers(observable);
	  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");

	}
	function queueForUnobservation(observable) {
	  if (observable.isPendingUnobservation_ === false) {
	    // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
	    observable.isPendingUnobservation_ = true;
	    globalState.pendingUnobservations.push(observable);
	  }
	}
	/**
	 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
	 * During a batch `onBecomeUnobserved` will be called at most once per observable.
	 * Avoids unnecessary recalculations.
	 */

	function startBatch() {
	  globalState.inBatch++;
	}
	function endBatch() {
	  if (--globalState.inBatch === 0) {
	    runReactions(); // the batch is actually about to finish, all unobserving should happen here.

	    var list = globalState.pendingUnobservations;

	    for (var i = 0; i < list.length; i++) {
	      var observable = list[i];
	      observable.isPendingUnobservation_ = false;

	      if (observable.observers_.size === 0) {
	        if (observable.isBeingObserved_) {
	          // if this observable had reactive observers, trigger the hooks
	          observable.isBeingObserved_ = false;
	          observable.onBUO();
	        }

	        if (observable instanceof ComputedValue) {
	          // computed values are automatically teared down when the last observer leaves
	          // this process happens recursively, this computed might be the last observabe of another, etc..
	          observable.suspend_();
	        }
	      }
	    }

	    globalState.pendingUnobservations = [];
	  }
	}
	function reportObserved(observable) {
	  checkIfStateReadsAreAllowed(observable);
	  var derivation = globalState.trackingDerivation;

	  if (derivation !== null) {
	    /**
	     * Simple optimization, give each derivation run an unique id (runId)
	     * Check if last time this observable was accessed the same runId is used
	     * if this is the case, the relation is already known
	     */
	    if (derivation.runId_ !== observable.lastAccessedBy_) {
	      observable.lastAccessedBy_ = derivation.runId_; // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...

	      derivation.newObserving_[derivation.unboundDepsCount_++] = observable;

	      if (!observable.isBeingObserved_ && globalState.trackingContext) {
	        observable.isBeingObserved_ = true;
	        observable.onBO();
	      }
	    }

	    return observable.isBeingObserved_;
	  } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {
	    queueForUnobservation(observable);
	  }

	  return false;
	} // function invariantLOS(observable: IObservable, msg: string) {
	//     // it's expensive so better not run it in produciton. but temporarily helpful for testing
	//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
	//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
	//     throw new Error(
	//         "lowestObserverState is wrong for " +
	//             msg +
	//             " because " +
	//             min +
	//             " < " +
	//             observable.lowestObserverState
	//     )
	// }

	/**
	 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
	 * It will propagate changes to observers from previous run
	 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
	 * Hopefully self reruning autoruns aren't a feature people should depend on
	 * Also most basic use cases should be ok
	 */
	// Called by Atom when its value changes

	function propagateChanged(observable) {
	  // invariantLOS(observable, "changed start");
	  if (observable.lowestObserverState_ === IDerivationState_.STALE_) {
	    return;
	  }

	  observable.lowestObserverState_ = IDerivationState_.STALE_; // Ideally we use for..of here, but the downcompiled version is really slow...

	  observable.observers_.forEach(function (d) {
	    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
	      if ( d.isTracing_ !== TraceMode.NONE) {
	        logTraceInfo(d, observable);
	      }

	      d.onBecomeStale_();
	    }

	    d.dependenciesState_ = IDerivationState_.STALE_;
	  }); // invariantLOS(observable, "changed end");
	} // Called by ComputedValue when it recalculate and its value changed

	function propagateChangeConfirmed(observable) {
	  // invariantLOS(observable, "confirmed start");
	  if (observable.lowestObserverState_ === IDerivationState_.STALE_) {
	    return;
	  }

	  observable.lowestObserverState_ = IDerivationState_.STALE_;
	  observable.observers_.forEach(function (d) {
	    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {
	      d.dependenciesState_ = IDerivationState_.STALE_;

	      if ( d.isTracing_ !== TraceMode.NONE) {
	        logTraceInfo(d, observable);
	      }
	    } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.
	    ) {
	      observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
	    }
	  }); // invariantLOS(observable, "confirmed end");
	} // Used by computed when its dependency changed, but we don't wan't to immediately recompute.

	function propagateMaybeChanged(observable) {
	  // invariantLOS(observable, "maybe start");
	  if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) {
	    return;
	  }

	  observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
	  observable.observers_.forEach(function (d) {
	    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
	      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;
	      d.onBecomeStale_();
	    }
	  }); // invariantLOS(observable, "maybe end");
	}

	function logTraceInfo(derivation, observable) {
	  console.log("[mobx.trace] '" + derivation.name_ + "' is invalidated due to a change in: '" + observable.name_ + "'");

	  if (derivation.isTracing_ === TraceMode.BREAK) {
	    var lines = [];
	    printDepTree(getDependencyTree(derivation), lines, 1); // prettier-ignore

	    new Function("debugger;\n/*\nTracing '" + derivation.name_ + "'\n\nYou are entering this break point because derivation '" + derivation.name_ + "' is being traced and '" + observable.name_ + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
	  }
	}

	function printDepTree(tree, lines, depth) {
	  if (lines.length >= 1000) {
	    lines.push("(and many more)");
	    return;
	  }

	  lines.push("" + "\t".repeat(depth - 1) + tree.name);

	  if (tree.dependencies) {
	    tree.dependencies.forEach(function (child) {
	      return printDepTree(child, lines, depth + 1);
	    });
	  }
	}

	var Reaction = /*#__PURE__*/function () {
	  // nodes we are looking at. Our value depends on these nodes
	  function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {
	    if (name_ === void 0) {
	      name_ =  "Reaction@" + getNextId() ;
	    }

	    this.name_ = void 0;
	    this.onInvalidate_ = void 0;
	    this.errorHandler_ = void 0;
	    this.requiresObservable_ = void 0;
	    this.observing_ = [];
	    this.newObserving_ = [];
	    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
	    this.diffValue_ = 0;
	    this.runId_ = 0;
	    this.unboundDepsCount_ = 0;
	    this.isDisposed_ = false;
	    this.isScheduled_ = false;
	    this.isTrackPending_ = false;
	    this.isRunning_ = false;
	    this.isTracing_ = TraceMode.NONE;
	    this.name_ = name_;
	    this.onInvalidate_ = onInvalidate_;
	    this.errorHandler_ = errorHandler_;
	    this.requiresObservable_ = requiresObservable_;
	  }

	  var _proto = Reaction.prototype;

	  _proto.onBecomeStale_ = function onBecomeStale_() {
	    this.schedule_();
	  };

	  _proto.schedule_ = function schedule_() {
	    if (!this.isScheduled_) {
	      this.isScheduled_ = true;
	      globalState.pendingReactions.push(this);
	      runReactions();
	    }
	  };

	  _proto.isScheduled = function isScheduled() {
	    return this.isScheduled_;
	  }
	  /**
	   * internal, use schedule() if you intend to kick off a reaction
	   */
	  ;

	  _proto.runReaction_ = function runReaction_() {
	    if (!this.isDisposed_) {
	      startBatch();
	      this.isScheduled_ = false;
	      var prev = globalState.trackingContext;
	      globalState.trackingContext = this;

	      if (shouldCompute(this)) {
	        this.isTrackPending_ = true;

	        try {
	          this.onInvalidate_();

	          if ("development" !== "production" && this.isTrackPending_ && isSpyEnabled()) {
	            // onInvalidate didn't trigger track right away..
	            spyReport({
	              name: this.name_,
	              type: "scheduled-reaction"
	            });
	          }
	        } catch (e) {
	          this.reportExceptionInDerivation_(e);
	        }
	      }

	      globalState.trackingContext = prev;
	      endBatch();
	    }
	  };

	  _proto.track = function track(fn) {
	    if (this.isDisposed_) {
	      return; // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
	    }

	    startBatch();
	    var notify = isSpyEnabled();
	    var startTime;

	    if ( notify) {
	      startTime = Date.now();
	      spyReportStart({
	        name: this.name_,
	        type: "reaction"
	      });
	    }

	    this.isRunning_ = true;
	    var prevReaction = globalState.trackingContext; // reactions could create reactions...

	    globalState.trackingContext = this;
	    var result = trackDerivedFunction(this, fn, undefined);
	    globalState.trackingContext = prevReaction;
	    this.isRunning_ = false;
	    this.isTrackPending_ = false;

	    if (this.isDisposed_) {
	      // disposed during last run. Clean up everything that was bound after the dispose call.
	      clearObserving(this);
	    }

	    if (isCaughtException(result)) {
	      this.reportExceptionInDerivation_(result.cause);
	    }

	    if ( notify) {
	      spyReportEnd({
	        time: Date.now() - startTime
	      });
	    }

	    endBatch();
	  };

	  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
	    var _this = this;

	    if (this.errorHandler_) {
	      this.errorHandler_(error, this);
	      return;
	    }

	    if (globalState.disableErrorBoundaries) {
	      throw error;
	    }

	    var message =  "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'" ;

	    if (!globalState.suppressReactionErrors) {
	      console.error(message, error);
	      /** If debugging brought you here, please, read the above message :-). Tnx! */
	    } else {
	      console.warn("[mobx] (error in reaction '" + this.name_ + "' suppressed, fix error of causing action below)");
	    } // prettier-ignore


	    if ( isSpyEnabled()) {
	      spyReport({
	        type: "error",
	        name: this.name_,
	        message: message,
	        error: "" + error
	      });
	    }

	    globalState.globalReactionErrorHandlers.forEach(function (f) {
	      return f(error, _this);
	    });
	  };

	  _proto.dispose = function dispose() {
	    if (!this.isDisposed_) {
	      this.isDisposed_ = true;

	      if (!this.isRunning_) {
	        // if disposed while running, clean up later. Maybe not optimal, but rare case
	        startBatch();
	        clearObserving(this);
	        endBatch();
	      }
	    }
	  };

	  _proto.getDisposer_ = function getDisposer_() {
	    var r = this.dispose.bind(this);
	    r[$mobx] = this;
	    return r;
	  };

	  _proto.toString = function toString() {
	    return "Reaction[" + this.name_ + "]";
	  };

	  _proto.trace = function trace$1(enterBreakPoint) {
	    if (enterBreakPoint === void 0) {
	      enterBreakPoint = false;
	    }

	    trace(this, enterBreakPoint);
	  };

	  return Reaction;
	}();
	function onReactionError(handler) {
	  globalState.globalReactionErrorHandlers.push(handler);
	  return function () {
	    var idx = globalState.globalReactionErrorHandlers.indexOf(handler);

	    if (idx >= 0) {
	      globalState.globalReactionErrorHandlers.splice(idx, 1);
	    }
	  };
	}
	/**
	 * Magic number alert!
	 * Defines within how many times a reaction is allowed to re-trigger itself
	 * until it is assumed that this is gonna be a never ending loop...
	 */

	var MAX_REACTION_ITERATIONS = 100;

	var reactionScheduler = function reactionScheduler(f) {
	  return f();
	};

	function runReactions() {
	  // Trampolining, if runReactions are already running, new reactions will be picked up
	  if (globalState.inBatch > 0 || globalState.isRunningReactions) {
	    return;
	  }

	  reactionScheduler(runReactionsHelper);
	}

	function runReactionsHelper() {
	  globalState.isRunningReactions = true;
	  var allReactions = globalState.pendingReactions;
	  var iterations = 0; // While running reactions, new reactions might be triggered.
	  // Hence we work with two variables and check whether
	  // we converge to no remaining reactions after a while.

	  while (allReactions.length > 0) {
	    if (++iterations === MAX_REACTION_ITERATIONS) {
	      console.error( "Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]) );
	      allReactions.splice(0); // clear reactions
	    }

	    var remainingReactions = allReactions.splice(0);

	    for (var i = 0, l = remainingReactions.length; i < l; i++) {
	      remainingReactions[i].runReaction_();
	    }
	  }

	  globalState.isRunningReactions = false;
	}

	var isReaction = /*#__PURE__*/createInstanceofPredicate("Reaction", Reaction);
	function setReactionScheduler(fn) {
	  var baseScheduler = reactionScheduler;

	  reactionScheduler = function reactionScheduler(f) {
	    return fn(function () {
	      return baseScheduler(f);
	    });
	  };
	}

	function isSpyEnabled() {
	  return  !!globalState.spyListeners.length;
	}
	function spyReport(event) {


	  if (!globalState.spyListeners.length) {
	    return;
	  }

	  var listeners = globalState.spyListeners;

	  for (var i = 0, l = listeners.length; i < l; i++) {
	    listeners[i](event);
	  }
	}
	function spyReportStart(event) {

	  var change = _extends({}, event, {
	    spyReportStart: true
	  });

	  spyReport(change);
	}
	var END_EVENT = {
	  type: "report-end",
	  spyReportEnd: true
	};
	function spyReportEnd(change) {

	  if (change) {
	    spyReport(_extends({}, change, {
	      type: "report-end",
	      spyReportEnd: true
	    }));
	  } else {
	    spyReport(END_EVENT);
	  }
	}
	function spy(listener) {
	  {
	    globalState.spyListeners.push(listener);
	    return once(function () {
	      globalState.spyListeners = globalState.spyListeners.filter(function (l) {
	        return l !== listener;
	      });
	    });
	  }
	}

	var ACTION = "action";
	var ACTION_BOUND = "action.bound";
	var AUTOACTION = "autoAction";
	var AUTOACTION_BOUND = "autoAction.bound";
	var DEFAULT_ACTION_NAME = "<unnamed action>";
	var actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);
	var actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {
	  bound: true
	});
	var autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {
	  autoAction: true
	});
	var autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {
	  autoAction: true,
	  bound: true
	});

	function createActionFactory(autoAction) {
	  var res = function action(arg1, arg2) {
	    // action(fn() {})
	    if (isFunction(arg1)) {
	      return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction);
	    } // action("name", fn() {})


	    if (isFunction(arg2)) {
	      return createAction(arg1, arg2, autoAction);
	    } // @action


	    if (isStringish(arg2)) {
	      return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);
	    } // action("name") & @action("name")


	    if (isStringish(arg1)) {
	      return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {
	        name: arg1,
	        autoAction: autoAction
	      }));
	    }

	    {
	      die("Invalid arguments for `action`");
	    }
	  };

	  return res;
	}

	var action = /*#__PURE__*/createActionFactory(false);
	Object.assign(action, actionAnnotation);
	var autoAction = /*#__PURE__*/createActionFactory(true);
	Object.assign(autoAction, autoActionAnnotation);
	action.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);
	autoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);
	function runInAction(fn) {
	  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);
	}
	function isAction(thing) {
	  return isFunction(thing) && thing.isMobxAction === true;
	}

	/**
	 * Creates a named reactive view and keeps it alive, so that the view is always
	 * updated if one of the dependencies changes, even when the view is not further used by something else.
	 * @param view The reactive view
	 * @returns disposer function, which can be used to stop the view from being updated in the future.
	 */

	function autorun(view, opts) {
	  var _opts$name, _opts;

	  if (opts === void 0) {
	    opts = EMPTY_OBJECT;
	  }

	  {
	    if (!isFunction(view)) {
	      die("Autorun expects a function as first argument");
	    }

	    if (isAction(view)) {
	      die("Autorun does not accept actions since actions are untrackable");
	    }
	  }

	  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name :  view.name || "Autorun@" + getNextId() ;
	  var runSync = !opts.scheduler && !opts.delay;
	  var reaction;

	  if (runSync) {
	    // normal autorun
	    reaction = new Reaction(name, function () {
	      this.track(reactionRunner);
	    }, opts.onError, opts.requiresObservable);
	  } else {
	    var scheduler = createSchedulerFromOptions(opts); // debounced autorun

	    var isScheduled = false;
	    reaction = new Reaction(name, function () {
	      if (!isScheduled) {
	        isScheduled = true;
	        scheduler(function () {
	          isScheduled = false;

	          if (!reaction.isDisposed_) {
	            reaction.track(reactionRunner);
	          }
	        });
	      }
	    }, opts.onError, opts.requiresObservable);
	  }

	  function reactionRunner() {
	    view(reaction);
	  }

	  reaction.schedule_();
	  return reaction.getDisposer_();
	}

	var run = function run(f) {
	  return f();
	};

	function createSchedulerFromOptions(opts) {
	  return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {
	    return setTimeout(f, opts.delay);
	  } : run;
	}

	function reaction(expression, effect, opts) {
	  var _opts$name2;

	  if (opts === void 0) {
	    opts = EMPTY_OBJECT;
	  }

	  {
	    if (!isFunction(expression) || !isFunction(effect)) {
	      die("First and second argument to reaction should be functions");
	    }

	    if (!isPlainObject(opts)) {
	      die("Third argument of reactions should be an object");
	    }
	  }

	  var name = (_opts$name2 = opts.name) != null ? _opts$name2 :  "Reaction@" + getNextId() ;
	  var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);
	  var runSync = !opts.scheduler && !opts.delay;
	  var scheduler = createSchedulerFromOptions(opts);
	  var firstTime = true;
	  var isScheduled = false;
	  var value;
	  var oldValue;
	  var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer["default"];
	  var r = new Reaction(name, function () {
	    if (firstTime || runSync) {
	      reactionRunner();
	    } else if (!isScheduled) {
	      isScheduled = true;
	      scheduler(reactionRunner);
	    }
	  }, opts.onError, opts.requiresObservable);

	  function reactionRunner() {
	    isScheduled = false;

	    if (r.isDisposed_) {
	      return;
	    }

	    var changed = false;
	    r.track(function () {
	      var nextValue = allowStateChanges(false, function () {
	        return expression(r);
	      });
	      changed = firstTime || !equals(value, nextValue);
	      oldValue = value;
	      value = nextValue;
	    });

	    if (firstTime && opts.fireImmediately) {
	      effectAction(value, oldValue, r);
	    } else if (!firstTime && changed) {
	      effectAction(value, oldValue, r);
	    }

	    firstTime = false;
	  }

	  r.schedule_();
	  return r.getDisposer_();
	}

	function wrapErrorHandler(errorHandler, baseFn) {
	  return function () {
	    try {
	      return baseFn.apply(this, arguments);
	    } catch (e) {
	      errorHandler.call(this, e);
	    }
	  };
	}

	var ON_BECOME_OBSERVED = "onBO";
	var ON_BECOME_UNOBSERVED = "onBUO";
	function onBecomeObserved(thing, arg2, arg3) {
	  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
	}
	function onBecomeUnobserved(thing, arg2, arg3) {
	  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
	}

	function interceptHook(hook, thing, arg2, arg3) {
	  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
	  var cb = isFunction(arg3) ? arg3 : arg2;
	  var listenersKey = hook + "L";

	  if (atom[listenersKey]) {
	    atom[listenersKey].add(cb);
	  } else {
	    atom[listenersKey] = new Set([cb]);
	  }

	  return function () {
	    var hookListeners = atom[listenersKey];

	    if (hookListeners) {
	      hookListeners["delete"](cb);

	      if (hookListeners.size === 0) {
	        delete atom[listenersKey];
	      }
	    }
	  };
	}

	var NEVER = "never";
	var ALWAYS = "always";
	var OBSERVED = "observed"; // const IF_AVAILABLE = "ifavailable"

	function configure(options) {
	  if (options.isolateGlobalState === true) {
	    isolateGlobalState();
	  }

	  var useProxies = options.useProxies,
	      enforceActions = options.enforceActions;

	  if (useProxies !== undefined) {
	    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";
	  }

	  if (useProxies === "ifavailable") {
	    globalState.verifyProxies = true;
	  }

	  if (enforceActions !== undefined) {
	    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
	    globalState.enforceActions = ea;
	    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;
	  }
	  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function (key) {
	    if (key in options) {
	      globalState[key] = !!options[key];
	    }
	  });
	  globalState.allowStateReads = !globalState.observableRequiresReaction;

	  if ( globalState.disableErrorBoundaries === true) {
	    console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
	  }

	  if (options.reactionScheduler) {
	    setReactionScheduler(options.reactionScheduler);
	  }
	}

	function extendObservable(target, properties, annotations, options) {
	  {
	    if (arguments.length > 4) {
	      die("'extendObservable' expected 2-4 arguments");
	    }

	    if (typeof target !== "object") {
	      die("'extendObservable' expects an object as first argument");
	    }

	    if (isObservableMap(target)) {
	      die("'extendObservable' should not be used on maps, use map.merge instead");
	    }

	    if (!isPlainObject(properties)) {
	      die("'extendObservable' only accepts plain objects as second argument");
	    }

	    if (isObservable(properties) || isObservable(annotations)) {
	      die("Extending an object with another observable (object) is not supported");
	    }
	  } // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)


	  var descriptors = getOwnPropertyDescriptors(properties);
	  var adm = asObservableObject(target, options)[$mobx];
	  startBatch();

	  try {
	    ownKeys(descriptors).forEach(function (key) {
	      adm.extend_(key, descriptors[key], // must pass "undefined" for { key: undefined }
	      !annotations ? true : key in annotations ? annotations[key] : true);
	    });
	  } finally {
	    endBatch();
	  }

	  return target;
	}

	function getDependencyTree(thing, property) {
	  return nodeToDependencyTree(getAtom(thing, property));
	}

	function nodeToDependencyTree(node) {
	  var result = {
	    name: node.name_
	  };

	  if (node.observing_ && node.observing_.length > 0) {
	    result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
	  }

	  return result;
	}

	function getObserverTree(thing, property) {
	  return nodeToObserverTree(getAtom(thing, property));
	}

	function nodeToObserverTree(node) {
	  var result = {
	    name: node.name_
	  };

	  if (hasObservers(node)) {
	    result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);
	  }

	  return result;
	}

	function unique(list) {
	  return Array.from(new Set(list));
	}

	var generatorId = 0;
	function FlowCancellationError() {
	  this.message = "FLOW_CANCELLED";
	}
	FlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);
	function isFlowCancellationError(error) {
	  return error instanceof FlowCancellationError;
	}
	var flowAnnotation = /*#__PURE__*/createFlowAnnotation("flow");
	var flowBoundAnnotation = /*#__PURE__*/createFlowAnnotation("flow.bound", {
	  bound: true
	});
	var flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {
	  // @flow
	  if (isStringish(arg2)) {
	    return storeAnnotation(arg1, arg2, flowAnnotation);
	  } // flow(fn)


	  if ( arguments.length !== 1) {
	    die("Flow expects single argument with generator function");
	  }

	  var generator = arg1;
	  var name = generator.name || "<unnamed flow>"; // Implementation based on https://github.com/tj/co/blob/master/index.js

	  var res = function res() {
	    var ctx = this;
	    var args = arguments;
	    var runId = ++generatorId;
	    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
	    var rejector;
	    var pendingPromise = undefined;
	    var promise = new Promise(function (resolve, reject) {
	      var stepId = 0;
	      rejector = reject;

	      function onFulfilled(res) {
	        pendingPromise = undefined;
	        var ret;

	        try {
	          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);
	        } catch (e) {
	          return reject(e);
	        }

	        next(ret);
	      }

	      function onRejected(err) {
	        pendingPromise = undefined;
	        var ret;

	        try {
	          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);
	        } catch (e) {
	          return reject(e);
	        }

	        next(ret);
	      }

	      function next(ret) {
	        if (isFunction(ret == null ? void 0 : ret.then)) {
	          // an async iterator
	          ret.then(next, reject);
	          return;
	        }

	        if (ret.done) {
	          return resolve(ret.value);
	        }

	        pendingPromise = Promise.resolve(ret.value);
	        return pendingPromise.then(onFulfilled, onRejected);
	      }

	      onFulfilled(undefined); // kick off the process
	    });
	    promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {
	      try {
	        if (pendingPromise) {
	          cancelPromise(pendingPromise);
	        } // Finally block can return (or yield) stuff..


	        var _res = gen["return"](undefined); // eat anything that promise would do, it's cancelled!


	        var yieldedPromise = Promise.resolve(_res.value);
	        yieldedPromise.then(noop, noop);
	        cancelPromise(yieldedPromise); // maybe it can be cancelled :)
	        // reject our original promise

	        rejector(new FlowCancellationError());
	      } catch (e) {
	        rejector(e); // there could be a throwing finally block
	      }
	    });
	    return promise;
	  };

	  res.isMobXFlow = true;
	  return res;
	}, flowAnnotation);
	flow.bound = /*#__PURE__*/createDecoratorAnnotation(flowBoundAnnotation);

	function cancelPromise(promise) {
	  if (isFunction(promise.cancel)) {
	    promise.cancel();
	  }
	}

	function flowResult(result) {
	  return result; // just tricking TypeScript :)
	}
	function isFlow(fn) {
	  return (fn == null ? void 0 : fn.isMobXFlow) === true;
	}

	function interceptReads(thing, propOrHandler, handler) {
	  var target;

	  if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
	    target = getAdministration(thing);
	  } else if (isObservableObject(thing)) {
	    if ( !isStringish(propOrHandler)) {
	      return die("InterceptReads can only be used with a specific property, not with an object in general");
	    }

	    target = getAdministration(thing, propOrHandler);
	  } else {
	    return die("Expected observable map, object or array as first array");
	  }

	  if ( target.dehancer !== undefined) {
	    return die("An intercept reader was already established");
	  }

	  target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
	  return function () {
	    target.dehancer = undefined;
	  };
	}

	function intercept(thing, propOrHandler, handler) {
	  if (isFunction(handler)) {
	    return interceptProperty(thing, propOrHandler, handler);
	  } else {
	    return interceptInterceptable(thing, propOrHandler);
	  }
	}

	function interceptInterceptable(thing, handler) {
	  return getAdministration(thing).intercept_(handler);
	}

	function interceptProperty(thing, property, handler) {
	  return getAdministration(thing, property).intercept_(handler);
	}

	function _isComputed(value, property) {
	  if (property === undefined) {
	    return isComputedValue(value);
	  }

	  if (isObservableObject(value) === false) {
	    return false;
	  }

	  if (!value[$mobx].values_.has(property)) {
	    return false;
	  }

	  var atom = getAtom(value, property);
	  return isComputedValue(atom);
	}
	function isComputed(value) {
	  if ( arguments.length > 1) {
	    return die("isComputed expects only 1 argument. Use isComputedProp to inspect the observability of a property");
	  }

	  return _isComputed(value);
	}
	function isComputedProp(value, propName) {
	  if ( !isStringish(propName)) {
	    return die("isComputed expected a property name as second argument");
	  }

	  return _isComputed(value, propName);
	}

	function _isObservable(value, property) {
	  if (!value) {
	    return false;
	  }

	  if (property !== undefined) {
	    if ( (isObservableMap(value) || isObservableArray(value))) {
	      return die("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
	    }

	    if (isObservableObject(value)) {
	      return value[$mobx].values_.has(property);
	    }

	    return false;
	  } // For first check, see #701


	  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
	}

	function isObservable(value) {
	  if ( arguments.length !== 1) {
	    die("isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
	  }

	  return _isObservable(value);
	}
	function isObservableProp(value, propName) {
	  if ( !isStringish(propName)) {
	    return die("expected a property name as second argument");
	  }

	  return _isObservable(value, propName);
	}

	function keys(obj) {
	  if (isObservableObject(obj)) {
	    return obj[$mobx].keys_();
	  }

	  if (isObservableMap(obj) || isObservableSet(obj)) {
	    return Array.from(obj.keys());
	  }

	  if (isObservableArray(obj)) {
	    return obj.map(function (_, index) {
	      return index;
	    });
	  }

	  die(5);
	}
	function values(obj) {
	  if (isObservableObject(obj)) {
	    return keys(obj).map(function (key) {
	      return obj[key];
	    });
	  }

	  if (isObservableMap(obj)) {
	    return keys(obj).map(function (key) {
	      return obj.get(key);
	    });
	  }

	  if (isObservableSet(obj)) {
	    return Array.from(obj.values());
	  }

	  if (isObservableArray(obj)) {
	    return obj.slice();
	  }

	  die(6);
	}
	function entries(obj) {
	  if (isObservableObject(obj)) {
	    return keys(obj).map(function (key) {
	      return [key, obj[key]];
	    });
	  }

	  if (isObservableMap(obj)) {
	    return keys(obj).map(function (key) {
	      return [key, obj.get(key)];
	    });
	  }

	  if (isObservableSet(obj)) {
	    return Array.from(obj.entries());
	  }

	  if (isObservableArray(obj)) {
	    return obj.map(function (key, index) {
	      return [index, key];
	    });
	  }

	  die(7);
	}
	function set(obj, key, value) {
	  if (arguments.length === 2 && !isObservableSet(obj)) {
	    startBatch();
	    var _values = key;

	    try {
	      for (var _key in _values) {
	        set(obj, _key, _values[_key]);
	      }
	    } finally {
	      endBatch();
	    }

	    return;
	  }

	  if (isObservableObject(obj)) {
	    obj[$mobx].set_(key, value);
	  } else if (isObservableMap(obj)) {
	    obj.set(key, value);
	  } else if (isObservableSet(obj)) {
	    obj.add(key);
	  } else if (isObservableArray(obj)) {
	    if (typeof key !== "number") {
	      key = parseInt(key, 10);
	    }

	    if (key < 0) {
	      die("Invalid index: '" + key + "'");
	    }

	    startBatch();

	    if (key >= obj.length) {
	      obj.length = key + 1;
	    }

	    obj[key] = value;
	    endBatch();
	  } else {
	    die(8);
	  }
	}
	function remove(obj, key) {
	  if (isObservableObject(obj)) {
	    obj[$mobx].delete_(key);
	  } else if (isObservableMap(obj)) {
	    obj["delete"](key);
	  } else if (isObservableSet(obj)) {
	    obj["delete"](key);
	  } else if (isObservableArray(obj)) {
	    if (typeof key !== "number") {
	      key = parseInt(key, 10);
	    }

	    obj.splice(key, 1);
	  } else {
	    die(9);
	  }
	}
	function has(obj, key) {
	  if (isObservableObject(obj)) {
	    return obj[$mobx].has_(key);
	  } else if (isObservableMap(obj)) {
	    return obj.has(key);
	  } else if (isObservableSet(obj)) {
	    return obj.has(key);
	  } else if (isObservableArray(obj)) {
	    return key >= 0 && key < obj.length;
	  }

	  die(10);
	}
	function get(obj, key) {
	  if (!has(obj, key)) {
	    return undefined;
	  }

	  if (isObservableObject(obj)) {
	    return obj[$mobx].get_(key);
	  } else if (isObservableMap(obj)) {
	    return obj.get(key);
	  } else if (isObservableArray(obj)) {
	    return obj[key];
	  }

	  die(11);
	}
	function apiDefineProperty(obj, key, descriptor) {
	  if (isObservableObject(obj)) {
	    return obj[$mobx].defineProperty_(key, descriptor);
	  }

	  die(39);
	}
	function apiOwnKeys(obj) {
	  if (isObservableObject(obj)) {
	    return obj[$mobx].ownKeys_();
	  }

	  die(38);
	}

	function observe(thing, propOrCb, cbOrFire, fireImmediately) {
	  if (isFunction(cbOrFire)) {
	    return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);
	  } else {
	    return observeObservable(thing, propOrCb, cbOrFire);
	  }
	}

	function observeObservable(thing, listener, fireImmediately) {
	  return getAdministration(thing).observe_(listener, fireImmediately);
	}

	function observeObservableProperty(thing, property, listener, fireImmediately) {
	  return getAdministration(thing, property).observe_(listener, fireImmediately);
	}

	function cache(map, key, value) {
	  map.set(key, value);
	  return value;
	}

	function toJSHelper(source, __alreadySeen) {
	  if (source == null || typeof source !== "object" || source instanceof Date || !isObservable(source)) {
	    return source;
	  }

	  if (isObservableValue(source) || isComputedValue(source)) {
	    return toJSHelper(source.get(), __alreadySeen);
	  }

	  if (__alreadySeen.has(source)) {
	    return __alreadySeen.get(source);
	  }

	  if (isObservableArray(source)) {
	    var res = cache(__alreadySeen, source, new Array(source.length));
	    source.forEach(function (value, idx) {
	      res[idx] = toJSHelper(value, __alreadySeen);
	    });
	    return res;
	  }

	  if (isObservableSet(source)) {
	    var _res = cache(__alreadySeen, source, new Set());

	    source.forEach(function (value) {
	      _res.add(toJSHelper(value, __alreadySeen));
	    });
	    return _res;
	  }

	  if (isObservableMap(source)) {
	    var _res2 = cache(__alreadySeen, source, new Map());

	    source.forEach(function (value, key) {
	      _res2.set(key, toJSHelper(value, __alreadySeen));
	    });
	    return _res2;
	  } else {
	    // must be observable object
	    var _res3 = cache(__alreadySeen, source, {});

	    apiOwnKeys(source).forEach(function (key) {
	      if (objectPrototype.propertyIsEnumerable.call(source, key)) {
	        _res3[key] = toJSHelper(source[key], __alreadySeen);
	      }
	    });
	    return _res3;
	  }
	}
	/**
	 * Recursively converts an observable to it's non-observable native counterpart.
	 * It does NOT recurse into non-observables, these are left as they are, even if they contain observables.
	 * Computed and other non-enumerable properties are completely ignored.
	 * Complex scenarios require custom solution, eg implementing `toJSON` or using `serializr` lib.
	 */


	function toJS(source, options) {
	  if ( options) {
	    die("toJS no longer supports options");
	  }

	  return toJSHelper(source, new Map());
	}

	function trace() {

	  var enterBreakPoint = false;

	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  if (typeof args[args.length - 1] === "boolean") {
	    enterBreakPoint = args.pop();
	  }

	  var derivation = getAtomFromArgs(args);

	  if (!derivation) {
	    return die("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
	  }

	  if (derivation.isTracing_ === TraceMode.NONE) {
	    console.log("[mobx.trace] '" + derivation.name_ + "' tracing enabled");
	  }

	  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
	}

	function getAtomFromArgs(args) {
	  switch (args.length) {
	    case 0:
	      return globalState.trackingDerivation;

	    case 1:
	      return getAtom(args[0]);

	    case 2:
	      return getAtom(args[0], args[1]);
	  }
	}

	/**
	 * During a transaction no views are updated until the end of the transaction.
	 * The transaction will be run synchronously nonetheless.
	 *
	 * @param action a function that updates some reactive state
	 * @returns any value that was returned by the 'action' parameter.
	 */

	function transaction(action, thisArg) {
	  if (thisArg === void 0) {
	    thisArg = undefined;
	  }

	  startBatch();

	  try {
	    return action.apply(thisArg);
	  } finally {
	    endBatch();
	  }
	}

	function when(predicate, arg1, arg2) {
	  if (arguments.length === 1 || arg1 && typeof arg1 === "object") {
	    return whenPromise(predicate, arg1);
	  }

	  return _when(predicate, arg1, arg2 || {});
	}

	function _when(predicate, effect, opts) {
	  var timeoutHandle;

	  if (typeof opts.timeout === "number") {
	    var error = new Error("WHEN_TIMEOUT");
	    timeoutHandle = setTimeout(function () {
	      if (!disposer[$mobx].isDisposed_) {
	        disposer();

	        if (opts.onError) {
	          opts.onError(error);
	        } else {
	          throw error;
	        }
	      }
	    }, opts.timeout);
	  }

	  opts.name =  opts.name || "When@" + getNextId() ;
	  var effectAction = createAction( opts.name + "-effect" , effect); // eslint-disable-next-line

	  var disposer = autorun(function (r) {
	    // predicate should not change state
	    var cond = allowStateChanges(false, predicate);

	    if (cond) {
	      r.dispose();

	      if (timeoutHandle) {
	        clearTimeout(timeoutHandle);
	      }

	      effectAction();
	    }
	  }, opts);
	  return disposer;
	}

	function whenPromise(predicate, opts) {
	  var _opts$signal;

	  if ( opts && opts.onError) {
	    return die("the options 'onError' and 'promise' cannot be combined");
	  }

	  if (opts != null && (_opts$signal = opts.signal) != null && _opts$signal.aborted) {
	    return Object.assign(Promise.reject(new Error("WHEN_ABORTED")), {
	      cancel: function cancel() {
	        return null;
	      }
	    });
	  }

	  var cancel;
	  var abort;
	  var res = new Promise(function (resolve, reject) {
	    var _opts$signal2;

	    var disposer = _when(predicate, resolve, _extends({}, opts, {
	      onError: reject
	    }));

	    cancel = function cancel() {
	      disposer();
	      reject(new Error("WHEN_CANCELLED"));
	    };

	    abort = function abort() {
	      disposer();
	      reject(new Error("WHEN_ABORTED"));
	    };

	    opts == null ? void 0 : (_opts$signal2 = opts.signal) == null ? void 0 : _opts$signal2.addEventListener("abort", abort);
	  })["finally"](function () {
	    var _opts$signal3;

	    return opts == null ? void 0 : (_opts$signal3 = opts.signal) == null ? void 0 : _opts$signal3.removeEventListener("abort", abort);
	  });
	  res.cancel = cancel;
	  return res;
	}

	function getAdm(target) {
	  return target[$mobx];
	} // Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
	// and skip either the internal values map, or the base object with its property descriptors!


	var objectProxyTraps = {
	  has: function has(target, name) {
	    if ( globalState.trackingDerivation) {
	      warnAboutProxyRequirement("detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.");
	    }

	    return getAdm(target).has_(name);
	  },
	  get: function get(target, name) {
	    return getAdm(target).get_(name);
	  },
	  set: function set(target, name, value) {
	    var _getAdm$set_;

	    if (!isStringish(name)) {
	      return false;
	    }

	    if ( !getAdm(target).values_.has(name)) {
	      warnAboutProxyRequirement("add a new observable property through direct assignment. Use 'set' from 'mobx' instead.");
	    } // null (intercepted) -> true (success)


	    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;
	  },
	  deleteProperty: function deleteProperty(target, name) {
	    var _getAdm$delete_;

	    {
	      warnAboutProxyRequirement("delete properties from an observable object. Use 'remove' from 'mobx' instead.");
	    }

	    if (!isStringish(name)) {
	      return false;
	    } // null (intercepted) -> true (success)


	    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;
	  },
	  defineProperty: function defineProperty(target, name, descriptor) {
	    var _getAdm$definePropert;

	    {
	      warnAboutProxyRequirement("define property on an observable object. Use 'defineProperty' from 'mobx' instead.");
	    } // null (intercepted) -> true (success)


	    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;
	  },
	  ownKeys: function ownKeys(target) {
	    if ( globalState.trackingDerivation) {
	      warnAboutProxyRequirement("iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.");
	    }

	    return getAdm(target).ownKeys_();
	  },
	  preventExtensions: function preventExtensions(target) {
	    die(13);
	  }
	};
	function asDynamicObservableObject(target, options) {
	  var _target$$mobx, _target$$mobx$proxy_;

	  assertProxies();
	  target = asObservableObject(target, options);
	  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
	}

	function hasInterceptors(interceptable) {
	  return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;
	}
	function registerInterceptor(interceptable, handler) {
	  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
	  interceptors.push(handler);
	  return once(function () {
	    var idx = interceptors.indexOf(handler);

	    if (idx !== -1) {
	      interceptors.splice(idx, 1);
	    }
	  });
	}
	function interceptChange(interceptable, change) {
	  var prevU = untrackedStart();

	  try {
	    // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
	    var interceptors = [].concat(interceptable.interceptors_ || []);

	    for (var i = 0, l = interceptors.length; i < l; i++) {
	      change = interceptors[i](change);

	      if (change && !change.type) {
	        die(14);
	      }

	      if (!change) {
	        break;
	      }
	    }

	    return change;
	  } finally {
	    untrackedEnd(prevU);
	  }
	}

	function hasListeners(listenable) {
	  return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;
	}
	function registerListener(listenable, handler) {
	  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
	  listeners.push(handler);
	  return once(function () {
	    var idx = listeners.indexOf(handler);

	    if (idx !== -1) {
	      listeners.splice(idx, 1);
	    }
	  });
	}
	function notifyListeners(listenable, change) {
	  var prevU = untrackedStart();
	  var listeners = listenable.changeListeners_;

	  if (!listeners) {
	    return;
	  }

	  listeners = listeners.slice();

	  for (var i = 0, l = listeners.length; i < l; i++) {
	    listeners[i](change);
	  }

	  untrackedEnd(prevU);
	}

	function makeObservable(target, annotations, options) {
	  var adm = asObservableObject(target, options)[$mobx];
	  startBatch();

	  try {
	    var _annotations;

	    if ("development" !== "production" && annotations && target[storedAnnotationsSymbol]) {
	      die("makeObservable second arg must be nullish when using decorators. Mixing @decorator syntax with annotations is not supported.");
	    } // Default to decorators


	    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target); // Annotate

	    ownKeys(annotations).forEach(function (key) {
	      return adm.make_(key, annotations[key]);
	    });
	  } finally {
	    endBatch();
	  }

	  return target;
	} // proto[keysSymbol] = new Set<PropertyKey>()

	var keysSymbol = /*#__PURE__*/Symbol("mobx-keys");
	function makeAutoObservable(target, overrides, options) {
	  {
	    if (!isPlainObject(target) && !isPlainObject(Object.getPrototypeOf(target))) {
	      die("'makeAutoObservable' can only be used for classes that don't have a superclass");
	    }

	    if (isObservableObject(target)) {
	      die("makeAutoObservable can only be used on objects not already made observable");
	    }
	  } // Optimization: avoid visiting protos
	  // Assumes that annotation.make_/.extend_ works the same for plain objects


	  if (isPlainObject(target)) {
	    return extendObservable(target, target, overrides, options);
	  }

	  var adm = asObservableObject(target, options)[$mobx]; // Optimization: cache keys on proto
	  // Assumes makeAutoObservable can be called only once per object and can't be used in subclass

	  if (!target[keysSymbol]) {
	    var proto = Object.getPrototypeOf(target);
	    var keys = new Set([].concat(ownKeys(target), ownKeys(proto)));
	    keys["delete"]("constructor");
	    keys["delete"]($mobx);
	    addHiddenProp(proto, keysSymbol, keys);
	  }

	  startBatch();

	  try {
	    target[keysSymbol].forEach(function (key) {
	      return adm.make_(key, // must pass "undefined" for { key: undefined }
	      !overrides ? true : key in overrides ? overrides[key] : true);
	    });
	  } finally {
	    endBatch();
	  }

	  return target;
	}

	var SPLICE = "splice";
	var UPDATE = "update";
	var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859

	var arrayTraps = {
	  get: function get(target, name) {
	    var adm = target[$mobx];

	    if (name === $mobx) {
	      return adm;
	    }

	    if (name === "length") {
	      return adm.getArrayLength_();
	    }

	    if (typeof name === "string" && !isNaN(name)) {
	      return adm.get_(parseInt(name));
	    }

	    if (hasProp(arrayExtensions, name)) {
	      return arrayExtensions[name];
	    }

	    return target[name];
	  },
	  set: function set(target, name, value) {
	    var adm = target[$mobx];

	    if (name === "length") {
	      adm.setArrayLength_(value);
	    }

	    if (typeof name === "symbol" || isNaN(name)) {
	      target[name] = value;
	    } else {
	      // numeric string
	      adm.set_(parseInt(name), value);
	    }

	    return true;
	  },
	  preventExtensions: function preventExtensions() {
	    die(15);
	  }
	};
	var ObservableArrayAdministration = /*#__PURE__*/function () {
	  // this is the prop that gets proxied, so can't replace it!
	  function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {
	    if (name === void 0) {
	      name =  "ObservableArray@" + getNextId() ;
	    }

	    this.owned_ = void 0;
	    this.legacyMode_ = void 0;
	    this.atom_ = void 0;
	    this.values_ = [];
	    this.interceptors_ = void 0;
	    this.changeListeners_ = void 0;
	    this.enhancer_ = void 0;
	    this.dehancer = void 0;
	    this.proxy_ = void 0;
	    this.lastKnownLength_ = 0;
	    this.owned_ = owned_;
	    this.legacyMode_ = legacyMode_;
	    this.atom_ = new Atom(name);

	    this.enhancer_ = function (newV, oldV) {
	      return enhancer(newV, oldV,  name + "[..]" );
	    };
	  }

	  var _proto = ObservableArrayAdministration.prototype;

	  _proto.dehanceValue_ = function dehanceValue_(value) {
	    if (this.dehancer !== undefined) {
	      return this.dehancer(value);
	    }

	    return value;
	  };

	  _proto.dehanceValues_ = function dehanceValues_(values) {
	    if (this.dehancer !== undefined && values.length > 0) {
	      return values.map(this.dehancer);
	    }

	    return values;
	  };

	  _proto.intercept_ = function intercept_(handler) {
	    return registerInterceptor(this, handler);
	  };

	  _proto.observe_ = function observe_(listener, fireImmediately) {
	    if (fireImmediately === void 0) {
	      fireImmediately = false;
	    }

	    if (fireImmediately) {
	      listener({
	        observableKind: "array",
	        object: this.proxy_,
	        debugObjectName: this.atom_.name_,
	        type: "splice",
	        index: 0,
	        added: this.values_.slice(),
	        addedCount: this.values_.length,
	        removed: [],
	        removedCount: 0
	      });
	    }

	    return registerListener(this, listener);
	  };

	  _proto.getArrayLength_ = function getArrayLength_() {
	    this.atom_.reportObserved();
	    return this.values_.length;
	  };

	  _proto.setArrayLength_ = function setArrayLength_(newLength) {
	    if (typeof newLength !== "number" || isNaN(newLength) || newLength < 0) {
	      die("Out of range: " + newLength);
	    }

	    var currentLength = this.values_.length;

	    if (newLength === currentLength) {
	      return;
	    } else if (newLength > currentLength) {
	      var newItems = new Array(newLength - currentLength);

	      for (var i = 0; i < newLength - currentLength; i++) {
	        newItems[i] = undefined;
	      } // No Array.fill everywhere...


	      this.spliceWithArray_(currentLength, 0, newItems);
	    } else {
	      this.spliceWithArray_(newLength, currentLength - newLength);
	    }
	  };

	  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
	    if (oldLength !== this.lastKnownLength_) {
	      die(16);
	    }

	    this.lastKnownLength_ += delta;

	    if (this.legacyMode_ && delta > 0) {
	      reserveArrayBuffer(oldLength + delta + 1);
	    }
	  };

	  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {
	    var _this = this;

	    checkIfStateModificationsAreAllowed(this.atom_);
	    var length = this.values_.length;

	    if (index === undefined) {
	      index = 0;
	    } else if (index > length) {
	      index = length;
	    } else if (index < 0) {
	      index = Math.max(0, length + index);
	    }

	    if (arguments.length === 1) {
	      deleteCount = length - index;
	    } else if (deleteCount === undefined || deleteCount === null) {
	      deleteCount = 0;
	    } else {
	      deleteCount = Math.max(0, Math.min(deleteCount, length - index));
	    }

	    if (newItems === undefined) {
	      newItems = EMPTY_ARRAY;
	    }

	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        object: this.proxy_,
	        type: SPLICE,
	        index: index,
	        removedCount: deleteCount,
	        added: newItems
	      });

	      if (!change) {
	        return EMPTY_ARRAY;
	      }

	      deleteCount = change.removedCount;
	      newItems = change.added;
	    }

	    newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {
	      return _this.enhancer_(v, undefined);
	    });

	    if (this.legacyMode_ || "development" !== "production") {
	      var lengthDelta = newItems.length - deleteCount;
	      this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn't modified
	    }

	    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);

	    if (deleteCount !== 0 || newItems.length !== 0) {
	      this.notifyArraySplice_(index, newItems, res);
	    }

	    return this.dehanceValues_(res);
	  };

	  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {
	    if (newItems.length < MAX_SPLICE_SIZE) {
	      var _this$values_;

	      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));
	    } else {
	      // The items removed by the splice
	      var res = this.values_.slice(index, index + deleteCount); // The items that that should remain at the end of the array

	      var oldItems = this.values_.slice(index + deleteCount); // New length is the previous length + addition count - deletion count

	      this.values_.length += newItems.length - deleteCount;

	      for (var i = 0; i < newItems.length; i++) {
	        this.values_[index + i] = newItems[i];
	      }

	      for (var _i = 0; _i < oldItems.length; _i++) {
	        this.values_[index + newItems.length + _i] = oldItems[_i];
	      }

	      return res;
	    }
	  };

	  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {
	    var notifySpy = !this.owned_ && isSpyEnabled();
	    var notify = hasListeners(this);
	    var change = notify || notifySpy ? {
	      observableKind: "array",
	      object: this.proxy_,
	      type: UPDATE,
	      debugObjectName: this.atom_.name_,
	      index: index,
	      newValue: newValue,
	      oldValue: oldValue
	    } : null; // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't
	    // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled

	    if ( notifySpy) {
	      spyReportStart(change);
	    }

	    this.atom_.reportChanged();

	    if (notify) {
	      notifyListeners(this, change);
	    }

	    if ( notifySpy) {
	      spyReportEnd();
	    }
	  };

	  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {
	    var notifySpy = !this.owned_ && isSpyEnabled();
	    var notify = hasListeners(this);
	    var change = notify || notifySpy ? {
	      observableKind: "array",
	      object: this.proxy_,
	      debugObjectName: this.atom_.name_,
	      type: SPLICE,
	      index: index,
	      removed: removed,
	      added: added,
	      removedCount: removed.length,
	      addedCount: added.length
	    } : null;

	    if ( notifySpy) {
	      spyReportStart(change);
	    }

	    this.atom_.reportChanged(); // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe

	    if (notify) {
	      notifyListeners(this, change);
	    }

	    if ( notifySpy) {
	      spyReportEnd();
	    }
	  };

	  _proto.get_ = function get_(index) {
	    if (this.legacyMode_ && index >= this.values_.length) {
	      console.warn( "[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + this.values_.length + "). Please check length first. Out of bound indices will not be tracked by MobX" );
	      return undefined;
	    }

	    this.atom_.reportObserved();
	    return this.dehanceValue_(this.values_[index]);
	  };

	  _proto.set_ = function set_(index, newValue) {
	    var values = this.values_;

	    if (this.legacyMode_ && index > values.length) {
	      // out of bounds
	      die(17, index, values.length);
	    }

	    if (index < values.length) {
	      // update at index in range
	      checkIfStateModificationsAreAllowed(this.atom_);
	      var oldValue = values[index];

	      if (hasInterceptors(this)) {
	        var change = interceptChange(this, {
	          type: UPDATE,
	          object: this.proxy_,
	          index: index,
	          newValue: newValue
	        });

	        if (!change) {
	          return;
	        }

	        newValue = change.newValue;
	      }

	      newValue = this.enhancer_(newValue, oldValue);
	      var changed = newValue !== oldValue;

	      if (changed) {
	        values[index] = newValue;
	        this.notifyArrayChildUpdate_(index, newValue, oldValue);
	      }
	    } else {
	      // For out of bound index, we don't create an actual sparse array,
	      // but rather fill the holes with undefined (same as setArrayLength_).
	      // This could be considered a bug.
	      var newItems = new Array(index + 1 - values.length);

	      for (var i = 0; i < newItems.length - 1; i++) {
	        newItems[i] = undefined;
	      } // No Array.fill everywhere...


	      newItems[newItems.length - 1] = newValue;
	      this.spliceWithArray_(values.length, 0, newItems);
	    }
	  };

	  return ObservableArrayAdministration;
	}();
	function createObservableArray(initialValues, enhancer, name, owned) {
	  if (name === void 0) {
	    name =  "ObservableArray@" + getNextId() ;
	  }

	  if (owned === void 0) {
	    owned = false;
	  }

	  assertProxies();
	  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
	  addHiddenFinalProp(adm.values_, $mobx, adm);
	  var proxy = new Proxy(adm.values_, arrayTraps);
	  adm.proxy_ = proxy;

	  if (initialValues && initialValues.length) {
	    var prev = allowStateChangesStart(true);
	    adm.spliceWithArray_(0, 0, initialValues);
	    allowStateChangesEnd(prev);
	  }

	  return proxy;
	} // eslint-disable-next-line

	var arrayExtensions = {
	  clear: function clear() {
	    return this.splice(0);
	  },
	  replace: function replace(newItems) {
	    var adm = this[$mobx];
	    return adm.spliceWithArray_(0, adm.values_.length, newItems);
	  },
	  // Used by JSON.stringify
	  toJSON: function toJSON() {
	    return this.slice();
	  },

	  /*
	   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
	   * since these functions alter the inner structure of the array, the have side effects.
	   * Because the have side effects, they should not be used in computed function,
	   * and for that reason the do not call dependencyState.notifyObserved
	   */
	  splice: function splice(index, deleteCount) {
	    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      newItems[_key - 2] = arguments[_key];
	    }

	    var adm = this[$mobx];

	    switch (arguments.length) {
	      case 0:
	        return [];

	      case 1:
	        return adm.spliceWithArray_(index);

	      case 2:
	        return adm.spliceWithArray_(index, deleteCount);
	    }

	    return adm.spliceWithArray_(index, deleteCount, newItems);
	  },
	  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {
	    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);
	  },
	  push: function push() {
	    var adm = this[$mobx];

	    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      items[_key2] = arguments[_key2];
	    }

	    adm.spliceWithArray_(adm.values_.length, 0, items);
	    return adm.values_.length;
	  },
	  pop: function pop() {
	    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
	  },
	  shift: function shift() {
	    return this.splice(0, 1)[0];
	  },
	  unshift: function unshift() {
	    var adm = this[$mobx];

	    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      items[_key3] = arguments[_key3];
	    }

	    adm.spliceWithArray_(0, 0, items);
	    return adm.values_.length;
	  },
	  reverse: function reverse() {
	    // reverse by default mutates in place before returning the result
	    // which makes it both a 'derivation' and a 'mutation'.
	    if (globalState.trackingDerivation) {
	      die(37, "reverse");
	    }

	    this.replace(this.slice().reverse());
	    return this;
	  },
	  sort: function sort() {
	    // sort by default mutates in place before returning the result
	    // which goes against all good practices. Let's not change the array in place!
	    if (globalState.trackingDerivation) {
	      die(37, "sort");
	    }

	    var copy = this.slice();
	    copy.sort.apply(copy, arguments);
	    this.replace(copy);
	    return this;
	  },
	  remove: function remove(value) {
	    var adm = this[$mobx];
	    var idx = adm.dehanceValues_(adm.values_).indexOf(value);

	    if (idx > -1) {
	      this.splice(idx, 1);
	      return true;
	    }

	    return false;
	  }
	};
	/**
	 * Wrap function from prototype
	 * Without this, everything works as well, but this works
	 * faster as everything works on unproxied values
	 */

	addArrayExtension("concat", simpleFunc);
	addArrayExtension("flat", simpleFunc);
	addArrayExtension("includes", simpleFunc);
	addArrayExtension("indexOf", simpleFunc);
	addArrayExtension("join", simpleFunc);
	addArrayExtension("lastIndexOf", simpleFunc);
	addArrayExtension("slice", simpleFunc);
	addArrayExtension("toString", simpleFunc);
	addArrayExtension("toLocaleString", simpleFunc); // map

	addArrayExtension("every", mapLikeFunc);
	addArrayExtension("filter", mapLikeFunc);
	addArrayExtension("find", mapLikeFunc);
	addArrayExtension("findIndex", mapLikeFunc);
	addArrayExtension("flatMap", mapLikeFunc);
	addArrayExtension("forEach", mapLikeFunc);
	addArrayExtension("map", mapLikeFunc);
	addArrayExtension("some", mapLikeFunc); // reduce

	addArrayExtension("reduce", reduceLikeFunc);
	addArrayExtension("reduceRight", reduceLikeFunc);

	function addArrayExtension(funcName, funcFactory) {
	  if (typeof Array.prototype[funcName] === "function") {
	    arrayExtensions[funcName] = funcFactory(funcName);
	  }
	} // Report and delegate to dehanced array


	function simpleFunc(funcName) {
	  return function () {
	    var adm = this[$mobx];
	    adm.atom_.reportObserved();
	    var dehancedValues = adm.dehanceValues_(adm.values_);
	    return dehancedValues[funcName].apply(dehancedValues, arguments);
	  };
	} // Make sure callbacks recieve correct array arg #2326


	function mapLikeFunc(funcName) {
	  return function (callback, thisArg) {
	    var _this2 = this;

	    var adm = this[$mobx];
	    adm.atom_.reportObserved();
	    var dehancedValues = adm.dehanceValues_(adm.values_);
	    return dehancedValues[funcName](function (element, index) {
	      return callback.call(thisArg, element, index, _this2);
	    });
	  };
	} // Make sure callbacks recieve correct array arg #2326


	function reduceLikeFunc(funcName) {
	  return function () {
	    var _this3 = this;

	    var adm = this[$mobx];
	    adm.atom_.reportObserved();
	    var dehancedValues = adm.dehanceValues_(adm.values_); // #2432 - reduce behavior depends on arguments.length

	    var callback = arguments[0];

	    arguments[0] = function (accumulator, currentValue, index) {
	      return callback(accumulator, currentValue, index, _this3);
	    };

	    return dehancedValues[funcName].apply(dehancedValues, arguments);
	  };
	}

	var isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
	function isObservableArray(thing) {
	  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
	}

	var _Symbol$iterator, _Symbol$toStringTag;
	var ObservableMapMarker = {};
	var ADD = "add";
	var DELETE = "delete"; // just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
	// But: https://github.com/mobxjs/mobx/issues/1556

	_Symbol$iterator = Symbol.iterator;
	_Symbol$toStringTag = Symbol.toStringTag;
	var ObservableMap = /*#__PURE__*/function () {
	  // hasMap, not hashMap >-).
	  function ObservableMap(initialData, enhancer_, name_) {
	    var _this = this;

	    if (enhancer_ === void 0) {
	      enhancer_ = deepEnhancer;
	    }

	    if (name_ === void 0) {
	      name_ =  "ObservableMap@" + getNextId() ;
	    }

	    this.enhancer_ = void 0;
	    this.name_ = void 0;
	    this[$mobx] = ObservableMapMarker;
	    this.data_ = void 0;
	    this.hasMap_ = void 0;
	    this.keysAtom_ = void 0;
	    this.interceptors_ = void 0;
	    this.changeListeners_ = void 0;
	    this.dehancer = void 0;
	    this.enhancer_ = enhancer_;
	    this.name_ = name_;

	    if (!isFunction(Map)) {
	      die(18);
	    }

	    this.keysAtom_ = createAtom( this.name_ + ".keys()" );
	    this.data_ = new Map();
	    this.hasMap_ = new Map();
	    allowStateChanges(true, function () {
	      _this.merge(initialData);
	    });
	  }

	  var _proto = ObservableMap.prototype;

	  _proto.has_ = function has_(key) {
	    return this.data_.has(key);
	  };

	  _proto.has = function has(key) {
	    var _this2 = this;

	    if (!globalState.trackingDerivation) {
	      return this.has_(key);
	    }

	    var entry = this.hasMap_.get(key);

	    if (!entry) {
	      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer,  this.name_ + "." + stringifyKey(key) + "?" , false);
	      this.hasMap_.set(key, newEntry);
	      onBecomeUnobserved(newEntry, function () {
	        return _this2.hasMap_["delete"](key);
	      });
	    }

	    return entry.get();
	  };

	  _proto.set = function set(key, value) {
	    var hasKey = this.has_(key);

	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        type: hasKey ? UPDATE : ADD,
	        object: this,
	        newValue: value,
	        name: key
	      });

	      if (!change) {
	        return this;
	      }

	      value = change.newValue;
	    }

	    if (hasKey) {
	      this.updateValue_(key, value);
	    } else {
	      this.addValue_(key, value);
	    }

	    return this;
	  };

	  _proto["delete"] = function _delete(key) {
	    var _this3 = this;

	    checkIfStateModificationsAreAllowed(this.keysAtom_);

	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        type: DELETE,
	        object: this,
	        name: key
	      });

	      if (!change) {
	        return false;
	      }
	    }

	    if (this.has_(key)) {
	      var notifySpy = isSpyEnabled();
	      var notify = hasListeners(this);

	      var _change = notify || notifySpy ? {
	        observableKind: "map",
	        debugObjectName: this.name_,
	        type: DELETE,
	        object: this,
	        oldValue: this.data_.get(key).value_,
	        name: key
	      } : null;

	      if ( notifySpy) {
	        spyReportStart(_change);
	      } // TODO fix type


	      transaction(function () {
	        var _this3$hasMap_$get;

	        _this3.keysAtom_.reportChanged();

	        (_this3$hasMap_$get = _this3.hasMap_.get(key)) == null ? void 0 : _this3$hasMap_$get.setNewValue_(false);

	        var observable = _this3.data_.get(key);

	        observable.setNewValue_(undefined);

	        _this3.data_["delete"](key);
	      });

	      if (notify) {
	        notifyListeners(this, _change);
	      }

	      if ( notifySpy) {
	        spyReportEnd();
	      }

	      return true;
	    }

	    return false;
	  };

	  _proto.updateValue_ = function updateValue_(key, newValue) {
	    var observable = this.data_.get(key);
	    newValue = observable.prepareNewValue_(newValue);

	    if (newValue !== globalState.UNCHANGED) {
	      var notifySpy = isSpyEnabled();
	      var notify = hasListeners(this);
	      var change = notify || notifySpy ? {
	        observableKind: "map",
	        debugObjectName: this.name_,
	        type: UPDATE,
	        object: this,
	        oldValue: observable.value_,
	        name: key,
	        newValue: newValue
	      } : null;

	      if ( notifySpy) {
	        spyReportStart(change);
	      } // TODO fix type


	      observable.setNewValue_(newValue);

	      if (notify) {
	        notifyListeners(this, change);
	      }

	      if ( notifySpy) {
	        spyReportEnd();
	      }
	    }
	  };

	  _proto.addValue_ = function addValue_(key, newValue) {
	    var _this4 = this;

	    checkIfStateModificationsAreAllowed(this.keysAtom_);
	    transaction(function () {
	      var _this4$hasMap_$get;

	      var observable = new ObservableValue(newValue, _this4.enhancer_,  _this4.name_ + "." + stringifyKey(key) , false);

	      _this4.data_.set(key, observable);

	      newValue = observable.value_; // value might have been changed

	      (_this4$hasMap_$get = _this4.hasMap_.get(key)) == null ? void 0 : _this4$hasMap_$get.setNewValue_(true);

	      _this4.keysAtom_.reportChanged();
	    });
	    var notifySpy = isSpyEnabled();
	    var notify = hasListeners(this);
	    var change = notify || notifySpy ? {
	      observableKind: "map",
	      debugObjectName: this.name_,
	      type: ADD,
	      object: this,
	      name: key,
	      newValue: newValue
	    } : null;

	    if ( notifySpy) {
	      spyReportStart(change);
	    } // TODO fix type


	    if (notify) {
	      notifyListeners(this, change);
	    }

	    if ( notifySpy) {
	      spyReportEnd();
	    }
	  };

	  _proto.get = function get(key) {
	    if (this.has(key)) {
	      return this.dehanceValue_(this.data_.get(key).get());
	    }

	    return this.dehanceValue_(undefined);
	  };

	  _proto.dehanceValue_ = function dehanceValue_(value) {
	    if (this.dehancer !== undefined) {
	      return this.dehancer(value);
	    }

	    return value;
	  };

	  _proto.keys = function keys() {
	    this.keysAtom_.reportObserved();
	    return this.data_.keys();
	  };

	  _proto.values = function values() {
	    var self = this;
	    var keys = this.keys();
	    return makeIterable({
	      next: function next() {
	        var _keys$next = keys.next(),
	            done = _keys$next.done,
	            value = _keys$next.value;

	        return {
	          done: done,
	          value: done ? undefined : self.get(value)
	        };
	      }
	    });
	  };

	  _proto.entries = function entries() {
	    var self = this;
	    var keys = this.keys();
	    return makeIterable({
	      next: function next() {
	        var _keys$next2 = keys.next(),
	            done = _keys$next2.done,
	            value = _keys$next2.value;

	        return {
	          done: done,
	          value: done ? undefined : [value, self.get(value)]
	        };
	      }
	    });
	  };

	  _proto[_Symbol$iterator] = function () {
	    return this.entries();
	  };

	  _proto.forEach = function forEach(callback, thisArg) {
	    for (var _iterator = _createForOfIteratorHelperLoose$1(this), _step; !(_step = _iterator()).done;) {
	      var _step$value = _step.value,
	          key = _step$value[0],
	          value = _step$value[1];
	      callback.call(thisArg, value, key, this);
	    }
	  }
	  /** Merge another object into this object, returns this. */
	  ;

	  _proto.merge = function merge(other) {
	    var _this5 = this;

	    if (isObservableMap(other)) {
	      other = new Map(other);
	    }

	    transaction(function () {
	      if (isPlainObject(other)) {
	        getPlainObjectKeys(other).forEach(function (key) {
	          return _this5.set(key, other[key]);
	        });
	      } else if (Array.isArray(other)) {
	        other.forEach(function (_ref) {
	          var key = _ref[0],
	              value = _ref[1];
	          return _this5.set(key, value);
	        });
	      } else if (isES6Map(other)) {
	        if (other.constructor !== Map) {
	          die(19, other);
	        }

	        other.forEach(function (value, key) {
	          return _this5.set(key, value);
	        });
	      } else if (other !== null && other !== undefined) {
	        die(20, other);
	      }
	    });
	    return this;
	  };

	  _proto.clear = function clear() {
	    var _this6 = this;

	    transaction(function () {
	      untracked(function () {
	        for (var _iterator2 = _createForOfIteratorHelperLoose$1(_this6.keys()), _step2; !(_step2 = _iterator2()).done;) {
	          var key = _step2.value;

	          _this6["delete"](key);
	        }
	      });
	    });
	  };

	  _proto.replace = function replace(values) {
	    var _this7 = this;

	    // Implementation requirements:
	    // - respect ordering of replacement map
	    // - allow interceptors to run and potentially prevent individual operations
	    // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)
	    // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)
	    // - note that result map may differ from replacement map due to the interceptors
	    transaction(function () {
	      // Convert to map so we can do quick key lookups
	      var replacementMap = convertToMap(values);
	      var orderedData = new Map(); // Used for optimization

	      var keysReportChangedCalled = false; // Delete keys that don't exist in replacement map
	      // if the key deletion is prevented by interceptor
	      // add entry at the beginning of the result map

	      for (var _iterator3 = _createForOfIteratorHelperLoose$1(_this7.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {
	        var key = _step3.value;

	        // Concurrently iterating/deleting keys
	        // iterator should handle this correctly
	        if (!replacementMap.has(key)) {
	          var deleted = _this7["delete"](key); // Was the key removed?


	          if (deleted) {
	            // _keysAtom.reportChanged() was already called
	            keysReportChangedCalled = true;
	          } else {
	            // Delete prevented by interceptor
	            var value = _this7.data_.get(key);

	            orderedData.set(key, value);
	          }
	        }
	      } // Merge entries


	      for (var _iterator4 = _createForOfIteratorHelperLoose$1(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {
	        var _step4$value = _step4.value,
	            _key = _step4$value[0],
	            _value = _step4$value[1];

	        // We will want to know whether a new key is added
	        var keyExisted = _this7.data_.has(_key); // Add or update value


	        _this7.set(_key, _value); // The addition could have been prevent by interceptor


	        if (_this7.data_.has(_key)) {
	          // The update could have been prevented by interceptor
	          // and also we want to preserve existing values
	          // so use value from _data map (instead of replacement map)
	          var _value2 = _this7.data_.get(_key);

	          orderedData.set(_key, _value2); // Was a new key added?

	          if (!keyExisted) {
	            // _keysAtom.reportChanged() was already called
	            keysReportChangedCalled = true;
	          }
	        }
	      } // Check for possible key order change


	      if (!keysReportChangedCalled) {
	        if (_this7.data_.size !== orderedData.size) {
	          // If size differs, keys are definitely modified
	          _this7.keysAtom_.reportChanged();
	        } else {
	          var iter1 = _this7.data_.keys();

	          var iter2 = orderedData.keys();
	          var next1 = iter1.next();
	          var next2 = iter2.next();

	          while (!next1.done) {
	            if (next1.value !== next2.value) {
	              _this7.keysAtom_.reportChanged();

	              break;
	            }

	            next1 = iter1.next();
	            next2 = iter2.next();
	          }
	        }
	      } // Use correctly ordered map


	      _this7.data_ = orderedData;
	    });
	    return this;
	  };

	  _proto.toString = function toString() {
	    return "[object ObservableMap]";
	  };

	  _proto.toJSON = function toJSON() {
	    return Array.from(this);
	  };

	  /**
	   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
	   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
	   * for callback details
	   */
	  _proto.observe_ = function observe_(listener, fireImmediately) {
	    if ( fireImmediately === true) {
	      die("`observe` doesn't support fireImmediately=true in combination with maps.");
	    }

	    return registerListener(this, listener);
	  };

	  _proto.intercept_ = function intercept_(handler) {
	    return registerInterceptor(this, handler);
	  };

	  _createClass(ObservableMap, [{
	    key: "size",
	    get: function get() {
	      this.keysAtom_.reportObserved();
	      return this.data_.size;
	    }
	  }, {
	    key: _Symbol$toStringTag,
	    get: function get() {
	      return "Map";
	    }
	  }]);

	  return ObservableMap;
	}(); // eslint-disable-next-line

	var isObservableMap = /*#__PURE__*/createInstanceofPredicate("ObservableMap", ObservableMap);

	function convertToMap(dataStructure) {
	  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
	    return dataStructure;
	  } else if (Array.isArray(dataStructure)) {
	    return new Map(dataStructure);
	  } else if (isPlainObject(dataStructure)) {
	    var map = new Map();

	    for (var key in dataStructure) {
	      map.set(key, dataStructure[key]);
	    }

	    return map;
	  } else {
	    return die(21, dataStructure);
	  }
	}

	var _Symbol$iterator$1, _Symbol$toStringTag$1;
	var ObservableSetMarker = {};
	_Symbol$iterator$1 = Symbol.iterator;
	_Symbol$toStringTag$1 = Symbol.toStringTag;
	var ObservableSet = /*#__PURE__*/function () {
	  function ObservableSet(initialData, enhancer, name_) {
	    if (enhancer === void 0) {
	      enhancer = deepEnhancer;
	    }

	    if (name_ === void 0) {
	      name_ =  "ObservableSet@" + getNextId() ;
	    }

	    this.name_ = void 0;
	    this[$mobx] = ObservableSetMarker;
	    this.data_ = new Set();
	    this.atom_ = void 0;
	    this.changeListeners_ = void 0;
	    this.interceptors_ = void 0;
	    this.dehancer = void 0;
	    this.enhancer_ = void 0;
	    this.name_ = name_;

	    if (!isFunction(Set)) {
	      die(22);
	    }

	    this.atom_ = createAtom(this.name_);

	    this.enhancer_ = function (newV, oldV) {
	      return enhancer(newV, oldV, name_);
	    };

	    if (initialData) {
	      this.replace(initialData);
	    }
	  }

	  var _proto = ObservableSet.prototype;

	  _proto.dehanceValue_ = function dehanceValue_(value) {
	    if (this.dehancer !== undefined) {
	      return this.dehancer(value);
	    }

	    return value;
	  };

	  _proto.clear = function clear() {
	    var _this = this;

	    transaction(function () {
	      untracked(function () {
	        for (var _iterator = _createForOfIteratorHelperLoose$1(_this.data_.values()), _step; !(_step = _iterator()).done;) {
	          var value = _step.value;

	          _this["delete"](value);
	        }
	      });
	    });
	  };

	  _proto.forEach = function forEach(callbackFn, thisArg) {
	    for (var _iterator2 = _createForOfIteratorHelperLoose$1(this), _step2; !(_step2 = _iterator2()).done;) {
	      var value = _step2.value;
	      callbackFn.call(thisArg, value, value, this);
	    }
	  };

	  _proto.add = function add(value) {
	    var _this2 = this;

	    checkIfStateModificationsAreAllowed(this.atom_);

	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        type: ADD,
	        object: this,
	        newValue: value
	      });

	      if (!change) {
	        return this;
	      } // ideally, value = change.value would be done here, so that values can be
	      // changed by interceptor. Same applies for other Set and Map api's.

	    }

	    if (!this.has(value)) {
	      transaction(function () {
	        _this2.data_.add(_this2.enhancer_(value, undefined));

	        _this2.atom_.reportChanged();
	      });
	      var notifySpy =  isSpyEnabled();
	      var notify = hasListeners(this);

	      var _change = notify || notifySpy ? {
	        observableKind: "set",
	        debugObjectName: this.name_,
	        type: ADD,
	        object: this,
	        newValue: value
	      } : null;

	      if (notifySpy && "development" !== "production") {
	        spyReportStart(_change);
	      }

	      if (notify) {
	        notifyListeners(this, _change);
	      }

	      if (notifySpy && "development" !== "production") {
	        spyReportEnd();
	      }
	    }

	    return this;
	  };

	  _proto["delete"] = function _delete(value) {
	    var _this3 = this;

	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        type: DELETE,
	        object: this,
	        oldValue: value
	      });

	      if (!change) {
	        return false;
	      }
	    }

	    if (this.has(value)) {
	      var notifySpy =  isSpyEnabled();
	      var notify = hasListeners(this);

	      var _change2 = notify || notifySpy ? {
	        observableKind: "set",
	        debugObjectName: this.name_,
	        type: DELETE,
	        object: this,
	        oldValue: value
	      } : null;

	      if (notifySpy && "development" !== "production") {
	        spyReportStart(_change2);
	      }

	      transaction(function () {
	        _this3.atom_.reportChanged();

	        _this3.data_["delete"](value);
	      });

	      if (notify) {
	        notifyListeners(this, _change2);
	      }

	      if (notifySpy && "development" !== "production") {
	        spyReportEnd();
	      }

	      return true;
	    }

	    return false;
	  };

	  _proto.has = function has(value) {
	    this.atom_.reportObserved();
	    return this.data_.has(this.dehanceValue_(value));
	  };

	  _proto.entries = function entries() {
	    var nextIndex = 0;
	    var keys = Array.from(this.keys());
	    var values = Array.from(this.values());
	    return makeIterable({
	      next: function next() {
	        var index = nextIndex;
	        nextIndex += 1;
	        return index < values.length ? {
	          value: [keys[index], values[index]],
	          done: false
	        } : {
	          done: true
	        };
	      }
	    });
	  };

	  _proto.keys = function keys() {
	    return this.values();
	  };

	  _proto.values = function values() {
	    this.atom_.reportObserved();
	    var self = this;
	    var nextIndex = 0;
	    var observableValues = Array.from(this.data_.values());
	    return makeIterable({
	      next: function next() {
	        return nextIndex < observableValues.length ? {
	          value: self.dehanceValue_(observableValues[nextIndex++]),
	          done: false
	        } : {
	          done: true
	        };
	      }
	    });
	  };

	  _proto.replace = function replace(other) {
	    var _this4 = this;

	    if (isObservableSet(other)) {
	      other = new Set(other);
	    }

	    transaction(function () {
	      if (Array.isArray(other)) {
	        _this4.clear();

	        other.forEach(function (value) {
	          return _this4.add(value);
	        });
	      } else if (isES6Set(other)) {
	        _this4.clear();

	        other.forEach(function (value) {
	          return _this4.add(value);
	        });
	      } else if (other !== null && other !== undefined) {
	        die("Cannot initialize set from " + other);
	      }
	    });
	    return this;
	  };

	  _proto.observe_ = function observe_(listener, fireImmediately) {
	    // ... 'fireImmediately' could also be true?
	    if ( fireImmediately === true) {
	      die("`observe` doesn't support fireImmediately=true in combination with sets.");
	    }

	    return registerListener(this, listener);
	  };

	  _proto.intercept_ = function intercept_(handler) {
	    return registerInterceptor(this, handler);
	  };

	  _proto.toJSON = function toJSON() {
	    return Array.from(this);
	  };

	  _proto.toString = function toString() {
	    return "[object ObservableSet]";
	  };

	  _proto[_Symbol$iterator$1] = function () {
	    return this.values();
	  };

	  _createClass(ObservableSet, [{
	    key: "size",
	    get: function get() {
	      this.atom_.reportObserved();
	      return this.data_.size;
	    }
	  }, {
	    key: _Symbol$toStringTag$1,
	    get: function get() {
	      return "Set";
	    }
	  }]);

	  return ObservableSet;
	}(); // eslint-disable-next-line

	var isObservableSet = /*#__PURE__*/createInstanceofPredicate("ObservableSet", ObservableSet);

	var descriptorCache = /*#__PURE__*/Object.create(null);
	var REMOVE = "remove";
	var ObservableObjectAdministration = /*#__PURE__*/function () {
	  function ObservableObjectAdministration(target_, values_, name_, // Used anytime annotation is not explicitely provided
	  defaultAnnotation_) {
	    if (values_ === void 0) {
	      values_ = new Map();
	    }

	    if (defaultAnnotation_ === void 0) {
	      defaultAnnotation_ = autoAnnotation;
	    }

	    this.target_ = void 0;
	    this.values_ = void 0;
	    this.name_ = void 0;
	    this.defaultAnnotation_ = void 0;
	    this.keysAtom_ = void 0;
	    this.changeListeners_ = void 0;
	    this.interceptors_ = void 0;
	    this.proxy_ = void 0;
	    this.isPlainObject_ = void 0;
	    this.appliedAnnotations_ = void 0;
	    this.pendingKeys_ = void 0;
	    this.target_ = target_;
	    this.values_ = values_;
	    this.name_ = name_;
	    this.defaultAnnotation_ = defaultAnnotation_;
	    this.keysAtom_ = new Atom( this.name_ + ".keys" ); // Optimization: we use this frequently

	    this.isPlainObject_ = isPlainObject(this.target_);

	    if ( !isAnnotation(this.defaultAnnotation_)) {
	      die("defaultAnnotation must be valid annotation");
	    }

	    {
	      // Prepare structure for tracking which fields were already annotated
	      this.appliedAnnotations_ = {};
	    }
	  }

	  var _proto = ObservableObjectAdministration.prototype;

	  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
	    return this.values_.get(key).get();
	  };

	  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
	    var observable = this.values_.get(key);

	    if (observable instanceof ComputedValue) {
	      observable.set(newValue);
	      return true;
	    } // intercept


	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        type: UPDATE,
	        object: this.proxy_ || this.target_,
	        name: key,
	        newValue: newValue
	      });

	      if (!change) {
	        return null;
	      }

	      newValue = change.newValue;
	    }

	    newValue = observable.prepareNewValue_(newValue); // notify spy & observers

	    if (newValue !== globalState.UNCHANGED) {
	      var notify = hasListeners(this);
	      var notifySpy =  isSpyEnabled();

	      var _change = notify || notifySpy ? {
	        type: UPDATE,
	        observableKind: "object",
	        debugObjectName: this.name_,
	        object: this.proxy_ || this.target_,
	        oldValue: observable.value_,
	        name: key,
	        newValue: newValue
	      } : null;

	      if ( notifySpy) {
	        spyReportStart(_change);
	      }
	      observable.setNewValue_(newValue);

	      if (notify) {
	        notifyListeners(this, _change);
	      }

	      if ( notifySpy) {
	        spyReportEnd();
	      }
	    }

	    return true;
	  };

	  _proto.get_ = function get_(key) {
	    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
	      // Key doesn't exist yet, subscribe for it in case it's added later
	      this.has_(key);
	    }

	    return this.target_[key];
	  }
	  /**
	   * @param {PropertyKey} key
	   * @param {any} value
	   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is
	   * @param {boolean} proxyTrap whether it's called from proxy trap
	   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
	   */
	  ;

	  _proto.set_ = function set_(key, value, proxyTrap) {
	    if (proxyTrap === void 0) {
	      proxyTrap = false;
	    }

	    // Don't use .has(key) - we care about own
	    if (hasProp(this.target_, key)) {
	      // Existing prop
	      if (this.values_.has(key)) {
	        // Observable (can be intercepted)
	        return this.setObservablePropValue_(key, value);
	      } else if (proxyTrap) {
	        // Non-observable - proxy
	        return Reflect.set(this.target_, key, value);
	      } else {
	        // Non-observable
	        this.target_[key] = value;
	        return true;
	      }
	    } else {
	      // New prop
	      return this.extend_(key, {
	        value: value,
	        enumerable: true,
	        writable: true,
	        configurable: true
	      }, this.defaultAnnotation_, proxyTrap);
	    }
	  } // Trap for "in"
	  ;

	  _proto.has_ = function has_(key) {
	    if (!globalState.trackingDerivation) {
	      // Skip key subscription outside derivation
	      return key in this.target_;
	    }

	    this.pendingKeys_ || (this.pendingKeys_ = new Map());
	    var entry = this.pendingKeys_.get(key);

	    if (!entry) {
	      entry = new ObservableValue(key in this.target_, referenceEnhancer,  this.name_ + "." + stringifyKey(key) + "?" , false);
	      this.pendingKeys_.set(key, entry);
	    }

	    return entry.get();
	  }
	  /**
	   * @param {PropertyKey} key
	   * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop
	   */
	  ;

	  _proto.make_ = function make_(key, annotation) {
	    if (annotation === true) {
	      annotation = this.defaultAnnotation_;
	    }

	    if (annotation === false) {
	      return;
	    }

	    assertAnnotable(this, annotation, key);

	    if (!(key in this.target_)) {
	      var _this$target_$storedA;

	      // Throw on missing key, except for decorators:
	      // Decorator annotations are collected from whole prototype chain.
	      // When called from super() some props may not exist yet.
	      // However we don't have to worry about missing prop,
	      // because the decorator must have been applied to something.
	      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) != null && _this$target_$storedA[key]) {
	        return; // will be annotated by subclass constructor
	      } else {
	        die(1, annotation.annotationType_, this.name_ + "." + key.toString());
	      }
	    }

	    var source = this.target_;

	    while (source && source !== objectPrototype) {
	      var descriptor = getDescriptor(source, key);

	      if (descriptor) {
	        var outcome = annotation.make_(this, key, descriptor, source);

	        if (outcome === 0
	        /* Cancel */
	        ) {
	          return;
	        }

	        if (outcome === 1
	        /* Break */
	        ) {
	          break;
	        }
	      }

	      source = Object.getPrototypeOf(source);
	    }

	    recordAnnotationApplied(this, annotation, key);
	  }
	  /**
	   * @param {PropertyKey} key
	   * @param {PropertyDescriptor} descriptor
	   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is
	   * @param {boolean} proxyTrap whether it's called from proxy trap
	   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
	   */
	  ;

	  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
	    if (proxyTrap === void 0) {
	      proxyTrap = false;
	    }

	    if (annotation === true) {
	      annotation = this.defaultAnnotation_;
	    }

	    if (annotation === false) {
	      return this.defineProperty_(key, descriptor, proxyTrap);
	    }

	    assertAnnotable(this, annotation, key);
	    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);

	    if (outcome) {
	      recordAnnotationApplied(this, annotation, key);
	    }

	    return outcome;
	  }
	  /**
	   * @param {PropertyKey} key
	   * @param {PropertyDescriptor} descriptor
	   * @param {boolean} proxyTrap whether it's called from proxy trap
	   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
	   */
	  ;

	  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
	    if (proxyTrap === void 0) {
	      proxyTrap = false;
	    }

	    try {
	      startBatch(); // Delete

	      var deleteOutcome = this.delete_(key);

	      if (!deleteOutcome) {
	        // Failure or intercepted
	        return deleteOutcome;
	      } // ADD interceptor


	      if (hasInterceptors(this)) {
	        var change = interceptChange(this, {
	          object: this.proxy_ || this.target_,
	          name: key,
	          type: ADD,
	          newValue: descriptor.value
	        });

	        if (!change) {
	          return null;
	        }

	        var newValue = change.newValue;

	        if (descriptor.value !== newValue) {
	          descriptor = _extends({}, descriptor, {
	            value: newValue
	          });
	        }
	      } // Define


	      if (proxyTrap) {
	        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
	          return false;
	        }
	      } else {
	        defineProperty(this.target_, key, descriptor);
	      } // Notify


	      this.notifyPropertyAddition_(key, descriptor.value);
	    } finally {
	      endBatch();
	    }

	    return true;
	  } // If original descriptor becomes relevant, move this to annotation directly
	  ;

	  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
	    if (proxyTrap === void 0) {
	      proxyTrap = false;
	    }

	    try {
	      startBatch(); // Delete

	      var deleteOutcome = this.delete_(key);

	      if (!deleteOutcome) {
	        // Failure or intercepted
	        return deleteOutcome;
	      } // ADD interceptor


	      if (hasInterceptors(this)) {
	        var change = interceptChange(this, {
	          object: this.proxy_ || this.target_,
	          name: key,
	          type: ADD,
	          newValue: value
	        });

	        if (!change) {
	          return null;
	        }

	        value = change.newValue;
	      }

	      var cachedDescriptor = getCachedObservablePropDescriptor(key);
	      var descriptor = {
	        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
	        enumerable: true,
	        get: cachedDescriptor.get,
	        set: cachedDescriptor.set
	      }; // Define

	      if (proxyTrap) {
	        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
	          return false;
	        }
	      } else {
	        defineProperty(this.target_, key, descriptor);
	      }

	      var observable = new ObservableValue(value, enhancer, "development" !== "production" ? this.name_ + "." + key.toString() : "ObservableObject.key", false);
	      this.values_.set(key, observable); // Notify (value possibly changed by ObservableValue)

	      this.notifyPropertyAddition_(key, observable.value_);
	    } finally {
	      endBatch();
	    }

	    return true;
	  } // If original descriptor becomes relevant, move this to annotation directly
	  ;

	  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
	    if (proxyTrap === void 0) {
	      proxyTrap = false;
	    }

	    try {
	      startBatch(); // Delete

	      var deleteOutcome = this.delete_(key);

	      if (!deleteOutcome) {
	        // Failure or intercepted
	        return deleteOutcome;
	      } // ADD interceptor


	      if (hasInterceptors(this)) {
	        var change = interceptChange(this, {
	          object: this.proxy_ || this.target_,
	          name: key,
	          type: ADD,
	          newValue: undefined
	        });

	        if (!change) {
	          return null;
	        }
	      }

	      options.name || (options.name = "development" !== "production" ? this.name_ + "." + key.toString() : "ObservableObject.key");
	      options.context = this.proxy_ || this.target_;
	      var cachedDescriptor = getCachedObservablePropDescriptor(key);
	      var descriptor = {
	        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
	        enumerable: false,
	        get: cachedDescriptor.get,
	        set: cachedDescriptor.set
	      }; // Define

	      if (proxyTrap) {
	        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
	          return false;
	        }
	      } else {
	        defineProperty(this.target_, key, descriptor);
	      }

	      this.values_.set(key, new ComputedValue(options)); // Notify

	      this.notifyPropertyAddition_(key, undefined);
	    } finally {
	      endBatch();
	    }

	    return true;
	  }
	  /**
	   * @param {PropertyKey} key
	   * @param {PropertyDescriptor} descriptor
	   * @param {boolean} proxyTrap whether it's called from proxy trap
	   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
	   */
	  ;

	  _proto.delete_ = function delete_(key, proxyTrap) {
	    if (proxyTrap === void 0) {
	      proxyTrap = false;
	    }

	    // No such prop
	    if (!hasProp(this.target_, key)) {
	      return true;
	    } // Intercept


	    if (hasInterceptors(this)) {
	      var change = interceptChange(this, {
	        object: this.proxy_ || this.target_,
	        name: key,
	        type: REMOVE
	      }); // Cancelled

	      if (!change) {
	        return null;
	      }
	    } // Delete


	    try {
	      var _this$pendingKeys_, _this$pendingKeys_$ge;

	      startBatch();
	      var notify = hasListeners(this);
	      var notifySpy = "development" !== "production" && isSpyEnabled();
	      var observable = this.values_.get(key); // Value needed for spies/listeners

	      var value = undefined; // Optimization: don't pull the value unless we will need it

	      if (!observable && (notify || notifySpy)) {
	        var _getDescriptor;

	        value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;
	      } // delete prop (do first, may fail)


	      if (proxyTrap) {
	        if (!Reflect.deleteProperty(this.target_, key)) {
	          return false;
	        }
	      } else {
	        delete this.target_[key];
	      } // Allow re-annotating this field


	      if ("development" !== "production") {
	        delete this.appliedAnnotations_[key];
	      } // Clear observable


	      if (observable) {
	        this.values_["delete"](key); // for computed, value is undefined

	        if (observable instanceof ObservableValue) {
	          value = observable.value_;
	        } // Notify: autorun(() => obj[key]), see #1796


	        propagateChanged(observable);
	      } // Notify "keys/entries/values" observers


	      this.keysAtom_.reportChanged(); // Notify "has" observers
	      // "in" as it may still exist in proto

	      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_); // Notify spies/listeners

	      if (notify || notifySpy) {
	        var _change2 = {
	          type: REMOVE,
	          observableKind: "object",
	          object: this.proxy_ || this.target_,
	          debugObjectName: this.name_,
	          oldValue: value,
	          name: key
	        };

	        if ("development" !== "production" && notifySpy) {
	          spyReportStart(_change2);
	        }

	        if (notify) {
	          notifyListeners(this, _change2);
	        }

	        if ("development" !== "production" && notifySpy) {
	          spyReportEnd();
	        }
	      }
	    } finally {
	      endBatch();
	    }

	    return true;
	  }
	  /**
	   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
	   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
	   * for callback details
	   */
	  ;

	  _proto.observe_ = function observe_(callback, fireImmediately) {
	    if ( fireImmediately === true) {
	      die("`observe` doesn't support the fire immediately property for observable objects.");
	    }

	    return registerListener(this, callback);
	  };

	  _proto.intercept_ = function intercept_(handler) {
	    return registerInterceptor(this, handler);
	  };

	  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
	    var _this$pendingKeys_2, _this$pendingKeys_2$g;

	    var notify = hasListeners(this);
	    var notifySpy =  isSpyEnabled();

	    if (notify || notifySpy) {
	      var change = notify || notifySpy ? {
	        type: ADD,
	        observableKind: "object",
	        debugObjectName: this.name_,
	        object: this.proxy_ || this.target_,
	        name: key,
	        newValue: value
	      } : null;

	      if ( notifySpy) {
	        spyReportStart(change);
	      }

	      if (notify) {
	        notifyListeners(this, change);
	      }

	      if ( notifySpy) {
	        spyReportEnd();
	      }
	    }

	    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true); // Notify "keys/entries/values" observers

	    this.keysAtom_.reportChanged();
	  };

	  _proto.ownKeys_ = function ownKeys_() {
	    this.keysAtom_.reportObserved();
	    return ownKeys(this.target_);
	  };

	  _proto.keys_ = function keys_() {
	    // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.
	    // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.
	    // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)
	    // We choose to over-report in Object.keys(object), because:
	    // - typically it's used with simple data objects
	    // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected
	    this.keysAtom_.reportObserved();
	    return Object.keys(this.target_);
	  };

	  return ObservableObjectAdministration;
	}();
	function asObservableObject(target, options) {
	  var _options$name;

	  if ( options && isObservableObject(target)) {
	    die("Options can't be provided for already observable objects.");
	  }

	  if (hasProp(target, $mobx)) {
	    if ( !(getAdministration(target) instanceof ObservableObjectAdministration)) {
	      die("Cannot convert '" + getDebugName(target) + "' into observable object:" + "\nThe target is already observable of different type." + "\nExtending builtins is not supported.");
	    }

	    return target;
	  }

	  if ( !Object.isExtensible(target)) {
	    die("Cannot make the designated object observable; it is not extensible");
	  }

	  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name :  (isPlainObject(target) ? "ObservableObject" : target.constructor.name) + "@" + getNextId() ;
	  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options));
	  addHiddenProp(target, $mobx, adm);
	  return target;
	}
	var isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);

	function getCachedObservablePropDescriptor(key) {
	  return descriptorCache[key] || (descriptorCache[key] = {
	    get: function get() {
	      return this[$mobx].getObservablePropValue_(key);
	    },
	    set: function set(value) {
	      return this[$mobx].setObservablePropValue_(key, value);
	    }
	  });
	}

	function isObservableObject(thing) {
	  if (isObject(thing)) {
	    return isObservableObjectAdministration(thing[$mobx]);
	  }

	  return false;
	}
	function recordAnnotationApplied(adm, annotation, key) {
	  var _adm$target_$storedAn;

	  {
	    adm.appliedAnnotations_[key] = annotation;
	  } // Remove applied decorator annotation so we don't try to apply it again in subclass constructor


	  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];
	}

	function assertAnnotable(adm, annotation, key) {
	  // Valid annotation
	  if ( !isAnnotation(annotation)) {
	    die("Cannot annotate '" + adm.name_ + "." + key.toString() + "': Invalid annotation.");
	  }
	  /*
	  // Configurable, not sealed, not frozen
	  // Possibly not needed, just a little better error then the one thrown by engine.
	  // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.
	  if (__DEV__) {
	      const configurable = getDescriptor(adm.target_, key)?.configurable
	      const frozen = Object.isFrozen(adm.target_)
	      const sealed = Object.isSealed(adm.target_)
	      if (!configurable || frozen || sealed) {
	          const fieldName = `${adm.name_}.${key.toString()}`
	          const requestedAnnotationType = annotation.annotationType_
	          let error = `Cannot apply '${requestedAnnotationType}' to '${fieldName}':`
	          if (frozen) {
	              error += `\nObject is frozen.`
	          }
	          if (sealed) {
	              error += `\nObject is sealed.`
	          }
	          if (!configurable) {
	              error += `\nproperty is not configurable.`
	              // Mention only if caused by us to avoid confusion
	              if (hasProp(adm.appliedAnnotations!, key)) {
	                  error += `\nTo prevent accidental re-definition of a field by a subclass, `
	                  error += `all annotated fields of non-plain objects (classes) are not configurable.`
	              }
	          }
	          die(error)
	      }
	  }
	  */
	  // Not annotated


	  if ( !isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {
	    var fieldName = adm.name_ + "." + key.toString();
	    var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;
	    var requestedAnnotationType = annotation.annotationType_;
	    die("Cannot apply '" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already annotated with '" + currentAnnotationType + "'.") + "\nRe-annotating fields is not allowed." + "\nUse 'override' annotation for methods overridden by subclass.");
	  }
	}

	var ENTRY_0 = /*#__PURE__*/createArrayEntryDescriptor(0);
	/**
	 * This array buffer contains two lists of properties, so that all arrays
	 * can recycle their property definitions, which significantly improves performance of creating
	 * properties on the fly.
	 */


	var OBSERVABLE_ARRAY_BUFFER_SIZE = 0; // Typescript workaround to make sure ObservableArray extends Array

	var StubArray = function StubArray() {};

	function inherit(ctor, proto) {
	  if (Object.setPrototypeOf) {
	    Object.setPrototypeOf(ctor.prototype, proto);
	  } else if (ctor.prototype.__proto__ !== undefined) {
	    ctor.prototype.__proto__ = proto;
	  } else {
	    ctor.prototype = proto;
	  }
	}

	inherit(StubArray, Array.prototype); // Weex proto freeze protection was here,
	// but it is unclear why the hack is need as MobX never changed the prototype
	// anyway, so removed it in V6

	var LegacyObservableArray = /*#__PURE__*/function (_StubArray, _Symbol$toStringTag, _Symbol$iterator) {
	  _inheritsLoose(LegacyObservableArray, _StubArray);

	  function LegacyObservableArray(initialValues, enhancer, name, owned) {
	    var _this;

	    if (name === void 0) {
	      name =  "ObservableArray@" + getNextId() ;
	    }

	    if (owned === void 0) {
	      owned = false;
	    }

	    _this = _StubArray.call(this) || this;
	    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
	    adm.proxy_ = _assertThisInitialized(_this);
	    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);

	    if (initialValues && initialValues.length) {
	      var prev = allowStateChangesStart(true); // @ts-ignore

	      _this.spliceWithArray(0, 0, initialValues);

	      allowStateChangesEnd(prev);
	    }

	    {
	      // Seems that Safari won't use numeric prototype setter untill any * numeric property is
	      // defined on the instance. After that it works fine, even if this property is deleted.
	      Object.defineProperty(_assertThisInitialized(_this), "0", ENTRY_0);
	    }

	    return _this;
	  }

	  var _proto = LegacyObservableArray.prototype;

	  _proto.concat = function concat() {
	    this[$mobx].atom_.reportObserved();

	    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
	      arrays[_key] = arguments[_key];
	    }

	    return Array.prototype.concat.apply(this.slice(), //@ts-ignore
	    arrays.map(function (a) {
	      return isObservableArray(a) ? a.slice() : a;
	    }));
	  };

	  _proto[_Symbol$iterator] = function () {
	    var self = this;
	    var nextIndex = 0;
	    return makeIterable({
	      next: function next() {
	        return nextIndex < self.length ? {
	          value: self[nextIndex++],
	          done: false
	        } : {
	          done: true,
	          value: undefined
	        };
	      }
	    });
	  };

	  _createClass(LegacyObservableArray, [{
	    key: "length",
	    get: function get() {
	      return this[$mobx].getArrayLength_();
	    },
	    set: function set(newLength) {
	      this[$mobx].setArrayLength_(newLength);
	    }
	  }, {
	    key: _Symbol$toStringTag,
	    get: function get() {
	      return "Array";
	    }
	  }]);

	  return LegacyObservableArray;
	}(StubArray, Symbol.toStringTag, Symbol.iterator);

	Object.entries(arrayExtensions).forEach(function (_ref) {
	  var prop = _ref[0],
	      fn = _ref[1];

	  if (prop !== "concat") {
	    addHiddenProp(LegacyObservableArray.prototype, prop, fn);
	  }
	});

	function createArrayEntryDescriptor(index) {
	  return {
	    enumerable: false,
	    configurable: true,
	    get: function get() {
	      return this[$mobx].get_(index);
	    },
	    set: function set(value) {
	      this[$mobx].set_(index, value);
	    }
	  };
	}

	function createArrayBufferItem(index) {
	  defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
	}

	function reserveArrayBuffer(max) {
	  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
	    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {
	      createArrayBufferItem(index);
	    }

	    OBSERVABLE_ARRAY_BUFFER_SIZE = max;
	  }
	}
	reserveArrayBuffer(1000);
	function createLegacyArray(initialValues, enhancer, name) {
	  return new LegacyObservableArray(initialValues, enhancer, name);
	}

	function getAtom(thing, property) {
	  if (typeof thing === "object" && thing !== null) {
	    if (isObservableArray(thing)) {
	      if (property !== undefined) {
	        die(23);
	      }

	      return thing[$mobx].atom_;
	    }

	    if (isObservableSet(thing)) {
	      return thing[$mobx];
	    }

	    if (isObservableMap(thing)) {
	      if (property === undefined) {
	        return thing.keysAtom_;
	      }

	      var observable = thing.data_.get(property) || thing.hasMap_.get(property);

	      if (!observable) {
	        die(25, property, getDebugName(thing));
	      }

	      return observable;
	    }


	    if (isObservableObject(thing)) {
	      if (!property) {
	        return die(26);
	      }

	      var _observable = thing[$mobx].values_.get(property);

	      if (!_observable) {
	        die(27, property, getDebugName(thing));
	      }

	      return _observable;
	    }

	    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
	      return thing;
	    }
	  } else if (isFunction(thing)) {
	    if (isReaction(thing[$mobx])) {
	      // disposer function
	      return thing[$mobx];
	    }
	  }

	  die(28);
	}
	function getAdministration(thing, property) {
	  if (!thing) {
	    die(29);
	  }

	  if (property !== undefined) {
	    return getAdministration(getAtom(thing, property));
	  }

	  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
	    return thing;
	  }

	  if (isObservableMap(thing) || isObservableSet(thing)) {
	    return thing;
	  }

	  if (thing[$mobx]) {
	    return thing[$mobx];
	  }

	  die(24, thing);
	}
	function getDebugName(thing, property) {
	  var named;

	  if (property !== undefined) {
	    named = getAtom(thing, property);
	  } else if (isAction(thing)) {
	    return thing.name;
	  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
	    named = getAdministration(thing);
	  } else {
	    // valid for arrays as well
	    named = getAtom(thing);
	  }

	  return named.name_;
	}

	var toString = objectPrototype.toString;
	function deepEqual(a, b, depth) {
	  if (depth === void 0) {
	    depth = -1;
	  }

	  return eq(a, b, depth);
	} // Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
	// Internal recursive comparison function for `isEqual`.

	function eq(a, b, depth, aStack, bStack) {
	  // Identical objects are equal. `0 === -0`, but they aren't identical.
	  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	  if (a === b) {
	    return a !== 0 || 1 / a === 1 / b;
	  } // `null` or `undefined` only equal to itself (strict comparison).


	  if (a == null || b == null) {
	    return false;
	  } // `NaN`s are equivalent, but non-reflexive.


	  if (a !== a) {
	    return b !== b;
	  } // Exhaust primitive checks


	  var type = typeof a;

	  if (type !== "function" && type !== "object" && typeof b != "object") {
	    return false;
	  } // Compare `[[Class]]` names.


	  var className = toString.call(a);

	  if (className !== toString.call(b)) {
	    return false;
	  }

	  switch (className) {
	    // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	    case "[object RegExp]": // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')

	    case "[object String]":
	      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	      // equivalent to `new String("5")`.
	      return "" + a === "" + b;

	    case "[object Number]":
	      // `NaN`s are equivalent, but non-reflexive.
	      // Object(NaN) is equivalent to NaN.
	      if (+a !== +a) {
	        return +b !== +b;
	      } // An `egal` comparison is performed for other numeric values.


	      return +a === 0 ? 1 / +a === 1 / b : +a === +b;

	    case "[object Date]":
	    case "[object Boolean]":
	      // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	      // millisecond representations. Note that invalid dates with millisecond representations
	      // of `NaN` are not equivalent.
	      return +a === +b;

	    case "[object Symbol]":
	      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);

	    case "[object Map]":
	    case "[object Set]":
	      // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
	      // Hide this extra level by increasing the depth.
	      if (depth >= 0) {
	        depth++;
	      }

	      break;
	  } // Unwrap any wrapped objects.


	  a = unwrap(a);
	  b = unwrap(b);
	  var areArrays = className === "[object Array]";

	  if (!areArrays) {
	    if (typeof a != "object" || typeof b != "object") {
	      return false;
	    } // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	    // from different frames are.


	    var aCtor = a.constructor,
	        bCtor = b.constructor;

	    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {
	      return false;
	    }
	  }

	  if (depth === 0) {
	    return false;
	  } else if (depth < 0) {
	    depth = -1;
	  } // Assume equality for cyclic structures. The algorithm for detecting cyclic
	  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	  // Initializing stack of traversed objects.
	  // It's done here since we only need them for objects and arrays comparison.


	  aStack = aStack || [];
	  bStack = bStack || [];
	  var length = aStack.length;

	  while (length--) {
	    // Linear search. Performance is inversely proportional to the number of
	    // unique nested structures.
	    if (aStack[length] === a) {
	      return bStack[length] === b;
	    }
	  } // Add the first object to the stack of traversed objects.


	  aStack.push(a);
	  bStack.push(b); // Recursively compare objects and arrays.

	  if (areArrays) {
	    // Compare array lengths to determine if a deep comparison is necessary.
	    length = a.length;

	    if (length !== b.length) {
	      return false;
	    } // Deep compare the contents, ignoring non-numeric properties.


	    while (length--) {
	      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) {
	        return false;
	      }
	    }
	  } else {
	    // Deep compare objects.
	    var keys = Object.keys(a);
	    var key;
	    length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.

	    if (Object.keys(b).length !== length) {
	      return false;
	    }

	    while (length--) {
	      // Deep compare each member
	      key = keys[length];

	      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) {
	        return false;
	      }
	    }
	  } // Remove the first object from the stack of traversed objects.


	  aStack.pop();
	  bStack.pop();
	  return true;
	}

	function unwrap(a) {
	  if (isObservableArray(a)) {
	    return a.slice();
	  }

	  if (isES6Map(a) || isObservableMap(a)) {
	    return Array.from(a.entries());
	  }

	  if (isES6Set(a) || isObservableSet(a)) {
	    return Array.from(a.entries());
	  }

	  return a;
	}

	function makeIterable(iterator) {
	  iterator[Symbol.iterator] = getSelf;
	  return iterator;
	}

	function getSelf() {
	  return this;
	}

	function isAnnotation(thing) {
	  return (// Can be function
	    thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_)
	  );
	}

	/**
	 * (c) Michel Weststrate 2015 - 2020
	 * MIT Licensed
	 *
	 * Welcome to the mobx sources! To get a global overview of how MobX internally works,
	 * this is a good place to start:
	 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
	 *
	 * Source folders:
	 * ===============
	 *
	 * - api/     Most of the public static methods exposed by the module can be found here.
	 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
	 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
	 * - utils/   Utility stuff.
	 *
	 */
	["Symbol", "Map", "Set"].forEach(function (m) {
	  var g = getGlobal();

	  if (typeof g[m] === "undefined") {
	    die("MobX requires global '" + m + "' to be available or polyfilled");
	  }
	});

	if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
	  // See: https://github.com/andykog/mobx-devtools/
	  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
	    spy: spy,
	    extras: {
	      getDebugName: getDebugName
	    },
	    $mobx: $mobx
	  });
	}

	mobx_cjs_development.$mobx = $mobx;
	mobx_cjs_development.FlowCancellationError = FlowCancellationError;
	mobx_cjs_development.ObservableMap = ObservableMap;
	mobx_cjs_development.ObservableSet = ObservableSet;
	mobx_cjs_development.Reaction = Reaction;
	mobx_cjs_development._allowStateChanges = allowStateChanges;
	mobx_cjs_development._allowStateChangesInsideComputed = runInAction;
	mobx_cjs_development._allowStateReadsEnd = allowStateReadsEnd;
	mobx_cjs_development._allowStateReadsStart = allowStateReadsStart;
	mobx_cjs_development._autoAction = autoAction;
	mobx_cjs_development._endAction = _endAction;
	mobx_cjs_development._getAdministration = getAdministration;
	mobx_cjs_development._getGlobalState = getGlobalState;
	mobx_cjs_development._interceptReads = interceptReads;
	mobx_cjs_development._isComputingDerivation = isComputingDerivation;
	mobx_cjs_development._resetGlobalState = resetGlobalState;
	mobx_cjs_development._startAction = _startAction;
	mobx_cjs_development.action = action;
	mobx_cjs_development.autorun = autorun;
	mobx_cjs_development.comparer = comparer;
	mobx_cjs_development.computed = computed;
	mobx_cjs_development.configure = configure;
	mobx_cjs_development.createAtom = createAtom;
	mobx_cjs_development.defineProperty = apiDefineProperty;
	mobx_cjs_development.entries = entries;
	mobx_cjs_development.extendObservable = extendObservable;
	mobx_cjs_development.flow = flow;
	mobx_cjs_development.flowResult = flowResult;
	mobx_cjs_development.get = get;
	mobx_cjs_development.getAtom = getAtom;
	mobx_cjs_development.getDebugName = getDebugName;
	mobx_cjs_development.getDependencyTree = getDependencyTree;
	mobx_cjs_development.getObserverTree = getObserverTree;
	mobx_cjs_development.has = has;
	mobx_cjs_development.intercept = intercept;
	mobx_cjs_development.isAction = isAction;
	mobx_cjs_development.isBoxedObservable = isObservableValue;
	mobx_cjs_development.isComputed = isComputed;
	mobx_cjs_development.isComputedProp = isComputedProp;
	mobx_cjs_development.isFlow = isFlow;
	mobx_cjs_development.isFlowCancellationError = isFlowCancellationError;
	mobx_cjs_development.isObservable = isObservable;
	mobx_cjs_development.isObservableArray = isObservableArray;
	mobx_cjs_development.isObservableMap = isObservableMap;
	mobx_cjs_development.isObservableObject = isObservableObject;
	mobx_cjs_development.isObservableProp = isObservableProp;
	mobx_cjs_development.isObservableSet = isObservableSet;
	mobx_cjs_development.keys = keys;
	mobx_cjs_development.makeAutoObservable = makeAutoObservable;
	mobx_cjs_development.makeObservable = makeObservable;
	mobx_cjs_development.observable = observable;
	mobx_cjs_development.observe = observe;
	mobx_cjs_development.onBecomeObserved = onBecomeObserved;
	mobx_cjs_development.onBecomeUnobserved = onBecomeUnobserved;
	mobx_cjs_development.onReactionError = onReactionError;
	mobx_cjs_development.override = override;
	mobx_cjs_development.ownKeys = apiOwnKeys;
	mobx_cjs_development.reaction = reaction;
	mobx_cjs_development.remove = remove;
	mobx_cjs_development.runInAction = runInAction;
	mobx_cjs_development.set = set;
	mobx_cjs_development.spy = spy;
	mobx_cjs_development.toJS = toJS;
	mobx_cjs_development.trace = trace;
	mobx_cjs_development.transaction = transaction;
	mobx_cjs_development.untracked = untracked;
	mobx_cjs_development.values = values;
	mobx_cjs_development.when = when;

	(function (module) {

		{
		  module.exports = mobx_cjs_development;
		}
	} (dist$2));

	var esm2017 = {};

	var clearPersistedStore$1 = {};

	var PersistStoreMap = {};

	Object.defineProperty(PersistStoreMap, "__esModule", { value: true });
	PersistStoreMap.PersistStoreMap = void 0;
	/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
	PersistStoreMap.PersistStoreMap = new Map();

	Object.defineProperty(clearPersistedStore$1, "__esModule", { value: true });
	clearPersistedStore$1.clearPersistedStore = void 0;
	const PersistStoreMap_1$9 = PersistStoreMap;
	const clearPersistedStore = async (target) => {
	    var _a;
	    await ((_a = PersistStoreMap_1$9.PersistStoreMap.get(target)) === null || _a === void 0 ? void 0 : _a.clearPersistedStore());
	};
	clearPersistedStore$1.clearPersistedStore = clearPersistedStore;

	var configurePersistable$1 = {};

	Object.defineProperty(configurePersistable$1, "__esModule", { value: true });
	configurePersistable$1.configurePersistable = configurePersistable$1.mpsReactionOptions = configurePersistable$1.mpsConfig = void 0;
	configurePersistable$1.mpsConfig = {};
	configurePersistable$1.mpsReactionOptions = {};
	const configurePersistable = (config, reactionOptions = {}) => {
	    configurePersistable$1.mpsConfig = config;
	    configurePersistable$1.mpsReactionOptions = reactionOptions;
	};
	configurePersistable$1.configurePersistable = configurePersistable;

	var getPersistedStore$1 = {};

	Object.defineProperty(getPersistedStore$1, "__esModule", { value: true });
	getPersistedStore$1.getPersistedStore = void 0;
	const PersistStoreMap_1$8 = PersistStoreMap;
	const getPersistedStore = async (target) => {
	    var _a, _b;
	    return (_b = (_a = PersistStoreMap_1$8.PersistStoreMap.get(target)) === null || _a === void 0 ? void 0 : _a.getPersistedStore()) !== null && _b !== void 0 ? _b : null;
	};
	getPersistedStore$1.getPersistedStore = getPersistedStore;

	var hydrateStore$1 = {};

	Object.defineProperty(hydrateStore$1, "__esModule", { value: true });
	hydrateStore$1.hydrateStore = void 0;
	const PersistStoreMap_1$7 = PersistStoreMap;
	const hydrateStore = async (target) => {
	    var _a;
	    await ((_a = PersistStoreMap_1$7.PersistStoreMap.get(target)) === null || _a === void 0 ? void 0 : _a.hydrateStore());
	};
	hydrateStore$1.hydrateStore = hydrateStore;

	var isHydrated$1 = {};

	Object.defineProperty(isHydrated$1, "__esModule", { value: true });
	isHydrated$1.isHydrated = void 0;
	const PersistStoreMap_1$6 = PersistStoreMap;
	const isHydrated = (target) => {
	    var _a, _b;
	    return (_b = (_a = PersistStoreMap_1$6.PersistStoreMap.get(target)) === null || _a === void 0 ? void 0 : _a.isHydrated) !== null && _b !== void 0 ? _b : false;
	};
	isHydrated$1.isHydrated = isHydrated;

	var isPersisting$1 = {};

	Object.defineProperty(isPersisting$1, "__esModule", { value: true });
	isPersisting$1.isPersisting = void 0;
	const PersistStoreMap_1$5 = PersistStoreMap;
	const isPersisting = (target) => {
	    var _a, _b;
	    return (_b = (_a = PersistStoreMap_1$5.PersistStoreMap.get(target)) === null || _a === void 0 ? void 0 : _a.isPersisting) !== null && _b !== void 0 ? _b : false;
	};
	isPersisting$1.isPersisting = isPersisting;

	var makePersistable$1 = {};

	var PersistStore$1 = {};

	var StorageAdapter$1 = {};

	var utils$2 = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.isArrayForMap = exports.consoleDebug = exports.actionPersistWarningIf = exports.computedPersistWarningIf = exports.duplicatedStoreWarningIf = exports.invalidStorageAdaptorWarningIf = exports.isStorageControllerLike = exports.isFunction = exports.isObjectWithProperties = exports.isObject = exports.isDefined = exports.hasTimestampExpired = exports.buildExpireTimestamp = void 0;
		const buildExpireTimestamp = (milliseconds) => {
		    return new Date().getTime() + milliseconds;
		};
		exports.buildExpireTimestamp = buildExpireTimestamp;
		const hasTimestampExpired = (milliseconds) => {
		    const dateTimeNow = new Date().getTime();
		    const dateTimeExpiration = new Date(milliseconds).getTime();
		    return dateTimeExpiration <= dateTimeNow;
		};
		exports.hasTimestampExpired = hasTimestampExpired;
		const isDefined = (t) => t != null;
		exports.isDefined = isDefined;
		/**
		 * Check if the data is an object.
		 */
		const isObject = (data) => {
		    return Boolean(data) && Array.isArray(data) === false && typeof data === 'object';
		};
		exports.isObject = isObject;
		/**
		 * Check the data is an object with properties.
		 */
		const isObjectWithProperties = (data) => {
		    return (0, exports.isObject)(data) && Object.keys(data).length > 0;
		};
		exports.isObjectWithProperties = isObjectWithProperties;
		// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
		const isFunction = (functionToCheck) => {
		    return functionToCheck && functionToCheck instanceof Function;
		};
		exports.isFunction = isFunction;
		const isStorageControllerLike = (value) => {
		    // "typeof Storage" fixes issue with React Native
		    if (typeof Storage !== 'undefined' && value instanceof Storage) {
		        return true;
		    }
		    return [
		        value === null || value === void 0 ? void 0 : value.hasOwnProperty('getItem'),
		        value === null || value === void 0 ? void 0 : value.hasOwnProperty('removeItem'),
		        value === null || value === void 0 ? void 0 : value.hasOwnProperty('setItem'),
		        (0, exports.isFunction)(value === null || value === void 0 ? void 0 : value.getItem),
		        (0, exports.isFunction)(value === null || value === void 0 ? void 0 : value.removeItem),
		        (0, exports.isFunction)(value === null || value === void 0 ? void 0 : value.setItem),
		    ].every(Boolean);
		};
		exports.isStorageControllerLike = isStorageControllerLike;
		const isBrowser = typeof window !== 'undefined';
		const isNotProductionBuild = "development" !== 'production';
		const invalidStorageAdaptorWarningIf = (storageAdaptor, storageName) => {
		    if (isBrowser && isNotProductionBuild && !(0, exports.isStorageControllerLike)(storageAdaptor)) {
		        console.warn(`mobx-persist-store: ${storageName} does not have a valid storage adaptor.\n\n* Make sure the storage controller has 'getItem', 'setItem' and 'removeItem' methods."`);
		    }
		};
		exports.invalidStorageAdaptorWarningIf = invalidStorageAdaptorWarningIf;
		const duplicatedStoreWarningIf = (hasPersistedStoreAlready, storageName) => {
		    if (isBrowser && isNotProductionBuild && hasPersistedStoreAlready) {
		        console.warn(`mobx-persist-store: 'makePersistable' was called was called with the same storage name "${storageName}".\n\n * Make sure you call "stopPersisting" before recreating "${storageName}" to avoid memory leaks. \n * Or double check you did not have two stores with the same name.`);
		    }
		};
		exports.duplicatedStoreWarningIf = duplicatedStoreWarningIf;
		const computedPersistWarningIf = (isComputedProperty, propertyName) => {
		    if (isBrowser && isNotProductionBuild && isComputedProperty) {
		        console.warn(`mobx-persist-store: The property '${propertyName}' is computed and will not persist.`);
		    }
		};
		exports.computedPersistWarningIf = computedPersistWarningIf;
		const actionPersistWarningIf = (isComputedProperty, propertyName) => {
		    if (isBrowser && isNotProductionBuild && isComputedProperty) {
		        console.warn(`mobx-persist-store: The property '${propertyName}' is an action and will not persist.`);
		    }
		};
		exports.actionPersistWarningIf = actionPersistWarningIf;
		const consoleDebug = (isDebugMode, message, content = '') => {
		    if (isDebugMode && isBrowser && isNotProductionBuild) {
		        console.info(`%c mobx-persist-store: (Debug Mode) ${message} `, 'background: #4B8CC5; color: black; display: block;', content);
		    }
		};
		exports.consoleDebug = consoleDebug;
		const isArrayForMap = (value) => {
		    if (Array.isArray(value)) {
		        return value.every((v) => Array.isArray(v));
		    }
		    return false;
		};
		exports.isArrayForMap = isArrayForMap;
	} (utils$2));

	Object.defineProperty(StorageAdapter$1, "__esModule", { value: true });
	StorageAdapter$1.StorageAdapter = void 0;
	const utils_1$3 = utils$2;
	class StorageAdapter {
	    constructor(options) {
	        this.options = options;
	    }
	    async setItem(key, item) {
	        var _a;
	        const { stringify = true, debugMode = false } = this.options;
	        const data = this.options.expireIn
	            ? Object.assign({}, item, {
	                __mps__: {
	                    expireInTimestamp: (0, utils_1$3.buildExpireTimestamp)(this.options.expireIn),
	                },
	            })
	            : item;
	        const content = stringify ? JSON.stringify(data) : data;
	        (0, utils_1$3.consoleDebug)(debugMode, `${key} - setItem:`, content);
	        await ((_a = this.options.storage) === null || _a === void 0 ? void 0 : _a.setItem(key, content));
	    }
	    async getItem(key) {
	        var _a, _b;
	        const { removeOnExpiration = true, debugMode = false } = this.options;
	        const storageData = await ((_a = this.options.storage) === null || _a === void 0 ? void 0 : _a.getItem(key));
	        let parsedData;
	        try {
	            parsedData = JSON.parse(storageData) || {};
	        }
	        catch (error) {
	            parsedData = storageData || {};
	        }
	        const hasExpired = (0, utils_1$3.hasTimestampExpired)((_b = parsedData.__mps__) === null || _b === void 0 ? void 0 : _b.expireInTimestamp);
	        (0, utils_1$3.consoleDebug)(debugMode, `${key} - hasExpired`, hasExpired);
	        if (hasExpired && removeOnExpiration) {
	            await this.removeItem(key);
	        }
	        parsedData = hasExpired ? {} : parsedData;
	        (0, utils_1$3.consoleDebug)(debugMode, `${key} - (getItem):`, parsedData);
	        return parsedData;
	    }
	    async removeItem(key) {
	        var _a;
	        const { debugMode = false } = this.options;
	        (0, utils_1$3.consoleDebug)(debugMode, `${key} - (removeItem): storage was removed`);
	        await ((_a = this.options.storage) === null || _a === void 0 ? void 0 : _a.removeItem(key));
	    }
	}
	StorageAdapter$1.StorageAdapter = StorageAdapter;

	var serializableProperty = {};

	Object.defineProperty(serializableProperty, "__esModule", { value: true });
	serializableProperty.makeSerializableProperties = void 0;
	const configurePersistable_1$1 = configurePersistable$1;
	const utils_1$2 = utils$2;
	const isSerializableProperty = (obj) => {
	    const keys = ['key', 'serialize', 'deserialize'];
	    if (!(0, utils_1$2.isObject)(obj)) {
	        (0, utils_1$2.consoleDebug)(!!configurePersistable_1$1.mpsConfig.debugMode, 'passed value is not an object', { obj });
	        return false;
	    }
	    return keys.every((key) => {
	        if (obj.hasOwnProperty(key) && typeof key !== 'undefined') {
	            return true;
	        }
	        (0, utils_1$2.consoleDebug)(!!configurePersistable_1$1.mpsConfig.debugMode, `${key} not found in SerializableProperty`, { key, obj });
	        return false;
	    });
	};
	const makeSerializableProperties = (properties) => {
	    return properties.reduce((acc, curr) => {
	        if (typeof curr === 'string') {
	            acc.push({
	                key: curr,
	                serialize: (value) => value,
	                deserialize: (value) => value
	            });
	            return acc;
	        }
	        if (isSerializableProperty(curr)) {
	            acc.push(curr);
	            return acc;
	        }
	        return acc;
	    }, []);
	};
	serializableProperty.makeSerializableProperties = makeSerializableProperties;

	Object.defineProperty(PersistStore$1, "__esModule", { value: true });
	PersistStore$1.PersistStore = void 0;
	const mobx_1 = dist$2.exports;
	const PersistStoreMap_1$4 = PersistStoreMap;
	const StorageAdapter_1 = StorageAdapter$1;
	const configurePersistable_1 = configurePersistable$1;
	const serializableProperty_1 = serializableProperty;
	const utils_1$1 = utils$2;
	class PersistStore {
	    constructor(target, options, reactionOptions = {}) {
	        var _a, _b, _c, _d, _e, _f, _g;
	        this.cancelWatch = null;
	        this.properties = [];
	        this.reactionOptions = {};
	        this.storageAdapter = null;
	        this.target = null;
	        this.debugMode = false;
	        this.isHydrated = false;
	        this.isPersisting = false;
	        this.storageName = '';
	        this.target = target;
	        this.storageName = options.name;
	        this.properties = (0, serializableProperty_1.makeSerializableProperties)(options.properties);
	        this.reactionOptions = Object.assign({ fireImmediately: true }, configurePersistable_1.mpsReactionOptions, reactionOptions);
	        this.debugMode = (_b = (_a = options.debugMode) !== null && _a !== void 0 ? _a : configurePersistable_1.mpsConfig.debugMode) !== null && _b !== void 0 ? _b : false;
	        this.storageAdapter = new StorageAdapter_1.StorageAdapter({
	            expireIn: (_c = options.expireIn) !== null && _c !== void 0 ? _c : configurePersistable_1.mpsConfig.expireIn,
	            removeOnExpiration: (_e = (_d = options.removeOnExpiration) !== null && _d !== void 0 ? _d : configurePersistable_1.mpsConfig.removeOnExpiration) !== null && _e !== void 0 ? _e : true,
	            stringify: (_g = (_f = options.stringify) !== null && _f !== void 0 ? _f : configurePersistable_1.mpsConfig.stringify) !== null && _g !== void 0 ? _g : true,
	            storage: options.storage ? options.storage : configurePersistable_1.mpsConfig.storage,
	            debugMode: this.debugMode,
	        });
	        (0, mobx_1.makeObservable)(this, {
	            clearPersistedStore: mobx_1.action,
	            hydrateStore: mobx_1.action,
	            isHydrated: mobx_1.observable,
	            isPersisting: mobx_1.observable,
	            pausePersisting: mobx_1.action,
	            startPersisting: mobx_1.action,
	            stopPersisting: mobx_1.action,
	        }, { autoBind: true, deep: false });
	        (0, utils_1$1.invalidStorageAdaptorWarningIf)(this.storageAdapter.options.storage, this.storageName);
	        (0, utils_1$1.consoleDebug)(this.debugMode, `${this.storageName} - (makePersistable)`, {
	            properties: this.properties,
	            storageAdapter: this.storageAdapter,
	            reactionOptions: this.reactionOptions,
	        });
	    }
	    async init() {
	        await this.hydrateStore();
	        this.startPersisting();
	        return this;
	    }
	    async hydrateStore() {
	        // If the user calls stopPersist and then rehydrateStore we don't want to automatically call startPersist below
	        const isBeingWatched = Boolean(this.cancelWatch);
	        if (this.isPersisting) {
	            this.pausePersisting();
	        }
	        (0, mobx_1.runInAction)(() => {
	            this.isHydrated = false;
	            (0, utils_1$1.consoleDebug)(this.debugMode, `${this.storageName} - (hydrateStore) isHydrated:`, this.isHydrated);
	        });
	        if (this.storageAdapter && this.target) {
	            const data = await this.storageAdapter.getItem(this.storageName);
	            // Reassigning so TypeScript doesn't complain (Object is possibly 'null') about this.target within forEach
	            const target = this.target;
	            if (data) {
	                (0, mobx_1.runInAction)(() => {
	                    this.properties.forEach((property) => {
	                        const allowPropertyHydration = [
	                            target.hasOwnProperty(property.key),
	                            typeof data[property.key] !== 'undefined',
	                        ].every(Boolean);
	                        if (allowPropertyHydration) {
	                            const propertyData = data[property.key];
	                            if (target[property.key] instanceof mobx_1.ObservableMap && (0, utils_1$1.isArrayForMap)(propertyData)) {
	                                target[property.key] = property.deserialize(new Map(propertyData));
	                            }
	                            else {
	                                target[property.key] = property.deserialize(propertyData);
	                            }
	                        }
	                    });
	                });
	            }
	        }
	        (0, mobx_1.runInAction)(() => {
	            this.isHydrated = true;
	            (0, utils_1$1.consoleDebug)(this.debugMode, `${this.storageName} - isHydrated:`, this.isHydrated);
	        });
	        if (isBeingWatched) {
	            this.startPersisting();
	        }
	    }
	    startPersisting() {
	        if (!this.storageAdapter || !this.target || this.cancelWatch) {
	            return;
	        }
	        // Reassigning so TypeScript doesn't complain (Object is possibly 'null') about and this.target within reaction
	        const target = this.target;
	        this.cancelWatch = (0, mobx_1.reaction)(() => {
	            const propertiesToWatch = {};
	            this.properties.forEach((property) => {
	                const isComputedProperty = (0, mobx_1.isComputedProp)(target, property.key);
	                const isActionProperty = (0, mobx_1.isAction)(target[property.key]);
	                (0, utils_1$1.computedPersistWarningIf)(isComputedProperty, String(property.key));
	                (0, utils_1$1.actionPersistWarningIf)(isActionProperty, String(property.key));
	                if (!isComputedProperty && !isActionProperty) {
	                    let propertyData = property.serialize(target[property.key]);
	                    if (propertyData instanceof mobx_1.ObservableMap) {
	                        const mapArray = [];
	                        propertyData.forEach((v, k) => {
	                            mapArray.push([k, (0, mobx_1.toJS)(v)]);
	                        });
	                        propertyData = mapArray;
	                    }
	                    propertiesToWatch[property.key] = (0, mobx_1.toJS)(propertyData);
	                }
	            });
	            return propertiesToWatch;
	        }, async (dataToSave) => {
	            if (this.storageAdapter) {
	                await this.storageAdapter.setItem(this.storageName, dataToSave);
	            }
	        }, this.reactionOptions);
	        this.isPersisting = true;
	        (0, utils_1$1.consoleDebug)(this.debugMode, `${this.storageName} - (startPersisting) isPersisting:`, this.isPersisting);
	    }
	    pausePersisting() {
	        this.isPersisting = false;
	        (0, utils_1$1.consoleDebug)(this.debugMode, `${this.storageName} - pausePersisting (isPersisting):`, this.isPersisting);
	        if (this.cancelWatch) {
	            this.cancelWatch();
	            this.cancelWatch = null;
	        }
	    }
	    stopPersisting() {
	        this.pausePersisting();
	        (0, utils_1$1.consoleDebug)(this.debugMode, `${this.storageName} - (stopPersisting)`);
	        PersistStoreMap_1$4.PersistStoreMap.delete(this.target);
	        this.cancelWatch = null;
	        this.properties = [];
	        this.reactionOptions = {};
	        this.storageAdapter = null;
	        this.target = null;
	    }
	    async clearPersistedStore() {
	        if (this.storageAdapter) {
	            (0, utils_1$1.consoleDebug)(this.debugMode, `${this.storageName} - (clearPersistedStore)`);
	            await this.storageAdapter.removeItem(this.storageName);
	        }
	    }
	    async getPersistedStore() {
	        if (this.storageAdapter) {
	            (0, utils_1$1.consoleDebug)(this.debugMode, `${this.storageName} - (getPersistedStore)`);
	            // @ts-ignore
	            return this.storageAdapter.getItem(this.storageName);
	        }
	        return null;
	    }
	}
	PersistStore$1.PersistStore = PersistStore;

	Object.defineProperty(makePersistable$1, "__esModule", { value: true });
	makePersistable$1.makePersistable = void 0;
	const PersistStore_1 = PersistStore$1;
	const PersistStoreMap_1$3 = PersistStoreMap;
	const utils_1 = utils$2;
	const makePersistable = async (target, storageOptions, reactionOptions) => {
	    const mobxPersistStore = new PersistStore_1.PersistStore(target, storageOptions, reactionOptions);
	    const hasPersistedStoreAlready = Array.from(PersistStoreMap_1$3.PersistStoreMap.values())
	        .map((item) => item.storageName)
	        .includes(mobxPersistStore.storageName);
	    (0, utils_1.duplicatedStoreWarningIf)(hasPersistedStoreAlready, mobxPersistStore.storageName);
	    PersistStoreMap_1$3.PersistStoreMap.set(target, mobxPersistStore);
	    return mobxPersistStore.init();
	};
	makePersistable$1.makePersistable = makePersistable;

	var pausePersisting$1 = {};

	Object.defineProperty(pausePersisting$1, "__esModule", { value: true });
	pausePersisting$1.pausePersisting = void 0;
	const PersistStoreMap_1$2 = PersistStoreMap;
	const pausePersisting = (target) => {
	    var _a;
	    (_a = PersistStoreMap_1$2.PersistStoreMap.get(target)) === null || _a === void 0 ? void 0 : _a.pausePersisting();
	};
	pausePersisting$1.pausePersisting = pausePersisting;

	var startPersisting$1 = {};

	Object.defineProperty(startPersisting$1, "__esModule", { value: true });
	startPersisting$1.startPersisting = void 0;
	const PersistStoreMap_1$1 = PersistStoreMap;
	const startPersisting = (target) => {
	    var _a;
	    (_a = PersistStoreMap_1$1.PersistStoreMap.get(target)) === null || _a === void 0 ? void 0 : _a.startPersisting();
	};
	startPersisting$1.startPersisting = startPersisting;

	var stopPersisting$1 = {};

	Object.defineProperty(stopPersisting$1, "__esModule", { value: true });
	stopPersisting$1.stopPersisting = void 0;
	const PersistStoreMap_1 = PersistStoreMap;
	const stopPersisting = (target) => {
	    var _a;
	    (_a = PersistStoreMap_1.PersistStoreMap.get(target)) === null || _a === void 0 ? void 0 : _a.stopPersisting();
	};
	stopPersisting$1.stopPersisting = stopPersisting;

	var types = {};

	Object.defineProperty(types, "__esModule", { value: true });

	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(clearPersistedStore$1, exports);
		__exportStar(configurePersistable$1, exports);
		__exportStar(getPersistedStore$1, exports);
		__exportStar(hydrateStore$1, exports);
		__exportStar(isHydrated$1, exports);
		__exportStar(isPersisting$1, exports);
		__exportStar(makePersistable$1, exports);
		__exportStar(pausePersisting$1, exports);
		__exportStar(PersistStore$1, exports);
		__exportStar(PersistStoreMap, exports);
		__exportStar(startPersisting$1, exports);
		__exportStar(stopPersisting$1, exports);
		__exportStar(StorageAdapter$1, exports);
		__exportStar(types, exports);
	} (esm2017));

	function commonjsRequire(path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var localforage = {exports: {}};

	/*!
	    localForage -- Offline Storage, Improved
	    Version 1.10.0
	    https://localforage.github.io/localForage
	    (c) 2013-2017 Mozilla, Apache License 2.0
	*/

	(function (module, exports) {
		(function(f){{module.exports=f();}})(function(){return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof commonjsRequire=="function"&&commonjsRequire;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw (f.code="MODULE_NOT_FOUND", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r);}return n[o].exports}var i=typeof commonjsRequire=="function"&&commonjsRequire;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
		(function (global){
		var Mutation = global.MutationObserver || global.WebKitMutationObserver;

		var scheduleDrain;

		{
		  if (Mutation) {
		    var called = 0;
		    var observer = new Mutation(nextTick);
		    var element = global.document.createTextNode('');
		    observer.observe(element, {
		      characterData: true
		    });
		    scheduleDrain = function () {
		      element.data = (called = ++called % 2);
		    };
		  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
		    var channel = new global.MessageChannel();
		    channel.port1.onmessage = nextTick;
		    scheduleDrain = function () {
		      channel.port2.postMessage(0);
		    };
		  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
		    scheduleDrain = function () {

		      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
		      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
		      var scriptEl = global.document.createElement('script');
		      scriptEl.onreadystatechange = function () {
		        nextTick();

		        scriptEl.onreadystatechange = null;
		        scriptEl.parentNode.removeChild(scriptEl);
		        scriptEl = null;
		      };
		      global.document.documentElement.appendChild(scriptEl);
		    };
		  } else {
		    scheduleDrain = function () {
		      setTimeout(nextTick, 0);
		    };
		  }
		}

		var draining;
		var queue = [];
		//named nextTick for less confusing stack traces
		function nextTick() {
		  draining = true;
		  var i, oldQueue;
		  var len = queue.length;
		  while (len) {
		    oldQueue = queue;
		    queue = [];
		    i = -1;
		    while (++i < len) {
		      oldQueue[i]();
		    }
		    len = queue.length;
		  }
		  draining = false;
		}

		module.exports = immediate;
		function immediate(task) {
		  if (queue.push(task) === 1 && !draining) {
		    scheduleDrain();
		  }
		}

		}).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
		},{}],2:[function(_dereq_,module,exports){
		var immediate = _dereq_(1);

		/* istanbul ignore next */
		function INTERNAL() {}

		var handlers = {};

		var REJECTED = ['REJECTED'];
		var FULFILLED = ['FULFILLED'];
		var PENDING = ['PENDING'];

		module.exports = Promise;

		function Promise(resolver) {
		  if (typeof resolver !== 'function') {
		    throw new TypeError('resolver must be a function');
		  }
		  this.state = PENDING;
		  this.queue = [];
		  this.outcome = void 0;
		  if (resolver !== INTERNAL) {
		    safelyResolveThenable(this, resolver);
		  }
		}

		Promise.prototype["catch"] = function (onRejected) {
		  return this.then(null, onRejected);
		};
		Promise.prototype.then = function (onFulfilled, onRejected) {
		  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
		    typeof onRejected !== 'function' && this.state === REJECTED) {
		    return this;
		  }
		  var promise = new this.constructor(INTERNAL);
		  if (this.state !== PENDING) {
		    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
		    unwrap(promise, resolver, this.outcome);
		  } else {
		    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
		  }

		  return promise;
		};
		function QueueItem(promise, onFulfilled, onRejected) {
		  this.promise = promise;
		  if (typeof onFulfilled === 'function') {
		    this.onFulfilled = onFulfilled;
		    this.callFulfilled = this.otherCallFulfilled;
		  }
		  if (typeof onRejected === 'function') {
		    this.onRejected = onRejected;
		    this.callRejected = this.otherCallRejected;
		  }
		}
		QueueItem.prototype.callFulfilled = function (value) {
		  handlers.resolve(this.promise, value);
		};
		QueueItem.prototype.otherCallFulfilled = function (value) {
		  unwrap(this.promise, this.onFulfilled, value);
		};
		QueueItem.prototype.callRejected = function (value) {
		  handlers.reject(this.promise, value);
		};
		QueueItem.prototype.otherCallRejected = function (value) {
		  unwrap(this.promise, this.onRejected, value);
		};

		function unwrap(promise, func, value) {
		  immediate(function () {
		    var returnValue;
		    try {
		      returnValue = func(value);
		    } catch (e) {
		      return handlers.reject(promise, e);
		    }
		    if (returnValue === promise) {
		      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
		    } else {
		      handlers.resolve(promise, returnValue);
		    }
		  });
		}

		handlers.resolve = function (self, value) {
		  var result = tryCatch(getThen, value);
		  if (result.status === 'error') {
		    return handlers.reject(self, result.value);
		  }
		  var thenable = result.value;

		  if (thenable) {
		    safelyResolveThenable(self, thenable);
		  } else {
		    self.state = FULFILLED;
		    self.outcome = value;
		    var i = -1;
		    var len = self.queue.length;
		    while (++i < len) {
		      self.queue[i].callFulfilled(value);
		    }
		  }
		  return self;
		};
		handlers.reject = function (self, error) {
		  self.state = REJECTED;
		  self.outcome = error;
		  var i = -1;
		  var len = self.queue.length;
		  while (++i < len) {
		    self.queue[i].callRejected(error);
		  }
		  return self;
		};

		function getThen(obj) {
		  // Make sure we only access the accessor once as required by the spec
		  var then = obj && obj.then;
		  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {
		    return function appyThen() {
		      then.apply(obj, arguments);
		    };
		  }
		}

		function safelyResolveThenable(self, thenable) {
		  // Either fulfill, reject or reject with error
		  var called = false;
		  function onError(value) {
		    if (called) {
		      return;
		    }
		    called = true;
		    handlers.reject(self, value);
		  }

		  function onSuccess(value) {
		    if (called) {
		      return;
		    }
		    called = true;
		    handlers.resolve(self, value);
		  }

		  function tryToUnwrap() {
		    thenable(onSuccess, onError);
		  }

		  var result = tryCatch(tryToUnwrap);
		  if (result.status === 'error') {
		    onError(result.value);
		  }
		}

		function tryCatch(func, value) {
		  var out = {};
		  try {
		    out.value = func(value);
		    out.status = 'success';
		  } catch (e) {
		    out.status = 'error';
		    out.value = e;
		  }
		  return out;
		}

		Promise.resolve = resolve;
		function resolve(value) {
		  if (value instanceof this) {
		    return value;
		  }
		  return handlers.resolve(new this(INTERNAL), value);
		}

		Promise.reject = reject;
		function reject(reason) {
		  var promise = new this(INTERNAL);
		  return handlers.reject(promise, reason);
		}

		Promise.all = all;
		function all(iterable) {
		  var self = this;
		  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
		    return this.reject(new TypeError('must be an array'));
		  }

		  var len = iterable.length;
		  var called = false;
		  if (!len) {
		    return this.resolve([]);
		  }

		  var values = new Array(len);
		  var resolved = 0;
		  var i = -1;
		  var promise = new this(INTERNAL);

		  while (++i < len) {
		    allResolver(iterable[i], i);
		  }
		  return promise;
		  function allResolver(value, i) {
		    self.resolve(value).then(resolveFromAll, function (error) {
		      if (!called) {
		        called = true;
		        handlers.reject(promise, error);
		      }
		    });
		    function resolveFromAll(outValue) {
		      values[i] = outValue;
		      if (++resolved === len && !called) {
		        called = true;
		        handlers.resolve(promise, values);
		      }
		    }
		  }
		}

		Promise.race = race;
		function race(iterable) {
		  var self = this;
		  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
		    return this.reject(new TypeError('must be an array'));
		  }

		  var len = iterable.length;
		  var called = false;
		  if (!len) {
		    return this.resolve([]);
		  }

		  var i = -1;
		  var promise = new this(INTERNAL);

		  while (++i < len) {
		    resolver(iterable[i]);
		  }
		  return promise;
		  function resolver(value) {
		    self.resolve(value).then(function (response) {
		      if (!called) {
		        called = true;
		        handlers.resolve(promise, response);
		      }
		    }, function (error) {
		      if (!called) {
		        called = true;
		        handlers.reject(promise, error);
		      }
		    });
		  }
		}

		},{"1":1}],3:[function(_dereq_,module,exports){
		(function (global){
		if (typeof global.Promise !== 'function') {
		  global.Promise = _dereq_(2);
		}

		}).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
		},{"2":2}],4:[function(_dereq_,module,exports){

		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		function getIDB() {
		    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */
		    try {
		        if (typeof indexedDB !== 'undefined') {
		            return indexedDB;
		        }
		        if (typeof webkitIndexedDB !== 'undefined') {
		            return webkitIndexedDB;
		        }
		        if (typeof mozIndexedDB !== 'undefined') {
		            return mozIndexedDB;
		        }
		        if (typeof OIndexedDB !== 'undefined') {
		            return OIndexedDB;
		        }
		        if (typeof msIndexedDB !== 'undefined') {
		            return msIndexedDB;
		        }
		    } catch (e) {
		        return;
		    }
		}

		var idb = getIDB();

		function isIndexedDBValid() {
		    try {
		        // Initialize IndexedDB; fall back to vendor-prefixed versions
		        // if needed.
		        if (!idb || !idb.open) {
		            return false;
		        }
		        // We mimic PouchDB here;
		        //
		        // We test for openDatabase because IE Mobile identifies itself
		        // as Safari. Oh the lulz...
		        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);

		        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;

		        // Safari <10.1 does not meet our requirements for IDB support
		        // (see: https://github.com/pouchdb/pouchdb/issues/5572).
		        // Safari 10.1 shipped with fetch, we can use that to detect it.
		        // Note: this creates issues with `window.fetch` polyfills and
		        // overrides; see:
		        // https://github.com/localForage/localForage/issues/856
		        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&
		        // some outdated implementations of IDB that appear on Samsung
		        // and HTC Android devices <4.4 are missing IDBKeyRange
		        // See: https://github.com/mozilla/localForage/issues/128
		        // See: https://github.com/mozilla/localForage/issues/272
		        typeof IDBKeyRange !== 'undefined';
		    } catch (e) {
		        return false;
		    }
		}

		// Abstracts constructing a Blob object, so it also works in older
		// browsers that don't support the native Blob constructor. (i.e.
		// old QtWebKit versions, at least).
		// Abstracts constructing a Blob object, so it also works in older
		// browsers that don't support the native Blob constructor. (i.e.
		// old QtWebKit versions, at least).
		function createBlob(parts, properties) {
		    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
		    parts = parts || [];
		    properties = properties || {};
		    try {
		        return new Blob(parts, properties);
		    } catch (e) {
		        if (e.name !== 'TypeError') {
		            throw e;
		        }
		        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;
		        var builder = new Builder();
		        for (var i = 0; i < parts.length; i += 1) {
		            builder.append(parts[i]);
		        }
		        return builder.getBlob(properties.type);
		    }
		}

		// This is CommonJS because lie is an external dependency, so Rollup
		// can just ignore it.
		if (typeof Promise === 'undefined') {
		    // In the "nopromises" build this will just throw if you don't have
		    // a global promise object, but it would throw anyway later.
		    _dereq_(3);
		}
		var Promise$1 = Promise;

		function executeCallback(promise, callback) {
		    if (callback) {
		        promise.then(function (result) {
		            callback(null, result);
		        }, function (error) {
		            callback(error);
		        });
		    }
		}

		function executeTwoCallbacks(promise, callback, errorCallback) {
		    if (typeof callback === 'function') {
		        promise.then(callback);
		    }

		    if (typeof errorCallback === 'function') {
		        promise["catch"](errorCallback);
		    }
		}

		function normalizeKey(key) {
		    // Cast the key to a string, as that's all we can set as a key.
		    if (typeof key !== 'string') {
		        console.warn(key + ' used as a key, but it is not a string.');
		        key = String(key);
		    }

		    return key;
		}

		function getCallback() {
		    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {
		        return arguments[arguments.length - 1];
		    }
		}

		// Some code originally from async_storage.js in
		// [Gaia](https://github.com/mozilla-b2g/gaia).

		var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';
		var supportsBlobs = void 0;
		var dbContexts = {};
		var toString = Object.prototype.toString;

		// Transaction Modes
		var READ_ONLY = 'readonly';
		var READ_WRITE = 'readwrite';

		// Transform a binary string to an array buffer, because otherwise
		// weird stuff happens when you try to work with the binary string directly.
		// It is known.
		// From http://stackoverflow.com/questions/14967647/ (continues on next line)
		// encode-decode-image-with-base64-breaks-image (2013-04-21)
		function _binStringToArrayBuffer(bin) {
		    var length = bin.length;
		    var buf = new ArrayBuffer(length);
		    var arr = new Uint8Array(buf);
		    for (var i = 0; i < length; i++) {
		        arr[i] = bin.charCodeAt(i);
		    }
		    return buf;
		}

		//
		// Blobs are not supported in all versions of IndexedDB, notably
		// Chrome <37 and Android <5. In those versions, storing a blob will throw.
		//
		// Various other blob bugs exist in Chrome v37-42 (inclusive).
		// Detecting them is expensive and confusing to users, and Chrome 37-42
		// is at very low usage worldwide, so we do a hacky userAgent check instead.
		//
		// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
		// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
		// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
		//
		// Code borrowed from PouchDB. See:
		// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
		//
		function _checkBlobSupportWithoutCaching(idb) {
		    return new Promise$1(function (resolve) {
		        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
		        var blob = createBlob(['']);
		        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');

		        txn.onabort = function (e) {
		            // If the transaction aborts now its due to not being able to
		            // write to the database, likely due to the disk being full
		            e.preventDefault();
		            e.stopPropagation();
		            resolve(false);
		        };

		        txn.oncomplete = function () {
		            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
		            var matchedEdge = navigator.userAgent.match(/Edge\//);
		            // MS Edge pretends to be Chrome 42:
		            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
		            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
		        };
		    })["catch"](function () {
		        return false; // error, so assume unsupported
		    });
		}

		function _checkBlobSupport(idb) {
		    if (typeof supportsBlobs === 'boolean') {
		        return Promise$1.resolve(supportsBlobs);
		    }
		    return _checkBlobSupportWithoutCaching(idb).then(function (value) {
		        supportsBlobs = value;
		        return supportsBlobs;
		    });
		}

		function _deferReadiness(dbInfo) {
		    var dbContext = dbContexts[dbInfo.name];

		    // Create a deferred object representing the current database operation.
		    var deferredOperation = {};

		    deferredOperation.promise = new Promise$1(function (resolve, reject) {
		        deferredOperation.resolve = resolve;
		        deferredOperation.reject = reject;
		    });

		    // Enqueue the deferred operation.
		    dbContext.deferredOperations.push(deferredOperation);

		    // Chain its promise to the database readiness.
		    if (!dbContext.dbReady) {
		        dbContext.dbReady = deferredOperation.promise;
		    } else {
		        dbContext.dbReady = dbContext.dbReady.then(function () {
		            return deferredOperation.promise;
		        });
		    }
		}

		function _advanceReadiness(dbInfo) {
		    var dbContext = dbContexts[dbInfo.name];

		    // Dequeue a deferred operation.
		    var deferredOperation = dbContext.deferredOperations.pop();

		    // Resolve its promise (which is part of the database readiness
		    // chain of promises).
		    if (deferredOperation) {
		        deferredOperation.resolve();
		        return deferredOperation.promise;
		    }
		}

		function _rejectReadiness(dbInfo, err) {
		    var dbContext = dbContexts[dbInfo.name];

		    // Dequeue a deferred operation.
		    var deferredOperation = dbContext.deferredOperations.pop();

		    // Reject its promise (which is part of the database readiness
		    // chain of promises).
		    if (deferredOperation) {
		        deferredOperation.reject(err);
		        return deferredOperation.promise;
		    }
		}

		function _getConnection(dbInfo, upgradeNeeded) {
		    return new Promise$1(function (resolve, reject) {
		        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();

		        if (dbInfo.db) {
		            if (upgradeNeeded) {
		                _deferReadiness(dbInfo);
		                dbInfo.db.close();
		            } else {
		                return resolve(dbInfo.db);
		            }
		        }

		        var dbArgs = [dbInfo.name];

		        if (upgradeNeeded) {
		            dbArgs.push(dbInfo.version);
		        }

		        var openreq = idb.open.apply(idb, dbArgs);

		        if (upgradeNeeded) {
		            openreq.onupgradeneeded = function (e) {
		                var db = openreq.result;
		                try {
		                    db.createObjectStore(dbInfo.storeName);
		                    if (e.oldVersion <= 1) {
		                        // Added when support for blob shims was added
		                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
		                    }
		                } catch (ex) {
		                    if (ex.name === 'ConstraintError') {
		                        console.warn('The database "' + dbInfo.name + '"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
		                    } else {
		                        throw ex;
		                    }
		                }
		            };
		        }

		        openreq.onerror = function (e) {
		            e.preventDefault();
		            reject(openreq.error);
		        };

		        openreq.onsuccess = function () {
		            var db = openreq.result;
		            db.onversionchange = function (e) {
		                // Triggered when the database is modified (e.g. adding an objectStore) or
		                // deleted (even when initiated by other sessions in different tabs).
		                // Closing the connection here prevents those operations from being blocked.
		                // If the database is accessed again later by this instance, the connection
		                // will be reopened or the database recreated as needed.
		                e.target.close();
		            };
		            resolve(db);
		            _advanceReadiness(dbInfo);
		        };
		    });
		}

		function _getOriginalConnection(dbInfo) {
		    return _getConnection(dbInfo, false);
		}

		function _getUpgradedConnection(dbInfo) {
		    return _getConnection(dbInfo, true);
		}

		function _isUpgradeNeeded(dbInfo, defaultVersion) {
		    if (!dbInfo.db) {
		        return true;
		    }

		    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
		    var isDowngrade = dbInfo.version < dbInfo.db.version;
		    var isUpgrade = dbInfo.version > dbInfo.db.version;

		    if (isDowngrade) {
		        // If the version is not the default one
		        // then warn for impossible downgrade.
		        if (dbInfo.version !== defaultVersion) {
		            console.warn('The database "' + dbInfo.name + '"' + " can't be downgraded from version " + dbInfo.db.version + ' to version ' + dbInfo.version + '.');
		        }
		        // Align the versions to prevent errors.
		        dbInfo.version = dbInfo.db.version;
		    }

		    if (isUpgrade || isNewStore) {
		        // If the store is new then increment the version (if needed).
		        // This will trigger an "upgradeneeded" event which is required
		        // for creating a store.
		        if (isNewStore) {
		            var incVersion = dbInfo.db.version + 1;
		            if (incVersion > dbInfo.version) {
		                dbInfo.version = incVersion;
		            }
		        }

		        return true;
		    }

		    return false;
		}

		// encode a blob for indexeddb engines that don't support blobs
		function _encodeBlob(blob) {
		    return new Promise$1(function (resolve, reject) {
		        var reader = new FileReader();
		        reader.onerror = reject;
		        reader.onloadend = function (e) {
		            var base64 = btoa(e.target.result || '');
		            resolve({
		                __local_forage_encoded_blob: true,
		                data: base64,
		                type: blob.type
		            });
		        };
		        reader.readAsBinaryString(blob);
		    });
		}

		// decode an encoded blob
		function _decodeBlob(encodedBlob) {
		    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
		    return createBlob([arrayBuff], { type: encodedBlob.type });
		}

		// is this one of our fancy encoded blobs?
		function _isEncodedBlob(value) {
		    return value && value.__local_forage_encoded_blob;
		}

		// Specialize the default `ready()` function by making it dependent
		// on the current database operations. Thus, the driver will be actually
		// ready when it's been initialized (default) *and* there are no pending
		// operations on the database (initiated by some other instances).
		function _fullyReady(callback) {
		    var self = this;

		    var promise = self._initReady().then(function () {
		        var dbContext = dbContexts[self._dbInfo.name];

		        if (dbContext && dbContext.dbReady) {
		            return dbContext.dbReady;
		        }
		    });

		    executeTwoCallbacks(promise, callback, callback);
		    return promise;
		}

		// Try to establish a new db connection to replace the
		// current one which is broken (i.e. experiencing
		// InvalidStateError while creating a transaction).
		function _tryReconnect(dbInfo) {
		    _deferReadiness(dbInfo);

		    var dbContext = dbContexts[dbInfo.name];
		    var forages = dbContext.forages;

		    for (var i = 0; i < forages.length; i++) {
		        var forage = forages[i];
		        if (forage._dbInfo.db) {
		            forage._dbInfo.db.close();
		            forage._dbInfo.db = null;
		        }
		    }
		    dbInfo.db = null;

		    return _getOriginalConnection(dbInfo).then(function (db) {
		        dbInfo.db = db;
		        if (_isUpgradeNeeded(dbInfo)) {
		            // Reopen the database for upgrading.
		            return _getUpgradedConnection(dbInfo);
		        }
		        return db;
		    }).then(function (db) {
		        // store the latest db reference
		        // in case the db was upgraded
		        dbInfo.db = dbContext.db = db;
		        for (var i = 0; i < forages.length; i++) {
		            forages[i]._dbInfo.db = db;
		        }
		    })["catch"](function (err) {
		        _rejectReadiness(dbInfo, err);
		        throw err;
		    });
		}

		// FF doesn't like Promises (micro-tasks) and IDDB store operations,
		// so we have to do it with callbacks
		function createTransaction(dbInfo, mode, callback, retries) {
		    if (retries === undefined) {
		        retries = 1;
		    }

		    try {
		        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
		        callback(null, tx);
		    } catch (err) {
		        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {
		            return Promise$1.resolve().then(function () {
		                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
		                    // increase the db version, to create the new ObjectStore
		                    if (dbInfo.db) {
		                        dbInfo.version = dbInfo.db.version + 1;
		                    }
		                    // Reopen the database for upgrading.
		                    return _getUpgradedConnection(dbInfo);
		                }
		            }).then(function () {
		                return _tryReconnect(dbInfo).then(function () {
		                    createTransaction(dbInfo, mode, callback, retries - 1);
		                });
		            })["catch"](callback);
		        }

		        callback(err);
		    }
		}

		function createDbContext() {
		    return {
		        // Running localForages sharing a database.
		        forages: [],
		        // Shared database.
		        db: null,
		        // Database readiness (promise).
		        dbReady: null,
		        // Deferred operations on the database.
		        deferredOperations: []
		    };
		}

		// Open the IndexedDB database (automatically creates one if one didn't
		// previously exist), using any options set in the config.
		function _initStorage(options) {
		    var self = this;
		    var dbInfo = {
		        db: null
		    };

		    if (options) {
		        for (var i in options) {
		            dbInfo[i] = options[i];
		        }
		    }

		    // Get the current context of the database;
		    var dbContext = dbContexts[dbInfo.name];

		    // ...or create a new context.
		    if (!dbContext) {
		        dbContext = createDbContext();
		        // Register the new context in the global container.
		        dbContexts[dbInfo.name] = dbContext;
		    }

		    // Register itself as a running localForage in the current context.
		    dbContext.forages.push(self);

		    // Replace the default `ready()` function with the specialized one.
		    if (!self._initReady) {
		        self._initReady = self.ready;
		        self.ready = _fullyReady;
		    }

		    // Create an array of initialization states of the related localForages.
		    var initPromises = [];

		    function ignoreErrors() {
		        // Don't handle errors here,
		        // just makes sure related localForages aren't pending.
		        return Promise$1.resolve();
		    }

		    for (var j = 0; j < dbContext.forages.length; j++) {
		        var forage = dbContext.forages[j];
		        if (forage !== self) {
		            // Don't wait for itself...
		            initPromises.push(forage._initReady()["catch"](ignoreErrors));
		        }
		    }

		    // Take a snapshot of the related localForages.
		    var forages = dbContext.forages.slice(0);

		    // Initialize the connection process only when
		    // all the related localForages aren't pending.
		    return Promise$1.all(initPromises).then(function () {
		        dbInfo.db = dbContext.db;
		        // Get the connection or open a new one without upgrade.
		        return _getOriginalConnection(dbInfo);
		    }).then(function (db) {
		        dbInfo.db = db;
		        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {
		            // Reopen the database for upgrading.
		            return _getUpgradedConnection(dbInfo);
		        }
		        return db;
		    }).then(function (db) {
		        dbInfo.db = dbContext.db = db;
		        self._dbInfo = dbInfo;
		        // Share the final connection amongst related localForages.
		        for (var k = 0; k < forages.length; k++) {
		            var forage = forages[k];
		            if (forage !== self) {
		                // Self is already up-to-date.
		                forage._dbInfo.db = dbInfo.db;
		                forage._dbInfo.version = dbInfo.version;
		            }
		        }
		    });
		}

		function getItem(key, callback) {
		    var self = this;

		    key = normalizeKey(key);

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
		                if (err) {
		                    return reject(err);
		                }

		                try {
		                    var store = transaction.objectStore(self._dbInfo.storeName);
		                    var req = store.get(key);

		                    req.onsuccess = function () {
		                        var value = req.result;
		                        if (value === undefined) {
		                            value = null;
		                        }
		                        if (_isEncodedBlob(value)) {
		                            value = _decodeBlob(value);
		                        }
		                        resolve(value);
		                    };

		                    req.onerror = function () {
		                        reject(req.error);
		                    };
		                } catch (e) {
		                    reject(e);
		                }
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		// Iterate over all items stored in database.
		function iterate(iterator, callback) {
		    var self = this;

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
		                if (err) {
		                    return reject(err);
		                }

		                try {
		                    var store = transaction.objectStore(self._dbInfo.storeName);
		                    var req = store.openCursor();
		                    var iterationNumber = 1;

		                    req.onsuccess = function () {
		                        var cursor = req.result;

		                        if (cursor) {
		                            var value = cursor.value;
		                            if (_isEncodedBlob(value)) {
		                                value = _decodeBlob(value);
		                            }
		                            var result = iterator(value, cursor.key, iterationNumber++);

		                            // when the iterator callback returns any
		                            // (non-`undefined`) value, then we stop
		                            // the iteration immediately
		                            if (result !== void 0) {
		                                resolve(result);
		                            } else {
		                                cursor["continue"]();
		                            }
		                        } else {
		                            resolve();
		                        }
		                    };

		                    req.onerror = function () {
		                        reject(req.error);
		                    };
		                } catch (e) {
		                    reject(e);
		                }
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);

		    return promise;
		}

		function setItem(key, value, callback) {
		    var self = this;

		    key = normalizeKey(key);

		    var promise = new Promise$1(function (resolve, reject) {
		        var dbInfo;
		        self.ready().then(function () {
		            dbInfo = self._dbInfo;
		            if (toString.call(value) === '[object Blob]') {
		                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {
		                    if (blobSupport) {
		                        return value;
		                    }
		                    return _encodeBlob(value);
		                });
		            }
		            return value;
		        }).then(function (value) {
		            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
		                if (err) {
		                    return reject(err);
		                }

		                try {
		                    var store = transaction.objectStore(self._dbInfo.storeName);

		                    // The reason we don't _save_ null is because IE 10 does
		                    // not support saving the `null` type in IndexedDB. How
		                    // ironic, given the bug below!
		                    // See: https://github.com/mozilla/localForage/issues/161
		                    if (value === null) {
		                        value = undefined;
		                    }

		                    var req = store.put(value, key);

		                    transaction.oncomplete = function () {
		                        // Cast to undefined so the value passed to
		                        // callback/promise is the same as what one would get out
		                        // of `getItem()` later. This leads to some weirdness
		                        // (setItem('foo', undefined) will return `null`), but
		                        // it's not my fault localStorage is our baseline and that
		                        // it's weird.
		                        if (value === undefined) {
		                            value = null;
		                        }

		                        resolve(value);
		                    };
		                    transaction.onabort = transaction.onerror = function () {
		                        var err = req.error ? req.error : req.transaction.error;
		                        reject(err);
		                    };
		                } catch (e) {
		                    reject(e);
		                }
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		function removeItem(key, callback) {
		    var self = this;

		    key = normalizeKey(key);

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
		                if (err) {
		                    return reject(err);
		                }

		                try {
		                    var store = transaction.objectStore(self._dbInfo.storeName);
		                    // We use a Grunt task to make this safe for IE and some
		                    // versions of Android (including those used by Cordova).
		                    // Normally IE won't like `.delete()` and will insist on
		                    // using `['delete']()`, but we have a build step that
		                    // fixes this for us now.
		                    var req = store["delete"](key);
		                    transaction.oncomplete = function () {
		                        resolve();
		                    };

		                    transaction.onerror = function () {
		                        reject(req.error);
		                    };

		                    // The request will be also be aborted if we've exceeded our storage
		                    // space.
		                    transaction.onabort = function () {
		                        var err = req.error ? req.error : req.transaction.error;
		                        reject(err);
		                    };
		                } catch (e) {
		                    reject(e);
		                }
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		function clear(callback) {
		    var self = this;

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
		                if (err) {
		                    return reject(err);
		                }

		                try {
		                    var store = transaction.objectStore(self._dbInfo.storeName);
		                    var req = store.clear();

		                    transaction.oncomplete = function () {
		                        resolve();
		                    };

		                    transaction.onabort = transaction.onerror = function () {
		                        var err = req.error ? req.error : req.transaction.error;
		                        reject(err);
		                    };
		                } catch (e) {
		                    reject(e);
		                }
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		function length(callback) {
		    var self = this;

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
		                if (err) {
		                    return reject(err);
		                }

		                try {
		                    var store = transaction.objectStore(self._dbInfo.storeName);
		                    var req = store.count();

		                    req.onsuccess = function () {
		                        resolve(req.result);
		                    };

		                    req.onerror = function () {
		                        reject(req.error);
		                    };
		                } catch (e) {
		                    reject(e);
		                }
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		function key(n, callback) {
		    var self = this;

		    var promise = new Promise$1(function (resolve, reject) {
		        if (n < 0) {
		            resolve(null);

		            return;
		        }

		        self.ready().then(function () {
		            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
		                if (err) {
		                    return reject(err);
		                }

		                try {
		                    var store = transaction.objectStore(self._dbInfo.storeName);
		                    var advanced = false;
		                    var req = store.openKeyCursor();

		                    req.onsuccess = function () {
		                        var cursor = req.result;
		                        if (!cursor) {
		                            // this means there weren't enough keys
		                            resolve(null);

		                            return;
		                        }

		                        if (n === 0) {
		                            // We have the first key, return it if that's what they
		                            // wanted.
		                            resolve(cursor.key);
		                        } else {
		                            if (!advanced) {
		                                // Otherwise, ask the cursor to skip ahead n
		                                // records.
		                                advanced = true;
		                                cursor.advance(n);
		                            } else {
		                                // When we get here, we've got the nth key.
		                                resolve(cursor.key);
		                            }
		                        }
		                    };

		                    req.onerror = function () {
		                        reject(req.error);
		                    };
		                } catch (e) {
		                    reject(e);
		                }
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		function keys(callback) {
		    var self = this;

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
		                if (err) {
		                    return reject(err);
		                }

		                try {
		                    var store = transaction.objectStore(self._dbInfo.storeName);
		                    var req = store.openKeyCursor();
		                    var keys = [];

		                    req.onsuccess = function () {
		                        var cursor = req.result;

		                        if (!cursor) {
		                            resolve(keys);
		                            return;
		                        }

		                        keys.push(cursor.key);
		                        cursor["continue"]();
		                    };

		                    req.onerror = function () {
		                        reject(req.error);
		                    };
		                } catch (e) {
		                    reject(e);
		                }
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		function dropInstance(options, callback) {
		    callback = getCallback.apply(this, arguments);

		    var currentConfig = this.config();
		    options = typeof options !== 'function' && options || {};
		    if (!options.name) {
		        options.name = options.name || currentConfig.name;
		        options.storeName = options.storeName || currentConfig.storeName;
		    }

		    var self = this;
		    var promise;
		    if (!options.name) {
		        promise = Promise$1.reject('Invalid arguments');
		    } else {
		        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;

		        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {
		            var dbContext = dbContexts[options.name];
		            var forages = dbContext.forages;
		            dbContext.db = db;
		            for (var i = 0; i < forages.length; i++) {
		                forages[i]._dbInfo.db = db;
		            }
		            return db;
		        });

		        if (!options.storeName) {
		            promise = dbPromise.then(function (db) {
		                _deferReadiness(options);

		                var dbContext = dbContexts[options.name];
		                var forages = dbContext.forages;

		                db.close();
		                for (var i = 0; i < forages.length; i++) {
		                    var forage = forages[i];
		                    forage._dbInfo.db = null;
		                }

		                var dropDBPromise = new Promise$1(function (resolve, reject) {
		                    var req = idb.deleteDatabase(options.name);

		                    req.onerror = function () {
		                        var db = req.result;
		                        if (db) {
		                            db.close();
		                        }
		                        reject(req.error);
		                    };

		                    req.onblocked = function () {
		                        // Closing all open connections in onversionchange handler should prevent this situation, but if
		                        // we do get here, it just means the request remains pending - eventually it will succeed or error
		                        console.warn('dropInstance blocked for database "' + options.name + '" until all open connections are closed');
		                    };

		                    req.onsuccess = function () {
		                        var db = req.result;
		                        if (db) {
		                            db.close();
		                        }
		                        resolve(db);
		                    };
		                });

		                return dropDBPromise.then(function (db) {
		                    dbContext.db = db;
		                    for (var i = 0; i < forages.length; i++) {
		                        var _forage = forages[i];
		                        _advanceReadiness(_forage._dbInfo);
		                    }
		                })["catch"](function (err) {
		                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
		                    throw err;
		                });
		            });
		        } else {
		            promise = dbPromise.then(function (db) {
		                if (!db.objectStoreNames.contains(options.storeName)) {
		                    return;
		                }

		                var newVersion = db.version + 1;

		                _deferReadiness(options);

		                var dbContext = dbContexts[options.name];
		                var forages = dbContext.forages;

		                db.close();
		                for (var i = 0; i < forages.length; i++) {
		                    var forage = forages[i];
		                    forage._dbInfo.db = null;
		                    forage._dbInfo.version = newVersion;
		                }

		                var dropObjectPromise = new Promise$1(function (resolve, reject) {
		                    var req = idb.open(options.name, newVersion);

		                    req.onerror = function (err) {
		                        var db = req.result;
		                        db.close();
		                        reject(err);
		                    };

		                    req.onupgradeneeded = function () {
		                        var db = req.result;
		                        db.deleteObjectStore(options.storeName);
		                    };

		                    req.onsuccess = function () {
		                        var db = req.result;
		                        db.close();
		                        resolve(db);
		                    };
		                });

		                return dropObjectPromise.then(function (db) {
		                    dbContext.db = db;
		                    for (var j = 0; j < forages.length; j++) {
		                        var _forage2 = forages[j];
		                        _forage2._dbInfo.db = db;
		                        _advanceReadiness(_forage2._dbInfo);
		                    }
		                })["catch"](function (err) {
		                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
		                    throw err;
		                });
		            });
		        }
		    }

		    executeCallback(promise, callback);
		    return promise;
		}

		var asyncStorage = {
		    _driver: 'asyncStorage',
		    _initStorage: _initStorage,
		    _support: isIndexedDBValid(),
		    iterate: iterate,
		    getItem: getItem,
		    setItem: setItem,
		    removeItem: removeItem,
		    clear: clear,
		    length: length,
		    key: key,
		    keys: keys,
		    dropInstance: dropInstance
		};

		function isWebSQLValid() {
		    return typeof openDatabase === 'function';
		}

		// Sadly, the best way to save binary data in WebSQL/localStorage is serializing
		// it to Base64, so this is how we store it to prevent very strange errors with less
		// verbose ways of binary <-> string data storage.
		var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

		var BLOB_TYPE_PREFIX = '~~local_forage_type~';
		var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;

		var SERIALIZED_MARKER = '__lfsc__:';
		var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;

		// OMG the serializations!
		var TYPE_ARRAYBUFFER = 'arbf';
		var TYPE_BLOB = 'blob';
		var TYPE_INT8ARRAY = 'si08';
		var TYPE_UINT8ARRAY = 'ui08';
		var TYPE_UINT8CLAMPEDARRAY = 'uic8';
		var TYPE_INT16ARRAY = 'si16';
		var TYPE_INT32ARRAY = 'si32';
		var TYPE_UINT16ARRAY = 'ur16';
		var TYPE_UINT32ARRAY = 'ui32';
		var TYPE_FLOAT32ARRAY = 'fl32';
		var TYPE_FLOAT64ARRAY = 'fl64';
		var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;

		var toString$1 = Object.prototype.toString;

		function stringToBuffer(serializedString) {
		    // Fill the string into a ArrayBuffer.
		    var bufferLength = serializedString.length * 0.75;
		    var len = serializedString.length;
		    var i;
		    var p = 0;
		    var encoded1, encoded2, encoded3, encoded4;

		    if (serializedString[serializedString.length - 1] === '=') {
		        bufferLength--;
		        if (serializedString[serializedString.length - 2] === '=') {
		            bufferLength--;
		        }
		    }

		    var buffer = new ArrayBuffer(bufferLength);
		    var bytes = new Uint8Array(buffer);

		    for (i = 0; i < len; i += 4) {
		        encoded1 = BASE_CHARS.indexOf(serializedString[i]);
		        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
		        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
		        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);

		        /*jslint bitwise: true */
		        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
		        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
		        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
		    }
		    return buffer;
		}

		// Converts a buffer to a string to store, serialized, in the backend
		// storage library.
		function bufferToString(buffer) {
		    // base64-arraybuffer
		    var bytes = new Uint8Array(buffer);
		    var base64String = '';
		    var i;

		    for (i = 0; i < bytes.length; i += 3) {
		        /*jslint bitwise: true */
		        base64String += BASE_CHARS[bytes[i] >> 2];
		        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
		        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
		        base64String += BASE_CHARS[bytes[i + 2] & 63];
		    }

		    if (bytes.length % 3 === 2) {
		        base64String = base64String.substring(0, base64String.length - 1) + '=';
		    } else if (bytes.length % 3 === 1) {
		        base64String = base64String.substring(0, base64String.length - 2) + '==';
		    }

		    return base64String;
		}

		// Serialize a value, afterwards executing a callback (which usually
		// instructs the `setItem()` callback/promise to be executed). This is how
		// we store binary data with localStorage.
		function serialize(value, callback) {
		    var valueType = '';
		    if (value) {
		        valueType = toString$1.call(value);
		    }

		    // Cannot use `value instanceof ArrayBuffer` or such here, as these
		    // checks fail when running the tests using casper.js...
		    //
		    // TODO: See why those tests fail and use a better solution.
		    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {
		        // Convert binary arrays to a string and prefix the string with
		        // a special marker.
		        var buffer;
		        var marker = SERIALIZED_MARKER;

		        if (value instanceof ArrayBuffer) {
		            buffer = value;
		            marker += TYPE_ARRAYBUFFER;
		        } else {
		            buffer = value.buffer;

		            if (valueType === '[object Int8Array]') {
		                marker += TYPE_INT8ARRAY;
		            } else if (valueType === '[object Uint8Array]') {
		                marker += TYPE_UINT8ARRAY;
		            } else if (valueType === '[object Uint8ClampedArray]') {
		                marker += TYPE_UINT8CLAMPEDARRAY;
		            } else if (valueType === '[object Int16Array]') {
		                marker += TYPE_INT16ARRAY;
		            } else if (valueType === '[object Uint16Array]') {
		                marker += TYPE_UINT16ARRAY;
		            } else if (valueType === '[object Int32Array]') {
		                marker += TYPE_INT32ARRAY;
		            } else if (valueType === '[object Uint32Array]') {
		                marker += TYPE_UINT32ARRAY;
		            } else if (valueType === '[object Float32Array]') {
		                marker += TYPE_FLOAT32ARRAY;
		            } else if (valueType === '[object Float64Array]') {
		                marker += TYPE_FLOAT64ARRAY;
		            } else {
		                callback(new Error('Failed to get type for BinaryArray'));
		            }
		        }

		        callback(marker + bufferToString(buffer));
		    } else if (valueType === '[object Blob]') {
		        // Conver the blob to a binaryArray and then to a string.
		        var fileReader = new FileReader();

		        fileReader.onload = function () {
		            // Backwards-compatible prefix for the blob type.
		            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);

		            callback(SERIALIZED_MARKER + TYPE_BLOB + str);
		        };

		        fileReader.readAsArrayBuffer(value);
		    } else {
		        try {
		            callback(JSON.stringify(value));
		        } catch (e) {
		            console.error("Couldn't convert value into a JSON string: ", value);

		            callback(null, e);
		        }
		    }
		}

		// Deserialize data we've inserted into a value column/field. We place
		// special markers into our strings to mark them as encoded; this isn't
		// as nice as a meta field, but it's the only sane thing we can do whilst
		// keeping localStorage support intact.
		//
		// Oftentimes this will just deserialize JSON content, but if we have a
		// special marker (SERIALIZED_MARKER, defined above), we will extract
		// some kind of arraybuffer/binary data/typed array out of the string.
		function deserialize(value) {
		    // If we haven't marked this string as being specially serialized (i.e.
		    // something other than serialized JSON), we can just return it and be
		    // done with it.
		    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
		        return JSON.parse(value);
		    }

		    // The following code deals with deserializing some kind of Blob or
		    // TypedArray. First we separate out the type of data we're dealing
		    // with from the data itself.
		    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
		    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);

		    var blobType;
		    // Backwards-compatible blob type serialization strategy.
		    // DBs created with older versions of localForage will simply not have the blob type.
		    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
		        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
		        blobType = matcher[1];
		        serializedString = serializedString.substring(matcher[0].length);
		    }
		    var buffer = stringToBuffer(serializedString);

		    // Return the right type based on the code/type set during
		    // serialization.
		    switch (type) {
		        case TYPE_ARRAYBUFFER:
		            return buffer;
		        case TYPE_BLOB:
		            return createBlob([buffer], { type: blobType });
		        case TYPE_INT8ARRAY:
		            return new Int8Array(buffer);
		        case TYPE_UINT8ARRAY:
		            return new Uint8Array(buffer);
		        case TYPE_UINT8CLAMPEDARRAY:
		            return new Uint8ClampedArray(buffer);
		        case TYPE_INT16ARRAY:
		            return new Int16Array(buffer);
		        case TYPE_UINT16ARRAY:
		            return new Uint16Array(buffer);
		        case TYPE_INT32ARRAY:
		            return new Int32Array(buffer);
		        case TYPE_UINT32ARRAY:
		            return new Uint32Array(buffer);
		        case TYPE_FLOAT32ARRAY:
		            return new Float32Array(buffer);
		        case TYPE_FLOAT64ARRAY:
		            return new Float64Array(buffer);
		        default:
		            throw new Error('Unkown type: ' + type);
		    }
		}

		var localforageSerializer = {
		    serialize: serialize,
		    deserialize: deserialize,
		    stringToBuffer: stringToBuffer,
		    bufferToString: bufferToString
		};

		/*
		 * Includes code from:
		 *
		 * base64-arraybuffer
		 * https://github.com/niklasvh/base64-arraybuffer
		 *
		 * Copyright (c) 2012 Niklas von Hertzen
		 * Licensed under the MIT license.
		 */

		function createDbTable(t, dbInfo, callback, errorCallback) {
		    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);
		}

		// Open the WebSQL database (automatically creates one if one didn't
		// previously exist), using any options set in the config.
		function _initStorage$1(options) {
		    var self = this;
		    var dbInfo = {
		        db: null
		    };

		    if (options) {
		        for (var i in options) {
		            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];
		        }
		    }

		    var dbInfoPromise = new Promise$1(function (resolve, reject) {
		        // Open the database; the openDatabase API will automatically
		        // create it for us if it doesn't exist.
		        try {
		            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
		        } catch (e) {
		            return reject(e);
		        }

		        // Create our key/value table if it doesn't exist.
		        dbInfo.db.transaction(function (t) {
		            createDbTable(t, dbInfo, function () {
		                self._dbInfo = dbInfo;
		                resolve();
		            }, function (t, error) {
		                reject(error);
		            });
		        }, reject);
		    });

		    dbInfo.serializer = localforageSerializer;
		    return dbInfoPromise;
		}

		function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
		    t.executeSql(sqlStatement, args, callback, function (t, error) {
		        if (error.code === error.SYNTAX_ERR) {
		            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name = ?", [dbInfo.storeName], function (t, results) {
		                if (!results.rows.length) {
		                    // if the table is missing (was deleted)
		                    // re-create it table and retry
		                    createDbTable(t, dbInfo, function () {
		                        t.executeSql(sqlStatement, args, callback, errorCallback);
		                    }, errorCallback);
		                } else {
		                    errorCallback(t, error);
		                }
		            }, errorCallback);
		        } else {
		            errorCallback(t, error);
		        }
		    }, errorCallback);
		}

		function getItem$1(key, callback) {
		    var self = this;

		    key = normalizeKey(key);

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            var dbInfo = self._dbInfo;
		            dbInfo.db.transaction(function (t) {
		                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {
		                    var result = results.rows.length ? results.rows.item(0).value : null;

		                    // Check to see if this is serialized content we need to
		                    // unpack.
		                    if (result) {
		                        result = dbInfo.serializer.deserialize(result);
		                    }

		                    resolve(result);
		                }, function (t, error) {
		                    reject(error);
		                });
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		function iterate$1(iterator, callback) {
		    var self = this;

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            var dbInfo = self._dbInfo;

		            dbInfo.db.transaction(function (t) {
		                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {
		                    var rows = results.rows;
		                    var length = rows.length;

		                    for (var i = 0; i < length; i++) {
		                        var item = rows.item(i);
		                        var result = item.value;

		                        // Check to see if this is serialized content
		                        // we need to unpack.
		                        if (result) {
		                            result = dbInfo.serializer.deserialize(result);
		                        }

		                        result = iterator(result, item.key, i + 1);

		                        // void(0) prevents problems with redefinition
		                        // of `undefined`.
		                        if (result !== void 0) {
		                            resolve(result);
		                            return;
		                        }
		                    }

		                    resolve();
		                }, function (t, error) {
		                    reject(error);
		                });
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		function _setItem(key, value, callback, retriesLeft) {
		    var self = this;

		    key = normalizeKey(key);

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            // The localStorage API doesn't return undefined values in an
		            // "expected" way, so undefined is always cast to null in all
		            // drivers. See: https://github.com/mozilla/localForage/pull/42
		            if (value === undefined) {
		                value = null;
		            }

		            // Save the original value to pass to the callback.
		            var originalValue = value;

		            var dbInfo = self._dbInfo;
		            dbInfo.serializer.serialize(value, function (value, error) {
		                if (error) {
		                    reject(error);
		                } else {
		                    dbInfo.db.transaction(function (t) {
		                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {
		                            resolve(originalValue);
		                        }, function (t, error) {
		                            reject(error);
		                        });
		                    }, function (sqlError) {
		                        // The transaction failed; check
		                        // to see if it's a quota error.
		                        if (sqlError.code === sqlError.QUOTA_ERR) {
		                            // We reject the callback outright for now, but
		                            // it's worth trying to re-run the transaction.
		                            // Even if the user accepts the prompt to use
		                            // more storage on Safari, this error will
		                            // be called.
		                            //
		                            // Try to re-run the transaction.
		                            if (retriesLeft > 0) {
		                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));
		                                return;
		                            }
		                            reject(sqlError);
		                        }
		                    });
		                }
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		function setItem$1(key, value, callback) {
		    return _setItem.apply(this, [key, value, callback, 1]);
		}

		function removeItem$1(key, callback) {
		    var self = this;

		    key = normalizeKey(key);

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            var dbInfo = self._dbInfo;
		            dbInfo.db.transaction(function (t) {
		                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {
		                    resolve();
		                }, function (t, error) {
		                    reject(error);
		                });
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		// Deletes every item in the table.
		// TODO: Find out if this resets the AUTO_INCREMENT number.
		function clear$1(callback) {
		    var self = this;

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            var dbInfo = self._dbInfo;
		            dbInfo.db.transaction(function (t) {
		                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {
		                    resolve();
		                }, function (t, error) {
		                    reject(error);
		                });
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		// Does a simple `COUNT(key)` to get the number of items stored in
		// localForage.
		function length$1(callback) {
		    var self = this;

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            var dbInfo = self._dbInfo;
		            dbInfo.db.transaction(function (t) {
		                // Ahhh, SQL makes this one soooooo easy.
		                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {
		                    var result = results.rows.item(0).c;
		                    resolve(result);
		                }, function (t, error) {
		                    reject(error);
		                });
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		// Return the key located at key index X; essentially gets the key from a
		// `WHERE id = ?`. This is the most efficient way I can think to implement
		// this rarely-used (in my experience) part of the API, but it can seem
		// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
		// the ID of each key will change every time it's updated. Perhaps a stored
		// procedure for the `setItem()` SQL would solve this problem?
		// TODO: Don't change ID on `setItem()`.
		function key$1(n, callback) {
		    var self = this;

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            var dbInfo = self._dbInfo;
		            dbInfo.db.transaction(function (t) {
		                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {
		                    var result = results.rows.length ? results.rows.item(0).key : null;
		                    resolve(result);
		                }, function (t, error) {
		                    reject(error);
		                });
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		function keys$1(callback) {
		    var self = this;

		    var promise = new Promise$1(function (resolve, reject) {
		        self.ready().then(function () {
		            var dbInfo = self._dbInfo;
		            dbInfo.db.transaction(function (t) {
		                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {
		                    var keys = [];

		                    for (var i = 0; i < results.rows.length; i++) {
		                        keys.push(results.rows.item(i).key);
		                    }

		                    resolve(keys);
		                }, function (t, error) {
		                    reject(error);
		                });
		            });
		        })["catch"](reject);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		// https://www.w3.org/TR/webdatabase/#databases
		// > There is no way to enumerate or delete the databases available for an origin from this API.
		function getAllStoreNames(db) {
		    return new Promise$1(function (resolve, reject) {
		        db.transaction(function (t) {
		            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function (t, results) {
		                var storeNames = [];

		                for (var i = 0; i < results.rows.length; i++) {
		                    storeNames.push(results.rows.item(i).name);
		                }

		                resolve({
		                    db: db,
		                    storeNames: storeNames
		                });
		            }, function (t, error) {
		                reject(error);
		            });
		        }, function (sqlError) {
		            reject(sqlError);
		        });
		    });
		}

		function dropInstance$1(options, callback) {
		    callback = getCallback.apply(this, arguments);

		    var currentConfig = this.config();
		    options = typeof options !== 'function' && options || {};
		    if (!options.name) {
		        options.name = options.name || currentConfig.name;
		        options.storeName = options.storeName || currentConfig.storeName;
		    }

		    var self = this;
		    var promise;
		    if (!options.name) {
		        promise = Promise$1.reject('Invalid arguments');
		    } else {
		        promise = new Promise$1(function (resolve) {
		            var db;
		            if (options.name === currentConfig.name) {
		                // use the db reference of the current instance
		                db = self._dbInfo.db;
		            } else {
		                db = openDatabase(options.name, '', '', 0);
		            }

		            if (!options.storeName) {
		                // drop all database tables
		                resolve(getAllStoreNames(db));
		            } else {
		                resolve({
		                    db: db,
		                    storeNames: [options.storeName]
		                });
		            }
		        }).then(function (operationInfo) {
		            return new Promise$1(function (resolve, reject) {
		                operationInfo.db.transaction(function (t) {
		                    function dropTable(storeName) {
		                        return new Promise$1(function (resolve, reject) {
		                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {
		                                resolve();
		                            }, function (t, error) {
		                                reject(error);
		                            });
		                        });
		                    }

		                    var operations = [];
		                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {
		                        operations.push(dropTable(operationInfo.storeNames[i]));
		                    }

		                    Promise$1.all(operations).then(function () {
		                        resolve();
		                    })["catch"](function (e) {
		                        reject(e);
		                    });
		                }, function (sqlError) {
		                    reject(sqlError);
		                });
		            });
		        });
		    }

		    executeCallback(promise, callback);
		    return promise;
		}

		var webSQLStorage = {
		    _driver: 'webSQLStorage',
		    _initStorage: _initStorage$1,
		    _support: isWebSQLValid(),
		    iterate: iterate$1,
		    getItem: getItem$1,
		    setItem: setItem$1,
		    removeItem: removeItem$1,
		    clear: clear$1,
		    length: length$1,
		    key: key$1,
		    keys: keys$1,
		    dropInstance: dropInstance$1
		};

		function isLocalStorageValid() {
		    try {
		        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&
		        // in IE8 typeof localStorage.setItem === 'object'
		        !!localStorage.setItem;
		    } catch (e) {
		        return false;
		    }
		}

		function _getKeyPrefix(options, defaultConfig) {
		    var keyPrefix = options.name + '/';

		    if (options.storeName !== defaultConfig.storeName) {
		        keyPrefix += options.storeName + '/';
		    }
		    return keyPrefix;
		}

		// Check if localStorage throws when saving an item
		function checkIfLocalStorageThrows() {
		    var localStorageTestKey = '_localforage_support_test';

		    try {
		        localStorage.setItem(localStorageTestKey, true);
		        localStorage.removeItem(localStorageTestKey);

		        return false;
		    } catch (e) {
		        return true;
		    }
		}

		// Check if localStorage is usable and allows to save an item
		// This method checks if localStorage is usable in Safari Private Browsing
		// mode, or in any other case where the available quota for localStorage
		// is 0 and there wasn't any saved items yet.
		function _isLocalStorageUsable() {
		    return !checkIfLocalStorageThrows() || localStorage.length > 0;
		}

		// Config the localStorage backend, using options set in the config.
		function _initStorage$2(options) {
		    var self = this;
		    var dbInfo = {};
		    if (options) {
		        for (var i in options) {
		            dbInfo[i] = options[i];
		        }
		    }

		    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);

		    if (!_isLocalStorageUsable()) {
		        return Promise$1.reject();
		    }

		    self._dbInfo = dbInfo;
		    dbInfo.serializer = localforageSerializer;

		    return Promise$1.resolve();
		}

		// Remove all keys from the datastore, effectively destroying all data in
		// the app's key/value store!
		function clear$2(callback) {
		    var self = this;
		    var promise = self.ready().then(function () {
		        var keyPrefix = self._dbInfo.keyPrefix;

		        for (var i = localStorage.length - 1; i >= 0; i--) {
		            var key = localStorage.key(i);

		            if (key.indexOf(keyPrefix) === 0) {
		                localStorage.removeItem(key);
		            }
		        }
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		// Retrieve an item from the store. Unlike the original async_storage
		// library in Gaia, we don't modify return values at all. If a key's value
		// is `undefined`, we pass that value to the callback function.
		function getItem$2(key, callback) {
		    var self = this;

		    key = normalizeKey(key);

		    var promise = self.ready().then(function () {
		        var dbInfo = self._dbInfo;
		        var result = localStorage.getItem(dbInfo.keyPrefix + key);

		        // If a result was found, parse it from the serialized
		        // string into a JS object. If result isn't truthy, the key
		        // is likely undefined and we'll pass it straight to the
		        // callback.
		        if (result) {
		            result = dbInfo.serializer.deserialize(result);
		        }

		        return result;
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		// Iterate over all items in the store.
		function iterate$2(iterator, callback) {
		    var self = this;

		    var promise = self.ready().then(function () {
		        var dbInfo = self._dbInfo;
		        var keyPrefix = dbInfo.keyPrefix;
		        var keyPrefixLength = keyPrefix.length;
		        var length = localStorage.length;

		        // We use a dedicated iterator instead of the `i` variable below
		        // so other keys we fetch in localStorage aren't counted in
		        // the `iterationNumber` argument passed to the `iterate()`
		        // callback.
		        //
		        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
		        var iterationNumber = 1;

		        for (var i = 0; i < length; i++) {
		            var key = localStorage.key(i);
		            if (key.indexOf(keyPrefix) !== 0) {
		                continue;
		            }
		            var value = localStorage.getItem(key);

		            // If a result was found, parse it from the serialized
		            // string into a JS object. If result isn't truthy, the
		            // key is likely undefined and we'll pass it straight
		            // to the iterator.
		            if (value) {
		                value = dbInfo.serializer.deserialize(value);
		            }

		            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

		            if (value !== void 0) {
		                return value;
		            }
		        }
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		// Same as localStorage's key() method, except takes a callback.
		function key$2(n, callback) {
		    var self = this;
		    var promise = self.ready().then(function () {
		        var dbInfo = self._dbInfo;
		        var result;
		        try {
		            result = localStorage.key(n);
		        } catch (error) {
		            result = null;
		        }

		        // Remove the prefix from the key, if a key is found.
		        if (result) {
		            result = result.substring(dbInfo.keyPrefix.length);
		        }

		        return result;
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		function keys$2(callback) {
		    var self = this;
		    var promise = self.ready().then(function () {
		        var dbInfo = self._dbInfo;
		        var length = localStorage.length;
		        var keys = [];

		        for (var i = 0; i < length; i++) {
		            var itemKey = localStorage.key(i);
		            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
		                keys.push(itemKey.substring(dbInfo.keyPrefix.length));
		            }
		        }

		        return keys;
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		// Supply the number of keys in the datastore to the callback function.
		function length$2(callback) {
		    var self = this;
		    var promise = self.keys().then(function (keys) {
		        return keys.length;
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		// Remove an item from the store, nice and simple.
		function removeItem$2(key, callback) {
		    var self = this;

		    key = normalizeKey(key);

		    var promise = self.ready().then(function () {
		        var dbInfo = self._dbInfo;
		        localStorage.removeItem(dbInfo.keyPrefix + key);
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		// Set a key's value and run an optional callback once the value is set.
		// Unlike Gaia's implementation, the callback function is passed the value,
		// in case you want to operate on that value only after you're sure it
		// saved, or something like that.
		function setItem$2(key, value, callback) {
		    var self = this;

		    key = normalizeKey(key);

		    var promise = self.ready().then(function () {
		        // Convert undefined values to null.
		        // https://github.com/mozilla/localForage/pull/42
		        if (value === undefined) {
		            value = null;
		        }

		        // Save the original value to pass to the callback.
		        var originalValue = value;

		        return new Promise$1(function (resolve, reject) {
		            var dbInfo = self._dbInfo;
		            dbInfo.serializer.serialize(value, function (value, error) {
		                if (error) {
		                    reject(error);
		                } else {
		                    try {
		                        localStorage.setItem(dbInfo.keyPrefix + key, value);
		                        resolve(originalValue);
		                    } catch (e) {
		                        // localStorage capacity exceeded.
		                        // TODO: Make this a specific error/event.
		                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
		                            reject(e);
		                        }
		                        reject(e);
		                    }
		                }
		            });
		        });
		    });

		    executeCallback(promise, callback);
		    return promise;
		}

		function dropInstance$2(options, callback) {
		    callback = getCallback.apply(this, arguments);

		    options = typeof options !== 'function' && options || {};
		    if (!options.name) {
		        var currentConfig = this.config();
		        options.name = options.name || currentConfig.name;
		        options.storeName = options.storeName || currentConfig.storeName;
		    }

		    var self = this;
		    var promise;
		    if (!options.name) {
		        promise = Promise$1.reject('Invalid arguments');
		    } else {
		        promise = new Promise$1(function (resolve) {
		            if (!options.storeName) {
		                resolve(options.name + '/');
		            } else {
		                resolve(_getKeyPrefix(options, self._defaultConfig));
		            }
		        }).then(function (keyPrefix) {
		            for (var i = localStorage.length - 1; i >= 0; i--) {
		                var key = localStorage.key(i);

		                if (key.indexOf(keyPrefix) === 0) {
		                    localStorage.removeItem(key);
		                }
		            }
		        });
		    }

		    executeCallback(promise, callback);
		    return promise;
		}

		var localStorageWrapper = {
		    _driver: 'localStorageWrapper',
		    _initStorage: _initStorage$2,
		    _support: isLocalStorageValid(),
		    iterate: iterate$2,
		    getItem: getItem$2,
		    setItem: setItem$2,
		    removeItem: removeItem$2,
		    clear: clear$2,
		    length: length$2,
		    key: key$2,
		    keys: keys$2,
		    dropInstance: dropInstance$2
		};

		var sameValue = function sameValue(x, y) {
		    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
		};

		var includes = function includes(array, searchElement) {
		    var len = array.length;
		    var i = 0;
		    while (i < len) {
		        if (sameValue(array[i], searchElement)) {
		            return true;
		        }
		        i++;
		    }

		    return false;
		};

		var isArray = Array.isArray || function (arg) {
		    return Object.prototype.toString.call(arg) === '[object Array]';
		};

		// Drivers are stored here when `defineDriver()` is called.
		// They are shared across all instances of localForage.
		var DefinedDrivers = {};

		var DriverSupport = {};

		var DefaultDrivers = {
		    INDEXEDDB: asyncStorage,
		    WEBSQL: webSQLStorage,
		    LOCALSTORAGE: localStorageWrapper
		};

		var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];

		var OptionalDriverMethods = ['dropInstance'];

		var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);

		var DefaultConfig = {
		    description: '',
		    driver: DefaultDriverOrder.slice(),
		    name: 'localforage',
		    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
		    // we can use without a prompt.
		    size: 4980736,
		    storeName: 'keyvaluepairs',
		    version: 1.0
		};

		function callWhenReady(localForageInstance, libraryMethod) {
		    localForageInstance[libraryMethod] = function () {
		        var _args = arguments;
		        return localForageInstance.ready().then(function () {
		            return localForageInstance[libraryMethod].apply(localForageInstance, _args);
		        });
		    };
		}

		function extend() {
		    for (var i = 1; i < arguments.length; i++) {
		        var arg = arguments[i];

		        if (arg) {
		            for (var _key in arg) {
		                if (arg.hasOwnProperty(_key)) {
		                    if (isArray(arg[_key])) {
		                        arguments[0][_key] = arg[_key].slice();
		                    } else {
		                        arguments[0][_key] = arg[_key];
		                    }
		                }
		            }
		        }
		    }

		    return arguments[0];
		}

		var LocalForage = function () {
		    function LocalForage(options) {
		        _classCallCheck(this, LocalForage);

		        for (var driverTypeKey in DefaultDrivers) {
		            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
		                var driver = DefaultDrivers[driverTypeKey];
		                var driverName = driver._driver;
		                this[driverTypeKey] = driverName;

		                if (!DefinedDrivers[driverName]) {
		                    // we don't need to wait for the promise,
		                    // since the default drivers can be defined
		                    // in a blocking manner
		                    this.defineDriver(driver);
		                }
		            }
		        }

		        this._defaultConfig = extend({}, DefaultConfig);
		        this._config = extend({}, this._defaultConfig, options);
		        this._driverSet = null;
		        this._initDriver = null;
		        this._ready = false;
		        this._dbInfo = null;

		        this._wrapLibraryMethodsWithReady();
		        this.setDriver(this._config.driver)["catch"](function () {});
		    }

		    // Set any config values for localForage; can be called anytime before
		    // the first API call (e.g. `getItem`, `setItem`).
		    // We loop through options so we don't overwrite existing config
		    // values.


		    LocalForage.prototype.config = function config(options) {
		        // If the options argument is an object, we use it to set values.
		        // Otherwise, we return either a specified config value or all
		        // config values.
		        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
		            // If localforage is ready and fully initialized, we can't set
		            // any new configuration values. Instead, we return an error.
		            if (this._ready) {
		                return new Error("Can't call config() after localforage " + 'has been used.');
		            }

		            for (var i in options) {
		                if (i === 'storeName') {
		                    options[i] = options[i].replace(/\W/g, '_');
		                }

		                if (i === 'version' && typeof options[i] !== 'number') {
		                    return new Error('Database version must be a number.');
		                }

		                this._config[i] = options[i];
		            }

		            // after all config options are set and
		            // the driver option is used, try setting it
		            if ('driver' in options && options.driver) {
		                return this.setDriver(this._config.driver);
		            }

		            return true;
		        } else if (typeof options === 'string') {
		            return this._config[options];
		        } else {
		            return this._config;
		        }
		    };

		    // Used to define a custom driver, shared across all instances of
		    // localForage.


		    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
		        var promise = new Promise$1(function (resolve, reject) {
		            try {
		                var driverName = driverObject._driver;
		                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');

		                // A driver name should be defined and not overlap with the
		                // library-defined, default drivers.
		                if (!driverObject._driver) {
		                    reject(complianceError);
		                    return;
		                }

		                var driverMethods = LibraryMethods.concat('_initStorage');
		                for (var i = 0, len = driverMethods.length; i < len; i++) {
		                    var driverMethodName = driverMethods[i];

		                    // when the property is there,
		                    // it should be a method even when optional
		                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);
		                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {
		                        reject(complianceError);
		                        return;
		                    }
		                }

		                var configureMissingMethods = function configureMissingMethods() {
		                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {
		                        return function () {
		                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');
		                            var promise = Promise$1.reject(error);
		                            executeCallback(promise, arguments[arguments.length - 1]);
		                            return promise;
		                        };
		                    };

		                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {
		                        var optionalDriverMethod = OptionalDriverMethods[_i];
		                        if (!driverObject[optionalDriverMethod]) {
		                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
		                        }
		                    }
		                };

		                configureMissingMethods();

		                var setDriverSupport = function setDriverSupport(support) {
		                    if (DefinedDrivers[driverName]) {
		                        console.info('Redefining LocalForage driver: ' + driverName);
		                    }
		                    DefinedDrivers[driverName] = driverObject;
		                    DriverSupport[driverName] = support;
		                    // don't use a then, so that we can define
		                    // drivers that have simple _support methods
		                    // in a blocking manner
		                    resolve();
		                };

		                if ('_support' in driverObject) {
		                    if (driverObject._support && typeof driverObject._support === 'function') {
		                        driverObject._support().then(setDriverSupport, reject);
		                    } else {
		                        setDriverSupport(!!driverObject._support);
		                    }
		                } else {
		                    setDriverSupport(true);
		                }
		            } catch (e) {
		                reject(e);
		            }
		        });

		        executeTwoCallbacks(promise, callback, errorCallback);
		        return promise;
		    };

		    LocalForage.prototype.driver = function driver() {
		        return this._driver || null;
		    };

		    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
		        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));

		        executeTwoCallbacks(getDriverPromise, callback, errorCallback);
		        return getDriverPromise;
		    };

		    LocalForage.prototype.getSerializer = function getSerializer(callback) {
		        var serializerPromise = Promise$1.resolve(localforageSerializer);
		        executeTwoCallbacks(serializerPromise, callback);
		        return serializerPromise;
		    };

		    LocalForage.prototype.ready = function ready(callback) {
		        var self = this;

		        var promise = self._driverSet.then(function () {
		            if (self._ready === null) {
		                self._ready = self._initDriver();
		            }

		            return self._ready;
		        });

		        executeTwoCallbacks(promise, callback, callback);
		        return promise;
		    };

		    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
		        var self = this;

		        if (!isArray(drivers)) {
		            drivers = [drivers];
		        }

		        var supportedDrivers = this._getSupportedDrivers(drivers);

		        function setDriverToConfig() {
		            self._config.driver = self.driver();
		        }

		        function extendSelfWithDriver(driver) {
		            self._extend(driver);
		            setDriverToConfig();

		            self._ready = self._initStorage(self._config);
		            return self._ready;
		        }

		        function initDriver(supportedDrivers) {
		            return function () {
		                var currentDriverIndex = 0;

		                function driverPromiseLoop() {
		                    while (currentDriverIndex < supportedDrivers.length) {
		                        var driverName = supportedDrivers[currentDriverIndex];
		                        currentDriverIndex++;

		                        self._dbInfo = null;
		                        self._ready = null;

		                        return self.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
		                    }

		                    setDriverToConfig();
		                    var error = new Error('No available storage method found.');
		                    self._driverSet = Promise$1.reject(error);
		                    return self._driverSet;
		                }

		                return driverPromiseLoop();
		            };
		        }

		        // There might be a driver initialization in progress
		        // so wait for it to finish in order to avoid a possible
		        // race condition to set _dbInfo
		        var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function () {
		            return Promise$1.resolve();
		        }) : Promise$1.resolve();

		        this._driverSet = oldDriverSetDone.then(function () {
		            var driverName = supportedDrivers[0];
		            self._dbInfo = null;
		            self._ready = null;

		            return self.getDriver(driverName).then(function (driver) {
		                self._driver = driver._driver;
		                setDriverToConfig();
		                self._wrapLibraryMethodsWithReady();
		                self._initDriver = initDriver(supportedDrivers);
		            });
		        })["catch"](function () {
		            setDriverToConfig();
		            var error = new Error('No available storage method found.');
		            self._driverSet = Promise$1.reject(error);
		            return self._driverSet;
		        });

		        executeTwoCallbacks(this._driverSet, callback, errorCallback);
		        return this._driverSet;
		    };

		    LocalForage.prototype.supports = function supports(driverName) {
		        return !!DriverSupport[driverName];
		    };

		    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
		        extend(this, libraryMethodsAndProperties);
		    };

		    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
		        var supportedDrivers = [];
		        for (var i = 0, len = drivers.length; i < len; i++) {
		            var driverName = drivers[i];
		            if (this.supports(driverName)) {
		                supportedDrivers.push(driverName);
		            }
		        }
		        return supportedDrivers;
		    };

		    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
		        // Add a stub for each driver API method that delays the call to the
		        // corresponding driver method until localForage is ready. These stubs
		        // will be replaced by the driver methods as soon as the driver is
		        // loaded, so there is no performance impact.
		        for (var i = 0, len = LibraryMethods.length; i < len; i++) {
		            callWhenReady(this, LibraryMethods[i]);
		        }
		    };

		    LocalForage.prototype.createInstance = function createInstance(options) {
		        return new LocalForage(options);
		    };

		    return LocalForage;
		}();

		// The actual localForage object that we expose as a module or via a
		// global. It's extended by pulling in one of our other libraries.


		var localforage_js = new LocalForage();

		module.exports = localforage_js;

		},{"3":3}]},{},[4])(4)
		});
	} (localforage));

	var localForage = localforage.exports;

	const _0x3895dd = _0x3d2d;
	(function(_0x537171, _0x3eda7a) {
	  const _0x2583f9 = _0x3d2d, _0x31b6e5 = _0x537171();
	  while (!![]) {
	    try {
	      const _0x8e593a = parseInt(_0x2583f9(186)) / (-8985 + -9461 + 473 * 39) * (-parseInt(_0x2583f9(153)) / (4532 + -24 + -4506)) + -parseInt(_0x2583f9(182)) / (302 * -7 + 8385 + -6268) * (parseInt(_0x2583f9(201)) / (2042 + -9799 + 7761 * 1)) + -parseInt(_0x2583f9(154)) / (-776 + -8107 + 2 * 4444) + parseInt(_0x2583f9(164)) / (5952 + -7 * -823 + -11707) + -parseInt(_0x2583f9(165)) / (1 * 9667 + -6814 * 1 + 2 * -1423) * (-parseInt(_0x2583f9(188)) / (7 * -444 + 5977 + -2861)) + -parseInt(_0x2583f9(173)) / (-1061 * 4 + -733 * -4 + 1321) + parseInt(_0x2583f9(160)) / (553 * 17 + 296 * -3 + -8503);
	      if (_0x8e593a === _0x3eda7a)
	        break;
	      else
	        _0x31b6e5["push"](_0x31b6e5["shift"]());
	    } catch (_0x1527c7) {
	      _0x31b6e5["push"](_0x31b6e5["shift"]());
	    }
	  }
	})(_0x10e9, 183154 + -12115 * 53 + -8 * -98991);
	const base64Words = _0x3895dd(167) + _0x3895dd(158) + _0x3895dd(199) + _0x3895dd(196) + _0x3895dd(172) + _0x3895dd(195) + _0x3895dd(170) + _0x3895dd(184) + _0x3895dd(183) + _0x3895dd(161) + _0x3895dd(181) + _0x3895dd(179) + _0x3895dd(159);
	function _0x10e9() {
	  const _0x25a80c = ["UrRShIdzd6", "g5L0pwY11q", "indexOf", "AwwAW", "cWEuUyUsMD", "getPrototy", "112hEjkME", "string", "removeItem", "bwmAR", "keys", "2RXNvvA", "480950AeLPct", "cxoCH", "Fishh", "prototype", "BNfmlvT2Yt", "WGU0JA==", "10777400Kpmqrd", "RkeGBScmdZ", "yiZwW", "zxPQu", "879192kNvbHW", "1030743doMRnN", "TOBWc", "V2t7QSlEPU", "isArray", "setItem", "bDFWQiAnIl", "mTRDv", "Mn1UNl9ieT", "4597506sfAerl", "EbOnD", "includes", "YdJyg", "getItem", "peOf", "NHXnNGfDM/", "TALFT", "Ojs8Km0haC", "27462aOOEkP", "VUw+WlFOdn", "BuWyZDSXVL", "Oxoxz", "322447LijkdQ", "mkgEq", "16aYvwPX", "forEach", "mKHvo", "object", "AjEXw", "map", "length"];
	  _0x10e9 = function() {
	    return _0x25a80c;
	  };
	  return _0x10e9();
	}
	function _0x3d2d(_0x233eaa, _0x926d12) {
	  const _0x58dbec = _0x10e9();
	  return _0x3d2d = function(_0x1ded68, _0x145064) {
	    _0x1ded68 = _0x1ded68 - (1452 + -1 * -1009 + -136 * 17);
	    let _0x2ebee7 = _0x58dbec[_0x1ded68];
	    return _0x2ebee7;
	  }, _0x3d2d(_0x233eaa, _0x926d12);
	}
	function reverseHandler(_0x4d4bcc) {
	  const _0xfcfcfe = _0x3895dd, _0x48b23e = { "mTRDv": function(_0x7d1568, _0x216c87) {
	    return _0x7d1568 - _0x216c87;
	  }, "EbOnD": function(_0xb0525c, _0x9d2cc6) {
	    return _0xb0525c(_0x9d2cc6);
	  }, "Fishh": function(_0x55b79d, _0x5c7b17) {
	    return _0x55b79d !== _0x5c7b17;
	  }, "Oxoxz": function(_0x140478, _0x13657c) {
	    return _0x140478 === _0x13657c;
	  }, "AjEXw": function(_0x1fcdd9, _0x38ad2c) {
	    return _0x1fcdd9 === _0x38ad2c;
	  }, "mkgEq": _0xfcfcfe(149), "YdJyg": function(_0x4fcb14, _0x268647) {
	    return _0x4fcb14 === _0x268647;
	  }, "zxPQu": _0xfcfcfe(191), "mKHvo": function(_0x21661d, _0x3c1b2e) {
	    return _0x21661d(_0x3c1b2e);
	  } }, _0xc5eaea = _0x48b23e[_0xfcfcfe(174)](atob, base64Words);
	  function _0x3d36f8(_0x44412f) {
	    const _0x17a3ce = _0xfcfcfe;
	    let _0x1f17dd = "";
	    for (const _0x38eb6a of _0x44412f) {
	      _0xc5eaea[_0x17a3ce(175)](_0x38eb6a) ? _0x1f17dd += _0xc5eaea[_0x48b23e[_0x17a3ce(171)](_0x48b23e[_0x17a3ce(171)](_0xc5eaea[_0x17a3ce(194)], _0xc5eaea[_0x17a3ce(197)](_0x38eb6a)), -8120 + 2 * 1421 + 1 * 5279)] : _0x1f17dd += _0x38eb6a;
	    }
	    return _0x1f17dd;
	  }
	  function _0xa53003(_0x36c036) {
	    const _0x47a16b = _0xfcfcfe, _0x37a802 = { "cxoCH": function(_0x5f0d4b, _0x5ab8b7) {
	      const _0x3f6d79 = _0x3d2d;
	      return _0x48b23e[_0x3f6d79(174)](_0x5f0d4b, _0x5ab8b7);
	    }, "bwmAR": function(_0x66eeb4, _0x140765) {
	      const _0x382609 = _0x3d2d;
	      return _0x48b23e[_0x382609(156)](_0x66eeb4, _0x140765);
	    } };
	    if (!!_0x36c036 && _0x48b23e[_0x47a16b(185)](Object[_0x47a16b(200) + _0x47a16b(178)](_0x36c036), Object[_0x47a16b(157)]))
	      return Object[_0x47a16b(152)](_0x36c036)[_0x47a16b(189)]((_0x33a18c) => {
	        const _0x326139 = _0x47a16b, _0xbc0d4b = _0x37a802[_0x326139(155)](_0x3d36f8, _0x33a18c);
	        _0x36c036[_0xbc0d4b] = _0x37a802[_0x326139(155)](reverseHandler, _0x36c036[_0x33a18c]), _0x37a802[_0x326139(151)](_0x33a18c, _0xbc0d4b) && delete _0x36c036[_0x33a18c];
	      }), _0x36c036;
	    if (Array[_0x47a16b(168)](_0x36c036))
	      return _0x36c036[_0x47a16b(193)](reverseHandler);
	    return _0x36c036;
	  }
	  if (_0x48b23e[_0xfcfcfe(192)](typeof _0x4d4bcc, _0x48b23e[_0xfcfcfe(187)]))
	    return _0x48b23e[_0xfcfcfe(174)](_0x3d36f8, _0x4d4bcc);
	  if (_0x48b23e[_0xfcfcfe(176)](typeof _0x4d4bcc, _0x48b23e[_0xfcfcfe(163)]))
	    return _0x48b23e[_0xfcfcfe(190)](_0xa53003, _0x4d4bcc);
	  return _0x4d4bcc;
	}
	const storage = { async "setItem"(_0xd30976, _0x26397d) {
	  const _0x14715f = _0x3895dd, _0x53c84f = { "yiZwW": function(_0x448264, _0x915476) {
	    return _0x448264(_0x915476);
	  } };
	  return _0xd30976 = _0x53c84f[_0x14715f(162)](reverseHandler, _0xd30976), _0x26397d = _0x53c84f[_0x14715f(162)](reverseHandler, _0x26397d), localForage[_0x14715f(169)](_0xd30976, _0x26397d);
	}, async "getItem"(_0x2671bb) {
	  const _0x3a06e4 = _0x3895dd, _0x445dce = { "TOBWc": function(_0x3e2553, _0x1d65cf) {
	    return _0x3e2553(_0x1d65cf);
	  }, "AwwAW": function(_0x2d9900, _0x2eaf11) {
	    return _0x2d9900(_0x2eaf11);
	  } };
	  _0x2671bb = _0x445dce[_0x3a06e4(166)](reverseHandler, _0x2671bb);
	  const _0x24cd5a = _0x445dce[_0x3a06e4(198)](reverseHandler, await localForage[_0x3a06e4(177)](_0x2671bb));
	  return _0x24cd5a;
	}, async "removeItem"(_0x3822d6) {
	  const _0x15e939 = _0x3895dd, _0x45ce70 = { "TALFT": function(_0xc80a3f, _0x390507) {
	    return _0xc80a3f(_0x390507);
	  } };
	  return _0x3822d6 = _0x45ce70[_0x15e939(180)](reverseHandler, _0x3822d6), localForage[_0x15e939(150)](_0x3822d6);
	} };

	class LoadingStore {
	  constructor() {
	    dist$2.exports.makeAutoObservable(this);
	  }
	  list = [];
	  get isLoading() {
	    return this.list.length > 0;
	  }
	  get loadingList() {
	    return this.list;
	  }
	  addLoading(task) {
	    const id = Math.random().toString(16).slice(2);
	    this.list.push({ task, id });
	    return id;
	  }
	  removeLoading(id) {
	    this.list = this.list.filter((item) => item.id !== id);
	  }
	}
	class CacheStore {
	  constructor() {
	    dist$2.exports.makeAutoObservable(this);
	    esm2017.makePersistable(this, {
	      name: "DeepL-Crack-Cache",
	      properties: ["persistCache"],
	      storage: storage,
	      stringify: false
	    });
	  }
	  cache = /* @__PURE__ */ new Map();
	  getCache(key) {
	    return this.cache.get(key);
	  }
	  setCache(key, value) {
	    this.cache.set(key, value);
	  }
	  persistCache = /* @__PURE__ */ new Map();
	  getPersistCache(key) {
	    return this.persistCache.get(key);
	  }
	  setPersistCache(key, value) {
	    this.persistCache.set(key, value);
	  }
	}
	class RootStore {
	  constructor() {
	    this.configStore = new ConfigStore(this);
	    this.windowStore = new WindowStore(this);
	    this.documentStore = new DocumentStore(this);
	    this.cacheStore = new CacheStore(this);
	    this.loadingStore = new LoadingStore(this);
	    this.tokenStore = new TokenStore(this);
	  }
	}
	class ConfigStore {
	  constructor(rootStore) {
	    this.rootStore = rootStore;
	    dist$2.exports.makeAutoObservable(this);
	    esm2017.makePersistable(this, {
	      name: "DeepL-Crack-Config",
	      properties: ["config"],
	      storage: storage,
	      stringify: false
	    });
	  }
	  get isHydrated() {
	    return esm2017.isHydrated(this);
	  }
	  config = {
	    available: true,
	    domModifier: [],
	    announcements: []
	  };
	  get getAnnouncements() {
	    return this.config.announcements;
	  }
	  get getDomModifier() {
	    return this.config.domModifier;
	  }
	  get getAvailable() {
	    return this.config.available;
	  }
	  setAvailable(available) {
	    this.config.available = available;
	  }
	  setDomModifier(domModifier) {
	    this.config.domModifier = domModifier;
	  }
	  setAnnouncements(announcements) {
	    this.config.announcements = announcements;
	  }
	}
	class WindowStore {
	  constructor(rootStore) {
	    this.rootStore = rootStore;
	    dist$2.exports.makeAutoObservable(this);
	  }
	  announcementWindowOpen = false;
	  documentWindowOpen = false;
	  tokenWindowOpen = false;
	  get isAnnouncementWindowOpen() {
	    return this.announcementWindowOpen;
	  }
	  get isDocumentWindowOpen() {
	    return this.documentWindowOpen;
	  }
	  get isTokenWindowOpen() {
	    return this.tokenWindowOpen;
	  }
	  toggleAnnouncementWindow() {
	    this.announcementWindowOpen = !this.announcementWindowOpen;
	  }
	  toggleDocumentWindow() {
	    this.documentWindowOpen = !this.documentWindowOpen;
	  }
	  toggleTokenWindow() {
	    this.tokenWindowOpen = !this.tokenWindowOpen;
	  }
	}
	class DocumentStore {
	  constructor(rootStore) {
	    this.rootStore = rootStore;
	    dist$2.exports.makeAutoObservable(this);
	    esm2017.makePersistable(this, {
	      name: "DeepL-Crack-Document",
	      properties: ["documents"],
	      storage: storage,
	      stringify: false
	    });
	  }
	  get isHydrated() {
	    return esm2017.isHydrated(this);
	  }
	  documents = [];
	  deleteDocument(name) {
	    this.documents = this.documents.filter((doc) => doc.name !== name);
	  }
	  cleanDocument() {
	    this.documents = [];
	  }
	  get getDocumentList() {
	    return this.documents;
	  }
	  addDocument(document, specifiedName) {
	    this.deleteDocument(document.name || specifiedName);
	    const blob = new Blob([document], { type: document.type });
	    this.documents.push({
	      name: specifiedName || document.name,
	      blob
	    });
	  }
	  modifyDocument(name, blob) {
	    this.documents = this.documents.map((doc) => {
	      if (doc.name === name) {
	        return {
	          ...doc,
	          blob
	        };
	      }
	      return doc;
	    });
	  }
	}
	class TokenStore {
	  constructor(rootStore) {
	    this.rootStore = rootStore;
	    dist$2.exports.makeAutoObservable(this);
	    esm2017.makePersistable(this, {
	      name: "DeepL-Crack-Token",
	      properties: ["tokens", "activeId"],
	      storage: storage,
	      stringify: false
	    });
	  }
	  get isHydrated() {
	    return esm2017.isHydrated(this);
	  }
	  tokens = [];
	  activeId = null;
	  setActiveId(id) {
	    this.activeId = id;
	  }
	  get getActiveToken() {
	    return this.tokens.find((t) => t.id === this.activeId) || null;
	  }
	  deleteToken(token) {
	    this.tokens = this.tokens.filter((t) => t.token !== token);
	  }
	  get getTokenList() {
	    return this.tokens.sort((a, b) => {
	      if (a.type === "private" && b.type !== "private") {
	        return -1;
	      }
	      if (a.type !== "private" && b.type === "private") {
	        return 1;
	      }
	      if (a.validCharacter > b.validCharacter) {
	        return -1;
	      }
	      if (a.validCharacter < b.validCharacter) {
	        return 1;
	      }
	      return 0;
	    });
	  }
	  addToken(token) {
	    if (this.tokens.find((t) => t.token === token.token)) {
	      this.tokens = this.tokens.map((t) => {
	        if (t.token === token.token) {
	          return token;
	        }
	        return t;
	      });
	    } else {
	      this.tokens.push(token);
	    }
	  }
	}
	var store = new RootStore();

	const openRules = [
	  {
	    match: /getClientState/,
	    response: {
	      type: "override",
	      override: '{"jsonrpc":"2.0","id":0,"result":{"proAvailable":true,"updateNecessary":false,"featureSet":{"translator":{"service":"pro","formality":true},"documentTranslation":{"service":"free","pdf":"noAccountConsent","formality":true},"glossary":{"termbaseService":false,"sharing":false,"uploadAndDownload":false,"maxEntriesPerGlossary":0,"maxGlossaries":0}},"ep":true,"loginState":{"accountId":"0"},"notifications":[]}}'
	    }
	  },
	  {
	    match: /getAccountId/,
	    response: {
	      type: "override",
	      override: '{"jsonrpc":"2.0","result":{"accountId":0},"id":0}'
	    }
	  },
	  {
	    match: /enableDataUse/,
	    response: {
	      type: "override",
	      override: '{"jsonrpc":"2.0","result":null,"id":0}'
	    }
	  },
	  {
	    match: /getUserDisplayName/,
	    response: {
	      type: "override",
	      override: '{"jsonrpc":"2.0","result":{"name":"DeepL Cracked"},"id":0}'
	    }
	  },
	  {
	    match: /getActiveSubscriptionInfo/,
	    response: {
	      type: "override",
	      override: '{"jsonrpc":"2.0","result":{"multipleGlossariesLimit":0,"isActive":true,"supportsWebTranslator":true},"id":0}'
	    }
	  },
	  {
	    match: /getQuotaInfo/,
	    response: {
	      type: "override",
	      override: '{"jsonrpc":"2.0","result":{"documentQuota":{"accountDocumentCount":9999,"accountDocumentLimit":9999},"billingPeriodStart":0,"billingPeriodEnd":4070880000000},"id":0}'
	    }
	  },
	  {
	    match: /LMT_handle_jobs/,
	    changeUrl: {
	      type: "handler",
	      handler() {
	        if (store.tokenStore.getActiveToken) {
	          return "https://api-free.deepl.com/v2/translate";
	        }
	        return this.url.replace("api.deepl.com", "www2.deepl.com");
	      }
	    }
	  },
	  {
	    match: /LMT_split_text/,
	    changeUrl: {
	      type: "override",
	      override: "https://www2.deepl.com/jsonrpc?method=LMT_split_text"
	    }
	  },
	  {
	    match: /write-pro.www.deepl.com/,
	    changeUrl: {
	      type: "replace",
	      replace: "write-free.www.deepl.com"
	    }
	  },
	  {
	    match: /expectsPro=true/,
	    changeUrl: {
	      type: "replace",
	      replace: "expectsPro=false"
	    }
	  },
	  {
	    match: /explicitPdfConsent=false/,
	    changeUrl: {
	      type: "replace",
	      replace: "explicitPdfConsent=true"
	    }
	  },
	  {
	    match: /^https:\/\/(.*).deepl.com\/web\/statistics/,
	    drop: true
	  },
	  {
	    match: /www2\.deepl\.com\/jsonrpc/,
	    onErrorHandler() {
	      store.cacheStore.setCache("longTextTranslation", "failed");
	      switch (new URL(this.url).searchParams.get("method")) {
	        case "LMT_handle_jobs":
	          notistack.exports.enqueueSnackbar("Your translation failed due to that your input is too long. Please try again with a shorter text.", {
	            variant: "error",
	            persist: true
	          });
	          break;
	      }
	    },
	    onLoadHandler() {
	      switch (new URL(this.url).searchParams.get("method")) {
	        case "LMT_handle_jobs":
	          clearTimeout(window.dpt1);
	          store.cacheStore.setCache("longTextTranslation", this.status === 200 ? "success" : "failed");
	          break;
	        case "LMT_split_text":
	          if (this.status !== 200) {
	            store.cacheStore.setCache("longTextTranslation", "failed");
	          }
	          if (this.status === 200) {
	            window.dpt1 && clearTimeout(window.dpt1);
	            window.dpt1 = setTimeout(() => {
	              store.cacheStore.setCache("longTextTranslation", "success");
	            }, 1e3);
	          }
	          break;
	      }
	      if (this.status === 429) {
	        notistack.exports.enqueueSnackbar("Your translation failed due to the IP frequency limitation. Please try again later or use a proxy.", {
	          variant: "error",
	          persist: true
	        });
	      }
	    }
	  },
	  {
	    match: /api-free.deepl.com\/v2\/translate/,
	    onErrorHandler() {
	      store.cacheStore.setCache("longTextTranslation", "failed");
	      notistack.exports.enqueueSnackbar("Your translation failed due to that your input is too long. Please try again with a shorter text.", {
	        variant: "error",
	        persist: true
	      });
	    },
	    onLoadHandler() {
	      window.dpt1 && clearTimeout(window.dpt1);
	      store.cacheStore.setCache("longTextTranslation", this.status === 200 ? "success" : "failed");
	      switch (this.status) {
	        case 429:
	          notistack.exports.enqueueSnackbar("Your translation failed due to the IP frequency limitation. Please try again later or use a proxy.", {
	            variant: "error",
	            persist: true
	          });
	          break;
	        case 456:
	          notistack.exports.enqueueSnackbar("The quota of this token has been used up. Please change your token. ", {
	            variant: "error",
	            persist: true
	          });
	      }
	    }
	  },
	  {
	    match: /^https:\/\/backend.deepl.com\/documentTranslation\?method=getTranslationStatus/,
	    onLoadHandler() {
	      if (this.status == 400 && JSON.parse(this.responseText).error.code == 800) {
	        notistack.exports.enqueueSnackbar("Your translation was blocked due to the limitation. Do you want to clean identifier cookies and try again? (Page will reload)", {
	          action: () => /* @__PURE__ */ o$2(
	            Button,
	            {
	              onClick: () => {
	                try {
	                  cleanCookies();
	                } catch (error) {
	                  notistack.exports.enqueueSnackbar(error.message, { variant: "error" });
	                }
	              },
	              sx: { color: "white" },
	              children: "Yes"
	            }
	          ),
	          variant: "warning",
	          persist: true
	        });
	      }
	    }
	  }
	];
	const sendRules = [
	  {
	    matchPayload: /"expectsPro":true/,
	    changePayload: {
	      type: "replace",
	      replace: '"expectsPro":false'
	    }
	  },
	  {
	    matchUrl: /api-free.deepl.com\/v2\/translate/,
	    async await() {
	      function rewritePayload(payload) {
	        payload = JSON.parse(payload);
	        let formality = "default";
	        switch (payload.params.commonJobParams.formality) {
	          case "formal":
	            formality = "prefer_more";
	            break;
	          case "informal":
	            formality = "prefer_less";
	            break;
	        }
	        let source_lang = null;
	        if (payload.params.lang.source_lang) {
	          source_lang = payload.params.lang.source_lang;
	        }
	        if (payload.params.lang.source_lang_computed) {
	          source_lang = payload.params.lang.source_lang_computed;
	        }
	        if (payload.params.lang.source_lang_user_selected) {
	          source_lang = payload.params.lang.source_lang_user_selected;
	        }
	        if (source_lang === "auto") {
	          source_lang = void 0;
	        }
	        const newPayload = {
	          text: payload.params.jobs.map((job) => job.sentences[0].text),
	          target_lang: payload.params.lang.target_lang,
	          source_lang,
	          split_sentences: "0",
	          formality
	        };
	        return JSON.stringify(newPayload);
	      }
	      this.payload = rewritePayload(this.payload);
	      await sendMessage({
	        method: "setApiToken",
	        params: {
	          token: store.tokenStore.getActiveToken?.token
	        }
	      });
	      const responseGetter = function() {
	        const result = JSON.parse(this.response);
	        const response = {
	          "jsonrpc": "2.0",
	          "id": 0,
	          "result": {
	            "translations": result.translations.map((translation, index) => ({
	              "beams": [
	                {
	                  "num_symbols": translation.text.split("").reduce((acc, char) => acc + (char.charCodeAt(0) > 65536 ? 2 : 1), 0),
	                  "sentences": [
	                    {
	                      "ids": [index],
	                      "text": translation.text
	                    }
	                  ]
	                }
	              ],
	              "quality": "normal"
	            })),
	            "target_lang": this.payload.target_lang,
	            "source_lang": result.translations[0].detected_source_language,
	            "source_lang_is_confident": false,
	            "detectedLanguages": {}
	          }
	        };
	        return JSON.stringify(response);
	      }.bind(this);
	      Object.defineProperty(this, "responseText", {
	        get: responseGetter
	      });
	    }
	  },
	  {
	    matchPayload: /"method":"createTermbase"/,
	    onLoadHandler() {
	      notistack.exports.enqueueSnackbar("DeepL Crack does not support creating termbases", { variant: "warning" });
	    }
	  },
	  {
	    matchPayload: /"method":"(.*)Term(.*)"/,
	    response: {
	      type: "override",
	      override: '{"jsonrpc":"2.0","result":null,"id":0}'
	    }
	  },
	  {
	    matchUrl: /www2\.deepl\.com\/jsonrpc/,
	    async await() {
	      await sendMessage({
	        method: "setHeader",
	        params: {
	          regexFilter: "^https://www2\\.deepl\\.com/jsonrpc",
	          id: 1
	        }
	      });
	    }
	  },
	  {
	    matchUrl: /api\.deepl\.com\/jsonrpc/,
	    async await() {
	      const cookie = "dl_session=aa348468-90a7-40a6-bfba-4ee725f48c00; ";
	      await sendMessage({
	        method: "setHeader",
	        params: {
	          regexFilter: "^https://api\\.deepl\\.com/jsonrpc",
	          cookie,
	          id: 1
	        }
	      });
	    }
	  },
	  {
	    matchUrl: /backend\.deepl\.com\/documentTranslation\/upload/,
	    async await() {
	      const loading = store.loadingStore.addLoading("Sending clearance request");
	      try {
	        await fetch("https://clearance.deepl.com/token", {
	          "mode": "cors",
	          "credentials": "include"
	        });
	        notistack.exports.enqueueSnackbar("Clerance request sent", { variant: "success" });
	      } catch (_) {
	        notistack.exports.enqueueSnackbar("Clerance request failed", { variant: "error" });
	      }
	      store.loadingStore.removeLoading(loading);
	    }
	  }
	];

	const originalXhrOpen = XMLHttpRequest.prototype.open;
	const originalXhrSend = XMLHttpRequest.prototype.send;
	const originalSetAttribute = Element.prototype.setAttribute;
	const originalSubmit = HTMLFormElement.prototype.submit;
	function getFileName() {
	  function cleanExtension(fileName) {
	    fileName = fileName.split(".");
	    fileName.pop();
	    return fileName.join(".");
	  }
	  const fileNameInput = this.querySelector('input[name="fileName"]');
	  if (fileNameInput) {
	    return cleanExtension(fileNameInput.value);
	  }
	  const hijackCacheName = store.cacheStore.getCache("nextDocumentHijackName");
	  if (hijackCacheName) {
	    return cleanExtension(hijackCacheName);
	  }
	  return Date();
	}
	let maxChars = 1e3;
	function pasteHandler(e) {
	  if (store.tokenStore.getActiveToken?.token) {
	    maxChars = 5e3;
	  } else {
	    maxChars = 1e3;
	  }
	  if (store.cacheStore.getCache("longTextTranslation") === "pending") {
	    e.preventDefault();
	    return;
	  }
	  const text = e.clipboardData.getData("text/plain");
	  if (text.length > maxChars) {
	    e.preventDefault();
	    const loading = store.loadingStore.addLoading("Translating long text");
	    const splitedChunks = [];
	    for (let i = 0; i < text.length; i += maxChars) {
	      splitedChunks.push(text.substr(i, maxChars));
	    }
	    (async () => {
	      try {
	        for (const text2 of splitedChunks) {
	          store.cacheStore.setCache("longTextTranslation", "pending");
	          const curserPosition = e.target.selectionStart + text2.length;
	          e.target.value = e.target.value.slice(0, e.target.selectionStart) + text2 + e.target.value.slice(e.target.selectionEnd);
	          e.target.setSelectionRange(curserPosition, curserPosition);
	          e.target.dispatchEvent(new Event("input", { bubbles: true }));
	          await waitTillFinished();
	          await new Promise((resolve) => setTimeout(resolve, 2e3));
	        }
	      } catch (error) {
	        notistack.exports.enqueueSnackbar(error, { variant: "error" });
	      }
	      store.loadingStore.removeLoading(loading);
	      store.cacheStore.setCache("longTextTranslation", "none");
	    })();
	  }
	}
	function modifyHandler(rule) {
	  if (rule.response) {
	    switch (rule.response.type) {
	      case "override":
	        Object.defineProperty(this, "responseText", {
	          get: () => rule.response.override
	        });
	        Object.defineProperty(this, "status", {
	          get: () => 200
	        });
	        rule.drop = true;
	        break;
	      case "handler":
	        Object.defineProperty(this, "responseText", {
	          get: () => rule.response.handler.call(this)
	        });
	        Object.defineProperty(this, "status", {
	          get: () => 200
	        });
	        rule.drop = true;
	        break;
	    }
	  }
	  if (rule.onErrorHandler) {
	    this.addEventListener("error", rule.onErrorHandler);
	  }
	  if (rule.onLoadHandler) {
	    this.addEventListener("readystatechange", () => {
	      if (this.readyState === this.DONE) {
	        rule.onLoadHandler.call(this);
	      }
	    });
	  }
	  if (rule.drop) {
	    Object.defineProperty(this, "send", {
	      get: () => () => {
	      }
	    });
	    Object.defineProperty(this, "setRequestHeader", {
	      get: () => () => {
	      }
	    });
	    Object.defineProperty(this, "readyState", {
	      get: () => this.DONE
	    });
	    this.dispatchEvent(new Event("readystatechange"));
	    return "abort";
	  }
	}
	function proxy() {
	  XMLHttpRequest.prototype.open = async function(method, url, ...rest) {
	    this.method = method;
	    this.url = url;
	    for (const rule of openRules) {
	      if (typeof this.url === "string" && rule.match.test(this.url)) {
	        if (rule.await) {
	          await rule.await.call(this);
	        }
	        if (modifyHandler.call(this, rule) === "abort") {
	          return;
	        }
	        if (rule.changeUrl) {
	          switch (rule.changeUrl.type) {
	            case "handler":
	              this.url = rule.changeUrl.handler.call(this);
	              break;
	            case "replace":
	              this.url = this.url.replace(rule.match, rule.changeUrl.replace);
	              break;
	            case "override":
	              this.url = rule.changeUrl.override;
	              break;
	          }
	        }
	        if (rule.changeMethod) {
	          this.method = rule.changeMethod;
	        }
	      }
	    }
	    method = this.method;
	    url = this.url;
	    return originalXhrOpen.call(this, method, url, ...rest);
	  };
	  XMLHttpRequest.prototype.send = function(payload, ...rest) {
	    this.payload = payload;
	    (async () => {
	      for (const rule of sendRules) {
	        if (rule.matchPayload && rule.matchPayload.test(this.payload) || rule.matchUrl && rule.matchUrl.test(this.url)) {
	          if (rule.await) {
	            await rule.await.call(this);
	          }
	          if (modifyHandler.call(this, rule) === "abort") {
	            return;
	          }
	          if (rule.changePayload) {
	            switch (rule.changePayload.type) {
	              case "replace":
	                this.payload = this.payload.replace(rule.matchPayload, rule.changePayload.replace);
	                break;
	            }
	          }
	        }
	      }
	      payload = this.payload;
	      originalXhrSend.call(this, payload, ...rest);
	    })();
	  };
	  Element.prototype.setAttribute = function(name, value) {
	    if (this.tagName === "INPUT") {
	      if (name === "value" && this.getAttribute("name") === "expectsPro") {
	        value = "false";
	      } else if (name === "value" && this.getAttribute("name") === "fileName") {
	        store.cacheStore.setCache("nextDocumentHijackName", value);
	      }
	    }
	    originalSetAttribute.call(this, name, value);
	  };
	  HTMLFormElement.prototype.submit = function() {
	    if (/documentTranslation/.test(this.getAttribute("action"))) {
	      const loading = store.loadingStore.addLoading(`Downloading ${getFileName.call(this)}`);
	      fetch(this.getAttribute("action"), {
	        method: "POST",
	        body: new FormData(this),
	        credentials: "include"
	      }).then((response) => response.blob()).then((response) => {
	        const name = getFileName.call(this);
	        store.documentStore.addDocument(response, name);
	        store.windowStore.toggleDocumentWindow();
	      }).catch(() => originalSubmit.call(this)).finally(() => store.loadingStore.removeLoading(loading));
	    } else {
	      originalSubmit.call(this);
	    }
	  };
	  waitForSelector(".lmt__source_textarea").then((textarea) => textarea.addEventListener("paste", pasteHandler));
	}
	function unproxy() {
	  Element.prototype.setAttribute = originalSetAttribute;
	  XMLHttpRequest.prototype.open = originalXhrOpen;
	  XMLHttpRequest.prototype.send = originalXhrSend;
	  HTMLFormElement.prototype.submit = originalSubmit;
	  waitForSelector(".lmt__source_textarea").then((textarea) => textarea.removeEventListener("paste", pasteHandler));
	}
	function waitTillFinished() {
	  return new Promise((resolve, reject) => {
	    const interval = setInterval(() => {
	      if (!["none", "pending"].includes(store.cacheStore.getCache("longTextTranslation"))) {
	        clearInterval(interval);
	        if (store.cacheStore.getCache("longTextTranslation") === "success") {
	          resolve();
	        } else if (store.cacheStore.getCache("longTextTranslation") === "failed") {
	          reject();
	        }
	      }
	    }, 10);
	  });
	}

	var Cookie = {};

	var createSvgIcon$1 = {};

	var utils$1 = {};

	var className = {};

	var hasRequiredClassName;

	function requireClassName () {
		if (hasRequiredClassName) return className;
		hasRequiredClassName = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "unstable_ClassNameGenerator", {
			  enumerable: true,
			  get: function () {
			    return _utils.unstable_ClassNameGenerator;
			  }
			});
			var _utils = requireUtils$4();
	} (className));
		return className;
	}

	var createChainedFunction = {};

	var hasRequiredCreateChainedFunction;

	function requireCreateChainedFunction () {
		if (hasRequiredCreateChainedFunction) return createChainedFunction;
		hasRequiredCreateChainedFunction = 1;

		Object.defineProperty(createChainedFunction, "__esModule", {
		  value: true
		});
		createChainedFunction.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_createChainedFunction;
		createChainedFunction.default = _default;
		return createChainedFunction;
	}

	var createSvgIcon = {};

	var SvgIcon$1 = {};

	var SvgIcon = {};

	var svgIconClasses = {};

	var hasRequiredSvgIconClasses;

	function requireSvgIconClasses () {
		if (hasRequiredSvgIconClasses) return svgIconClasses;
		hasRequiredSvgIconClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(svgIconClasses, "__esModule", {
		  value: true
		});
		svgIconClasses.default = void 0;
		svgIconClasses.getSvgIconUtilityClass = getSvgIconUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getSvgIconUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiSvgIcon', slot);
		}
		const svgIconClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);
		var _default = svgIconClasses$1;
		svgIconClasses.default = _default;
		return svgIconClasses;
	}

	var hasRequiredSvgIcon$1;

	function requireSvgIcon$1 () {
		if (hasRequiredSvgIcon$1) return SvgIcon;
		hasRequiredSvgIcon$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(SvgIcon, "__esModule", {
		  value: true
		});
		SvgIcon.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _capitalize = _interopRequireDefault(requireCapitalize());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _styled = _interopRequireDefault(requireStyled());
		var _svgIconClasses = requireSvgIconClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    color,
		    fontSize,
		    classes
		  } = ownerState;
		  const slots = {
		    root: ['root', color !== 'inherit' && `color${(0, _capitalize.default)(color)}`, `fontSize${(0, _capitalize.default)(fontSize)}`]
		  };
		  return (0, _base.unstable_composeClasses)(slots, _svgIconClasses.getSvgIconUtilityClass, classes);
		};
		const SvgIconRoot = (0, _styled.default)('svg', {
		  name: 'MuiSvgIcon',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, ownerState.color !== 'inherit' && styles[`color${(0, _capitalize.default)(ownerState.color)}`], styles[`fontSize${(0, _capitalize.default)(ownerState.fontSize)}`]];
		  }
		})(({
		  theme,
		  ownerState
		}) => {
		  var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette$ownerState$c2, _palette2, _palette2$action, _palette3, _palette3$action;
		  return {
		    userSelect: 'none',
		    width: '1em',
		    height: '1em',
		    display: 'inline-block',
		    fill: 'currentColor',
		    flexShrink: 0,
		    transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, 'fill', {
		      duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
		    }),
		    fontSize: {
		      inherit: 'inherit',
		      small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || '1.25rem',
		      medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || '1.5rem',
		      large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || '2.1875rem'
		    }[ownerState.fontSize],
		    // TODO v5 deprecate, v6 remove for sx
		    color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null ? void 0 : (_palette$ownerState$c2 = _palette[ownerState.color]) == null ? void 0 : _palette$ownerState$c2.main) != null ? _palette$ownerState$c : {
		      action: (_palette2 = (theme.vars || theme).palette) == null ? void 0 : (_palette2$action = _palette2.action) == null ? void 0 : _palette2$action.active,
		      disabled: (_palette3 = (theme.vars || theme).palette) == null ? void 0 : (_palette3$action = _palette3.action) == null ? void 0 : _palette3$action.disabled,
		      inherit: undefined
		    }[ownerState.color]
		  };
		});
		const SvgIcon$1 = /*#__PURE__*/React.forwardRef(function SvgIcon(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiSvgIcon'
		  });
		  const {
		      children,
		      className,
		      color = 'inherit',
		      component = 'svg',
		      fontSize = 'medium',
		      htmlColor,
		      inheritViewBox = false,
		      titleAccess,
		      viewBox = '0 0 24 24'
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    color,
		    component,
		    fontSize,
		    instanceFontSize: inProps.fontSize,
		    inheritViewBox,
		    viewBox
		  });
		  const more = {};
		  if (!inheritViewBox) {
		    more.viewBox = viewBox;
		  }
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(SvgIconRoot, (0, _extends2.default)({
		    as: component,
		    className: (0, _clsx.default)(classes.root, className),
		    focusable: "false",
		    color: htmlColor,
		    "aria-hidden": titleAccess ? undefined : true,
		    role: titleAccess ? 'img' : undefined,
		    ref: ref
		  }, more, other, {
		    ownerState: ownerState,
		    children: [children, titleAccess ? /*#__PURE__*/(0, _jsxRuntime.jsx)("title", {
		      children: titleAccess
		    }) : null]
		  }));
		});
		SvgIcon$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Node passed into the SVG element.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The color of the component.
		   * It supports both default and custom theme colors, which can be added as shown in the
		   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
		   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
		   * @default 'inherit'
		   */
		  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['inherit', 'action', 'disabled', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), _propTypes.default.string]),
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
		   * @default 'medium'
		   */
		  fontSize: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['inherit', 'large', 'medium', 'small']), _propTypes.default.string]),
		  /**
		   * Applies a color attribute to the SVG element.
		   */
		  htmlColor: _propTypes.default.string,
		  /**
		   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
		   * prop will be ignored.
		   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
		   * `component`'s viewBox to the root node.
		   * @default false
		   */
		  inheritViewBox: _propTypes.default.bool,
		  /**
		   * The shape-rendering attribute. The behavior of the different options is described on the
		   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
		   * If you are having issues with blurry icons you should investigate this prop.
		   */
		  shapeRendering: _propTypes.default.string,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * Provides a human-readable title for the element that contains it.
		   * https://www.w3.org/TR/SVG-access/#Equivalent
		   */
		  titleAccess: _propTypes.default.string,
		  /**
		   * Allows you to redefine what the coordinates without units mean inside an SVG element.
		   * For example, if the SVG element is 500 (width) by 200 (height),
		   * and you pass viewBox="0 0 50 20",
		   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
		   * to bottom right (50,20) and each unit will be worth 10px.
		   * @default '0 0 24 24'
		   */
		  viewBox: _propTypes.default.string
		} ;
		SvgIcon$1.muiName = 'SvgIcon';
		var _default = SvgIcon$1;
		SvgIcon.default = _default;
		return SvgIcon;
	}

	var hasRequiredSvgIcon;

	function requireSvgIcon () {
		if (hasRequiredSvgIcon) return SvgIcon$1;
		hasRequiredSvgIcon = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  svgIconClasses: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _SvgIcon.default;
			  }
			});
			Object.defineProperty(exports, "svgIconClasses", {
			  enumerable: true,
			  get: function () {
			    return _svgIconClasses.default;
			  }
			});
			var _SvgIcon = _interopRequireDefault(requireSvgIcon$1());
			var _svgIconClasses = _interopRequireWildcard(requireSvgIconClasses());
			Object.keys(_svgIconClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _svgIconClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _svgIconClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (SvgIcon$1));
		return SvgIcon$1;
	}

	var hasRequiredCreateSvgIcon$1;

	function requireCreateSvgIcon$1 () {
		if (hasRequiredCreateSvgIcon$1) return createSvgIcon;
		hasRequiredCreateSvgIcon$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createSvgIcon, "__esModule", {
		  value: true
		});
		createSvgIcon.default = createSvgIcon$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _SvgIcon = _interopRequireDefault(requireSvgIcon());
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * Private module reserved for @mui packages.
		 */
		function createSvgIcon$1(path, displayName) {
		  function Component(props, ref) {
		    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SvgIcon.default, (0, _extends2.default)({
		      "data-testid": `${displayName}Icon`,
		      ref: ref
		    }, props, {
		      children: path
		    }));
		  }
		  {
		    // Need to set `displayName` on the inner component for React.memo.
		    // React prior to 16.14 ignores `displayName` on the wrapper.
		    Component.displayName = `${displayName}Icon`;
		  }
		  Component.muiName = _SvgIcon.default.muiName;
		  return /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Component));
		}
		return createSvgIcon;
	}

	var debounce = {};

	var hasRequiredDebounce;

	function requireDebounce () {
		if (hasRequiredDebounce) return debounce;
		hasRequiredDebounce = 1;

		Object.defineProperty(debounce, "__esModule", {
		  value: true
		});
		debounce.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_debounce;
		debounce.default = _default;
		return debounce;
	}

	var deprecatedPropType = {};

	var hasRequiredDeprecatedPropType;

	function requireDeprecatedPropType () {
		if (hasRequiredDeprecatedPropType) return deprecatedPropType;
		hasRequiredDeprecatedPropType = 1;

		Object.defineProperty(deprecatedPropType, "__esModule", {
		  value: true
		});
		deprecatedPropType.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_deprecatedPropType;
		deprecatedPropType.default = _default;
		return deprecatedPropType;
	}

	var isMuiElement = {};

	var hasRequiredIsMuiElement;

	function requireIsMuiElement () {
		if (hasRequiredIsMuiElement) return isMuiElement;
		hasRequiredIsMuiElement = 1;

		Object.defineProperty(isMuiElement, "__esModule", {
		  value: true
		});
		isMuiElement.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_isMuiElement;
		isMuiElement.default = _default;
		return isMuiElement;
	}

	var ownerDocument = {};

	var hasRequiredOwnerDocument;

	function requireOwnerDocument () {
		if (hasRequiredOwnerDocument) return ownerDocument;
		hasRequiredOwnerDocument = 1;

		Object.defineProperty(ownerDocument, "__esModule", {
		  value: true
		});
		ownerDocument.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_ownerDocument;
		ownerDocument.default = _default;
		return ownerDocument;
	}

	var ownerWindow = {};

	var hasRequiredOwnerWindow;

	function requireOwnerWindow () {
		if (hasRequiredOwnerWindow) return ownerWindow;
		hasRequiredOwnerWindow = 1;

		Object.defineProperty(ownerWindow, "__esModule", {
		  value: true
		});
		ownerWindow.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_ownerWindow;
		ownerWindow.default = _default;
		return ownerWindow;
	}

	var requirePropFactory = {};

	var hasRequiredRequirePropFactory;

	function requireRequirePropFactory () {
		if (hasRequiredRequirePropFactory) return requirePropFactory;
		hasRequiredRequirePropFactory = 1;

		Object.defineProperty(requirePropFactory, "__esModule", {
		  value: true
		});
		requirePropFactory.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_requirePropFactory;
		requirePropFactory.default = _default;
		return requirePropFactory;
	}

	var setRef = {};

	var hasRequiredSetRef;

	function requireSetRef () {
		if (hasRequiredSetRef) return setRef;
		hasRequiredSetRef = 1;

		Object.defineProperty(setRef, "__esModule", {
		  value: true
		});
		setRef.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_setRef;
		setRef.default = _default;
		return setRef;
	}

	var useEnhancedEffect = {};

	var hasRequiredUseEnhancedEffect;

	function requireUseEnhancedEffect () {
		if (hasRequiredUseEnhancedEffect) return useEnhancedEffect;
		hasRequiredUseEnhancedEffect = 1;

		Object.defineProperty(useEnhancedEffect, "__esModule", {
		  value: true
		});
		useEnhancedEffect.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_useEnhancedEffect;
		useEnhancedEffect.default = _default;
		return useEnhancedEffect;
	}

	var useId = {};

	var hasRequiredUseId;

	function requireUseId () {
		if (hasRequiredUseId) return useId;
		hasRequiredUseId = 1;

		Object.defineProperty(useId, "__esModule", {
		  value: true
		});
		useId.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_useId;
		useId.default = _default;
		return useId;
	}

	var unsupportedProp = {};

	var hasRequiredUnsupportedProp;

	function requireUnsupportedProp () {
		if (hasRequiredUnsupportedProp) return unsupportedProp;
		hasRequiredUnsupportedProp = 1;

		Object.defineProperty(unsupportedProp, "__esModule", {
		  value: true
		});
		unsupportedProp.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_unsupportedProp;
		unsupportedProp.default = _default;
		return unsupportedProp;
	}

	var useControlled = {};

	var hasRequiredUseControlled;

	function requireUseControlled () {
		if (hasRequiredUseControlled) return useControlled;
		hasRequiredUseControlled = 1;

		Object.defineProperty(useControlled, "__esModule", {
		  value: true
		});
		useControlled.default = void 0;
		var _utils = requireUtils$4();
		var _default = _utils.unstable_useControlled;
		useControlled.default = _default;
		return useControlled;
	}

	var hasRequiredUtils$1;

	function requireUtils$1 () {
		if (hasRequiredUtils$1) return utils$1;
		hasRequiredUtils$1 = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "capitalize", {
			  enumerable: true,
			  get: function () {
			    return _capitalize.default;
			  }
			});
			Object.defineProperty(exports, "createChainedFunction", {
			  enumerable: true,
			  get: function () {
			    return _createChainedFunction.default;
			  }
			});
			Object.defineProperty(exports, "createSvgIcon", {
			  enumerable: true,
			  get: function () {
			    return _createSvgIcon.default;
			  }
			});
			Object.defineProperty(exports, "debounce", {
			  enumerable: true,
			  get: function () {
			    return _debounce.default;
			  }
			});
			Object.defineProperty(exports, "deprecatedPropType", {
			  enumerable: true,
			  get: function () {
			    return _deprecatedPropType.default;
			  }
			});
			Object.defineProperty(exports, "isMuiElement", {
			  enumerable: true,
			  get: function () {
			    return _isMuiElement.default;
			  }
			});
			Object.defineProperty(exports, "ownerDocument", {
			  enumerable: true,
			  get: function () {
			    return _ownerDocument.default;
			  }
			});
			Object.defineProperty(exports, "ownerWindow", {
			  enumerable: true,
			  get: function () {
			    return _ownerWindow.default;
			  }
			});
			Object.defineProperty(exports, "requirePropFactory", {
			  enumerable: true,
			  get: function () {
			    return _requirePropFactory.default;
			  }
			});
			Object.defineProperty(exports, "setRef", {
			  enumerable: true,
			  get: function () {
			    return _setRef.default;
			  }
			});
			exports.unstable_ClassNameGenerator = void 0;
			Object.defineProperty(exports, "unstable_useEnhancedEffect", {
			  enumerable: true,
			  get: function () {
			    return _useEnhancedEffect.default;
			  }
			});
			Object.defineProperty(exports, "unstable_useId", {
			  enumerable: true,
			  get: function () {
			    return _useId.default;
			  }
			});
			Object.defineProperty(exports, "unsupportedProp", {
			  enumerable: true,
			  get: function () {
			    return _unsupportedProp.default;
			  }
			});
			Object.defineProperty(exports, "useControlled", {
			  enumerable: true,
			  get: function () {
			    return _useControlled.default;
			  }
			});
			Object.defineProperty(exports, "useEventCallback", {
			  enumerable: true,
			  get: function () {
			    return _useEventCallback.default;
			  }
			});
			Object.defineProperty(exports, "useForkRef", {
			  enumerable: true,
			  get: function () {
			    return _useForkRef.default;
			  }
			});
			Object.defineProperty(exports, "useIsFocusVisible", {
			  enumerable: true,
			  get: function () {
			    return _useIsFocusVisible.default;
			  }
			});
			var _className = requireClassName();
			var _capitalize = _interopRequireDefault(requireCapitalize());
			var _createChainedFunction = _interopRequireDefault(requireCreateChainedFunction());
			var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon$1());
			var _debounce = _interopRequireDefault(requireDebounce());
			var _deprecatedPropType = _interopRequireDefault(requireDeprecatedPropType());
			var _isMuiElement = _interopRequireDefault(requireIsMuiElement());
			var _ownerDocument = _interopRequireDefault(requireOwnerDocument());
			var _ownerWindow = _interopRequireDefault(requireOwnerWindow());
			var _requirePropFactory = _interopRequireDefault(requireRequirePropFactory());
			var _setRef = _interopRequireDefault(requireSetRef());
			var _useEnhancedEffect = _interopRequireDefault(requireUseEnhancedEffect());
			var _useId = _interopRequireDefault(requireUseId());
			var _unsupportedProp = _interopRequireDefault(requireUnsupportedProp());
			var _useControlled = _interopRequireDefault(requireUseControlled());
			var _useEventCallback = _interopRequireDefault(requireUseEventCallback());
			var _useForkRef = _interopRequireDefault(requireUseForkRef());
			var _useIsFocusVisible = _interopRequireDefault(requireUseIsFocusVisible());
			// TODO: remove this export once ClassNameGenerator is stable
			// eslint-disable-next-line @typescript-eslint/naming-convention
			const unstable_ClassNameGenerator = {
			  configure: generator => {
			    {
			      console.warn(['MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.', '', "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", '', 'The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401', '', 'The updated documentation: https://mui.com/guides/classname-generator/'].join('\n'));
			    }
			    _className.unstable_ClassNameGenerator.configure(generator);
			  }
			};
			exports.unstable_ClassNameGenerator = unstable_ClassNameGenerator;
	} (utils$1));
		return utils$1;
	}

	var hasRequiredCreateSvgIcon;

	function requireCreateSvgIcon () {
		if (hasRequiredCreateSvgIcon) return createSvgIcon$1;
		hasRequiredCreateSvgIcon = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _utils.createSvgIcon;
			  }
			});
			var _utils = requireUtils$1();
	} (createSvgIcon$1));
		return createSvgIcon$1;
	}

	var _interopRequireDefault$g = interopRequireDefault.exports;
	Object.defineProperty(Cookie, "__esModule", {
	  value: true
	});
	var default_1$e = Cookie.default = void 0;
	var _createSvgIcon$e = _interopRequireDefault$g(requireCreateSvgIcon());
	var _jsxRuntime$f = requireJsxRuntime();
	var _default$h = (0, _createSvgIcon$e.default)( /*#__PURE__*/(0, _jsxRuntime$f.jsx)("path", {
	  d: "M21.95 10.99c-1.79-.03-3.7-1.95-2.68-4.22-2.98 1-5.77-1.59-5.19-4.56C6.95.71 2 6.58 2 12c0 5.52 4.48 10 10 10 5.89 0 10.54-5.08 9.95-11.01zM8.5 15c-.83 0-1.5-.67-1.5-1.5S7.67 12 8.5 12s1.5.67 1.5 1.5S9.33 15 8.5 15zm2-5C9.67 10 9 9.33 9 8.5S9.67 7 10.5 7s1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm4.5 6c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z"
	}), 'Cookie');
	default_1$e = Cookie.default = _default$h;

	var TipsAndUpdates = {};

	var _interopRequireDefault$f = interopRequireDefault.exports;
	Object.defineProperty(TipsAndUpdates, "__esModule", {
	  value: true
	});
	var default_1$d = TipsAndUpdates.default = void 0;
	var _createSvgIcon$d = _interopRequireDefault$f(requireCreateSvgIcon());
	var _jsxRuntime$e = requireJsxRuntime();
	var _default$g = (0, _createSvgIcon$d.default)( /*#__PURE__*/(0, _jsxRuntime$e.jsx)("path", {
	  d: "M7 20h4c0 1.1-.9 2-2 2s-2-.9-2-2zm-2-1h8v-2H5v2zm11.5-9.5c0 3.82-2.66 5.86-3.77 6.5H5.27c-1.11-.64-3.77-2.68-3.77-6.5C1.5 5.36 4.86 2 9 2s7.5 3.36 7.5 7.5zm4.87-2.13L20 8l1.37.63L22 10l.63-1.37L24 8l-1.37-.63L22 6l-.63 1.37zM19 6l.94-2.06L22 3l-2.06-.94L19 0l-.94 2.06L16 3l2.06.94L19 6z"
	}), 'TipsAndUpdates');
	default_1$d = TipsAndUpdates.default = _default$g;

	var dist$1 = {exports: {}};

	var mobxreact_cjs_development = {};

	var dist = {exports: {}};

	var mobxreactlite_cjs_development = {};

	Object.defineProperty(mobxreactlite_cjs_development, '__esModule', { value: true });

	function _interopDefault$1 (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var mobx = dist$2.exports;
	var React$1 = require$$3;
	var React__default = _interopDefault$1(React$1);
	var reactDom = require$$3;

	if (!React$1.useState) {
	  throw new Error("mobx-react-lite requires React with Hooks support");
	}

	if (!mobx.makeObservable) {
	  throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");
	}

	function defaultNoopBatch(callback) {
	  callback();
	}
	function observerBatching(reactionScheduler) {
	  if (!reactionScheduler) {
	    reactionScheduler = defaultNoopBatch;

	    {
	      console.warn("[MobX] Failed to get unstable_batched updates from react-dom / react-native");
	    }
	  }

	  mobx.configure({
	    reactionScheduler: reactionScheduler
	  });
	}
	var isObserverBatched = function isObserverBatched() {
	  {
	    console.warn("[MobX] Deprecated");
	  }

	  return true;
	};

	var deprecatedMessages = [];
	function useDeprecated(msg) {
	  if (!deprecatedMessages.includes(msg)) {
	    deprecatedMessages.push(msg);
	    console.warn(msg);
	  }
	}

	function printDebugValue(v) {
	  return mobx.getDependencyTree(v);
	}

	var FinalizationRegistryLocal = typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry;

	function createTrackingData(reaction) {
	  var trackingData = {
	    reaction: reaction,
	    mounted: false,
	    changedBeforeMount: false,
	    cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS
	  };
	  return trackingData;
	}
	/**
	 * The minimum time before we'll clean up a Reaction created in a render
	 * for a component that hasn't managed to run its effects. This needs to
	 * be big enough to ensure that a component won't turn up and have its
	 * effects run without being re-rendered.
	 */

	var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;
	/**
	 * The frequency with which we'll check for leaked reactions.
	 */

	var CLEANUP_TIMER_LOOP_MILLIS = 10000;

	/**
	 * FinalizationRegistry-based uncommitted reaction cleanup
	 */

	function createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistry) {
	  var cleanupTokenToReactionTrackingMap = new Map();
	  var globalCleanupTokensCounter = 1;
	  var registry = new FinalizationRegistry(function cleanupFunction(token) {
	    var trackedReaction = cleanupTokenToReactionTrackingMap.get(token);

	    if (trackedReaction) {
	      trackedReaction.reaction.dispose();
	      cleanupTokenToReactionTrackingMap["delete"](token);
	    }
	  });
	  return {
	    addReactionToTrack: function addReactionToTrack(reactionTrackingRef, reaction, objectRetainedByReact) {
	      var token = globalCleanupTokensCounter++;
	      registry.register(objectRetainedByReact, token, reactionTrackingRef);
	      reactionTrackingRef.current = createTrackingData(reaction);
	      reactionTrackingRef.current.finalizationRegistryCleanupToken = token;
	      cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current);
	      return reactionTrackingRef.current;
	    },
	    recordReactionAsCommitted: function recordReactionAsCommitted(reactionRef) {
	      registry.unregister(reactionRef);

	      if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {
	        cleanupTokenToReactionTrackingMap["delete"](reactionRef.current.finalizationRegistryCleanupToken);
	      }
	    },
	    forceCleanupTimerToRunNowForTests: function forceCleanupTimerToRunNowForTests() {// When FinalizationRegistry in use, this this is no-op
	    },
	    resetCleanupScheduleForTests: function resetCleanupScheduleForTests() {// When FinalizationRegistry in use, this this is no-op
	    }
	  };
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	  return arr2;
	}

	function _createForOfIteratorHelperLoose(o, allowArrayLike) {
	  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
	  if (it) return (it = it.call(o)).next.bind(it);

	  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
	    if (it) o = it;
	    var i = 0;
	    return function () {
	      if (i >= o.length) return {
	        done: true
	      };
	      return {
	        done: false,
	        value: o[i++]
	      };
	    };
	  }

	  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	/**
	 * timers, gc-style, uncommitted reaction cleanup
	 */

	function createTimerBasedReactionCleanupTracking() {
	  /**
	   * Reactions created by components that have yet to be fully mounted.
	   */
	  var uncommittedReactionRefs = new Set();
	  /**
	   * Latest 'uncommitted reactions' cleanup timer handle.
	   */

	  var reactionCleanupHandle;
	  /* istanbul ignore next */

	  /**
	   * Only to be used by test functions; do not export outside of mobx-react-lite
	   */

	  function forceCleanupTimerToRunNowForTests() {
	    // This allows us to control the execution of the cleanup timer
	    // to force it to run at awkward times in unit tests.
	    if (reactionCleanupHandle) {
	      clearTimeout(reactionCleanupHandle);
	      cleanUncommittedReactions();
	    }
	  }
	  /* istanbul ignore next */


	  function resetCleanupScheduleForTests() {
	    if (uncommittedReactionRefs.size > 0) {
	      for (var _iterator = _createForOfIteratorHelperLoose(uncommittedReactionRefs), _step; !(_step = _iterator()).done;) {
	        var ref = _step.value;
	        var tracking = ref.current;

	        if (tracking) {
	          tracking.reaction.dispose();
	          ref.current = null;
	        }
	      }

	      uncommittedReactionRefs.clear();
	    }

	    if (reactionCleanupHandle) {
	      clearTimeout(reactionCleanupHandle);
	      reactionCleanupHandle = undefined;
	    }
	  }

	  function ensureCleanupTimerRunning() {
	    if (reactionCleanupHandle === undefined) {
	      reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);
	    }
	  }

	  function scheduleCleanupOfReactionIfLeaked(ref) {
	    uncommittedReactionRefs.add(ref);
	    ensureCleanupTimerRunning();
	  }

	  function recordReactionAsCommitted(reactionRef) {
	    uncommittedReactionRefs["delete"](reactionRef);
	  }
	  /**
	   * Run by the cleanup timer to dispose any outstanding reactions
	   */


	  function cleanUncommittedReactions() {
	    reactionCleanupHandle = undefined; // Loop through all the candidate leaked reactions; those older
	    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.

	    var now = Date.now();
	    uncommittedReactionRefs.forEach(function (ref) {
	      var tracking = ref.current;

	      if (tracking) {
	        if (now >= tracking.cleanAt) {
	          // It's time to tidy up this leaked reaction.
	          tracking.reaction.dispose();
	          ref.current = null;
	          uncommittedReactionRefs["delete"](ref);
	        }
	      }
	    });

	    if (uncommittedReactionRefs.size > 0) {
	      // We've just finished a round of cleanups but there are still
	      // some leak candidates outstanding.
	      ensureCleanupTimerRunning();
	    }
	  }

	  return {
	    addReactionToTrack: function addReactionToTrack(reactionTrackingRef, reaction,
	    /**
	     * On timer based implementation we don't really need this object,
	     * but we keep the same api
	     */
	    objectRetainedByReact) {
	      reactionTrackingRef.current = createTrackingData(reaction);
	      scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);
	      return reactionTrackingRef.current;
	    },
	    recordReactionAsCommitted: recordReactionAsCommitted,
	    forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests,
	    resetCleanupScheduleForTests: resetCleanupScheduleForTests
	  };
	}

	var _ref = FinalizationRegistryLocal ? /*#__PURE__*/createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistryLocal) : /*#__PURE__*/createTimerBasedReactionCleanupTracking(),
	    addReactionToTrack = _ref.addReactionToTrack,
	    recordReactionAsCommitted = _ref.recordReactionAsCommitted,
	    resetCleanupScheduleForTests = _ref.resetCleanupScheduleForTests;

	var globalIsUsingStaticRendering = false;
	function enableStaticRendering(enable) {
	  globalIsUsingStaticRendering = enable;
	}
	function isUsingStaticRendering() {
	  return globalIsUsingStaticRendering;
	}

	function observerComponentNameFor(baseComponentName) {
	  return "observer" + baseComponentName;
	}
	/**
	 * We use class to make it easier to detect in heap snapshots by name
	 */


	var ObjectToBeRetainedByReact = function ObjectToBeRetainedByReact() {};

	function objectToBeRetainedByReactFactory() {
	  return new ObjectToBeRetainedByReact();
	}

	function useObserver(fn, baseComponentName) {
	  if (baseComponentName === void 0) {
	    baseComponentName = "observed";
	  }

	  if (isUsingStaticRendering()) {
	    return fn();
	  }

	  var _React$useState = React__default.useState(objectToBeRetainedByReactFactory),
	      objectRetainedByReact = _React$useState[0]; // Force update, see #2982


	  var _React$useState2 = React__default.useState(),
	      setState = _React$useState2[1];

	  var forceUpdate = function forceUpdate() {
	    return setState([]);
	  }; // StrictMode/ConcurrentMode/Suspense may mean that our component is
	  // rendered and abandoned multiple times, so we need to track leaked
	  // Reactions.


	  var reactionTrackingRef = React__default.useRef(null);

	  if (!reactionTrackingRef.current) {
	    // First render for this component (or first time since a previous
	    // reaction from an abandoned render was disposed).
	    var newReaction = new mobx.Reaction(observerComponentNameFor(baseComponentName), function () {
	      // Observable has changed, meaning we want to re-render
	      // BUT if we're a component that hasn't yet got to the useEffect()
	      // stage, we might be a component that _started_ to render, but
	      // got dropped, and we don't want to make state changes then.
	      // (It triggers warnings in StrictMode, for a start.)
	      if (trackingData.mounted) {
	        // We have reached useEffect(), so we're mounted, and can trigger an update
	        forceUpdate();
	      } else {
	        // We haven't yet reached useEffect(), so we'll need to trigger a re-render
	        // when (and if) useEffect() arrives.
	        trackingData.changedBeforeMount = true;
	      }
	    });
	    var trackingData = addReactionToTrack(reactionTrackingRef, newReaction, objectRetainedByReact);
	  }

	  var reaction = reactionTrackingRef.current.reaction;
	  React__default.useDebugValue(reaction, printDebugValue);
	  React__default.useEffect(function () {
	    // Called on first mount only
	    recordReactionAsCommitted(reactionTrackingRef);

	    if (reactionTrackingRef.current) {
	      // Great. We've already got our reaction from our render;
	      // all we need to do is to record that it's now mounted,
	      // to allow future observable changes to trigger re-renders
	      reactionTrackingRef.current.mounted = true; // Got a change before first mount, force an update

	      if (reactionTrackingRef.current.changedBeforeMount) {
	        reactionTrackingRef.current.changedBeforeMount = false;
	        forceUpdate();
	      }
	    } else {
	      // The reaction we set up in our render has been disposed.
	      // This can be due to bad timings of renderings, e.g. our
	      // component was paused for a _very_ long time, and our
	      // reaction got cleaned up
	      // Re-create the reaction
	      reactionTrackingRef.current = {
	        reaction: new mobx.Reaction(observerComponentNameFor(baseComponentName), function () {
	          // We've definitely already been mounted at this point
	          forceUpdate();
	        }),
	        mounted: true,
	        changedBeforeMount: false,
	        cleanAt: Infinity
	      };
	      forceUpdate();
	    }

	    return function () {
	      reactionTrackingRef.current.reaction.dispose();
	      reactionTrackingRef.current = null;
	    };
	  }, []); // render the original component, but have the
	  // reaction track the observables, so that rendering
	  // can be invalidated (see above) once a dependency changes

	  var rendering;
	  var exception;
	  reaction.track(function () {
	    try {
	      rendering = fn();
	    } catch (e) {
	      exception = e;
	    }
	  });

	  if (exception) {
	    throw exception; // re-throw any exceptions caught during rendering
	  }

	  return rendering;
	}

	var warnObserverOptionsDeprecated = true;
	var hasSymbol = typeof Symbol === "function" && Symbol["for"]; // Using react-is had some issues (and operates on elements, not on types), see #608 / #609

	var ReactForwardRefSymbol = hasSymbol ? /*#__PURE__*/Symbol["for"]("react.forward_ref") : typeof React$1.forwardRef === "function" && React$1.forwardRef(function (props) {
	  return null;
	})["$$typeof"];
	var ReactMemoSymbol = hasSymbol ? /*#__PURE__*/Symbol["for"]("react.memo") : typeof React$1.memo === "function" && React$1.memo(function (props) {
	  return null;
	})["$$typeof"]; // n.b. base case is not used for actual typings or exported in the typing files

	function observer(baseComponent, // TODO remove in next major
	options) {
	  var _options$forwardRef;

	  if ( warnObserverOptionsDeprecated && options) {
	    warnObserverOptionsDeprecated = false;
	    console.warn("[mobx-react-lite] `observer(fn, { forwardRef: true })` is deprecated, use `observer(React.forwardRef(fn))`");
	  }

	  if (ReactMemoSymbol && baseComponent["$$typeof"] === ReactMemoSymbol) {
	    throw new Error("[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.");
	  } // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307


	  if (isUsingStaticRendering()) {
	    return baseComponent;
	  }

	  var useForwardRef = (_options$forwardRef = options == null ? void 0 : options.forwardRef) != null ? _options$forwardRef : false;
	  var render = baseComponent;
	  var baseComponentName = baseComponent.displayName || baseComponent.name; // If already wrapped with forwardRef, unwrap,
	  // so we can patch render and apply memo

	  if (ReactForwardRefSymbol && baseComponent["$$typeof"] === ReactForwardRefSymbol) {
	    useForwardRef = true;
	    render = baseComponent["render"];

	    if (typeof render !== "function") {
	      throw new Error("[mobx-react-lite] `render` property of ForwardRef was not a function");
	    }
	  }

	  var observerComponent = function observerComponent(props, ref) {
	    return useObserver(function () {
	      return render(props, ref);
	    }, baseComponentName);
	  }; // Don't set `displayName` for anonymous components,
	  // so the `displayName` can be customized by user, see #3192.


	  if (baseComponentName !== "") {
	    observerComponent.displayName = baseComponentName;
	  } // Support legacy context: `contextTypes` must be applied before `memo`


	  if (baseComponent.contextTypes) {
	    observerComponent.contextTypes = baseComponent.contextTypes;
	  }

	  if (useForwardRef) {
	    // `forwardRef` must be applied prior `memo`
	    // `forwardRef(observer(cmp))` throws:
	    // "forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))"
	    observerComponent = React$1.forwardRef(observerComponent);
	  } // memo; we are not interested in deep updates
	  // in props; we assume that if deep objects are changed,
	  // this is in observables, which would have been tracked anyway


	  observerComponent = React$1.memo(observerComponent);
	  copyStaticProperties(baseComponent, observerComponent);

	  {
	    Object.defineProperty(observerComponent, "contextTypes", {
	      set: function set() {
	        var _this$type;

	        throw new Error("[mobx-react-lite] `" + (this.displayName || ((_this$type = this.type) == null ? void 0 : _this$type.displayName) || "Component") + ".contextTypes` must be set before applying `observer`.");
	      }
	    });
	  }

	  return observerComponent;
	} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js

	var hoistBlackList = {
	  $$typeof: true,
	  render: true,
	  compare: true,
	  type: true,
	  // Don't redefine `displayName`,
	  // it's defined as getter-setter pair on `memo` (see #3192).
	  displayName: true
	};

	function copyStaticProperties(base, target) {
	  Object.keys(base).forEach(function (key) {
	    if (!hoistBlackList[key]) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
	    }
	  });
	}

	function ObserverComponent(_ref) {
	  var children = _ref.children,
	      render = _ref.render;
	  var component = children || render;

	  if (typeof component !== "function") {
	    return null;
	  }

	  return useObserver(component);
	}

	{
	  ObserverComponent.propTypes = {
	    children: ObserverPropsCheck,
	    render: ObserverPropsCheck
	  };
	}

	ObserverComponent.displayName = "Observer";

	function ObserverPropsCheck(props, key, componentName, location, propFullName) {
	  var extraKey = key === "children" ? "render" : "children";
	  var hasProp = typeof props[key] === "function";
	  var hasExtraProp = typeof props[extraKey] === "function";

	  if (hasProp && hasExtraProp) {
	    return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
	  }

	  if (hasProp || hasExtraProp) {
	    return null;
	  }

	  return new Error("Invalid prop `" + propFullName + "` of type `" + typeof props[key] + "` supplied to" + " `" + componentName + "`, expected `function`.");
	}

	function useLocalObservable(initializer, annotations) {
	  return React$1.useState(function () {
	    return mobx.observable(initializer(), annotations, {
	      autoBind: true
	    });
	  })[0];
	}

	function useAsObservableSource(current) {
	  useDeprecated("[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.");

	  var _useState = React$1.useState(function () {
	    return mobx.observable(current, {}, {
	      deep: false
	    });
	  }),
	      res = _useState[0];

	  mobx.runInAction(function () {
	    Object.assign(res, current);
	  });
	  return res;
	}

	function useLocalStore(initializer, current) {
	  useDeprecated("[mobx-react-lite] 'useLocalStore' is deprecated, use 'useLocalObservable' instead.");
	  var source = current && useAsObservableSource(current);
	  return React$1.useState(function () {
	    return mobx.observable(initializer(source), undefined, {
	      autoBind: true
	    });
	  })[0];
	}

	observerBatching(reactDom.unstable_batchedUpdates);
	function useObserver$1(fn, baseComponentName) {
	  if (baseComponentName === void 0) {
	    baseComponentName = "observed";
	  }

	  {
	    useDeprecated("[mobx-react-lite] 'useObserver(fn)' is deprecated. Use `<Observer>{fn}</Observer>` instead, or wrap the entire component in `observer`.");
	  }

	  return useObserver(fn, baseComponentName);
	}
	function useStaticRendering(enable) {
	  {
	    console.warn("[mobx-react-lite] 'useStaticRendering' is deprecated, use 'enableStaticRendering' instead");
	  }

	  enableStaticRendering(enable);
	}

	mobxreactlite_cjs_development.Observer = ObserverComponent;
	mobxreactlite_cjs_development.clearTimers = resetCleanupScheduleForTests;
	mobxreactlite_cjs_development.enableStaticRendering = enableStaticRendering;
	mobxreactlite_cjs_development.isObserverBatched = isObserverBatched;
	mobxreactlite_cjs_development.isUsingStaticRendering = isUsingStaticRendering;
	mobxreactlite_cjs_development.observer = observer;
	mobxreactlite_cjs_development.observerBatching = observerBatching;
	mobxreactlite_cjs_development.useAsObservableSource = useAsObservableSource;
	mobxreactlite_cjs_development.useLocalObservable = useLocalObservable;
	mobxreactlite_cjs_development.useLocalStore = useLocalStore;
	mobxreactlite_cjs_development.useObserver = useObserver$1;
	mobxreactlite_cjs_development.useStaticRendering = useStaticRendering;

	(function (module) {

		{
		  module.exports = mobxreactlite_cjs_development;
		}
	} (dist));

	(function (exports) {

		Object.defineProperty(exports, '__esModule', { value: true });

		function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

		var mobx = dist$2.exports;
		var React = require$$3;
		var React__default = _interopDefault(React);
		var mobxReactLite = dist.exports;

		var symbolId = 0;

		function createSymbol(name) {
		  if (typeof Symbol === "function") {
		    return Symbol(name);
		  }

		  var symbol = "__$mobx-react " + name + " (" + symbolId + ")";
		  symbolId++;
		  return symbol;
		}

		var createdSymbols = {};
		function newSymbol(name) {
		  if (!createdSymbols[name]) {
		    createdSymbols[name] = createSymbol(name);
		  }

		  return createdSymbols[name];
		}
		function shallowEqual(objA, objB) {
		  //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
		  if (is(objA, objB)) {
		    return true;
		  }

		  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
		    return false;
		  }

		  var keysA = Object.keys(objA);
		  var keysB = Object.keys(objB);

		  if (keysA.length !== keysB.length) {
		    return false;
		  }

		  for (var i = 0; i < keysA.length; i++) {
		    if (!Object.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
		      return false;
		    }
		  }

		  return true;
		}

		function is(x, y) {
		  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
		  if (x === y) {
		    return x !== 0 || 1 / x === 1 / y;
		  } else {
		    return x !== x && y !== y;
		  }
		} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js


		var hoistBlackList = {
		  $$typeof: 1,
		  render: 1,
		  compare: 1,
		  type: 1,
		  childContextTypes: 1,
		  contextType: 1,
		  contextTypes: 1,
		  defaultProps: 1,
		  getDefaultProps: 1,
		  getDerivedStateFromError: 1,
		  getDerivedStateFromProps: 1,
		  mixins: 1,
		  displayName: 1,
		  propTypes: 1
		};
		function copyStaticProperties(base, target) {
		  var protoProps = Object.getOwnPropertyNames(Object.getPrototypeOf(base));
		  Object.getOwnPropertyNames(base).forEach(function (key) {
		    if (!hoistBlackList[key] && protoProps.indexOf(key) === -1) {
		      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
		    }
		  });
		}
		/**
		 * Helper to set `prop` to `this` as non-enumerable (hidden prop)
		 * @param target
		 * @param prop
		 * @param value
		 */

		function setHiddenProp(target, prop, value) {
		  if (!Object.hasOwnProperty.call(target, prop)) {
		    Object.defineProperty(target, prop, {
		      enumerable: false,
		      configurable: true,
		      writable: true,
		      value: value
		    });
		  } else {
		    target[prop] = value;
		  }
		}
		/**
		 * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks
		 * and the handler provided by mobx-react
		 */

		var mobxMixins = /*#__PURE__*/newSymbol("patchMixins");
		var mobxPatchedDefinition = /*#__PURE__*/newSymbol("patchedDefinition");

		function getMixins(target, methodName) {
		  var mixins = target[mobxMixins] = target[mobxMixins] || {};
		  var methodMixins = mixins[methodName] = mixins[methodName] || {};
		  methodMixins.locks = methodMixins.locks || 0;
		  methodMixins.methods = methodMixins.methods || [];
		  return methodMixins;
		}

		function wrapper(realMethod, mixins) {
		  var _this = this;

		  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
		    args[_key - 2] = arguments[_key];
		  }

		  // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls
		  mixins.locks++;

		  try {
		    var retVal;

		    if (realMethod !== undefined && realMethod !== null) {
		      retVal = realMethod.apply(this, args);
		    }

		    return retVal;
		  } finally {
		    mixins.locks--;

		    if (mixins.locks === 0) {
		      mixins.methods.forEach(function (mx) {
		        mx.apply(_this, args);
		      });
		    }
		  }
		}

		function wrapFunction(realMethod, mixins) {
		  var fn = function fn() {
		    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		      args[_key2] = arguments[_key2];
		    }

		    wrapper.call.apply(wrapper, [this, realMethod, mixins].concat(args));
		  };

		  return fn;
		}

		function patch(target, methodName, mixinMethod) {
		  var mixins = getMixins(target, methodName);

		  if (mixins.methods.indexOf(mixinMethod) < 0) {
		    mixins.methods.push(mixinMethod);
		  }

		  var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);

		  if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {
		    // already patched definition, do not repatch
		    return;
		  }

		  var originalMethod = target[methodName];
		  var newDefinition = createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : undefined, mixins, originalMethod);
		  Object.defineProperty(target, methodName, newDefinition);
		}

		function createDefinition(target, methodName, enumerable, mixins, originalMethod) {
		  var _ref;

		  var wrappedFunc = wrapFunction(originalMethod, mixins);
		  return _ref = {}, _ref[mobxPatchedDefinition] = true, _ref.get = function get() {
		    return wrappedFunc;
		  }, _ref.set = function set(value) {
		    if (this === target) {
		      wrappedFunc = wrapFunction(value, mixins);
		    } else {
		      // when it is an instance of the prototype/a child prototype patch that particular case again separately
		      // since we need to store separate values depending on wether it is the actual instance, the prototype, etc
		      // e.g. the method for super might not be the same as the method for the prototype which might be not the same
		      // as the method for the instance
		      var newDefinition = createDefinition(this, methodName, enumerable, mixins, value);
		      Object.defineProperty(this, methodName, newDefinition);
		    }
		  }, _ref.configurable = true, _ref.enumerable = enumerable, _ref;
		}

		var mobxAdminProperty = mobx.$mobx || "$mobx"; // BC

		var mobxObserverProperty = /*#__PURE__*/newSymbol("isMobXReactObserver");
		var mobxIsUnmounted = /*#__PURE__*/newSymbol("isUnmounted");
		var skipRenderKey = /*#__PURE__*/newSymbol("skipRender");
		var isForcingUpdateKey = /*#__PURE__*/newSymbol("isForcingUpdate");
		function makeClassComponentObserver(componentClass) {
		  var target = componentClass.prototype;

		  if (componentClass[mobxObserverProperty]) {
		    var displayName = getDisplayName(target);
		    console.warn("The provided component class (" + displayName + ")\n                has already been declared as an observer component.");
		  } else {
		    componentClass[mobxObserverProperty] = true;
		  }

		  if (target.componentWillReact) {
		    throw new Error("The componentWillReact life-cycle event is no longer supported");
		  }

		  if (componentClass["__proto__"] !== React.PureComponent) {
		    if (!target.shouldComponentUpdate) {
		      target.shouldComponentUpdate = observerSCU;
		    } else if (target.shouldComponentUpdate !== observerSCU) {
		      // n.b. unequal check, instead of existence check, as @observer might be on superclass as well
		      throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.");
		    }
		  } // this.props and this.state are made observable, just to make sure @computed fields that
		  // are defined inside the component, and which rely on state or props, re-compute if state or props change
		  // (otherwise the computed wouldn't update and become stale on props change, since props are not observable)
		  // However, this solution is not without it's own problems: https://github.com/mobxjs/mobx-react/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aobservable-props-or-not+


		  makeObservableProp(target, "props");
		  makeObservableProp(target, "state");

		  if (componentClass.contextType) {
		    makeObservableProp(target, "context");
		  }

		  var originalRender = target.render;

		  if (typeof originalRender !== "function") {
		    var _displayName = getDisplayName(target);

		    throw new Error("[mobx-react] class component (" + _displayName + ") is missing `render` method." + "\n`observer` requires `render` being a function defined on prototype." + "\n`render = () => {}` or `render = function() {}` is not supported.");
		  }

		  target.render = function () {
		    this.render = mobxReactLite.isUsingStaticRendering() ? originalRender : createReactiveRender.call(this, originalRender);
		    return this.render();
		  };

		  patch(target, "componentDidMount", function () {
		    this[mobxIsUnmounted] = false;

		    if (!this.render[mobxAdminProperty]) {
		      // Reaction is re-created automatically during render, but a component can re-mount and skip render #3395.
		      // To re-create the reaction and re-subscribe to relevant observables we have to force an update.
		      React.Component.prototype.forceUpdate.call(this);
		    }
		  });
		  patch(target, "componentWillUnmount", function () {
		    if (mobxReactLite.isUsingStaticRendering()) {
		      return;
		    }

		    var reaction = this.render[mobxAdminProperty];

		    if (reaction) {
		      reaction.dispose(); // Forces reaction to be re-created on next render

		      this.render[mobxAdminProperty] = null;
		    } else {
		      // Render may have been hot-swapped and/or overridden by a subclass.
		      var _displayName2 = getDisplayName(this);

		      console.warn("The reactive render of an observer class component (" + _displayName2 + ")\n                was overridden after MobX attached. This may result in a memory leak if the\n                overridden reactive render was not properly disposed.");
		    }

		    this[mobxIsUnmounted] = true;
		  });
		  return componentClass;
		} // Generates a friendly name for debugging

		function getDisplayName(comp) {
		  return comp.displayName || comp.name || comp.constructor && (comp.constructor.displayName || comp.constructor.name) || "<component>";
		}

		function createReactiveRender(originalRender) {
		  var _this = this;

		  /**
		   * If props are shallowly modified, react will render anyway,
		   * so atom.reportChanged() should not result in yet another re-render
		   */
		  setHiddenProp(this, skipRenderKey, false);
		  /**
		   * forceUpdate will re-assign this.props. We don't want that to cause a loop,
		   * so detect these changes
		   */

		  setHiddenProp(this, isForcingUpdateKey, false);
		  var initialName = getDisplayName(this);
		  var boundOriginalRender = originalRender.bind(this);
		  var isRenderingPending = false;

		  var createReaction = function createReaction() {
		    var reaction = new mobx.Reaction(initialName + ".render()", function () {
		      if (!isRenderingPending) {
		        // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.test.tsx)
		        // This unidiomatic React usage but React will correctly warn about this so we continue as usual
		        // See #85 / Pull #44
		        isRenderingPending = true;

		        if (_this[mobxIsUnmounted] !== true) {
		          var hasError = true;

		          try {
		            setHiddenProp(_this, isForcingUpdateKey, true);

		            if (!_this[skipRenderKey]) {
		              React.Component.prototype.forceUpdate.call(_this);
		            }

		            hasError = false;
		          } finally {
		            setHiddenProp(_this, isForcingUpdateKey, false);

		            if (hasError) {
		              reaction.dispose(); // Forces reaction to be re-created on next render

		              _this.render[mobxAdminProperty] = null;
		            }
		          }
		        }
		      }
		    });
		    reaction["reactComponent"] = _this;
		    return reaction;
		  };

		  function reactiveRender() {
		    var _reactiveRender$mobxA;

		    isRenderingPending = false; // Create reaction lazily to support re-mounting #3395

		    var reaction = (_reactiveRender$mobxA = reactiveRender[mobxAdminProperty]) != null ? _reactiveRender$mobxA : reactiveRender[mobxAdminProperty] = createReaction();
		    var exception = undefined;
		    var rendering = undefined;
		    reaction.track(function () {
		      try {
		        // TODO@major
		        // Optimization: replace with _allowStateChangesStart/End (not available in mobx@6.0.0)
		        rendering = mobx._allowStateChanges(false, boundOriginalRender);
		      } catch (e) {
		        exception = e;
		      }
		    });

		    if (exception) {
		      throw exception;
		    }

		    return rendering;
		  }

		  return reactiveRender;
		}

		function observerSCU(nextProps, nextState) {
		  if (mobxReactLite.isUsingStaticRendering()) {
		    console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
		  } // update on any state changes (as is the default)


		  if (this.state !== nextState) {
		    return true;
		  } // update if props are shallowly not equal, inspired by PureRenderMixin
		  // we could return just 'false' here, and avoid the `skipRender` checks etc
		  // however, it is nicer if lifecycle events are triggered like usually,
		  // so we return true here if props are shallowly modified.


		  return !shallowEqual(this.props, nextProps);
		}

		function makeObservableProp(target, propName) {
		  var valueHolderKey = newSymbol("reactProp_" + propName + "_valueHolder");
		  var atomHolderKey = newSymbol("reactProp_" + propName + "_atomHolder");

		  function getAtom() {
		    if (!this[atomHolderKey]) {
		      setHiddenProp(this, atomHolderKey, mobx.createAtom("reactive " + propName));
		    }

		    return this[atomHolderKey];
		  }

		  Object.defineProperty(target, propName, {
		    configurable: true,
		    enumerable: true,
		    get: function get() {
		      var prevReadState = false; // Why this check? BC?
		      // @ts-expect-error

		      if (mobx._allowStateReadsStart && mobx._allowStateReadsEnd) {
		        prevReadState = mobx._allowStateReadsStart(true);
		      }

		      getAtom.call(this).reportObserved(); // Why this check? BC?
		      // @ts-expect-error

		      if (mobx._allowStateReadsStart && mobx._allowStateReadsEnd) {
		        mobx._allowStateReadsEnd(prevReadState);
		      }

		      return this[valueHolderKey];
		    },
		    set: function set(v) {
		      if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {
		        setHiddenProp(this, valueHolderKey, v);
		        setHiddenProp(this, skipRenderKey, true);
		        getAtom.call(this).reportChanged();
		        setHiddenProp(this, skipRenderKey, false);
		      } else {
		        setHiddenProp(this, valueHolderKey, v);
		      }
		    }
		  });
		}

		/**
		 * Observer function / decorator
		 */

		function observer(component) {
		  if (component["isMobxInjector"] === true) {
		    console.warn("Mobx observer: You are trying to use `observer` on a component that already has `inject`. Please apply `observer` before applying `inject`");
		  }

		  if (Object.prototype.isPrototypeOf.call(React.Component, component) || Object.prototype.isPrototypeOf.call(React.PureComponent, component)) {
		    // Class component
		    return makeClassComponentObserver(component);
		  } else {
		    // Function component
		    return mobxReactLite.observer(component);
		  }
		}

		function _extends() {
		  _extends = Object.assign || function (target) {
		    for (var i = 1; i < arguments.length; i++) {
		      var source = arguments[i];

		      for (var key in source) {
		        if (Object.prototype.hasOwnProperty.call(source, key)) {
		          target[key] = source[key];
		        }
		      }
		    }

		    return target;
		  };

		  return _extends.apply(this, arguments);
		}

		function _objectWithoutPropertiesLoose(source, excluded) {
		  if (source == null) return {};
		  var target = {};
		  var sourceKeys = Object.keys(source);
		  var key, i;

		  for (i = 0; i < sourceKeys.length; i++) {
		    key = sourceKeys[i];
		    if (excluded.indexOf(key) >= 0) continue;
		    target[key] = source[key];
		  }

		  return target;
		}

		var _excluded = ["children"];
		var MobXProviderContext = /*#__PURE__*/React__default.createContext({});
		function Provider(props) {
		  var children = props.children,
		      stores = _objectWithoutPropertiesLoose(props, _excluded);

		  var parentValue = React__default.useContext(MobXProviderContext);
		  var mutableProviderRef = React__default.useRef(_extends({}, parentValue, stores));
		  var value = mutableProviderRef.current;

		  {
		    var newValue = _extends({}, value, stores); // spread in previous state for the context based stores


		    if (!shallowEqual(value, newValue)) {
		      throw new Error("MobX Provider: The set of provided stores has changed. See: https://github.com/mobxjs/mobx-react#the-set-of-provided-stores-has-changed-error.");
		    }
		  }

		  return React__default.createElement(MobXProviderContext.Provider, {
		    value: value
		  }, children);
		}
		Provider.displayName = "MobXProvider";

		/**
		 * Store Injection
		 */

		function createStoreInjector(grabStoresFn, component, injectNames, makeReactive) {
		  // Support forward refs
		  var Injector = React__default.forwardRef(function (props, ref) {
		    var newProps = _extends({}, props);

		    var context = React__default.useContext(MobXProviderContext);
		    Object.assign(newProps, grabStoresFn(context || {}, newProps) || {});

		    if (ref) {
		      newProps.ref = ref;
		    }

		    return React__default.createElement(component, newProps);
		  });
		  if (makeReactive) Injector = observer(Injector);
		  Injector["isMobxInjector"] = true; // assigned late to suppress observer warning
		  // Static fields from component should be visible on the generated Injector

		  copyStaticProperties(component, Injector);
		  Injector["wrappedComponent"] = component;
		  Injector.displayName = getInjectName(component, injectNames);
		  return Injector;
		}

		function getInjectName(component, injectNames) {
		  var displayName;
		  var componentName = component.displayName || component.name || component.constructor && component.constructor.name || "Component";
		  if (injectNames) displayName = "inject-with-" + injectNames + "(" + componentName + ")";else displayName = "inject(" + componentName + ")";
		  return displayName;
		}

		function grabStoresByName(storeNames) {
		  return function (baseStores, nextProps) {
		    storeNames.forEach(function (storeName) {
		      if (storeName in nextProps // prefer props over stores
		      ) return;
		      if (!(storeName in baseStores)) throw new Error("MobX injector: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
		      nextProps[storeName] = baseStores[storeName];
		    });
		    return nextProps;
		  };
		}
		/**
		 * higher order component that injects stores to a child.
		 * takes either a varargs list of strings, which are stores read from the context,
		 * or a function that manually maps the available stores from the context to props:
		 * storesToProps(mobxStores, props, context) => newProps
		 */


		function inject() {
		  for (var _len = arguments.length, storeNames = new Array(_len), _key = 0; _key < _len; _key++) {
		    storeNames[_key] = arguments[_key];
		  }

		  if (typeof arguments[0] === "function") {
		    var grabStoresFn = arguments[0];
		    return function (componentClass) {
		      return createStoreInjector(grabStoresFn, componentClass, grabStoresFn.name, true);
		    };
		  } else {
		    return function (componentClass) {
		      return createStoreInjector(grabStoresByName(storeNames), componentClass, storeNames.join("-"), false);
		    };
		  }
		}

		var protoStoreKey = /*#__PURE__*/newSymbol("disposeOnUnmountProto");
		var instStoreKey = /*#__PURE__*/newSymbol("disposeOnUnmountInst");

		function runDisposersOnWillUnmount() {
		  var _this = this;
		  [].concat(this[protoStoreKey] || [], this[instStoreKey] || []).forEach(function (propKeyOrFunction) {
		    var prop = typeof propKeyOrFunction === "string" ? _this[propKeyOrFunction] : propKeyOrFunction;

		    if (prop !== undefined && prop !== null) {
		      if (Array.isArray(prop)) prop.map(function (f) {
		        return f();
		      });else prop();
		    }
		  });
		}

		function disposeOnUnmount(target, propertyKeyOrFunction) {
		  if (Array.isArray(propertyKeyOrFunction)) {
		    return propertyKeyOrFunction.map(function (fn) {
		      return disposeOnUnmount(target, fn);
		    });
		  }

		  var c = Object.getPrototypeOf(target).constructor;
		  var c2 = Object.getPrototypeOf(target.constructor); // Special case for react-hot-loader

		  var c3 = Object.getPrototypeOf(Object.getPrototypeOf(target));

		  if (!(c === React__default.Component || c === React__default.PureComponent || c2 === React__default.Component || c2 === React__default.PureComponent || c3 === React__default.Component || c3 === React__default.PureComponent)) {
		    throw new Error("[mobx-react] disposeOnUnmount only supports direct subclasses of React.Component or React.PureComponent.");
		  }

		  if (typeof propertyKeyOrFunction !== "string" && typeof propertyKeyOrFunction !== "function" && !Array.isArray(propertyKeyOrFunction)) {
		    throw new Error("[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.");
		  } // decorator's target is the prototype, so it doesn't have any instance properties like props


		  var isDecorator = typeof propertyKeyOrFunction === "string"; // add property key / function we want run (disposed) to the store

		  var componentWasAlreadyModified = !!target[protoStoreKey] || !!target[instStoreKey];
		  var store = isDecorator ? // decorators are added to the prototype store
		  target[protoStoreKey] || (target[protoStoreKey] = []) : // functions are added to the instance store
		  target[instStoreKey] || (target[instStoreKey] = []);
		  store.push(propertyKeyOrFunction); // tweak the component class componentWillUnmount if not done already

		  if (!componentWasAlreadyModified) {
		    patch(target, "componentWillUnmount", runDisposersOnWillUnmount);
		  } // return the disposer as is if invoked as a non decorator


		  if (typeof propertyKeyOrFunction !== "string") {
		    return propertyKeyOrFunction;
		  }
		}

		function createChainableTypeChecker(validator) {
		  function checkType(isRequired, props, propName, componentName, location, propFullName) {
		    for (var _len = arguments.length, rest = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
		      rest[_key - 6] = arguments[_key];
		    }

		    return mobx.untracked(function () {
		      componentName = componentName || "<<anonymous>>";
		      propFullName = propFullName || propName;

		      if (props[propName] == null) {
		        if (isRequired) {
		          var actual = props[propName] === null ? "null" : "undefined";
		          return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");
		        }

		        return null;
		      } else {
		        // @ts-ignore rest arg is necessary for some React internals - fails tests otherwise
		        return validator.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));
		      }
		    });
		  }

		  var chainedCheckType = checkType.bind(null, false); // Add isRequired to satisfy Requirable

		  chainedCheckType.isRequired = checkType.bind(null, true);
		  return chainedCheckType;
		} // Copied from React.PropTypes


		function isSymbol(propType, propValue) {
		  // Native Symbol.
		  if (propType === "symbol") {
		    return true;
		  } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


		  if (propValue["@@toStringTag"] === "Symbol") {
		    return true;
		  } // Fallback for non-spec compliant Symbols which are polyfilled.


		  if (typeof Symbol === "function" && propValue instanceof Symbol) {
		    return true;
		  }

		  return false;
		} // Copied from React.PropTypes


		function getPropType(propValue) {
		  var propType = typeof propValue;

		  if (Array.isArray(propValue)) {
		    return "array";
		  }

		  if (propValue instanceof RegExp) {
		    // Old webkits (at least until Android 4.0) return 'function' rather than
		    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
		    // passes PropTypes.object.
		    return "object";
		  }

		  if (isSymbol(propType, propValue)) {
		    return "symbol";
		  }

		  return propType;
		} // This handles more types than `getPropType`. Only used for error messages.
		// Copied from React.PropTypes


		function getPreciseType(propValue) {
		  var propType = getPropType(propValue);

		  if (propType === "object") {
		    if (propValue instanceof Date) {
		      return "date";
		    } else if (propValue instanceof RegExp) {
		      return "regexp";
		    }
		  }

		  return propType;
		}

		function createObservableTypeCheckerCreator(allowNativeType, mobxType) {
		  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
		    return mobx.untracked(function () {
		      if (allowNativeType) {
		        if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;
		      }

		      var mobxChecker;

		      switch (mobxType) {
		        case "Array":
		          mobxChecker = mobx.isObservableArray;
		          break;

		        case "Object":
		          mobxChecker = mobx.isObservableObject;
		          break;

		        case "Map":
		          mobxChecker = mobx.isObservableMap;
		          break;

		        default:
		          throw new Error("Unexpected mobxType: " + mobxType);
		      }

		      var propValue = props[propName];

		      if (!mobxChecker(propValue)) {
		        var preciseType = getPreciseType(propValue);
		        var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";
		        return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");
		      }

		      return null;
		    });
		  });
		}

		function createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
		  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
		    for (var _len2 = arguments.length, rest = new Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
		      rest[_key2 - 5] = arguments[_key2];
		    }

		    return mobx.untracked(function () {
		      if (typeof typeChecker !== "function") {
		        return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");
		      } else {
		        var error = createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName, location, propFullName);
		        if (error instanceof Error) return error;
		        var propValue = props[propName];

		        for (var i = 0; i < propValue.length; i++) {
		          error = typeChecker.apply(void 0, [propValue, i, componentName, location, propFullName + "[" + i + "]"].concat(rest));
		          if (error instanceof Error) return error;
		        }

		        return null;
		      }
		    });
		  });
		}

		var observableArray = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Array");
		var observableArrayOf = /*#__PURE__*/createObservableArrayOfTypeChecker.bind(null, false);
		var observableMap = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Map");
		var observableObject = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Object");
		var arrayOrObservableArray = /*#__PURE__*/createObservableTypeCheckerCreator(true, "Array");
		var arrayOrObservableArrayOf = /*#__PURE__*/createObservableArrayOfTypeChecker.bind(null, true);
		var objectOrObservableObject = /*#__PURE__*/createObservableTypeCheckerCreator(true, "Object");
		var PropTypes = {
		  observableArray: observableArray,
		  observableArrayOf: observableArrayOf,
		  observableMap: observableMap,
		  observableObject: observableObject,
		  arrayOrObservableArray: arrayOrObservableArray,
		  arrayOrObservableArrayOf: arrayOrObservableArrayOf,
		  objectOrObservableObject: objectOrObservableObject
		};

		if (!React.Component) throw new Error("mobx-react requires React to be available");
		if (!mobx.observable) throw new Error("mobx-react requires mobx to be available");

		Object.defineProperty(exports, 'Observer', {
		    enumerable: true,
		    get: function () {
		        return mobxReactLite.Observer;
		    }
		});
		Object.defineProperty(exports, 'enableStaticRendering', {
		    enumerable: true,
		    get: function () {
		        return mobxReactLite.enableStaticRendering;
		    }
		});
		Object.defineProperty(exports, 'isUsingStaticRendering', {
		    enumerable: true,
		    get: function () {
		        return mobxReactLite.isUsingStaticRendering;
		    }
		});
		Object.defineProperty(exports, 'observerBatching', {
		    enumerable: true,
		    get: function () {
		        return mobxReactLite.observerBatching;
		    }
		});
		Object.defineProperty(exports, 'useAsObservableSource', {
		    enumerable: true,
		    get: function () {
		        return mobxReactLite.useAsObservableSource;
		    }
		});
		Object.defineProperty(exports, 'useLocalObservable', {
		    enumerable: true,
		    get: function () {
		        return mobxReactLite.useLocalObservable;
		    }
		});
		Object.defineProperty(exports, 'useLocalStore', {
		    enumerable: true,
		    get: function () {
		        return mobxReactLite.useLocalStore;
		    }
		});
		Object.defineProperty(exports, 'useObserver', {
		    enumerable: true,
		    get: function () {
		        return mobxReactLite.useObserver;
		    }
		});
		Object.defineProperty(exports, 'useStaticRendering', {
		    enumerable: true,
		    get: function () {
		        return mobxReactLite.useStaticRendering;
		    }
		});
		exports.MobXProviderContext = MobXProviderContext;
		exports.PropTypes = PropTypes;
		exports.Provider = Provider;
		exports.disposeOnUnmount = disposeOnUnmount;
		exports.inject = inject;
		exports.observer = observer;
		
	} (mobxreact_cjs_development));

	(function (module) {

		{
		  module.exports = mobxreact_cjs_development;
		}
	} (dist$1));

	var Dialog$2 = {};

	var Dialog$1 = {};

	var Modal$1 = {};

	var Modal = {};

	var Backdrop$2 = {};

	var Backdrop$1 = {};

	var Fade$1 = {};

	var Fade = {};

	var useTheme = {};

	var hasRequiredUseTheme;

	function requireUseTheme () {
		if (hasRequiredUseTheme) return useTheme;
		hasRequiredUseTheme = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(useTheme, "__esModule", {
		  value: true
		});
		useTheme.default = useTheme$1;
		var React = _interopRequireWildcard(require$$3);
		var _system = requireSystem();
		var _defaultTheme = _interopRequireDefault(requireDefaultTheme());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function useTheme$1() {
		  const theme = (0, _system.useTheme)(_defaultTheme.default);
		  {
		    // eslint-disable-next-line react-hooks/rules-of-hooks
		    React.useDebugValue(theme);
		  }
		  return theme;
		}
		return useTheme;
	}

	var utils = {};

	var hasRequiredUtils;

	function requireUtils () {
		if (hasRequiredUtils) return utils;
		hasRequiredUtils = 1;

		Object.defineProperty(utils, "__esModule", {
		  value: true
		});
		utils.getTransitionProps = getTransitionProps;
		utils.reflow = void 0;
		const reflow = node => node.scrollTop;
		utils.reflow = reflow;
		function getTransitionProps(props, options) {
		  var _style$transitionDura, _style$transitionTimi;
		  const {
		    timeout,
		    easing,
		    style = {}
		  } = props;
		  return {
		    duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
		    easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
		    delay: style.transitionDelay
		  };
		}
		return utils;
	}

	var hasRequiredFade$1;

	function requireFade$1 () {
		if (hasRequiredFade$1) return Fade;
		hasRequiredFade$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Fade, "__esModule", {
		  value: true
		});
		Fade.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _reactTransitionGroup = requireCjs();
		var _utils = requireUtils$4();
		var _useTheme = _interopRequireDefault(requireUseTheme());
		var _utils2 = requireUtils();
		var _useForkRef = _interopRequireDefault(requireUseForkRef());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const styles = {
		  entering: {
		    opacity: 1
		  },
		  entered: {
		    opacity: 1
		  }
		};

		/**
		 * The Fade transition is used by the [Modal](/material-ui/react-modal/) component.
		 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
		 */
		const Fade$1 = /*#__PURE__*/React.forwardRef(function Fade(props, ref) {
		  const theme = (0, _useTheme.default)();
		  const defaultTimeout = {
		    enter: theme.transitions.duration.enteringScreen,
		    exit: theme.transitions.duration.leavingScreen
		  };
		  const {
		      addEndListener,
		      appear = true,
		      children,
		      easing,
		      in: inProp,
		      onEnter,
		      onEntered,
		      onEntering,
		      onExit,
		      onExited,
		      onExiting,
		      style,
		      timeout = defaultTimeout,
		      // eslint-disable-next-line react/prop-types
		      TransitionComponent = _reactTransitionGroup.Transition
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const nodeRef = React.useRef(null);
		  const handleRef = (0, _useForkRef.default)(nodeRef, children.ref, ref);
		  const normalizedTransitionCallback = callback => maybeIsAppearing => {
		    if (callback) {
		      const node = nodeRef.current;

		      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
		      if (maybeIsAppearing === undefined) {
		        callback(node);
		      } else {
		        callback(node, maybeIsAppearing);
		      }
		    }
		  };
		  const handleEntering = normalizedTransitionCallback(onEntering);
		  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
		    (0, _utils2.reflow)(node); // So the animation always start from the start.

		    const transitionProps = (0, _utils2.getTransitionProps)({
		      style,
		      timeout,
		      easing
		    }, {
		      mode: 'enter'
		    });
		    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
		    node.style.transition = theme.transitions.create('opacity', transitionProps);
		    if (onEnter) {
		      onEnter(node, isAppearing);
		    }
		  });
		  const handleEntered = normalizedTransitionCallback(onEntered);
		  const handleExiting = normalizedTransitionCallback(onExiting);
		  const handleExit = normalizedTransitionCallback(node => {
		    const transitionProps = (0, _utils2.getTransitionProps)({
		      style,
		      timeout,
		      easing
		    }, {
		      mode: 'exit'
		    });
		    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
		    node.style.transition = theme.transitions.create('opacity', transitionProps);
		    if (onExit) {
		      onExit(node);
		    }
		  });
		  const handleExited = normalizedTransitionCallback(onExited);
		  const handleAddEndListener = next => {
		    if (addEndListener) {
		      // Old call signature before `react-transition-group` implemented `nodeRef`
		      addEndListener(nodeRef.current, next);
		    }
		  };
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TransitionComponent, (0, _extends2.default)({
		    appear: appear,
		    in: inProp,
		    nodeRef: nodeRef ,
		    onEnter: handleEnter,
		    onEntered: handleEntered,
		    onEntering: handleEntering,
		    onExit: handleExit,
		    onExited: handleExited,
		    onExiting: handleExiting,
		    addEndListener: handleAddEndListener,
		    timeout: timeout
		  }, other, {
		    children: (state, childProps) => {
		      return /*#__PURE__*/React.cloneElement(children, (0, _extends2.default)({
		        style: (0, _extends2.default)({
		          opacity: 0,
		          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
		        }, styles[state], style, children.props.style),
		        ref: handleRef
		      }, childProps));
		    }
		  }));
		});
		Fade$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Add a custom transition end trigger. Called with the transitioning DOM
		   * node and a done callback. Allows for more fine grained transition end
		   * logic. Note: Timeouts are still used as a fallback if provided.
		   */
		  addEndListener: _propTypes.default.func,
		  /**
		   * Perform the enter transition when it first mounts if `in` is also `true`.
		   * Set this to `false` to disable this behavior.
		   * @default true
		   */
		  appear: _propTypes.default.bool,
		  /**
		   * A single child content element.
		   */
		  children: _utils.elementAcceptingRef.isRequired,
		  /**
		   * The transition timing function.
		   * You may specify a single easing or a object containing enter and exit values.
		   */
		  easing: _propTypes.default.oneOfType([_propTypes.default.shape({
		    enter: _propTypes.default.string,
		    exit: _propTypes.default.string
		  }), _propTypes.default.string]),
		  /**
		   * If `true`, the component will transition in.
		   */
		  in: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  onEnter: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onEntered: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onEntering: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onExit: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onExited: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onExiting: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  style: _propTypes.default.object,
		  /**
		   * The duration for the transition, in milliseconds.
		   * You may specify a single timeout for all transitions, or individually with an object.
		   * @default {
		   *   enter: theme.transitions.duration.enteringScreen,
		   *   exit: theme.transitions.duration.leavingScreen,
		   * }
		   */
		  timeout: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
		    appear: _propTypes.default.number,
		    enter: _propTypes.default.number,
		    exit: _propTypes.default.number
		  })])
		} ;
		var _default = Fade$1;
		Fade.default = _default;
		return Fade;
	}

	var hasRequiredFade;

	function requireFade () {
		if (hasRequiredFade) return Fade$1;
		hasRequiredFade = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _Fade.default;
			  }
			});
			var _Fade = _interopRequireDefault(requireFade$1());
	} (Fade$1));
		return Fade$1;
	}

	var backdropClasses = {};

	var hasRequiredBackdropClasses;

	function requireBackdropClasses () {
		if (hasRequiredBackdropClasses) return backdropClasses;
		hasRequiredBackdropClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(backdropClasses, "__esModule", {
		  value: true
		});
		backdropClasses.default = void 0;
		backdropClasses.getBackdropUtilityClass = getBackdropUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getBackdropUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiBackdrop', slot);
		}
		const backdropClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiBackdrop', ['root', 'invisible']);
		var _default = backdropClasses$1;
		backdropClasses.default = _default;
		return backdropClasses;
	}

	var hasRequiredBackdrop;

	function requireBackdrop () {
		if (hasRequiredBackdrop) return Backdrop$1;
		hasRequiredBackdrop = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Backdrop$1, "__esModule", {
		  value: true
		});
		Backdrop$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _Fade = _interopRequireDefault(requireFade());
		var _backdropClasses = requireBackdropClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["children", "component", "components", "componentsProps", "className", "invisible", "open", "slotProps", "slots", "transitionDuration", "TransitionComponent"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    invisible
		  } = ownerState;
		  const slots = {
		    root: ['root', invisible && 'invisible']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _backdropClasses.getBackdropUtilityClass, classes);
		};
		const BackdropRoot = (0, _styled.default)('div', {
		  name: 'MuiBackdrop',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, ownerState.invisible && styles.invisible];
		  }
		})(({
		  ownerState
		}) => (0, _extends2.default)({
		  position: 'fixed',
		  display: 'flex',
		  alignItems: 'center',
		  justifyContent: 'center',
		  right: 0,
		  bottom: 0,
		  top: 0,
		  left: 0,
		  backgroundColor: 'rgba(0, 0, 0, 0.5)',
		  WebkitTapHighlightColor: 'transparent'
		}, ownerState.invisible && {
		  backgroundColor: 'transparent'
		}));
		const Backdrop = /*#__PURE__*/React.forwardRef(function Backdrop(inProps, ref) {
		  var _slotProps$root, _ref, _slots$root;
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiBackdrop'
		  });
		  const {
		      children,
		      component = 'div',
		      components = {},
		      componentsProps = {},
		      className,
		      invisible = false,
		      open,
		      slotProps = {},
		      slots = {},
		      transitionDuration,
		      // eslint-disable-next-line react/prop-types
		      TransitionComponent = _Fade.default
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    component,
		    invisible
		  });
		  const classes = useUtilityClasses(ownerState);
		  const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TransitionComponent, (0, _extends2.default)({
		    in: open,
		    timeout: transitionDuration
		  }, other, {
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(BackdropRoot, (0, _extends2.default)({
		      "aria-hidden": true
		    }, rootSlotProps, {
		      as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
		      className: (0, _clsx.default)(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
		      ownerState: (0, _extends2.default)({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
		      classes: classes,
		      ref: ref,
		      children: children
		    }))
		  }));
		});
		Backdrop.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The components used for each slot inside.
		   *
		   * This prop is an alias for the `slots` prop.
		   * It's recommended to use the `slots` prop instead.
		   *
		   * @default {}
		   */
		  components: _propTypes.default.shape({
		    Root: _propTypes.default.elementType
		  }),
		  /**
		   * The extra props for the slot components.
		   * You can override the existing props or add new ones.
		   *
		   * This prop is an alias for the `slotProps` prop.
		   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
		   *
		   * @default {}
		   */
		  componentsProps: _propTypes.default.shape({
		    root: _propTypes.default.object
		  }),
		  /**
		   * If `true`, the backdrop is invisible.
		   * It can be used when rendering a popover or a custom select component.
		   * @default false
		   */
		  invisible: _propTypes.default.bool,
		  /**
		   * If `true`, the component is shown.
		   */
		  open: _propTypes.default.bool.isRequired,
		  /**
		   * The extra props for the slot components.
		   * You can override the existing props or add new ones.
		   *
		   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
		   *
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    root: _propTypes.default.object
		  }),
		  /**
		   * The components used for each slot inside.
		   *
		   * This prop is an alias for the `components` prop, which will be deprecated in the future.
		   *
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * The duration for the transition, in milliseconds.
		   * You may specify a single timeout for all transitions, or individually with an object.
		   */
		  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
		    appear: _propTypes.default.number,
		    enter: _propTypes.default.number,
		    exit: _propTypes.default.number
		  })])
		} ;
		var _default = Backdrop;
		Backdrop$1.default = _default;
		return Backdrop$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  backdropClasses: true
		};
		Object.defineProperty(exports, "backdropClasses", {
		  enumerable: true,
		  get: function () {
		    return _backdropClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Backdrop.default;
		  }
		});
		var _Backdrop = _interopRequireDefault(requireBackdrop());
		var _backdropClasses = _interopRequireWildcard(requireBackdropClasses());
		Object.keys(_backdropClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _backdropClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _backdropClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Backdrop$2));

	var Backdrop = /*@__PURE__*/getDefaultExportFromCjs(Backdrop$2);

	var hasRequiredModal$1;

	function requireModal$1 () {
		if (hasRequiredModal$1) return Modal;
		hasRequiredModal$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Modal, "__esModule", {
		  value: true
		});
		Modal.modalClasses = Modal.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _ModalUnstyled = _interopRequireWildcard(requireModalUnstyled());
		var _utils = requireUtils$3();
		var _utils2 = requireUtils$4();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _Backdrop = _interopRequireDefault(Backdrop$2);
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["BackdropComponent", "BackdropProps", "closeAfterTransition", "children", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "slotProps", "slots", "theme"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const modalClasses = _ModalUnstyled.modalUnstyledClasses;
		Modal.modalClasses = modalClasses;
		const extendUtilityClasses = ownerState => {
		  return ownerState.classes;
		};
		const ModalRoot = (0, _styled.default)('div', {
		  name: 'MuiModal',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
		  }
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  position: 'fixed',
		  zIndex: (theme.vars || theme).zIndex.modal,
		  right: 0,
		  bottom: 0,
		  top: 0,
		  left: 0
		}, !ownerState.open && ownerState.exited && {
		  visibility: 'hidden'
		}));
		const ModalBackdrop = (0, _styled.default)(_Backdrop.default, {
		  name: 'MuiModal',
		  slot: 'Backdrop',
		  overridesResolver: (props, styles) => {
		    return styles.backdrop;
		  }
		})({
		  zIndex: -1
		});

		/**
		 * Modal is a lower-level construct that is leveraged by the following components:
		 *
		 * - [Dialog](/material-ui/api/dialog/)
		 * - [Drawer](/material-ui/api/drawer/)
		 * - [Menu](/material-ui/api/menu/)
		 * - [Popover](/material-ui/api/popover/)
		 *
		 * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
		 * rather than directly using Modal.
		 *
		 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
		 */
		const Modal$1 = /*#__PURE__*/React.forwardRef(function Modal(inProps, ref) {
		  var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
		  const props = (0, _useThemeProps.default)({
		    name: 'MuiModal',
		    props: inProps
		  });
		  const {
		      BackdropComponent = ModalBackdrop,
		      BackdropProps,
		      closeAfterTransition = false,
		      children,
		      component,
		      components = {},
		      componentsProps = {},
		      disableAutoFocus = false,
		      disableEnforceFocus = false,
		      disableEscapeKeyDown = false,
		      disablePortal = false,
		      disableRestoreFocus = false,
		      disableScrollLock = false,
		      hideBackdrop = false,
		      keepMounted = false,
		      slotProps,
		      slots,
		      // eslint-disable-next-line react/prop-types
		      theme
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const [exited, setExited] = React.useState(true);
		  const commonProps = {
		    closeAfterTransition,
		    disableAutoFocus,
		    disableEnforceFocus,
		    disableEscapeKeyDown,
		    disablePortal,
		    disableRestoreFocus,
		    disableScrollLock,
		    hideBackdrop,
		    keepMounted
		  };
		  const ownerState = (0, _extends2.default)({}, props, commonProps, {
		    exited
		  });
		  const classes = extendUtilityClasses(ownerState);
		  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
		  const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
		  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
		  const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ModalUnstyled.default, (0, _extends2.default)({
		    slots: {
		      root: RootSlot,
		      backdrop: BackdropSlot
		    },
		    slotProps: {
		      root: () => (0, _extends2.default)({}, (0, _utils.resolveComponentProps)(rootSlotProps, ownerState), !(0, _utils.isHostComponent)(RootSlot) && {
		        as: component,
		        theme
		      }),
		      backdrop: () => (0, _extends2.default)({}, BackdropProps, (0, _utils.resolveComponentProps)(backdropSlotProps, ownerState))
		    },
		    onTransitionEnter: () => setExited(false),
		    onTransitionExited: () => setExited(true),
		    ref: ref
		  }, other, {
		    classes: classes
		  }, commonProps, {
		    children: children
		  }));
		});
		Modal$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * A backdrop component. This prop enables custom backdrop rendering.
		   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
		   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
		   * @default styled(Backdrop, {
		   *   name: 'MuiModal',
		   *   slot: 'Backdrop',
		   *   overridesResolver: (props, styles) => {
		   *     return styles.backdrop;
		   *   },
		   * })({
		   *   zIndex: -1,
		   * })
		   */
		  BackdropComponent: _propTypes.default.elementType,
		  /**
		   * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
		   * @deprecated Use `slotProps.backdrop` instead.
		   */
		  BackdropProps: _propTypes.default.object,
		  /**
		   * A single child content element.
		   */
		  children: _utils2.elementAcceptingRef.isRequired,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * When set to true the Modal waits until a nested Transition is completed before closing.
		   * @default false
		   */
		  closeAfterTransition: _propTypes.default.bool,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The components used for each slot inside.
		   *
		   * This prop is an alias for the `slots` prop.
		   * It's recommended to use the `slots` prop instead.
		   *
		   * @default {}
		   */
		  components: _propTypes.default.shape({
		    Backdrop: _propTypes.default.elementType,
		    Root: _propTypes.default.elementType
		  }),
		  /**
		   * The extra props for the slot components.
		   * You can override the existing props or add new ones.
		   *
		   * This prop is an alias for the `slotProps` prop.
		   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
		   *
		   * @default {}
		   */
		  componentsProps: _propTypes.default.shape({
		    backdrop: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * An HTML element or function that returns one.
		   * The `container` will have the portal children appended to it.
		   *
		   * By default, it uses the body of the top-level document object,
		   * so it's simply `document.body` most of the time.
		   */
		  container: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_utils2.HTMLElementType, _propTypes.default.func]),
		  /**
		   * If `true`, the modal will not automatically shift focus to itself when it opens, and
		   * replace it to the last focused element when it closes.
		   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
		   *
		   * Generally this should never be set to `true` as it makes the modal less
		   * accessible to assistive technologies, like screen readers.
		   * @default false
		   */
		  disableAutoFocus: _propTypes.default.bool,
		  /**
		   * If `true`, the modal will not prevent focus from leaving the modal while open.
		   *
		   * Generally this should never be set to `true` as it makes the modal less
		   * accessible to assistive technologies, like screen readers.
		   * @default false
		   */
		  disableEnforceFocus: _propTypes.default.bool,
		  /**
		   * If `true`, hitting escape will not fire the `onClose` callback.
		   * @default false
		   */
		  disableEscapeKeyDown: _propTypes.default.bool,
		  /**
		   * The `children` will be under the DOM hierarchy of the parent component.
		   * @default false
		   */
		  disablePortal: _propTypes.default.bool,
		  /**
		   * If `true`, the modal will not restore focus to previously focused element once
		   * modal is hidden or unmounted.
		   * @default false
		   */
		  disableRestoreFocus: _propTypes.default.bool,
		  /**
		   * Disable the scroll lock behavior.
		   * @default false
		   */
		  disableScrollLock: _propTypes.default.bool,
		  /**
		   * If `true`, the backdrop is not rendered.
		   * @default false
		   */
		  hideBackdrop: _propTypes.default.bool,
		  /**
		   * Always keep the children in the DOM.
		   * This prop can be useful in SEO situation or
		   * when you want to maximize the responsiveness of the Modal.
		   * @default false
		   */
		  keepMounted: _propTypes.default.bool,
		  /**
		   * Callback fired when the backdrop is clicked.
		   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
		   */
		  onBackdropClick: _propTypes.default.func,
		  /**
		   * Callback fired when the component requests to be closed.
		   * The `reason` parameter can optionally be used to control the response to `onClose`.
		   *
		   * @param {object} event The event source of the callback.
		   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
		   */
		  onClose: _propTypes.default.func,
		  /**
		   * If `true`, the component is shown.
		   */
		  open: _propTypes.default.bool.isRequired,
		  /**
		   * The props used for each slot inside the Modal.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    backdrop: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the Modal.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    backdrop: _propTypes.default.elementType,
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = Modal$1;
		Modal.default = _default;
		return Modal;
	}

	var hasRequiredModal;

	function requireModal () {
		if (hasRequiredModal) return Modal$1;
		hasRequiredModal = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _Modal.default;
			  }
			});
			var _ModalUnstyled = requireModalUnstyled();
			Object.keys(_ModalUnstyled).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _ModalUnstyled[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _ModalUnstyled[key];
			    }
			  });
			});
			var _Modal = _interopRequireWildcard(requireModal$1());
			Object.keys(_Modal).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _Modal[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _Modal[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Modal$1));
		return Modal$1;
	}

	var Paper$2 = {};

	var Paper$1 = {};

	var getOverlayAlpha = {};

	var hasRequiredGetOverlayAlpha;

	function requireGetOverlayAlpha () {
		if (hasRequiredGetOverlayAlpha) return getOverlayAlpha;
		hasRequiredGetOverlayAlpha = 1;

		Object.defineProperty(getOverlayAlpha, "__esModule", {
		  value: true
		});
		getOverlayAlpha.default = void 0;
		// Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
		const getOverlayAlpha$1 = elevation => {
		  let alphaValue;
		  if (elevation < 1) {
		    alphaValue = 5.11916 * elevation ** 2;
		  } else {
		    alphaValue = 4.5 * Math.log(elevation + 1) + 2;
		  }
		  return (alphaValue / 100).toFixed(2);
		};
		var _default = getOverlayAlpha$1;
		getOverlayAlpha.default = _default;
		return getOverlayAlpha;
	}

	var paperClasses = {};

	var hasRequiredPaperClasses;

	function requirePaperClasses () {
		if (hasRequiredPaperClasses) return paperClasses;
		hasRequiredPaperClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(paperClasses, "__esModule", {
		  value: true
		});
		paperClasses.default = void 0;
		paperClasses.getPaperUtilityClass = getPaperUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getPaperUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiPaper', slot);
		}
		const paperClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);
		var _default = paperClasses$1;
		paperClasses.default = _default;
		return paperClasses;
	}

	var hasRequiredPaper;

	function requirePaper () {
		if (hasRequiredPaper) return Paper$1;
		hasRequiredPaper = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Paper$1, "__esModule", {
		  value: true
		});
		Paper$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _utils = requireUtils$4();
		var _base = requireNode$2();
		var _system = requireSystem();
		var _styled = _interopRequireDefault(requireStyled());
		var _getOverlayAlpha = _interopRequireDefault(requireGetOverlayAlpha());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _useTheme = _interopRequireDefault(requireUseTheme());
		var _paperClasses = requirePaperClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className", "component", "elevation", "square", "variant"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    square,
		    elevation,
		    variant,
		    classes
		  } = ownerState;
		  const slots = {
		    root: ['root', variant, !square && 'rounded', variant === 'elevation' && `elevation${elevation}`]
		  };
		  return (0, _base.unstable_composeClasses)(slots, _paperClasses.getPaperUtilityClass, classes);
		};
		const PaperRoot = (0, _styled.default)('div', {
		  name: 'MuiPaper',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]];
		  }
		})(({
		  theme,
		  ownerState
		}) => {
		  var _theme$vars$overlays;
		  return (0, _extends2.default)({
		    backgroundColor: (theme.vars || theme).palette.background.paper,
		    color: (theme.vars || theme).palette.text.primary,
		    transition: theme.transitions.create('box-shadow')
		  }, !ownerState.square && {
		    borderRadius: theme.shape.borderRadius
		  }, ownerState.variant === 'outlined' && {
		    border: `1px solid ${(theme.vars || theme).palette.divider}`
		  }, ownerState.variant === 'elevation' && (0, _extends2.default)({
		    boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
		  }, !theme.vars && theme.palette.mode === 'dark' && {
		    backgroundImage: `linear-gradient(${(0, _system.alpha)('#fff', (0, _getOverlayAlpha.default)(ownerState.elevation))}, ${(0, _system.alpha)('#fff', (0, _getOverlayAlpha.default)(ownerState.elevation))})`
		  }, theme.vars && {
		    backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
		  }));
		});
		const Paper = /*#__PURE__*/React.forwardRef(function Paper(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiPaper'
		  });
		  const {
		      className,
		      component = 'div',
		      elevation = 1,
		      square = false,
		      variant = 'elevation'
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    component,
		    elevation,
		    square,
		    variant
		  });
		  const classes = useUtilityClasses(ownerState);
		  {
		    // eslint-disable-next-line react-hooks/rules-of-hooks
		    const theme = (0, _useTheme.default)();
		    if (theme.shadows[elevation] === undefined) {
		      console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join('\n'));
		    }
		  }
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(PaperRoot, (0, _extends2.default)({
		    as: component,
		    ownerState: ownerState,
		    className: (0, _clsx.default)(classes.root, className),
		    ref: ref
		  }, other));
		});
		Paper.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * Shadow depth, corresponds to `dp` in the spec.
		   * It accepts values between 0 and 24 inclusive.
		   * @default 1
		   */
		  elevation: (0, _utils.chainPropTypes)(_utils.integerPropType, props => {
		    const {
		      elevation,
		      variant
		    } = props;
		    if (elevation > 0 && variant === 'outlined') {
		      return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
		    }
		    return null;
		  }),
		  /**
		   * If `true`, rounded corners are disabled.
		   * @default false
		   */
		  square: _propTypes.default.bool,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * The variant to use.
		   * @default 'elevation'
		   */
		  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['elevation', 'outlined']), _propTypes.default.string])
		} ;
		var _default = Paper;
		Paper$1.default = _default;
		return Paper$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  paperClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Paper.default;
		  }
		});
		Object.defineProperty(exports, "paperClasses", {
		  enumerable: true,
		  get: function () {
		    return _paperClasses.default;
		  }
		});
		var _Paper = _interopRequireDefault(requirePaper());
		var _paperClasses = _interopRequireWildcard(requirePaperClasses());
		Object.keys(_paperClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _paperClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _paperClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Paper$2));

	var Paper = /*@__PURE__*/getDefaultExportFromCjs(Paper$2);

	var dialogClasses = {};

	var hasRequiredDialogClasses;

	function requireDialogClasses () {
		if (hasRequiredDialogClasses) return dialogClasses;
		hasRequiredDialogClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(dialogClasses, "__esModule", {
		  value: true
		});
		dialogClasses.default = void 0;
		dialogClasses.getDialogUtilityClass = getDialogUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getDialogUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiDialog', slot);
		}
		const dialogClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiDialog', ['root', 'scrollPaper', 'scrollBody', 'container', 'paper', 'paperScrollPaper', 'paperScrollBody', 'paperWidthFalse', 'paperWidthXs', 'paperWidthSm', 'paperWidthMd', 'paperWidthLg', 'paperWidthXl', 'paperFullWidth', 'paperFullScreen']);
		var _default = dialogClasses$1;
		dialogClasses.default = _default;
		return dialogClasses;
	}

	var DialogContext = {};

	var hasRequiredDialogContext;

	function requireDialogContext () {
		if (hasRequiredDialogContext) return DialogContext;
		hasRequiredDialogContext = 1;

		Object.defineProperty(DialogContext, "__esModule", {
		  value: true
		});
		DialogContext.default = void 0;
		var _react = require$$3;
		const DialogContext$1 = /*#__PURE__*/(0, _react.createContext)({});
		{
		  DialogContext$1.displayName = 'DialogContext';
		}
		var _default = DialogContext$1;
		DialogContext.default = _default;
		return DialogContext;
	}

	var hasRequiredDialog;

	function requireDialog () {
		if (hasRequiredDialog) return Dialog$1;
		hasRequiredDialog = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Dialog$1, "__esModule", {
		  value: true
		});
		Dialog$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _utils = requireUtils$4();
		var _capitalize = _interopRequireDefault(requireCapitalize());
		var _Modal = _interopRequireDefault(requireModal());
		var _Fade = _interopRequireDefault(requireFade());
		var _Paper = _interopRequireDefault(Paper$2);
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _styled = _interopRequireDefault(requireStyled());
		var _dialogClasses = _interopRequireWildcard(requireDialogClasses());
		var _DialogContext = _interopRequireDefault(requireDialogContext());
		var _Backdrop = _interopRequireDefault(Backdrop$2);
		var _useTheme = _interopRequireDefault(requireUseTheme());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const DialogBackdrop = (0, _styled.default)(_Backdrop.default, {
		  name: 'MuiDialog',
		  slot: 'Backdrop',
		  overrides: (props, styles) => styles.backdrop
		})({
		  // Improve scrollable dialog support.
		  zIndex: -1
		});
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    scroll,
		    maxWidth,
		    fullWidth,
		    fullScreen
		  } = ownerState;
		  const slots = {
		    root: ['root'],
		    container: ['container', `scroll${(0, _capitalize.default)(scroll)}`],
		    paper: ['paper', `paperScroll${(0, _capitalize.default)(scroll)}`, `paperWidth${(0, _capitalize.default)(String(maxWidth))}`, fullWidth && 'paperFullWidth', fullScreen && 'paperFullScreen']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _dialogClasses.getDialogUtilityClass, classes);
		};
		const DialogRoot = (0, _styled.default)(_Modal.default, {
		  name: 'MuiDialog',
		  slot: 'Root',
		  overridesResolver: (props, styles) => styles.root
		})({
		  '@media print': {
		    // Use !important to override the Modal inline-style.
		    position: 'absolute !important'
		  }
		});
		const DialogContainer = (0, _styled.default)('div', {
		  name: 'MuiDialog',
		  slot: 'Container',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.container, styles[`scroll${(0, _capitalize.default)(ownerState.scroll)}`]];
		  }
		})(({
		  ownerState
		}) => (0, _extends2.default)({
		  height: '100%',
		  '@media print': {
		    height: 'auto'
		  },
		  // We disable the focus ring for mouse, touch and keyboard users.
		  outline: 0
		}, ownerState.scroll === 'paper' && {
		  display: 'flex',
		  justifyContent: 'center',
		  alignItems: 'center'
		}, ownerState.scroll === 'body' && {
		  overflowY: 'auto',
		  overflowX: 'hidden',
		  textAlign: 'center',
		  '&:after': {
		    content: '""',
		    display: 'inline-block',
		    verticalAlign: 'middle',
		    height: '100%',
		    width: '0'
		  }
		}));
		const DialogPaper = (0, _styled.default)(_Paper.default, {
		  name: 'MuiDialog',
		  slot: 'Paper',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.paper, styles[`scrollPaper${(0, _capitalize.default)(ownerState.scroll)}`], styles[`paperWidth${(0, _capitalize.default)(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles.paperFullWidth, ownerState.fullScreen && styles.paperFullScreen];
		  }
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  margin: 32,
		  position: 'relative',
		  overflowY: 'auto',
		  // Fix IE11 issue, to remove at some point.
		  '@media print': {
		    overflowY: 'visible',
		    boxShadow: 'none'
		  }
		}, ownerState.scroll === 'paper' && {
		  display: 'flex',
		  flexDirection: 'column',
		  maxHeight: 'calc(100% - 64px)'
		}, ownerState.scroll === 'body' && {
		  display: 'inline-block',
		  verticalAlign: 'middle',
		  textAlign: 'left' // 'initial' doesn't work on IE11
		}, !ownerState.maxWidth && {
		  maxWidth: 'calc(100% - 64px)'
		}, ownerState.maxWidth === 'xs' && {
		  maxWidth: theme.breakpoints.unit === 'px' ? Math.max(theme.breakpoints.values.xs, 444) : `${theme.breakpoints.values.xs}${theme.breakpoints.unit}`,
		  [`&.${_dialogClasses.default.paperScrollBody}`]: {
		    [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
		      maxWidth: 'calc(100% - 64px)'
		    }
		  }
		}, ownerState.maxWidth && ownerState.maxWidth !== 'xs' && {
		  maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
		  [`&.${_dialogClasses.default.paperScrollBody}`]: {
		    [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
		      maxWidth: 'calc(100% - 64px)'
		    }
		  }
		}, ownerState.fullWidth && {
		  width: 'calc(100% - 64px)'
		}, ownerState.fullScreen && {
		  margin: 0,
		  width: '100%',
		  maxWidth: '100%',
		  height: '100%',
		  maxHeight: 'none',
		  borderRadius: 0,
		  [`&.${_dialogClasses.default.paperScrollBody}`]: {
		    margin: 0,
		    maxWidth: '100%'
		  }
		}));

		/**
		 * Dialogs are overlaid modal paper based components with a backdrop.
		 */
		const Dialog = /*#__PURE__*/React.forwardRef(function Dialog(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiDialog'
		  });
		  const theme = (0, _useTheme.default)();
		  const defaultTransitionDuration = {
		    enter: theme.transitions.duration.enteringScreen,
		    exit: theme.transitions.duration.leavingScreen
		  };
		  const {
		      'aria-describedby': ariaDescribedby,
		      'aria-labelledby': ariaLabelledbyProp,
		      BackdropComponent,
		      BackdropProps,
		      children,
		      className,
		      disableEscapeKeyDown = false,
		      fullScreen = false,
		      fullWidth = false,
		      maxWidth = 'sm',
		      onBackdropClick,
		      onClose,
		      open,
		      PaperComponent = _Paper.default,
		      PaperProps = {},
		      scroll = 'paper',
		      TransitionComponent = _Fade.default,
		      transitionDuration = defaultTransitionDuration,
		      TransitionProps
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    disableEscapeKeyDown,
		    fullScreen,
		    fullWidth,
		    maxWidth,
		    scroll
		  });
		  const classes = useUtilityClasses(ownerState);
		  const backdropClick = React.useRef();
		  const handleMouseDown = event => {
		    // We don't want to close the dialog when clicking the dialog content.
		    // Make sure the event starts and ends on the same DOM element.
		    backdropClick.current = event.target === event.currentTarget;
		  };
		  const handleBackdropClick = event => {
		    // Ignore the events not coming from the "backdrop".
		    if (!backdropClick.current) {
		      return;
		    }
		    backdropClick.current = null;
		    if (onBackdropClick) {
		      onBackdropClick(event);
		    }
		    if (onClose) {
		      onClose(event, 'backdropClick');
		    }
		  };
		  const ariaLabelledby = (0, _utils.unstable_useId)(ariaLabelledbyProp);
		  const dialogContextValue = React.useMemo(() => {
		    return {
		      titleId: ariaLabelledby
		    };
		  }, [ariaLabelledby]);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(DialogRoot, (0, _extends2.default)({
		    className: (0, _clsx.default)(classes.root, className),
		    closeAfterTransition: true,
		    components: {
		      Backdrop: DialogBackdrop
		    },
		    componentsProps: {
		      backdrop: (0, _extends2.default)({
		        transitionDuration,
		        as: BackdropComponent
		      }, BackdropProps)
		    },
		    disableEscapeKeyDown: disableEscapeKeyDown,
		    onClose: onClose,
		    open: open,
		    ref: ref,
		    onClick: handleBackdropClick,
		    ownerState: ownerState
		  }, other, {
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(TransitionComponent, (0, _extends2.default)({
		      appear: true,
		      in: open,
		      timeout: transitionDuration,
		      role: "presentation"
		    }, TransitionProps, {
		      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DialogContainer, {
		        className: (0, _clsx.default)(classes.container),
		        onMouseDown: handleMouseDown,
		        ownerState: ownerState,
		        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DialogPaper, (0, _extends2.default)({
		          as: PaperComponent,
		          elevation: 24,
		          role: "dialog",
		          "aria-describedby": ariaDescribedby,
		          "aria-labelledby": ariaLabelledby
		        }, PaperProps, {
		          className: (0, _clsx.default)(classes.paper, PaperProps.className),
		          ownerState: ownerState,
		          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_DialogContext.default.Provider, {
		            value: dialogContextValue,
		            children: children
		          })
		        }))
		      })
		    }))
		  }));
		});
		Dialog.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The id(s) of the element(s) that describe the dialog.
		   */
		  'aria-describedby': _propTypes.default.string,
		  /**
		   * The id(s) of the element(s) that label the dialog.
		   */
		  'aria-labelledby': _propTypes.default.string,
		  /**
		   * A backdrop component. This prop enables custom backdrop rendering.
		   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
		   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
		   * @default styled(Backdrop, {
		   *   name: 'MuiModal',
		   *   slot: 'Backdrop',
		   *   overridesResolver: (props, styles) => {
		   *     return styles.backdrop;
		   *   },
		   * })({
		   *   zIndex: -1,
		   * })
		   */
		  BackdropComponent: _propTypes.default.elementType,
		  /**
		   * @ignore
		   */
		  BackdropProps: _propTypes.default.object,
		  /**
		   * Dialog children, usually the included sub-components.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * If `true`, hitting escape will not fire the `onClose` callback.
		   * @default false
		   */
		  disableEscapeKeyDown: _propTypes.default.bool,
		  /**
		   * If `true`, the dialog is full-screen.
		   * @default false
		   */
		  fullScreen: _propTypes.default.bool,
		  /**
		   * If `true`, the dialog stretches to `maxWidth`.
		   *
		   * Notice that the dialog width grow is limited by the default margin.
		   * @default false
		   */
		  fullWidth: _propTypes.default.bool,
		  /**
		   * Determine the max-width of the dialog.
		   * The dialog width grows with the size of the screen.
		   * Set to `false` to disable `maxWidth`.
		   * @default 'sm'
		   */
		  maxWidth: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), _propTypes.default.string]),
		  /**
		   * Callback fired when the backdrop is clicked.
		   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
		   */
		  onBackdropClick: _propTypes.default.func,
		  /**
		   * Callback fired when the component requests to be closed.
		   *
		   * @param {object} event The event source of the callback.
		   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
		   */
		  onClose: _propTypes.default.func,
		  /**
		   * If `true`, the component is shown.
		   */
		  open: _propTypes.default.bool.isRequired,
		  /**
		   * The component used to render the body of the dialog.
		   * @default Paper
		   */
		  PaperComponent: _propTypes.default.elementType,
		  /**
		   * Props applied to the [`Paper`](/material-ui/api/paper/) element.
		   * @default {}
		   */
		  PaperProps: _propTypes.default.object,
		  /**
		   * Determine the container for scrolling the dialog.
		   * @default 'paper'
		   */
		  scroll: _propTypes.default.oneOf(['body', 'paper']),
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * The component used for the transition.
		   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
		   * @default Fade
		   */
		  TransitionComponent: _propTypes.default.elementType,
		  /**
		   * The duration for the transition, in milliseconds.
		   * You may specify a single timeout for all transitions, or individually with an object.
		   * @default {
		   *   enter: theme.transitions.duration.enteringScreen,
		   *   exit: theme.transitions.duration.leavingScreen,
		   * }
		   */
		  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
		    appear: _propTypes.default.number,
		    enter: _propTypes.default.number,
		    exit: _propTypes.default.number
		  })]),
		  /**
		   * Props applied to the transition element.
		   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
		   */
		  TransitionProps: _propTypes.default.object
		} ;
		var _default = Dialog;
		Dialog$1.default = _default;
		return Dialog$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  dialogClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Dialog.default;
		  }
		});
		Object.defineProperty(exports, "dialogClasses", {
		  enumerable: true,
		  get: function () {
		    return _dialogClasses.default;
		  }
		});
		var _Dialog = _interopRequireDefault(requireDialog());
		var _dialogClasses = _interopRequireWildcard(requireDialogClasses());
		Object.keys(_dialogClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _dialogClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _dialogClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Dialog$2));

	var Dialog = /*@__PURE__*/getDefaultExportFromCjs(Dialog$2);

	var DialogTitle$2 = {};

	var DialogTitle$1 = {};

	var Typography$2 = {};

	var Typography$1 = {};

	var typographyClasses = {};

	var hasRequiredTypographyClasses;

	function requireTypographyClasses () {
		if (hasRequiredTypographyClasses) return typographyClasses;
		hasRequiredTypographyClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(typographyClasses, "__esModule", {
		  value: true
		});
		typographyClasses.default = void 0;
		typographyClasses.getTypographyUtilityClass = getTypographyUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getTypographyUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiTypography', slot);
		}
		const typographyClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);
		var _default = typographyClasses$1;
		typographyClasses.default = _default;
		return typographyClasses;
	}

	var hasRequiredTypography;

	function requireTypography () {
		if (hasRequiredTypography) return Typography$1;
		hasRequiredTypography = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Typography$1, "__esModule", {
		  value: true
		});
		Typography$1.default = Typography$1.TypographyRoot = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _system = requireSystem();
		var _base = requireNode$2();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _capitalize = _interopRequireDefault(requireCapitalize());
		var _typographyClasses = requireTypographyClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    align,
		    gutterBottom,
		    noWrap,
		    paragraph,
		    variant,
		    classes
		  } = ownerState;
		  const slots = {
		    root: ['root', variant, ownerState.align !== 'inherit' && `align${(0, _capitalize.default)(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _typographyClasses.getTypographyUtilityClass, classes);
		};
		const TypographyRoot = (0, _styled.default)('span', {
		  name: 'MuiTypography',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${(0, _capitalize.default)(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
		  }
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  margin: 0
		}, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
		  textAlign: ownerState.align
		}, ownerState.noWrap && {
		  overflow: 'hidden',
		  textOverflow: 'ellipsis',
		  whiteSpace: 'nowrap'
		}, ownerState.gutterBottom && {
		  marginBottom: '0.35em'
		}, ownerState.paragraph && {
		  marginBottom: 16
		}));
		Typography$1.TypographyRoot = TypographyRoot;
		const defaultVariantMapping = {
		  h1: 'h1',
		  h2: 'h2',
		  h3: 'h3',
		  h4: 'h4',
		  h5: 'h5',
		  h6: 'h6',
		  subtitle1: 'h6',
		  subtitle2: 'h6',
		  body1: 'p',
		  body2: 'p',
		  inherit: 'p'
		};

		// TODO v6: deprecate these color values in v5.x and remove the transformation in v6
		const colorTransformations = {
		  primary: 'primary.main',
		  textPrimary: 'text.primary',
		  secondary: 'secondary.main',
		  textSecondary: 'text.secondary',
		  error: 'error.main'
		};
		const transformDeprecatedColors = color => {
		  return colorTransformations[color] || color;
		};
		const Typography = /*#__PURE__*/React.forwardRef(function Typography(inProps, ref) {
		  const themeProps = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiTypography'
		  });
		  const color = transformDeprecatedColors(themeProps.color);
		  const props = (0, _system.unstable_extendSxProp)((0, _extends2.default)({}, themeProps, {
		    color
		  }));
		  const {
		      align = 'inherit',
		      className,
		      component,
		      gutterBottom = false,
		      noWrap = false,
		      paragraph = false,
		      variant = 'body1',
		      variantMapping = defaultVariantMapping
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    align,
		    color,
		    className,
		    component,
		    gutterBottom,
		    noWrap,
		    paragraph,
		    variant,
		    variantMapping
		  });
		  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TypographyRoot, (0, _extends2.default)({
		    as: Component,
		    ref: ref,
		    ownerState: ownerState,
		    className: (0, _clsx.default)(classes.root, className)
		  }, other));
		});
		Typography.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Set the text-align on the component.
		   * @default 'inherit'
		   */
		  align: _propTypes.default.oneOf(['center', 'inherit', 'justify', 'left', 'right']),
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the text will have a bottom margin.
		   * @default false
		   */
		  gutterBottom: _propTypes.default.bool,
		  /**
		   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
		   *
		   * Note that text overflow can only happen with block or inline-block level elements
		   * (the element needs to have a width in order to overflow).
		   * @default false
		   */
		  noWrap: _propTypes.default.bool,
		  /**
		   * If `true`, the element will be a paragraph element.
		   * @default false
		   */
		  paragraph: _propTypes.default.bool,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * Applies the theme typography styles.
		   * @default 'body1'
		   */
		  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), _propTypes.default.string]),
		  /**
		   * The component maps the variant prop to a range of different HTML element types.
		   * For instance, subtitle1 to `<h6>`.
		   * If you wish to change that mapping, you can provide your own.
		   * Alternatively, you can use the `component` prop.
		   * @default {
		   *   h1: 'h1',
		   *   h2: 'h2',
		   *   h3: 'h3',
		   *   h4: 'h4',
		   *   h5: 'h5',
		   *   h6: 'h6',
		   *   subtitle1: 'h6',
		   *   subtitle2: 'h6',
		   *   body1: 'p',
		   *   body2: 'p',
		   *   inherit: 'p',
		   * }
		   */
		  variantMapping: _propTypes.default /* @typescript-to-proptypes-ignore */.object
		} ;
		var _default = Typography;
		Typography$1.default = _default;
		return Typography$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  typographyClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Typography.default;
		  }
		});
		Object.defineProperty(exports, "typographyClasses", {
		  enumerable: true,
		  get: function () {
		    return _typographyClasses.default;
		  }
		});
		var _Typography = _interopRequireDefault(requireTypography());
		var _typographyClasses = _interopRequireWildcard(requireTypographyClasses());
		Object.keys(_typographyClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _typographyClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _typographyClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Typography$2));

	var Typography = /*@__PURE__*/getDefaultExportFromCjs(Typography$2);

	var dialogTitleClasses = {};

	var hasRequiredDialogTitleClasses;

	function requireDialogTitleClasses () {
		if (hasRequiredDialogTitleClasses) return dialogTitleClasses;
		hasRequiredDialogTitleClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(dialogTitleClasses, "__esModule", {
		  value: true
		});
		dialogTitleClasses.default = void 0;
		dialogTitleClasses.getDialogTitleUtilityClass = getDialogTitleUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getDialogTitleUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiDialogTitle', slot);
		}
		const dialogTitleClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiDialogTitle', ['root']);
		var _default = dialogTitleClasses$1;
		dialogTitleClasses.default = _default;
		return dialogTitleClasses;
	}

	var hasRequiredDialogTitle;

	function requireDialogTitle () {
		if (hasRequiredDialogTitle) return DialogTitle$1;
		hasRequiredDialogTitle = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(DialogTitle$1, "__esModule", {
		  value: true
		});
		DialogTitle$1.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _Typography = _interopRequireDefault(Typography$2);
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _dialogTitleClasses = requireDialogTitleClasses();
		var _DialogContext = _interopRequireDefault(requireDialogContext());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className", "id"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    classes
		  } = ownerState;
		  const slots = {
		    root: ['root']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _dialogTitleClasses.getDialogTitleUtilityClass, classes);
		};
		const DialogTitleRoot = (0, _styled.default)(_Typography.default, {
		  name: 'MuiDialogTitle',
		  slot: 'Root',
		  overridesResolver: (props, styles) => styles.root
		})({
		  padding: '16px 24px',
		  flex: '0 0 auto'
		});
		const DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiDialogTitle'
		  });
		  const {
		      className,
		      id: idProp
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = props;
		  const classes = useUtilityClasses(ownerState);
		  const {
		    titleId: id = idProp
		  } = React.useContext(_DialogContext.default);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(DialogTitleRoot, (0, _extends2.default)({
		    component: "h2",
		    className: (0, _clsx.default)(classes.root, className),
		    ownerState: ownerState,
		    ref: ref,
		    variant: "h6",
		    id: id
		  }, other));
		});
		DialogTitle.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * @ignore
		   */
		  id: _propTypes.default.string,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = DialogTitle;
		DialogTitle$1.default = _default;
		return DialogTitle$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  dialogTitleClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _DialogTitle.default;
		  }
		});
		Object.defineProperty(exports, "dialogTitleClasses", {
		  enumerable: true,
		  get: function () {
		    return _dialogTitleClasses.default;
		  }
		});
		var _DialogTitle = _interopRequireDefault(requireDialogTitle());
		var _dialogTitleClasses = _interopRequireWildcard(requireDialogTitleClasses());
		Object.keys(_dialogTitleClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _dialogTitleClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _dialogTitleClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (DialogTitle$2));

	var DialogTitle = /*@__PURE__*/getDefaultExportFromCjs(DialogTitle$2);

	var DialogContent$2 = {};

	var DialogContent$1 = {};

	var dialogContentClasses = {};

	var hasRequiredDialogContentClasses;

	function requireDialogContentClasses () {
		if (hasRequiredDialogContentClasses) return dialogContentClasses;
		hasRequiredDialogContentClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(dialogContentClasses, "__esModule", {
		  value: true
		});
		dialogContentClasses.default = void 0;
		dialogContentClasses.getDialogContentUtilityClass = getDialogContentUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getDialogContentUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiDialogContent', slot);
		}
		const dialogContentClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiDialogContent', ['root', 'dividers']);
		var _default = dialogContentClasses$1;
		dialogContentClasses.default = _default;
		return dialogContentClasses;
	}

	var hasRequiredDialogContent;

	function requireDialogContent () {
		if (hasRequiredDialogContent) return DialogContent$1;
		hasRequiredDialogContent = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(DialogContent$1, "__esModule", {
		  value: true
		});
		DialogContent$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _dialogContentClasses = requireDialogContentClasses();
		var _dialogTitleClasses = _interopRequireDefault(requireDialogTitleClasses());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className", "dividers"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    dividers
		  } = ownerState;
		  const slots = {
		    root: ['root', dividers && 'dividers']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _dialogContentClasses.getDialogContentUtilityClass, classes);
		};
		const DialogContentRoot = (0, _styled.default)('div', {
		  name: 'MuiDialogContent',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, ownerState.dividers && styles.dividers];
		  }
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  flex: '1 1 auto',
		  // Add iOS momentum scrolling for iOS < 13.0
		  WebkitOverflowScrolling: 'touch',
		  overflowY: 'auto',
		  padding: '20px 24px'
		}, ownerState.dividers ? {
		  padding: '16px 24px',
		  borderTop: `1px solid ${(theme.vars || theme).palette.divider}`,
		  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
		} : {
		  [`.${_dialogTitleClasses.default.root} + &`]: {
		    paddingTop: 0
		  }
		}));
		const DialogContent = /*#__PURE__*/React.forwardRef(function DialogContent(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiDialogContent'
		  });
		  const {
		      className,
		      dividers = false
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    dividers
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(DialogContentRoot, (0, _extends2.default)({
		    className: (0, _clsx.default)(classes.root, className),
		    ownerState: ownerState,
		    ref: ref
		  }, other));
		});
		DialogContent.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * Display the top and bottom dividers.
		   * @default false
		   */
		  dividers: _propTypes.default.bool,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = DialogContent;
		DialogContent$1.default = _default;
		return DialogContent$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  dialogContentClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _DialogContent.default;
		  }
		});
		Object.defineProperty(exports, "dialogContentClasses", {
		  enumerable: true,
		  get: function () {
		    return _dialogContentClasses.default;
		  }
		});
		var _DialogContent = _interopRequireDefault(requireDialogContent());
		var _dialogContentClasses = _interopRequireWildcard(requireDialogContentClasses());
		Object.keys(_dialogContentClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _dialogContentClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _dialogContentClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (DialogContent$2));

	var DialogContent = /*@__PURE__*/getDefaultExportFromCjs(DialogContent$2);

	var DialogActions$2 = {};

	var DialogActions$1 = {};

	var dialogActionsClasses = {};

	var hasRequiredDialogActionsClasses;

	function requireDialogActionsClasses () {
		if (hasRequiredDialogActionsClasses) return dialogActionsClasses;
		hasRequiredDialogActionsClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(dialogActionsClasses, "__esModule", {
		  value: true
		});
		dialogActionsClasses.default = void 0;
		dialogActionsClasses.getDialogActionsUtilityClass = getDialogActionsUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getDialogActionsUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiDialogActions', slot);
		}
		const dialogActionsClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiDialogActions', ['root', 'spacing']);
		var _default = dialogActionsClasses$1;
		dialogActionsClasses.default = _default;
		return dialogActionsClasses;
	}

	var hasRequiredDialogActions;

	function requireDialogActions () {
		if (hasRequiredDialogActions) return DialogActions$1;
		hasRequiredDialogActions = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(DialogActions$1, "__esModule", {
		  value: true
		});
		DialogActions$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _dialogActionsClasses = requireDialogActionsClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className", "disableSpacing"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    disableSpacing
		  } = ownerState;
		  const slots = {
		    root: ['root', !disableSpacing && 'spacing']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _dialogActionsClasses.getDialogActionsUtilityClass, classes);
		};
		const DialogActionsRoot = (0, _styled.default)('div', {
		  name: 'MuiDialogActions',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, !ownerState.disableSpacing && styles.spacing];
		  }
		})(({
		  ownerState
		}) => (0, _extends2.default)({
		  display: 'flex',
		  alignItems: 'center',
		  padding: 8,
		  justifyContent: 'flex-end',
		  flex: '0 0 auto'
		}, !ownerState.disableSpacing && {
		  '& > :not(:first-of-type)': {
		    marginLeft: 8
		  }
		}));
		const DialogActions = /*#__PURE__*/React.forwardRef(function DialogActions(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiDialogActions'
		  });
		  const {
		      className,
		      disableSpacing = false
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    disableSpacing
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(DialogActionsRoot, (0, _extends2.default)({
		    className: (0, _clsx.default)(classes.root, className),
		    ownerState: ownerState,
		    ref: ref
		  }, other));
		});
		DialogActions.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * If `true`, the actions do not have additional margin.
		   * @default false
		   */
		  disableSpacing: _propTypes.default.bool,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = DialogActions;
		DialogActions$1.default = _default;
		return DialogActions$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  dialogActionsClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _DialogActions.default;
		  }
		});
		Object.defineProperty(exports, "dialogActionsClasses", {
		  enumerable: true,
		  get: function () {
		    return _dialogActionsClasses.default;
		  }
		});
		var _DialogActions = _interopRequireDefault(requireDialogActions());
		var _dialogActionsClasses = _interopRequireWildcard(requireDialogActionsClasses());
		Object.keys(_dialogActionsClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _dialogActionsClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _dialogActionsClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (DialogActions$2));

	var DialogActions = /*@__PURE__*/getDefaultExportFromCjs(DialogActions$2);

	var Grid$2 = {};

	var Grid$1 = {};

	var GridContext = {};

	var hasRequiredGridContext;

	function requireGridContext () {
		if (hasRequiredGridContext) return GridContext;
		hasRequiredGridContext = 1;

		Object.defineProperty(GridContext, "__esModule", {
		  value: true
		});
		GridContext.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * @ignore - internal component.
		 */
		const GridContext$1 = /*#__PURE__*/React.createContext();
		{
		  GridContext$1.displayName = 'GridContext';
		}
		var _default = GridContext$1;
		GridContext.default = _default;
		return GridContext;
	}

	var gridClasses = {};

	var hasRequiredGridClasses;

	function requireGridClasses () {
		if (hasRequiredGridClasses) return gridClasses;
		hasRequiredGridClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(gridClasses, "__esModule", {
		  value: true
		});
		gridClasses.default = void 0;
		gridClasses.getGridUtilityClass = getGridUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getGridUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiGrid', slot);
		}
		const SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
		const DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];
		const WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];
		const GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
		const gridClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth',
		// spacings
		...SPACINGS.map(spacing => `spacing-xs-${spacing}`),
		// direction values
		...DIRECTIONS.map(direction => `direction-xs-${direction}`),
		// wrap values
		...WRAPS.map(wrap => `wrap-xs-${wrap}`),
		// grid sizes for all breakpoints
		...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);
		var _default = gridClasses$1;
		gridClasses.default = _default;
		return gridClasses;
	}

	var hasRequiredGrid;

	function requireGrid () {
		if (hasRequiredGrid) return Grid$1;
		hasRequiredGrid = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Grid$1, "__esModule", {
		  value: true
		});
		Grid$1.default = void 0;
		Grid$1.generateColumnGap = generateColumnGap;
		Grid$1.generateDirection = generateDirection;
		Grid$1.generateGrid = generateGrid;
		Grid$1.generateRowGap = generateRowGap;
		Grid$1.resolveSpacingClasses = resolveSpacingClasses;
		Grid$1.resolveSpacingStyles = resolveSpacingStyles;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _system = requireSystem();
		var _base = requireNode$2();
		var _requirePropFactory = _interopRequireDefault(requireRequirePropFactory());
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _useTheme = _interopRequireDefault(requireUseTheme());
		var _GridContext = _interopRequireDefault(requireGridContext());
		var _gridClasses = _interopRequireWildcard(requireGridClasses());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "rowSpacing", "spacing", "wrap", "zeroMinWidth"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function getOffset(val) {
		  const parse = parseFloat(val);
		  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;
		}
		function generateGrid({
		  theme,
		  ownerState
		}) {
		  let size;
		  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {
		    // Use side effect over immutability for better performance.
		    let styles = {};
		    if (ownerState[breakpoint]) {
		      size = ownerState[breakpoint];
		    }
		    if (!size) {
		      return globalStyles;
		    }
		    if (size === true) {
		      // For the auto layouting
		      styles = {
		        flexBasis: 0,
		        flexGrow: 1,
		        maxWidth: '100%'
		      };
		    } else if (size === 'auto') {
		      styles = {
		        flexBasis: 'auto',
		        flexGrow: 0,
		        flexShrink: 0,
		        maxWidth: 'none',
		        width: 'auto'
		      };
		    } else {
		      const columnsBreakpointValues = (0, _system.unstable_resolveBreakpointValues)({
		        values: ownerState.columns,
		        breakpoints: theme.breakpoints.values
		      });
		      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
		      if (columnValue === undefined || columnValue === null) {
		        return globalStyles;
		      }
		      // Keep 7 significant numbers.
		      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;
		      let more = {};
		      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
		        const themeSpacing = theme.spacing(ownerState.columnSpacing);
		        if (themeSpacing !== '0px') {
		          const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;
		          more = {
		            flexBasis: fullWidth,
		            maxWidth: fullWidth
		          };
		        }
		      }

		      // Close to the bootstrap implementation:
		      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41
		      styles = (0, _extends2.default)({
		        flexBasis: width,
		        flexGrow: 0,
		        maxWidth: width
		      }, more);
		    }

		    // No need for a media query for the first size.
		    if (theme.breakpoints.values[breakpoint] === 0) {
		      Object.assign(globalStyles, styles);
		    } else {
		      globalStyles[theme.breakpoints.up(breakpoint)] = styles;
		    }
		    return globalStyles;
		  }, {});
		}
		function generateDirection({
		  theme,
		  ownerState
		}) {
		  const directionValues = (0, _system.unstable_resolveBreakpointValues)({
		    values: ownerState.direction,
		    breakpoints: theme.breakpoints.values
		  });
		  return (0, _system.handleBreakpoints)({
		    theme
		  }, directionValues, propValue => {
		    const output = {
		      flexDirection: propValue
		    };
		    if (propValue.indexOf('column') === 0) {
		      output[`& > .${_gridClasses.default.item}`] = {
		        maxWidth: 'none'
		      };
		    }
		    return output;
		  });
		}

		/**
		 * Extracts zero value breakpoint keys before a non-zero value breakpoint key.
		 * @example { xs: 0, sm: 0, md: 2, lg: 0, xl: 0 } or [0, 0, 2, 0, 0]
		 * @returns [xs, sm]
		 */
		function extractZeroValueBreakpointKeys({
		  breakpoints,
		  values
		}) {
		  let nonZeroKey = '';
		  Object.keys(values).forEach(key => {
		    if (nonZeroKey !== '') {
		      return;
		    }
		    if (values[key] !== 0) {
		      nonZeroKey = key;
		    }
		  });
		  const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {
		    return breakpoints[a] - breakpoints[b];
		  });
		  return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));
		}
		function generateRowGap({
		  theme,
		  ownerState
		}) {
		  const {
		    container,
		    rowSpacing
		  } = ownerState;
		  let styles = {};
		  if (container && rowSpacing !== 0) {
		    const rowSpacingValues = (0, _system.unstable_resolveBreakpointValues)({
		      values: rowSpacing,
		      breakpoints: theme.breakpoints.values
		    });
		    let zeroValueBreakpointKeys;
		    if (typeof rowSpacingValues === 'object') {
		      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
		        breakpoints: theme.breakpoints.values,
		        values: rowSpacingValues
		      });
		    }
		    styles = (0, _system.handleBreakpoints)({
		      theme
		    }, rowSpacingValues, (propValue, breakpoint) => {
		      var _zeroValueBreakpointK;
		      const themeSpacing = theme.spacing(propValue);
		      if (themeSpacing !== '0px') {
		        return {
		          marginTop: `-${getOffset(themeSpacing)}`,
		          [`& > .${_gridClasses.default.item}`]: {
		            paddingTop: getOffset(themeSpacing)
		          }
		        };
		      }
		      if ((_zeroValueBreakpointK = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK.includes(breakpoint)) {
		        return {};
		      }
		      return {
		        marginTop: 0,
		        [`& > .${_gridClasses.default.item}`]: {
		          paddingTop: 0
		        }
		      };
		    });
		  }
		  return styles;
		}
		function generateColumnGap({
		  theme,
		  ownerState
		}) {
		  const {
		    container,
		    columnSpacing
		  } = ownerState;
		  let styles = {};
		  if (container && columnSpacing !== 0) {
		    const columnSpacingValues = (0, _system.unstable_resolveBreakpointValues)({
		      values: columnSpacing,
		      breakpoints: theme.breakpoints.values
		    });
		    let zeroValueBreakpointKeys;
		    if (typeof columnSpacingValues === 'object') {
		      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
		        breakpoints: theme.breakpoints.values,
		        values: columnSpacingValues
		      });
		    }
		    styles = (0, _system.handleBreakpoints)({
		      theme
		    }, columnSpacingValues, (propValue, breakpoint) => {
		      var _zeroValueBreakpointK2;
		      const themeSpacing = theme.spacing(propValue);
		      if (themeSpacing !== '0px') {
		        return {
		          width: `calc(100% + ${getOffset(themeSpacing)})`,
		          marginLeft: `-${getOffset(themeSpacing)}`,
		          [`& > .${_gridClasses.default.item}`]: {
		            paddingLeft: getOffset(themeSpacing)
		          }
		        };
		      }
		      if ((_zeroValueBreakpointK2 = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK2.includes(breakpoint)) {
		        return {};
		      }
		      return {
		        width: '100%',
		        marginLeft: 0,
		        [`& > .${_gridClasses.default.item}`]: {
		          paddingLeft: 0
		        }
		      };
		    });
		  }
		  return styles;
		}
		function resolveSpacingStyles(spacing, breakpoints, styles = {}) {
		  // undefined/null or `spacing` <= 0
		  if (!spacing || spacing <= 0) {
		    return [];
		  }
		  // in case of string/number `spacing`
		  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {
		    return [styles[`spacing-xs-${String(spacing)}`]];
		  }
		  // in case of object `spacing`
		  const spacingStyles = [];
		  breakpoints.forEach(breakpoint => {
		    const value = spacing[breakpoint];
		    if (Number(value) > 0) {
		      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);
		    }
		  });
		  return spacingStyles;
		}

		// Default CSS values
		// flex: '0 1 auto',
		// flexDirection: 'row',
		// alignItems: 'flex-start',
		// flexWrap: 'nowrap',
		// justifyContent: 'flex-start',
		const GridRoot = (0, _styled.default)('div', {
		  name: 'MuiGrid',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    const {
		      container,
		      direction,
		      item,
		      spacing,
		      wrap,
		      zeroMinWidth,
		      breakpoints
		    } = ownerState;
		    let spacingStyles = [];

		    // in case of grid item
		    if (container) {
		      spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);
		    }
		    const breakpointsStyles = [];
		    breakpoints.forEach(breakpoint => {
		      const value = ownerState[breakpoint];
		      if (value) {
		        breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);
		      }
		    });
		    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];
		  }
		})(({
		  ownerState
		}) => (0, _extends2.default)({
		  boxSizing: 'border-box'
		}, ownerState.container && {
		  display: 'flex',
		  flexWrap: 'wrap',
		  width: '100%'
		}, ownerState.item && {
		  margin: 0 // For instance, it's useful when used with a `figure` element.
		}, ownerState.zeroMinWidth && {
		  minWidth: 0
		}, ownerState.wrap !== 'wrap' && {
		  flexWrap: ownerState.wrap
		}), generateDirection, generateRowGap, generateColumnGap, generateGrid);
		function resolveSpacingClasses(spacing, breakpoints) {
		  // undefined/null or `spacing` <= 0
		  if (!spacing || spacing <= 0) {
		    return [];
		  }
		  // in case of string/number `spacing`
		  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {
		    return [`spacing-xs-${String(spacing)}`];
		  }
		  // in case of object `spacing`
		  const classes = [];
		  breakpoints.forEach(breakpoint => {
		    const value = spacing[breakpoint];
		    if (Number(value) > 0) {
		      const className = `spacing-${breakpoint}-${String(value)}`;
		      classes.push(className);
		    }
		  });
		  return classes;
		}
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    container,
		    direction,
		    item,
		    spacing,
		    wrap,
		    zeroMinWidth,
		    breakpoints
		  } = ownerState;
		  let spacingClasses = [];

		  // in case of grid item
		  if (container) {
		    spacingClasses = resolveSpacingClasses(spacing, breakpoints);
		  }
		  const breakpointsClasses = [];
		  breakpoints.forEach(breakpoint => {
		    const value = ownerState[breakpoint];
		    if (value) {
		      breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);
		    }
		  });
		  const slots = {
		    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]
		  };
		  return (0, _base.unstable_composeClasses)(slots, _gridClasses.getGridUtilityClass, classes);
		};
		const Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {
		  const themeProps = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiGrid'
		  });
		  const {
		    breakpoints
		  } = (0, _useTheme.default)();
		  const props = (0, _system.unstable_extendSxProp)(themeProps);
		  const {
		      className,
		      columns: columnsProp,
		      columnSpacing: columnSpacingProp,
		      component = 'div',
		      container = false,
		      direction = 'row',
		      item = false,
		      rowSpacing: rowSpacingProp,
		      spacing = 0,
		      wrap = 'wrap',
		      zeroMinWidth = false
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const rowSpacing = rowSpacingProp || spacing;
		  const columnSpacing = columnSpacingProp || spacing;
		  const columnsContext = React.useContext(_GridContext.default);

		  // columns set with default breakpoint unit of 12
		  const columns = container ? columnsProp || 12 : columnsContext;
		  const breakpointsValues = {};
		  const otherFiltered = (0, _extends2.default)({}, other);
		  breakpoints.keys.forEach(breakpoint => {
		    if (other[breakpoint] != null) {
		      breakpointsValues[breakpoint] = other[breakpoint];
		      delete otherFiltered[breakpoint];
		    }
		  });
		  const ownerState = (0, _extends2.default)({}, props, {
		    columns,
		    container,
		    direction,
		    item,
		    rowSpacing,
		    columnSpacing,
		    wrap,
		    zeroMinWidth,
		    spacing
		  }, breakpointsValues, {
		    breakpoints: breakpoints.keys
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_GridContext.default.Provider, {
		    value: columns,
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(GridRoot, (0, _extends2.default)({
		      ownerState: ownerState,
		      className: (0, _clsx.default)(classes.root, className),
		      as: component,
		      ref: ref
		    }, otherFiltered))
		  });
		});
		Grid.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The number of columns.
		   * @default 12
		   */
		  columns: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
		  /**
		   * Defines the horizontal space between the type `item` components.
		   * It overrides the value of the `spacing` prop.
		   */
		  columnSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the component will have the flex *container* behavior.
		   * You should be wrapping *items* with a *container*.
		   * @default false
		   */
		  container: _propTypes.default.bool,
		  /**
		   * Defines the `flex-direction` style property.
		   * It is applied for all screen sizes.
		   * @default 'row'
		   */
		  direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), _propTypes.default.arrayOf(_propTypes.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), _propTypes.default.object]),
		  /**
		   * If `true`, the component will have the flex *item* behavior.
		   * You should be wrapping *items* with a *container*.
		   * @default false
		   */
		  item: _propTypes.default.bool,
		  /**
		   * If a number, it sets the number of columns the grid item uses.
		   * It can't be greater than the total number of columns of the container (12 by default).
		   * If 'auto', the grid item's width matches its content.
		   * If false, the prop is ignored.
		   * If true, the grid item's width grows to use the space available in the grid container.
		   * The value is applied for the `lg` breakpoint and wider screens if not overridden.
		   * @default false
		   */
		  lg: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		  /**
		   * If a number, it sets the number of columns the grid item uses.
		   * It can't be greater than the total number of columns of the container (12 by default).
		   * If 'auto', the grid item's width matches its content.
		   * If false, the prop is ignored.
		   * If true, the grid item's width grows to use the space available in the grid container.
		   * The value is applied for the `md` breakpoint and wider screens if not overridden.
		   * @default false
		   */
		  md: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		  /**
		   * Defines the vertical space between the type `item` components.
		   * It overrides the value of the `spacing` prop.
		   */
		  rowSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
		  /**
		   * If a number, it sets the number of columns the grid item uses.
		   * It can't be greater than the total number of columns of the container (12 by default).
		   * If 'auto', the grid item's width matches its content.
		   * If false, the prop is ignored.
		   * If true, the grid item's width grows to use the space available in the grid container.
		   * The value is applied for the `sm` breakpoint and wider screens if not overridden.
		   * @default false
		   */
		  sm: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		  /**
		   * Defines the space between the type `item` components.
		   * It can only be used on a type `container` component.
		   * @default 0
		   */
		  spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * Defines the `flex-wrap` style property.
		   * It's applied for all screen sizes.
		   * @default 'wrap'
		   */
		  wrap: _propTypes.default.oneOf(['nowrap', 'wrap-reverse', 'wrap']),
		  /**
		   * If a number, it sets the number of columns the grid item uses.
		   * It can't be greater than the total number of columns of the container (12 by default).
		   * If 'auto', the grid item's width matches its content.
		   * If false, the prop is ignored.
		   * If true, the grid item's width grows to use the space available in the grid container.
		   * The value is applied for the `xl` breakpoint and wider screens if not overridden.
		   * @default false
		   */
		  xl: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		  /**
		   * If a number, it sets the number of columns the grid item uses.
		   * It can't be greater than the total number of columns of the container (12 by default).
		   * If 'auto', the grid item's width matches its content.
		   * If false, the prop is ignored.
		   * If true, the grid item's width grows to use the space available in the grid container.
		   * The value is applied for all the screen sizes with the lowest priority.
		   * @default false
		   */
		  xs: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.bool]),
		  /**
		   * If `true`, it sets `min-width: 0` on the item.
		   * Refer to the limitations section of the documentation to better understand the use case.
		   * @default false
		   */
		  zeroMinWidth: _propTypes.default.bool
		} ;
		{
		  const requireProp = (0, _requirePropFactory.default)('Grid', Grid);
		  // eslint-disable-next-line no-useless-concat
		  Grid['propTypes' + ''] = (0, _extends2.default)({}, Grid.propTypes, {
		    direction: requireProp('container'),
		    lg: requireProp('item'),
		    md: requireProp('item'),
		    sm: requireProp('item'),
		    spacing: requireProp('container'),
		    wrap: requireProp('container'),
		    xs: requireProp('item'),
		    zeroMinWidth: requireProp('item')
		  });
		}
		var _default = Grid;
		Grid$1.default = _default;
		return Grid$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  gridClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Grid.default;
		  }
		});
		Object.defineProperty(exports, "gridClasses", {
		  enumerable: true,
		  get: function () {
		    return _gridClasses.default;
		  }
		});
		var _Grid = _interopRequireDefault(requireGrid());
		var _gridClasses = _interopRequireWildcard(requireGridClasses());
		Object.keys(_gridClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _gridClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _gridClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Grid$2));

	var Grid = /*@__PURE__*/getDefaultExportFromCjs(Grid$2);

	var CloudUpload = {};

	var _interopRequireDefault$e = interopRequireDefault.exports;
	Object.defineProperty(CloudUpload, "__esModule", {
	  value: true
	});
	var default_1$c = CloudUpload.default = void 0;
	var _createSvgIcon$c = _interopRequireDefault$e(requireCreateSvgIcon());
	var _jsxRuntime$d = requireJsxRuntime();
	var _default$f = (0, _createSvgIcon$c.default)( /*#__PURE__*/(0, _jsxRuntime$d.jsx)("path", {
	  d: "M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"
	}), 'CloudUpload');
	default_1$c = CloudUpload.default = _default$f;

	const uploadUI = /* @__PURE__ */ o$2(
	  Grid,
	  {
	    container: true,
	    direction: "column",
	    justifyContent: "center",
	    alignItems: "center",
	    sx: {
	      height: "100%"
	    },
	    children: [
	      /* @__PURE__ */ o$2(Grid, { item: true, children: /* @__PURE__ */ o$2(default_1$c, { sx: { fontSize: 80 } }) }),
	      /* @__PURE__ */ o$2(Grid, { item: true, sx: { fontSize: 24 }, children: "Drag or Click to upload" })
	    ]
	  }
	);
	function FileUploader({ handleDocumentChange }) {
	  const [dragAnimation, setDragAnimation] = p$1(false);
	  const handleDragEnter = T$1((event) => {
	    event.preventDefault();
	    setDragAnimation(true);
	  }, []);
	  const handleDragOver = T$1((event) => {
	    event.stopPropagation();
	    event.preventDefault();
	    setDragAnimation(true);
	  }, []);
	  const handleDrop = T$1((event) => {
	    event.stopPropagation();
	    event.preventDefault();
	    if (event.dataTransfer.files) {
	      handleDocumentChange(event.dataTransfer.files);
	    }
	    setDragAnimation(false);
	  }, []);
	  const handleDragLeave = T$1(() => {
	    setDragAnimation(false);
	  }, []);
	  const dragRef = _();
	  const inputRef = _();
	  h(() => {
	    if (dragRef.current) {
	      dragRef.current.ondragenter = handleDragEnter;
	      dragRef.current.ondragover = handleDragOver;
	      dragRef.current.ondrop = handleDrop;
	      dragRef.current.ondragleave = handleDragLeave;
	    }
	  }, [dragRef.current]);
	  const handleClick = T$1(() => {
	    inputRef.current.click();
	  }, [inputRef.current]);
	  const handleInputChange = T$1((event) => {
	    handleDocumentChange(event.target.files);
	  }, []);
	  return /* @__PURE__ */ o$2(p$2, { children: [
	    /* @__PURE__ */ o$2(
	      "input",
	      {
	        type: "file",
	        ref: inputRef,
	        onChange: handleInputChange,
	        multiple: true,
	        style: { display: "none" }
	      }
	    ),
	    /* @__PURE__ */ o$2(
	      Button,
	      {
	        variant: "outlined",
	        sx: {
	          height: "100%",
	          width: "100%",
	          animation: dragAnimation ? "DeepL-Crack-Bounce-Animation 1s ease-in-out infinite" : "none"
	        },
	        ref: dragRef,
	        onClick: handleClick,
	        children: uploadUI
	      }
	    )
	  ] });
	}
	var FileUploader$1 = R(FileUploader, () => true);

	var List$4 = {};

	var List$3 = {};

	var ListContext = {};

	var hasRequiredListContext;

	function requireListContext () {
		if (hasRequiredListContext) return ListContext;
		hasRequiredListContext = 1;

		Object.defineProperty(ListContext, "__esModule", {
		  value: true
		});
		ListContext.default = void 0;
		var React = _interopRequireWildcard(require$$3);
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * @ignore - internal component.
		 */
		const ListContext$1 = /*#__PURE__*/React.createContext({});
		{
		  ListContext$1.displayName = 'ListContext';
		}
		var _default = ListContext$1;
		ListContext.default = _default;
		return ListContext;
	}

	var listClasses = {};

	var hasRequiredListClasses;

	function requireListClasses () {
		if (hasRequiredListClasses) return listClasses;
		hasRequiredListClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(listClasses, "__esModule", {
		  value: true
		});
		listClasses.default = void 0;
		listClasses.getListUtilityClass = getListUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getListUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiList', slot);
		}
		const listClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiList', ['root', 'padding', 'dense', 'subheader']);
		var _default = listClasses$1;
		listClasses.default = _default;
		return listClasses;
	}

	var hasRequiredList;

	function requireList () {
		if (hasRequiredList) return List$3;
		hasRequiredList = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(List$3, "__esModule", {
		  value: true
		});
		List$3.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _ListContext = _interopRequireDefault(requireListContext());
		var _listClasses = requireListClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["children", "className", "component", "dense", "disablePadding", "subheader"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    disablePadding,
		    dense,
		    subheader
		  } = ownerState;
		  const slots = {
		    root: ['root', !disablePadding && 'padding', dense && 'dense', subheader && 'subheader']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _listClasses.getListUtilityClass, classes);
		};
		const ListRoot = (0, _styled.default)('ul', {
		  name: 'MuiList',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];
		  }
		})(({
		  ownerState
		}) => (0, _extends2.default)({
		  listStyle: 'none',
		  margin: 0,
		  padding: 0,
		  position: 'relative'
		}, !ownerState.disablePadding && {
		  paddingTop: 8,
		  paddingBottom: 8
		}, ownerState.subheader && {
		  paddingTop: 0
		}));
		const List = /*#__PURE__*/React.forwardRef(function List(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiList'
		  });
		  const {
		      children,
		      className,
		      component = 'ul',
		      dense = false,
		      disablePadding = false,
		      subheader
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const context = React.useMemo(() => ({
		    dense
		  }), [dense]);
		  const ownerState = (0, _extends2.default)({}, props, {
		    component,
		    dense,
		    disablePadding
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListContext.default.Provider, {
		    value: context,
		    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(ListRoot, (0, _extends2.default)({
		      as: component,
		      className: (0, _clsx.default)(classes.root, className),
		      ref: ref,
		      ownerState: ownerState
		    }, other, {
		      children: [subheader, children]
		    }))
		  });
		});
		List.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, compact vertical padding designed for keyboard and mouse input is used for
		   * the list and list items.
		   * The prop is available to descendant components as the `dense` context.
		   * @default false
		   */
		  dense: _propTypes.default.bool,
		  /**
		   * If `true`, vertical padding is removed from the list.
		   * @default false
		   */
		  disablePadding: _propTypes.default.bool,
		  /**
		   * The content of the subheader, normally `ListSubheader`.
		   */
		  subheader: _propTypes.default.node,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = List;
		List$3.default = _default;
		return List$3;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  listClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _List.default;
		  }
		});
		Object.defineProperty(exports, "listClasses", {
		  enumerable: true,
		  get: function () {
		    return _listClasses.default;
		  }
		});
		var _List = _interopRequireDefault(requireList());
		var _listClasses = _interopRequireWildcard(requireListClasses());
		Object.keys(_listClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _listClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _listClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (List$4));

	var List$2 = /*@__PURE__*/getDefaultExportFromCjs(List$4);

	var ListItem$2 = {};

	var ListItem$1 = {};

	var listItemClasses = {};

	var hasRequiredListItemClasses;

	function requireListItemClasses () {
		if (hasRequiredListItemClasses) return listItemClasses;
		hasRequiredListItemClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(listItemClasses, "__esModule", {
		  value: true
		});
		listItemClasses.default = void 0;
		listItemClasses.getListItemUtilityClass = getListItemUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getListItemUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiListItem', slot);
		}
		const listItemClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiListItem', ['root', 'container', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'padding', 'button', 'secondaryAction', 'selected']);
		var _default = listItemClasses$1;
		listItemClasses.default = _default;
		return listItemClasses;
	}

	var ListItemButton$1 = {};

	var ListItemButton = {};

	var listItemButtonClasses = {};

	var hasRequiredListItemButtonClasses;

	function requireListItemButtonClasses () {
		if (hasRequiredListItemButtonClasses) return listItemButtonClasses;
		hasRequiredListItemButtonClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(listItemButtonClasses, "__esModule", {
		  value: true
		});
		listItemButtonClasses.default = void 0;
		listItemButtonClasses.getListItemButtonUtilityClass = getListItemButtonUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getListItemButtonUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiListItemButton', slot);
		}
		const listItemButtonClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiListItemButton', ['root', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'selected']);
		var _default = listItemButtonClasses$1;
		listItemButtonClasses.default = _default;
		return listItemButtonClasses;
	}

	var hasRequiredListItemButton$1;

	function requireListItemButton$1 () {
		if (hasRequiredListItemButton$1) return ListItemButton;
		hasRequiredListItemButton$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ListItemButton, "__esModule", {
		  value: true
		});
		ListItemButton.overridesResolver = ListItemButton.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _system = requireSystem();
		var _styled = _interopRequireWildcard(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _ButtonBase = _interopRequireDefault(requireButtonBase());
		var _useEnhancedEffect = _interopRequireDefault(requireUseEnhancedEffect());
		var _useForkRef = _interopRequireDefault(requireUseForkRef());
		var _ListContext = _interopRequireDefault(requireListContext());
		var _listItemButtonClasses = _interopRequireWildcard(requireListItemButtonClasses());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected", "className"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const overridesResolver = (props, styles) => {
		  const {
		    ownerState
		  } = props;
		  return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
		};
		ListItemButton.overridesResolver = overridesResolver;
		const useUtilityClasses = ownerState => {
		  const {
		    alignItems,
		    classes,
		    dense,
		    disabled,
		    disableGutters,
		    divider,
		    selected
		  } = ownerState;
		  const slots = {
		    root: ['root', dense && 'dense', !disableGutters && 'gutters', divider && 'divider', disabled && 'disabled', alignItems === 'flex-start' && 'alignItemsFlexStart', selected && 'selected']
		  };
		  const composedClasses = (0, _base.unstable_composeClasses)(slots, _listItemButtonClasses.getListItemButtonUtilityClass, classes);
		  return (0, _extends2.default)({}, classes, composedClasses);
		};
		const ListItemButtonRoot = (0, _styled.default)(_ButtonBase.default, {
		  shouldForwardProp: prop => (0, _styled.rootShouldForwardProp)(prop) || prop === 'classes',
		  name: 'MuiListItemButton',
		  slot: 'Root',
		  overridesResolver
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  display: 'flex',
		  flexGrow: 1,
		  justifyContent: 'flex-start',
		  alignItems: 'center',
		  position: 'relative',
		  textDecoration: 'none',
		  minWidth: 0,
		  boxSizing: 'border-box',
		  textAlign: 'left',
		  paddingTop: 8,
		  paddingBottom: 8,
		  transition: theme.transitions.create('background-color', {
		    duration: theme.transitions.duration.shortest
		  }),
		  '&:hover': {
		    textDecoration: 'none',
		    backgroundColor: (theme.vars || theme).palette.action.hover,
		    // Reset on touch devices, it doesn't add specificity
		    '@media (hover: none)': {
		      backgroundColor: 'transparent'
		    }
		  },
		  [`&.${_listItemButtonClasses.default.selected}`]: {
		    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, _system.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
		    [`&.${_listItemButtonClasses.default.focusVisible}`]: {
		      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, _system.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
		    }
		  },
		  [`&.${_listItemButtonClasses.default.selected}:hover`]: {
		    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, _system.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
		    // Reset on touch devices, it doesn't add specificity
		    '@media (hover: none)': {
		      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, _system.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
		    }
		  },
		  [`&.${_listItemButtonClasses.default.focusVisible}`]: {
		    backgroundColor: (theme.vars || theme).palette.action.focus
		  },
		  [`&.${_listItemButtonClasses.default.disabled}`]: {
		    opacity: (theme.vars || theme).palette.action.disabledOpacity
		  }
		}, ownerState.divider && {
		  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
		  backgroundClip: 'padding-box'
		}, ownerState.alignItems === 'flex-start' && {
		  alignItems: 'flex-start'
		}, !ownerState.disableGutters && {
		  paddingLeft: 16,
		  paddingRight: 16
		}, ownerState.dense && {
		  paddingTop: 4,
		  paddingBottom: 4
		}));
		const ListItemButton$1 = /*#__PURE__*/React.forwardRef(function ListItemButton(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiListItemButton'
		  });
		  const {
		      alignItems = 'center',
		      autoFocus = false,
		      component = 'div',
		      children,
		      dense = false,
		      disableGutters = false,
		      divider = false,
		      focusVisibleClassName,
		      selected = false,
		      className
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const context = React.useContext(_ListContext.default);
		  const childContext = React.useMemo(() => ({
		    dense: dense || context.dense || false,
		    alignItems,
		    disableGutters
		  }), [alignItems, context.dense, dense, disableGutters]);
		  const listItemRef = React.useRef(null);
		  (0, _useEnhancedEffect.default)(() => {
		    if (autoFocus) {
		      if (listItemRef.current) {
		        listItemRef.current.focus();
		      } else {
		        console.error('MUI: Unable to set focus to a ListItemButton whose component has not been rendered.');
		      }
		    }
		  }, [autoFocus]);
		  const ownerState = (0, _extends2.default)({}, props, {
		    alignItems,
		    dense: childContext.dense,
		    disableGutters,
		    divider,
		    selected
		  });
		  const classes = useUtilityClasses(ownerState);
		  const handleRef = (0, _useForkRef.default)(listItemRef, ref);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListContext.default.Provider, {
		    value: childContext,
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ListItemButtonRoot, (0, _extends2.default)({
		      ref: handleRef,
		      href: other.href || other.to,
		      component: (other.href || other.to) && component === 'div' ? 'a' : component,
		      focusVisibleClassName: (0, _clsx.default)(classes.focusVisible, focusVisibleClassName),
		      ownerState: ownerState,
		      className: (0, _clsx.default)(classes.root, className)
		    }, other, {
		      classes: classes,
		      children: children
		    }))
		  });
		});
		ListItemButton$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Defines the `align-items` style property.
		   * @default 'center'
		   */
		  alignItems: _propTypes.default.oneOf(['center', 'flex-start']),
		  /**
		   * If `true`, the list item is focused during the first mount.
		   * Focus will also be triggered if the value changes from false to true.
		   * @default false
		   */
		  autoFocus: _propTypes.default.bool,
		  /**
		   * The content of the component if a `ListItemSecondaryAction` is used it must
		   * be the last child.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
		   * The prop defaults to the value inherited from the parent List component.
		   * @default false
		   */
		  dense: _propTypes.default.bool,
		  /**
		   * If `true`, the component is disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * If `true`, the left and right padding is removed.
		   * @default false
		   */
		  disableGutters: _propTypes.default.bool,
		  /**
		   * If `true`, a 1px light border is added to the bottom of the list item.
		   * @default false
		   */
		  divider: _propTypes.default.bool,
		  /**
		   * This prop can help identify which element has keyboard focus.
		   * The class name will be applied when the element gains the focus through keyboard interaction.
		   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
		   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
		   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
		   * if needed.
		   */
		  focusVisibleClassName: _propTypes.default.string,
		  /**
		   * @ignore
		   */
		  href: _propTypes.default.string,
		  /**
		   * Use to apply selected styling.
		   * @default false
		   */
		  selected: _propTypes.default.bool,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = ListItemButton$1;
		ListItemButton.default = _default;
		return ListItemButton;
	}

	var hasRequiredListItemButton;

	function requireListItemButton () {
		if (hasRequiredListItemButton) return ListItemButton$1;
		hasRequiredListItemButton = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  listItemButtonClasses: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _ListItemButton.default;
			  }
			});
			Object.defineProperty(exports, "listItemButtonClasses", {
			  enumerable: true,
			  get: function () {
			    return _listItemButtonClasses.default;
			  }
			});
			var _ListItemButton = _interopRequireDefault(requireListItemButton$1());
			var _listItemButtonClasses = _interopRequireWildcard(requireListItemButtonClasses());
			Object.keys(_listItemButtonClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _listItemButtonClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _listItemButtonClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ListItemButton$1));
		return ListItemButton$1;
	}

	var ListItemSecondaryAction$1 = {};

	var ListItemSecondaryAction = {};

	var listItemSecondaryActionClasses = {};

	var hasRequiredListItemSecondaryActionClasses;

	function requireListItemSecondaryActionClasses () {
		if (hasRequiredListItemSecondaryActionClasses) return listItemSecondaryActionClasses;
		hasRequiredListItemSecondaryActionClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(listItemSecondaryActionClasses, "__esModule", {
		  value: true
		});
		listItemSecondaryActionClasses.default = void 0;
		listItemSecondaryActionClasses.getListItemSecondaryActionClassesUtilityClass = getListItemSecondaryActionClassesUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getListItemSecondaryActionClassesUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiListItemSecondaryAction', slot);
		}
		const listItemSecondaryActionClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiListItemSecondaryAction', ['root', 'disableGutters']);
		var _default = listItemSecondaryActionClasses$1;
		listItemSecondaryActionClasses.default = _default;
		return listItemSecondaryActionClasses;
	}

	var hasRequiredListItemSecondaryAction$1;

	function requireListItemSecondaryAction$1 () {
		if (hasRequiredListItemSecondaryAction$1) return ListItemSecondaryAction;
		hasRequiredListItemSecondaryAction$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ListItemSecondaryAction, "__esModule", {
		  value: true
		});
		ListItemSecondaryAction.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _ListContext = _interopRequireDefault(requireListContext());
		var _listItemSecondaryActionClasses = requireListItemSecondaryActionClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    disableGutters,
		    classes
		  } = ownerState;
		  const slots = {
		    root: ['root', disableGutters && 'disableGutters']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _listItemSecondaryActionClasses.getListItemSecondaryActionClassesUtilityClass, classes);
		};
		const ListItemSecondaryActionRoot = (0, _styled.default)('div', {
		  name: 'MuiListItemSecondaryAction',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, ownerState.disableGutters && styles.disableGutters];
		  }
		})(({
		  ownerState
		}) => (0, _extends2.default)({
		  position: 'absolute',
		  right: 16,
		  top: '50%',
		  transform: 'translateY(-50%)'
		}, ownerState.disableGutters && {
		  right: 0
		}));

		/**
		 * Must be used as the last child of ListItem to function properly.
		 */
		const ListItemSecondaryAction$1 = /*#__PURE__*/React.forwardRef(function ListItemSecondaryAction(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiListItemSecondaryAction'
		  });
		  const {
		      className
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const context = React.useContext(_ListContext.default);
		  const ownerState = (0, _extends2.default)({}, props, {
		    disableGutters: context.disableGutters
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(ListItemSecondaryActionRoot, (0, _extends2.default)({
		    className: (0, _clsx.default)(classes.root, className),
		    ownerState: ownerState,
		    ref: ref
		  }, other));
		});
		ListItemSecondaryAction$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component, normally an `IconButton` or selection control.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		ListItemSecondaryAction$1.muiName = 'ListItemSecondaryAction';
		var _default = ListItemSecondaryAction$1;
		ListItemSecondaryAction.default = _default;
		return ListItemSecondaryAction;
	}

	var hasRequiredListItemSecondaryAction;

	function requireListItemSecondaryAction () {
		if (hasRequiredListItemSecondaryAction) return ListItemSecondaryAction$1;
		hasRequiredListItemSecondaryAction = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			var _exportNames = {
			  listItemSecondaryActionClasses: true
			};
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _ListItemSecondaryAction.default;
			  }
			});
			Object.defineProperty(exports, "listItemSecondaryActionClasses", {
			  enumerable: true,
			  get: function () {
			    return _listItemSecondaryActionClasses.default;
			  }
			});
			var _ListItemSecondaryAction = _interopRequireDefault(requireListItemSecondaryAction$1());
			var _listItemSecondaryActionClasses = _interopRequireWildcard(requireListItemSecondaryActionClasses());
			Object.keys(_listItemSecondaryActionClasses).forEach(function (key) {
			  if (key === "default" || key === "__esModule") return;
			  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
			  if (key in exports && exports[key] === _listItemSecondaryActionClasses[key]) return;
			  Object.defineProperty(exports, key, {
			    enumerable: true,
			    get: function () {
			      return _listItemSecondaryActionClasses[key];
			    }
			  });
			});
			function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
			function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ListItemSecondaryAction$1));
		return ListItemSecondaryAction$1;
	}

	var hasRequiredListItem;

	function requireListItem () {
		if (hasRequiredListItem) return ListItem$1;
		hasRequiredListItem = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ListItem$1, "__esModule", {
		  value: true
		});
		ListItem$1.overridesResolver = ListItem$1.default = ListItem$1.ListItemRoot = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _utils = requireUtils$4();
		var _system = requireSystem();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _ButtonBase = _interopRequireDefault(requireButtonBase());
		var _isMuiElement = _interopRequireDefault(requireIsMuiElement());
		var _useEnhancedEffect = _interopRequireDefault(requireUseEnhancedEffect());
		var _useForkRef = _interopRequireDefault(requireUseForkRef());
		var _ListContext = _interopRequireDefault(requireListContext());
		var _listItemClasses = _interopRequireWildcard(requireListItemClasses());
		var _ListItemButton = requireListItemButton();
		var _ListItemSecondaryAction = _interopRequireDefault(requireListItemSecondaryAction());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className"],
		  _excluded2 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected", "slotProps", "slots"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const overridesResolver = (props, styles) => {
		  const {
		    ownerState
		  } = props;
		  return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters, !ownerState.disablePadding && styles.padding, ownerState.button && styles.button, ownerState.hasSecondaryAction && styles.secondaryAction];
		};
		ListItem$1.overridesResolver = overridesResolver;
		const useUtilityClasses = ownerState => {
		  const {
		    alignItems,
		    button,
		    classes,
		    dense,
		    disabled,
		    disableGutters,
		    disablePadding,
		    divider,
		    hasSecondaryAction,
		    selected
		  } = ownerState;
		  const slots = {
		    root: ['root', dense && 'dense', !disableGutters && 'gutters', !disablePadding && 'padding', divider && 'divider', disabled && 'disabled', button && 'button', alignItems === 'flex-start' && 'alignItemsFlexStart', hasSecondaryAction && 'secondaryAction', selected && 'selected'],
		    container: ['container']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _listItemClasses.getListItemUtilityClass, classes);
		};
		const ListItemRoot = (0, _styled.default)('div', {
		  name: 'MuiListItem',
		  slot: 'Root',
		  overridesResolver
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  display: 'flex',
		  justifyContent: 'flex-start',
		  alignItems: 'center',
		  position: 'relative',
		  textDecoration: 'none',
		  width: '100%',
		  boxSizing: 'border-box',
		  textAlign: 'left'
		}, !ownerState.disablePadding && (0, _extends2.default)({
		  paddingTop: 8,
		  paddingBottom: 8
		}, ownerState.dense && {
		  paddingTop: 4,
		  paddingBottom: 4
		}, !ownerState.disableGutters && {
		  paddingLeft: 16,
		  paddingRight: 16
		}, !!ownerState.secondaryAction && {
		  // Add some space to avoid collision as `ListItemSecondaryAction`
		  // is absolutely positioned.
		  paddingRight: 48
		}), !!ownerState.secondaryAction && {
		  [`& > .${_ListItemButton.listItemButtonClasses.root}`]: {
		    paddingRight: 48
		  }
		}, {
		  [`&.${_listItemClasses.default.focusVisible}`]: {
		    backgroundColor: (theme.vars || theme).palette.action.focus
		  },
		  [`&.${_listItemClasses.default.selected}`]: {
		    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, _system.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
		    [`&.${_listItemClasses.default.focusVisible}`]: {
		      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, _system.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
		    }
		  },
		  [`&.${_listItemClasses.default.disabled}`]: {
		    opacity: (theme.vars || theme).palette.action.disabledOpacity
		  }
		}, ownerState.alignItems === 'flex-start' && {
		  alignItems: 'flex-start'
		}, ownerState.divider && {
		  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
		  backgroundClip: 'padding-box'
		}, ownerState.button && {
		  transition: theme.transitions.create('background-color', {
		    duration: theme.transitions.duration.shortest
		  }),
		  '&:hover': {
		    textDecoration: 'none',
		    backgroundColor: (theme.vars || theme).palette.action.hover,
		    // Reset on touch devices, it doesn't add specificity
		    '@media (hover: none)': {
		      backgroundColor: 'transparent'
		    }
		  },
		  [`&.${_listItemClasses.default.selected}:hover`]: {
		    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, _system.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
		    // Reset on touch devices, it doesn't add specificity
		    '@media (hover: none)': {
		      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, _system.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
		    }
		  }
		}, ownerState.hasSecondaryAction && {
		  // Add some space to avoid collision as `ListItemSecondaryAction`
		  // is absolutely positioned.
		  paddingRight: 48
		}));
		ListItem$1.ListItemRoot = ListItemRoot;
		const ListItemContainer = (0, _styled.default)('li', {
		  name: 'MuiListItem',
		  slot: 'Container',
		  overridesResolver: (props, styles) => styles.container
		})({
		  position: 'relative'
		});

		/**
		 * Uses an additional container component if `ListItemSecondaryAction` is the last child.
		 */
		const ListItem = /*#__PURE__*/React.forwardRef(function ListItem(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiListItem'
		  });
		  const {
		      alignItems = 'center',
		      autoFocus = false,
		      button = false,
		      children: childrenProp,
		      className,
		      component: componentProp,
		      components = {},
		      componentsProps = {},
		      ContainerComponent = 'li',
		      ContainerProps: {
		        className: ContainerClassName
		      } = {},
		      dense = false,
		      disabled = false,
		      disableGutters = false,
		      disablePadding = false,
		      divider = false,
		      focusVisibleClassName,
		      secondaryAction,
		      selected = false,
		      slotProps = {},
		      slots = {}
		    } = props,
		    ContainerProps = (0, _objectWithoutPropertiesLoose2.default)(props.ContainerProps, _excluded),
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded2);
		  const context = React.useContext(_ListContext.default);
		  const childContext = React.useMemo(() => ({
		    dense: dense || context.dense || false,
		    alignItems,
		    disableGutters
		  }), [alignItems, context.dense, dense, disableGutters]);
		  const listItemRef = React.useRef(null);
		  (0, _useEnhancedEffect.default)(() => {
		    if (autoFocus) {
		      if (listItemRef.current) {
		        listItemRef.current.focus();
		      } else {
		        console.error('MUI: Unable to set focus to a ListItem whose component has not been rendered.');
		      }
		    }
		  }, [autoFocus]);
		  const children = React.Children.toArray(childrenProp);

		  // v4 implementation, deprecated in v5, will be removed in v6
		  const hasSecondaryAction = children.length && (0, _isMuiElement.default)(children[children.length - 1], ['ListItemSecondaryAction']);
		  const ownerState = (0, _extends2.default)({}, props, {
		    alignItems,
		    autoFocus,
		    button,
		    dense: childContext.dense,
		    disabled,
		    disableGutters,
		    disablePadding,
		    divider,
		    hasSecondaryAction,
		    selected
		  });
		  const classes = useUtilityClasses(ownerState);
		  const handleRef = (0, _useForkRef.default)(listItemRef, ref);
		  const Root = slots.root || components.Root || ListItemRoot;
		  const rootProps = slotProps.root || componentsProps.root || {};
		  const componentProps = (0, _extends2.default)({
		    className: (0, _clsx.default)(classes.root, rootProps.className, className),
		    disabled
		  }, other);
		  let Component = componentProp || 'li';
		  if (button) {
		    componentProps.component = componentProp || 'div';
		    componentProps.focusVisibleClassName = (0, _clsx.default)(_listItemClasses.default.focusVisible, focusVisibleClassName);
		    Component = _ButtonBase.default;
		  }

		  // v4 implementation, deprecated in v5, will be removed in v6
		  if (hasSecondaryAction) {
		    // Use div by default.
		    Component = !componentProps.component && !componentProp ? 'div' : Component;

		    // Avoid nesting of li > li.
		    if (ContainerComponent === 'li') {
		      if (Component === 'li') {
		        Component = 'div';
		      } else if (componentProps.component === 'li') {
		        componentProps.component = 'div';
		      }
		    }
		    return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListContext.default.Provider, {
		      value: childContext,
		      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(ListItemContainer, (0, _extends2.default)({
		        as: ContainerComponent,
		        className: (0, _clsx.default)(classes.container, ContainerClassName),
		        ref: handleRef,
		        ownerState: ownerState
		      }, ContainerProps, {
		        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Root, (0, _extends2.default)({}, rootProps, !(0, _base.isHostComponent)(Root) && {
		          as: Component,
		          ownerState: (0, _extends2.default)({}, ownerState, rootProps.ownerState)
		        }, componentProps, {
		          children: children
		        })), children.pop()]
		      }))
		    });
		  }
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListContext.default.Provider, {
		    value: childContext,
		    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(Root, (0, _extends2.default)({}, rootProps, {
		      as: Component,
		      ref: handleRef
		    }, !(0, _base.isHostComponent)(Root) && {
		      ownerState: (0, _extends2.default)({}, ownerState, rootProps.ownerState)
		    }, componentProps, {
		      children: [children, secondaryAction && /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListItemSecondaryAction.default, {
		        children: secondaryAction
		      })]
		    }))
		  });
		});
		ListItem.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Defines the `align-items` style property.
		   * @default 'center'
		   */
		  alignItems: _propTypes.default.oneOf(['center', 'flex-start']),
		  /**
		   * If `true`, the list item is focused during the first mount.
		   * Focus will also be triggered if the value changes from false to true.
		   * @default false
		   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
		   */
		  autoFocus: _propTypes.default.bool,
		  /**
		   * If `true`, the list item is a button (using `ButtonBase`). Props intended
		   * for `ButtonBase` can then be applied to `ListItem`.
		   * @default false
		   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
		   */
		  button: _propTypes.default.bool,
		  /**
		   * The content of the component if a `ListItemSecondaryAction` is used it must
		   * be the last child.
		   */
		  children: (0, _utils.chainPropTypes)(_propTypes.default.node, props => {
		    const children = React.Children.toArray(props.children);

		    // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)
		    let secondaryActionIndex = -1;
		    for (let i = children.length - 1; i >= 0; i -= 1) {
		      const child = children[i];
		      if ((0, _isMuiElement.default)(child, ['ListItemSecondaryAction'])) {
		        secondaryActionIndex = i;
		        break;
		      }
		    }

		    //  is ListItemSecondaryAction the last child of ListItem
		    if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
		      return new Error('MUI: You used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');
		    }
		    return null;
		  }),
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The components used for each slot inside.
		   *
		   * This prop is an alias for the `slots` prop.
		   * It's recommended to use the `slots` prop instead.
		   *
		   * @default {}
		   */
		  components: _propTypes.default.shape({
		    Root: _propTypes.default.elementType
		  }),
		  /**
		   * The extra props for the slot components.
		   * You can override the existing props or add new ones.
		   *
		   * This prop is an alias for the `slotProps` prop.
		   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
		   *
		   * @default {}
		   */
		  componentsProps: _propTypes.default.shape({
		    root: _propTypes.default.object
		  }),
		  /**
		   * The container component used when a `ListItemSecondaryAction` is the last child.
		   * @default 'li'
		   * @deprecated
		   */
		  ContainerComponent: _utils.elementTypeAcceptingRef,
		  /**
		   * Props applied to the container component if used.
		   * @default {}
		   * @deprecated
		   */
		  ContainerProps: _propTypes.default.object,
		  /**
		   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
		   * The prop defaults to the value inherited from the parent List component.
		   * @default false
		   */
		  dense: _propTypes.default.bool,
		  /**
		   * If `true`, the component is disabled.
		   * @default false
		   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * If `true`, the left and right padding is removed.
		   * @default false
		   */
		  disableGutters: _propTypes.default.bool,
		  /**
		   * If `true`, all padding is removed.
		   * @default false
		   */
		  disablePadding: _propTypes.default.bool,
		  /**
		   * If `true`, a 1px light border is added to the bottom of the list item.
		   * @default false
		   */
		  divider: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  focusVisibleClassName: _propTypes.default.string,
		  /**
		   * The element to display at the end of ListItem.
		   */
		  secondaryAction: _propTypes.default.node,
		  /**
		   * Use to apply selected styling.
		   * @default false
		   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
		   */
		  selected: _propTypes.default.bool,
		  /**
		   * The extra props for the slot components.
		   * You can override the existing props or add new ones.
		   *
		   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
		   *
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    root: _propTypes.default.object
		  }),
		  /**
		   * The components used for each slot inside.
		   *
		   * This prop is an alias for the `components` prop, which will be deprecated in the future.
		   *
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = ListItem;
		ListItem$1.default = _default;
		return ListItem$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  listItemClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ListItem.default;
		  }
		});
		Object.defineProperty(exports, "listItemClasses", {
		  enumerable: true,
		  get: function () {
		    return _listItemClasses.default;
		  }
		});
		var _ListItem = _interopRequireDefault(requireListItem());
		var _listItemClasses = _interopRequireWildcard(requireListItemClasses());
		Object.keys(_listItemClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _listItemClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _listItemClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ListItem$2));

	var ListItem = /*@__PURE__*/getDefaultExportFromCjs(ListItem$2);

	var IconButton$2 = {};

	var IconButton$1 = {};

	var iconButtonClasses = {};

	var hasRequiredIconButtonClasses;

	function requireIconButtonClasses () {
		if (hasRequiredIconButtonClasses) return iconButtonClasses;
		hasRequiredIconButtonClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(iconButtonClasses, "__esModule", {
		  value: true
		});
		iconButtonClasses.default = void 0;
		iconButtonClasses.getIconButtonUtilityClass = getIconButtonUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getIconButtonUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiIconButton', slot);
		}
		const iconButtonClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'colorError', 'colorInfo', 'colorSuccess', 'colorWarning', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
		var _default = iconButtonClasses$1;
		iconButtonClasses.default = _default;
		return iconButtonClasses;
	}

	var hasRequiredIconButton;

	function requireIconButton () {
		if (hasRequiredIconButton) return IconButton$1;
		hasRequiredIconButton = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(IconButton$1, "__esModule", {
		  value: true
		});
		IconButton$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _utils = requireUtils$4();
		var _base = requireNode$2();
		var _system = requireSystem();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _ButtonBase = _interopRequireDefault(requireButtonBase());
		var _capitalize = _interopRequireDefault(requireCapitalize());
		var _iconButtonClasses = _interopRequireWildcard(requireIconButtonClasses());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    disabled,
		    color,
		    edge,
		    size
		  } = ownerState;
		  const slots = {
		    root: ['root', disabled && 'disabled', color !== 'default' && `color${(0, _capitalize.default)(color)}`, edge && `edge${(0, _capitalize.default)(edge)}`, `size${(0, _capitalize.default)(size)}`]
		  };
		  return (0, _base.unstable_composeClasses)(slots, _iconButtonClasses.getIconButtonUtilityClass, classes);
		};
		const IconButtonRoot = (0, _styled.default)(_ButtonBase.default, {
		  name: 'MuiIconButton',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, ownerState.color !== 'default' && styles[`color${(0, _capitalize.default)(ownerState.color)}`], ownerState.edge && styles[`edge${(0, _capitalize.default)(ownerState.edge)}`], styles[`size${(0, _capitalize.default)(ownerState.size)}`]];
		  }
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  textAlign: 'center',
		  flex: '0 0 auto',
		  fontSize: theme.typography.pxToRem(24),
		  padding: 8,
		  borderRadius: '50%',
		  overflow: 'visible',
		  // Explicitly set the default value to solve a bug on IE11.
		  color: (theme.vars || theme).palette.action.active,
		  transition: theme.transitions.create('background-color', {
		    duration: theme.transitions.duration.shortest
		  })
		}, !ownerState.disableRipple && {
		  '&:hover': {
		    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, _system.alpha)(theme.palette.action.active, theme.palette.action.hoverOpacity),
		    // Reset on touch devices, it doesn't add specificity
		    '@media (hover: none)': {
		      backgroundColor: 'transparent'
		    }
		  }
		}, ownerState.edge === 'start' && {
		  marginLeft: ownerState.size === 'small' ? -3 : -12
		}, ownerState.edge === 'end' && {
		  marginRight: ownerState.size === 'small' ? -3 : -12
		}), ({
		  theme,
		  ownerState
		}) => {
		  var _palette;
		  const palette = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
		  return (0, _extends2.default)({}, ownerState.color === 'inherit' && {
		    color: 'inherit'
		  }, ownerState.color !== 'inherit' && ownerState.color !== 'default' && (0, _extends2.default)({
		    color: palette == null ? void 0 : palette.main
		  }, !ownerState.disableRipple && {
		    '&:hover': (0, _extends2.default)({}, palette && {
		      backgroundColor: theme.vars ? `rgba(${palette.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, _system.alpha)(palette.main, theme.palette.action.hoverOpacity)
		    }, {
		      // Reset on touch devices, it doesn't add specificity
		      '@media (hover: none)': {
		        backgroundColor: 'transparent'
		      }
		    })
		  }), ownerState.size === 'small' && {
		    padding: 5,
		    fontSize: theme.typography.pxToRem(18)
		  }, ownerState.size === 'large' && {
		    padding: 12,
		    fontSize: theme.typography.pxToRem(28)
		  }, {
		    [`&.${_iconButtonClasses.default.disabled}`]: {
		      backgroundColor: 'transparent',
		      color: (theme.vars || theme).palette.action.disabled
		    }
		  });
		});

		/**
		 * Refer to the [Icons](/material-ui/icons/) section of the documentation
		 * regarding the available icon options.
		 */
		const IconButton = /*#__PURE__*/React.forwardRef(function IconButton(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiIconButton'
		  });
		  const {
		      edge = false,
		      children,
		      className,
		      color = 'default',
		      disabled = false,
		      disableFocusRipple = false,
		      size = 'medium'
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    edge,
		    color,
		    disabled,
		    disableFocusRipple,
		    size
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(IconButtonRoot, (0, _extends2.default)({
		    className: (0, _clsx.default)(classes.root, className),
		    centerRipple: true,
		    focusRipple: !disableFocusRipple,
		    disabled: disabled,
		    ref: ref,
		    ownerState: ownerState
		  }, other, {
		    children: children
		  }));
		});
		IconButton.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The icon to display.
		   */
		  children: (0, _utils.chainPropTypes)(_propTypes.default.node, props => {
		    const found = React.Children.toArray(props.children).some(child => /*#__PURE__*/React.isValidElement(child) && child.props.onClick);
		    if (found) {
		      return new Error(['MUI: You are providing an onClick event listener to a child of a button element.', 'Prefer applying it to the IconButton directly.', 'This guarantees that the whole <button> will be responsive to click events.'].join('\n'));
		    }
		    return null;
		  }),
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The color of the component.
		   * It supports both default and custom theme colors, which can be added as shown in the
		   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
		   * @default 'default'
		   */
		  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['inherit', 'default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), _propTypes.default.string]),
		  /**
		   * If `true`, the component is disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * If `true`, the  keyboard focus ripple is disabled.
		   * @default false
		   */
		  disableFocusRipple: _propTypes.default.bool,
		  /**
		   * If `true`, the ripple effect is disabled.
		   *
		   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
		   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
		   * @default false
		   */
		  disableRipple: _propTypes.default.bool,
		  /**
		   * If given, uses a negative margin to counteract the padding on one
		   * side (this is often helpful for aligning the left or right
		   * side of the icon with content above or below, without ruining the border
		   * size and shape).
		   * @default false
		   */
		  edge: _propTypes.default.oneOf(['end', 'start', false]),
		  /**
		   * The size of the component.
		   * `small` is equivalent to the dense button styling.
		   * @default 'medium'
		   */
		  size: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['small', 'medium', 'large']), _propTypes.default.string]),
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = IconButton;
		IconButton$1.default = _default;
		return IconButton$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  iconButtonClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _IconButton.default;
		  }
		});
		Object.defineProperty(exports, "iconButtonClasses", {
		  enumerable: true,
		  get: function () {
		    return _iconButtonClasses.default;
		  }
		});
		var _IconButton = _interopRequireDefault(requireIconButton());
		var _iconButtonClasses = _interopRequireWildcard(requireIconButtonClasses());
		Object.keys(_iconButtonClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _iconButtonClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _iconButtonClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (IconButton$2));

	var IconButton = /*@__PURE__*/getDefaultExportFromCjs(IconButton$2);

	var ListItemAvatar$2 = {};

	var ListItemAvatar$1 = {};

	var listItemAvatarClasses = {};

	var hasRequiredListItemAvatarClasses;

	function requireListItemAvatarClasses () {
		if (hasRequiredListItemAvatarClasses) return listItemAvatarClasses;
		hasRequiredListItemAvatarClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(listItemAvatarClasses, "__esModule", {
		  value: true
		});
		listItemAvatarClasses.default = void 0;
		listItemAvatarClasses.getListItemAvatarUtilityClass = getListItemAvatarUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getListItemAvatarUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiListItemAvatar', slot);
		}
		const listItemAvatarClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);
		var _default = listItemAvatarClasses$1;
		listItemAvatarClasses.default = _default;
		return listItemAvatarClasses;
	}

	var hasRequiredListItemAvatar;

	function requireListItemAvatar () {
		if (hasRequiredListItemAvatar) return ListItemAvatar$1;
		hasRequiredListItemAvatar = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ListItemAvatar$1, "__esModule", {
		  value: true
		});
		ListItemAvatar$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _ListContext = _interopRequireDefault(requireListContext());
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _listItemAvatarClasses = requireListItemAvatarClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    alignItems,
		    classes
		  } = ownerState;
		  const slots = {
		    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _listItemAvatarClasses.getListItemAvatarUtilityClass, classes);
		};
		const ListItemAvatarRoot = (0, _styled.default)('div', {
		  name: 'MuiListItemAvatar',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];
		  }
		})(({
		  ownerState
		}) => (0, _extends2.default)({
		  minWidth: 56,
		  flexShrink: 0
		}, ownerState.alignItems === 'flex-start' && {
		  marginTop: 8
		}));

		/**
		 * A simple wrapper to apply `List` styles to an `Avatar`.
		 */
		const ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiListItemAvatar'
		  });
		  const {
		      className
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const context = React.useContext(_ListContext.default);
		  const ownerState = (0, _extends2.default)({}, props, {
		    alignItems: context.alignItems
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(ListItemAvatarRoot, (0, _extends2.default)({
		    className: (0, _clsx.default)(classes.root, className),
		    ownerState: ownerState,
		    ref: ref
		  }, other));
		});
		ListItemAvatar.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component, normally an `Avatar`.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = ListItemAvatar;
		ListItemAvatar$1.default = _default;
		return ListItemAvatar$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  listItemAvatarClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ListItemAvatar.default;
		  }
		});
		Object.defineProperty(exports, "listItemAvatarClasses", {
		  enumerable: true,
		  get: function () {
		    return _listItemAvatarClasses.default;
		  }
		});
		var _ListItemAvatar = _interopRequireDefault(requireListItemAvatar());
		var _listItemAvatarClasses = _interopRequireWildcard(requireListItemAvatarClasses());
		Object.keys(_listItemAvatarClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _listItemAvatarClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _listItemAvatarClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ListItemAvatar$2));

	var ListItemAvatar = /*@__PURE__*/getDefaultExportFromCjs(ListItemAvatar$2);

	var Avatar$2 = {};

	var Avatar$1 = {};

	var Person = {};

	var hasRequiredPerson;

	function requirePerson () {
		if (hasRequiredPerson) return Person;
		hasRequiredPerson = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Person, "__esModule", {
		  value: true
		});
		Person.default = void 0;
		_interopRequireWildcard(require$$3);
		var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon$1());
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * @ignore - internal component.
		 */
		var _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
		  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
		}), 'Person');
		Person.default = _default;
		return Person;
	}

	var avatarClasses = {};

	var hasRequiredAvatarClasses;

	function requireAvatarClasses () {
		if (hasRequiredAvatarClasses) return avatarClasses;
		hasRequiredAvatarClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(avatarClasses, "__esModule", {
		  value: true
		});
		avatarClasses.default = void 0;
		avatarClasses.getAvatarUtilityClass = getAvatarUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getAvatarUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiAvatar', slot);
		}
		const avatarClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiAvatar', ['root', 'colorDefault', 'circular', 'rounded', 'square', 'img', 'fallback']);
		var _default = avatarClasses$1;
		avatarClasses.default = _default;
		return avatarClasses;
	}

	var hasRequiredAvatar;

	function requireAvatar () {
		if (hasRequiredAvatar) return Avatar$1;
		hasRequiredAvatar = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Avatar$1, "__esModule", {
		  value: true
		});
		Avatar$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _Person = _interopRequireDefault(requirePerson());
		var _avatarClasses = requireAvatarClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["alt", "children", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    variant,
		    colorDefault
		  } = ownerState;
		  const slots = {
		    root: ['root', variant, colorDefault && 'colorDefault'],
		    img: ['img'],
		    fallback: ['fallback']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _avatarClasses.getAvatarUtilityClass, classes);
		};
		const AvatarRoot = (0, _styled.default)('div', {
		  name: 'MuiAvatar',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, styles[ownerState.variant], ownerState.colorDefault && styles.colorDefault];
		  }
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  position: 'relative',
		  display: 'flex',
		  alignItems: 'center',
		  justifyContent: 'center',
		  flexShrink: 0,
		  width: 40,
		  height: 40,
		  fontFamily: theme.typography.fontFamily,
		  fontSize: theme.typography.pxToRem(20),
		  lineHeight: 1,
		  borderRadius: '50%',
		  overflow: 'hidden',
		  userSelect: 'none'
		}, ownerState.variant === 'rounded' && {
		  borderRadius: (theme.vars || theme).shape.borderRadius
		}, ownerState.variant === 'square' && {
		  borderRadius: 0
		}, ownerState.colorDefault && (0, _extends2.default)({
		  color: (theme.vars || theme).palette.background.default
		}, theme.vars ? {
		  backgroundColor: theme.vars.palette.Avatar.defaultBg
		} : {
		  backgroundColor: theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
		})));
		const AvatarImg = (0, _styled.default)('img', {
		  name: 'MuiAvatar',
		  slot: 'Img',
		  overridesResolver: (props, styles) => styles.img
		})({
		  width: '100%',
		  height: '100%',
		  textAlign: 'center',
		  // Handle non-square image. The property isn't supported by IE11.
		  objectFit: 'cover',
		  // Hide alt text.
		  color: 'transparent',
		  // Hide the image broken icon, only works on Chrome.
		  textIndent: 10000
		});
		const AvatarFallback = (0, _styled.default)(_Person.default, {
		  name: 'MuiAvatar',
		  slot: 'Fallback',
		  overridesResolver: (props, styles) => styles.fallback
		})({
		  width: '75%',
		  height: '75%'
		});
		function useLoaded({
		  crossOrigin,
		  referrerPolicy,
		  src,
		  srcSet
		}) {
		  const [loaded, setLoaded] = React.useState(false);
		  React.useEffect(() => {
		    if (!src && !srcSet) {
		      return undefined;
		    }
		    setLoaded(false);
		    let active = true;
		    const image = new Image();
		    image.onload = () => {
		      if (!active) {
		        return;
		      }
		      setLoaded('loaded');
		    };
		    image.onerror = () => {
		      if (!active) {
		        return;
		      }
		      setLoaded('error');
		    };
		    image.crossOrigin = crossOrigin;
		    image.referrerPolicy = referrerPolicy;
		    image.src = src;
		    if (srcSet) {
		      image.srcset = srcSet;
		    }
		    return () => {
		      active = false;
		    };
		  }, [crossOrigin, referrerPolicy, src, srcSet]);
		  return loaded;
		}
		const Avatar = /*#__PURE__*/React.forwardRef(function Avatar(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiAvatar'
		  });
		  const {
		      alt,
		      children: childrenProp,
		      className,
		      component = 'div',
		      imgProps,
		      sizes,
		      src,
		      srcSet,
		      variant = 'circular'
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  let children = null;

		  // Use a hook instead of onError on the img element to support server-side rendering.
		  const loaded = useLoaded((0, _extends2.default)({}, imgProps, {
		    src,
		    srcSet
		  }));
		  const hasImg = src || srcSet;
		  const hasImgNotFailing = hasImg && loaded !== 'error';
		  const ownerState = (0, _extends2.default)({}, props, {
		    colorDefault: !hasImgNotFailing,
		    component,
		    variant
		  });
		  const classes = useUtilityClasses(ownerState);
		  if (hasImgNotFailing) {
		    children = /*#__PURE__*/(0, _jsxRuntime.jsx)(AvatarImg, (0, _extends2.default)({
		      alt: alt,
		      src: src,
		      srcSet: srcSet,
		      sizes: sizes,
		      ownerState: ownerState,
		      className: classes.img
		    }, imgProps));
		  } else if (childrenProp != null) {
		    children = childrenProp;
		  } else if (hasImg && alt) {
		    children = alt[0];
		  } else {
		    children = /*#__PURE__*/(0, _jsxRuntime.jsx)(AvatarFallback, {
		      className: classes.fallback
		    });
		  }
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(AvatarRoot, (0, _extends2.default)({
		    as: component,
		    ownerState: ownerState,
		    className: (0, _clsx.default)(classes.root, className),
		    ref: ref
		  }, other, {
		    children: children
		  }));
		});
		Avatar.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Used in combination with `src` or `srcSet` to
		   * provide an alt attribute for the rendered `img` element.
		   */
		  alt: _propTypes.default.string,
		  /**
		   * Used to render icon or text elements inside the Avatar if `src` is not set.
		   * This can be an element, or just a string.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.
		   * It can be used to listen for the loading error event.
		   */
		  imgProps: _propTypes.default.object,
		  /**
		   * The `sizes` attribute for the `img` element.
		   */
		  sizes: _propTypes.default.string,
		  /**
		   * The `src` attribute for the `img` element.
		   */
		  src: _propTypes.default.string,
		  /**
		   * The `srcSet` attribute for the `img` element.
		   * Use this attribute for responsive image display.
		   */
		  srcSet: _propTypes.default.string,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * The shape of the avatar.
		   * @default 'circular'
		   */
		  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['circular', 'rounded', 'square']), _propTypes.default.string])
		} ;
		var _default = Avatar;
		Avatar$1.default = _default;
		return Avatar$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  avatarClasses: true
		};
		Object.defineProperty(exports, "avatarClasses", {
		  enumerable: true,
		  get: function () {
		    return _avatarClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Avatar.default;
		  }
		});
		var _Avatar = _interopRequireDefault(requireAvatar());
		var _avatarClasses = _interopRequireWildcard(requireAvatarClasses());
		Object.keys(_avatarClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _avatarClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _avatarClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Avatar$2));

	var Avatar = /*@__PURE__*/getDefaultExportFromCjs(Avatar$2);

	var ListItemText$2 = {};

	var ListItemText$1 = {};

	var listItemTextClasses = {};

	var hasRequiredListItemTextClasses;

	function requireListItemTextClasses () {
		if (hasRequiredListItemTextClasses) return listItemTextClasses;
		hasRequiredListItemTextClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(listItemTextClasses, "__esModule", {
		  value: true
		});
		listItemTextClasses.default = void 0;
		listItemTextClasses.getListItemTextUtilityClass = getListItemTextUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getListItemTextUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiListItemText', slot);
		}
		const listItemTextClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);
		var _default = listItemTextClasses$1;
		listItemTextClasses.default = _default;
		return listItemTextClasses;
	}

	var hasRequiredListItemText;

	function requireListItemText () {
		if (hasRequiredListItemText) return ListItemText$1;
		hasRequiredListItemText = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ListItemText$1, "__esModule", {
		  value: true
		});
		ListItemText$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _Typography = _interopRequireDefault(Typography$2);
		var _ListContext = _interopRequireDefault(requireListContext());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _styled = _interopRequireDefault(requireStyled());
		var _listItemTextClasses = _interopRequireWildcard(requireListItemTextClasses());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    inset,
		    primary,
		    secondary,
		    dense
		  } = ownerState;
		  const slots = {
		    root: ['root', inset && 'inset', dense && 'dense', primary && secondary && 'multiline'],
		    primary: ['primary'],
		    secondary: ['secondary']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _listItemTextClasses.getListItemTextUtilityClass, classes);
		};
		const ListItemTextRoot = (0, _styled.default)('div', {
		  name: 'MuiListItemText',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [{
		      [`& .${_listItemTextClasses.default.primary}`]: styles.primary
		    }, {
		      [`& .${_listItemTextClasses.default.secondary}`]: styles.secondary
		    }, styles.root, ownerState.inset && styles.inset, ownerState.primary && ownerState.secondary && styles.multiline, ownerState.dense && styles.dense];
		  }
		})(({
		  ownerState
		}) => (0, _extends2.default)({
		  flex: '1 1 auto',
		  minWidth: 0,
		  marginTop: 4,
		  marginBottom: 4
		}, ownerState.primary && ownerState.secondary && {
		  marginTop: 6,
		  marginBottom: 6
		}, ownerState.inset && {
		  paddingLeft: 56
		}));
		const ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiListItemText'
		  });
		  const {
		      children,
		      className,
		      disableTypography = false,
		      inset = false,
		      primary: primaryProp,
		      primaryTypographyProps,
		      secondary: secondaryProp,
		      secondaryTypographyProps
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const {
		    dense
		  } = React.useContext(_ListContext.default);
		  let primary = primaryProp != null ? primaryProp : children;
		  let secondary = secondaryProp;
		  const ownerState = (0, _extends2.default)({}, props, {
		    disableTypography,
		    inset,
		    primary: !!primary,
		    secondary: !!secondary,
		    dense
		  });
		  const classes = useUtilityClasses(ownerState);
		  if (primary != null && primary.type !== _Typography.default && !disableTypography) {
		    primary = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Typography.default, (0, _extends2.default)({
		      variant: dense ? 'body2' : 'body1',
		      className: classes.primary,
		      component: primaryTypographyProps != null && primaryTypographyProps.variant ? undefined : 'span',
		      display: "block"
		    }, primaryTypographyProps, {
		      children: primary
		    }));
		  }
		  if (secondary != null && secondary.type !== _Typography.default && !disableTypography) {
		    secondary = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Typography.default, (0, _extends2.default)({
		      variant: "body2",
		      className: classes.secondary,
		      color: "text.secondary",
		      display: "block"
		    }, secondaryTypographyProps, {
		      children: secondary
		    }));
		  }
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(ListItemTextRoot, (0, _extends2.default)({
		    className: (0, _clsx.default)(classes.root, className),
		    ownerState: ownerState,
		    ref: ref
		  }, other, {
		    children: [primary, secondary]
		  }));
		});
		ListItemText.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Alias for the `primary` prop.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * If `true`, the children won't be wrapped by a Typography component.
		   * This can be useful to render an alternative Typography variant by wrapping
		   * the `children` (or `primary`) text, and optional `secondary` text
		   * with the Typography component.
		   * @default false
		   */
		  disableTypography: _propTypes.default.bool,
		  /**
		   * If `true`, the children are indented.
		   * This should be used if there is no left avatar or left icon.
		   * @default false
		   */
		  inset: _propTypes.default.bool,
		  /**
		   * The main content element.
		   */
		  primary: _propTypes.default.node,
		  /**
		   * These props will be forwarded to the primary typography component
		   * (as long as disableTypography is not `true`).
		   */
		  primaryTypographyProps: _propTypes.default.object,
		  /**
		   * The secondary content element.
		   */
		  secondary: _propTypes.default.node,
		  /**
		   * These props will be forwarded to the secondary typography component
		   * (as long as disableTypography is not `true`).
		   */
		  secondaryTypographyProps: _propTypes.default.object,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = ListItemText;
		ListItemText$1.default = _default;
		return ListItemText$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  listItemTextClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ListItemText.default;
		  }
		});
		Object.defineProperty(exports, "listItemTextClasses", {
		  enumerable: true,
		  get: function () {
		    return _listItemTextClasses.default;
		  }
		});
		var _ListItemText = _interopRequireDefault(requireListItemText());
		var _listItemTextClasses = _interopRequireWildcard(requireListItemTextClasses());
		Object.keys(_listItemTextClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _listItemTextClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _listItemTextClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ListItemText$2));

	var ListItemText = /*@__PURE__*/getDefaultExportFromCjs(ListItemText$2);

	var Tooltip$2 = {};

	var Tooltip$1 = {};

	var Grow$1 = {};

	var Grow = {};

	var hasRequiredGrow$1;

	function requireGrow$1 () {
		if (hasRequiredGrow$1) return Grow;
		hasRequiredGrow$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Grow, "__esModule", {
		  value: true
		});
		Grow.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _utils = requireUtils$4();
		var _reactTransitionGroup = requireCjs();
		var _useTheme = _interopRequireDefault(requireUseTheme());
		var _utils2 = requireUtils();
		var _useForkRef = _interopRequireDefault(requireUseForkRef());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function getScale(value) {
		  return `scale(${value}, ${value ** 2})`;
		}
		const styles = {
		  entering: {
		    opacity: 1,
		    transform: getScale(1)
		  },
		  entered: {
		    opacity: 1,
		    transform: 'none'
		  }
		};

		/*
		 TODO v6: remove
		 Conditionally apply a workaround for the CSS transition bug in Safari 15.4 / WebKit browsers.
		 */
		const isWebKit154 = typeof navigator !== 'undefined' && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);

		/**
		 * The Grow transition is used by the [Tooltip](/material-ui/react-tooltip/) and
		 * [Popover](/material-ui/react-popover/) components.
		 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
		 */
		const Grow$1 = /*#__PURE__*/React.forwardRef(function Grow(props, ref) {
		  const {
		      addEndListener,
		      appear = true,
		      children,
		      easing,
		      in: inProp,
		      onEnter,
		      onEntered,
		      onEntering,
		      onExit,
		      onExited,
		      onExiting,
		      style,
		      timeout = 'auto',
		      // eslint-disable-next-line react/prop-types
		      TransitionComponent = _reactTransitionGroup.Transition
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const timer = React.useRef();
		  const autoTimeout = React.useRef();
		  const theme = (0, _useTheme.default)();
		  const nodeRef = React.useRef(null);
		  const handleRef = (0, _useForkRef.default)(nodeRef, children.ref, ref);
		  const normalizedTransitionCallback = callback => maybeIsAppearing => {
		    if (callback) {
		      const node = nodeRef.current;

		      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
		      if (maybeIsAppearing === undefined) {
		        callback(node);
		      } else {
		        callback(node, maybeIsAppearing);
		      }
		    }
		  };
		  const handleEntering = normalizedTransitionCallback(onEntering);
		  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
		    (0, _utils2.reflow)(node); // So the animation always start from the start.

		    const {
		      duration: transitionDuration,
		      delay,
		      easing: transitionTimingFunction
		    } = (0, _utils2.getTransitionProps)({
		      style,
		      timeout,
		      easing
		    }, {
		      mode: 'enter'
		    });
		    let duration;
		    if (timeout === 'auto') {
		      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
		      autoTimeout.current = duration;
		    } else {
		      duration = transitionDuration;
		    }
		    node.style.transition = [theme.transitions.create('opacity', {
		      duration,
		      delay
		    }), theme.transitions.create('transform', {
		      duration: isWebKit154 ? duration : duration * 0.666,
		      delay,
		      easing: transitionTimingFunction
		    })].join(',');
		    if (onEnter) {
		      onEnter(node, isAppearing);
		    }
		  });
		  const handleEntered = normalizedTransitionCallback(onEntered);
		  const handleExiting = normalizedTransitionCallback(onExiting);
		  const handleExit = normalizedTransitionCallback(node => {
		    const {
		      duration: transitionDuration,
		      delay,
		      easing: transitionTimingFunction
		    } = (0, _utils2.getTransitionProps)({
		      style,
		      timeout,
		      easing
		    }, {
		      mode: 'exit'
		    });
		    let duration;
		    if (timeout === 'auto') {
		      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
		      autoTimeout.current = duration;
		    } else {
		      duration = transitionDuration;
		    }
		    node.style.transition = [theme.transitions.create('opacity', {
		      duration,
		      delay
		    }), theme.transitions.create('transform', {
		      duration: isWebKit154 ? duration : duration * 0.666,
		      delay: isWebKit154 ? delay : delay || duration * 0.333,
		      easing: transitionTimingFunction
		    })].join(',');
		    node.style.opacity = 0;
		    node.style.transform = getScale(0.75);
		    if (onExit) {
		      onExit(node);
		    }
		  });
		  const handleExited = normalizedTransitionCallback(onExited);
		  const handleAddEndListener = next => {
		    if (timeout === 'auto') {
		      timer.current = setTimeout(next, autoTimeout.current || 0);
		    }
		    if (addEndListener) {
		      // Old call signature before `react-transition-group` implemented `nodeRef`
		      addEndListener(nodeRef.current, next);
		    }
		  };
		  React.useEffect(() => {
		    return () => {
		      clearTimeout(timer.current);
		    };
		  }, []);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TransitionComponent, (0, _extends2.default)({
		    appear: appear,
		    in: inProp,
		    nodeRef: nodeRef,
		    onEnter: handleEnter,
		    onEntered: handleEntered,
		    onEntering: handleEntering,
		    onExit: handleExit,
		    onExited: handleExited,
		    onExiting: handleExiting,
		    addEndListener: handleAddEndListener,
		    timeout: timeout === 'auto' ? null : timeout
		  }, other, {
		    children: (state, childProps) => {
		      return /*#__PURE__*/React.cloneElement(children, (0, _extends2.default)({
		        style: (0, _extends2.default)({
		          opacity: 0,
		          transform: getScale(0.75),
		          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
		        }, styles[state], style, children.props.style),
		        ref: handleRef
		      }, childProps));
		    }
		  }));
		});
		Grow$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Add a custom transition end trigger. Called with the transitioning DOM
		   * node and a done callback. Allows for more fine grained transition end
		   * logic. Note: Timeouts are still used as a fallback if provided.
		   */
		  addEndListener: _propTypes.default.func,
		  /**
		   * Perform the enter transition when it first mounts if `in` is also `true`.
		   * Set this to `false` to disable this behavior.
		   * @default true
		   */
		  appear: _propTypes.default.bool,
		  /**
		   * A single child content element.
		   */
		  children: _utils.elementAcceptingRef.isRequired,
		  /**
		   * The transition timing function.
		   * You may specify a single easing or a object containing enter and exit values.
		   */
		  easing: _propTypes.default.oneOfType([_propTypes.default.shape({
		    enter: _propTypes.default.string,
		    exit: _propTypes.default.string
		  }), _propTypes.default.string]),
		  /**
		   * If `true`, the component will transition in.
		   */
		  in: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  onEnter: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onEntered: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onEntering: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onExit: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onExited: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onExiting: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  style: _propTypes.default.object,
		  /**
		   * The duration for the transition, in milliseconds.
		   * You may specify a single timeout for all transitions, or individually with an object.
		   *
		   * Set to 'auto' to automatically calculate transition time based on height.
		   * @default 'auto'
		   */
		  timeout: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.shape({
		    appear: _propTypes.default.number,
		    enter: _propTypes.default.number,
		    exit: _propTypes.default.number
		  })])
		} ;
		Grow$1.muiSupportAuto = true;
		var _default = Grow$1;
		Grow.default = _default;
		return Grow;
	}

	var hasRequiredGrow;

	function requireGrow () {
		if (hasRequiredGrow) return Grow$1;
		hasRequiredGrow = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _Grow.default;
			  }
			});
			var _Grow = _interopRequireDefault(requireGrow$1());
	} (Grow$1));
		return Grow$1;
	}

	var Popper$1 = {};

	var Popper = {};

	var styles = {};

	var adaptV4Theme = {};

	var hasRequiredAdaptV4Theme;

	function requireAdaptV4Theme () {
		if (hasRequiredAdaptV4Theme) return adaptV4Theme;
		hasRequiredAdaptV4Theme = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(adaptV4Theme, "__esModule", {
		  value: true
		});
		adaptV4Theme.default = adaptV4Theme$1;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _system = requireSystem();
		const _excluded = ["defaultProps", "mixins", "overrides", "palette", "props", "styleOverrides"],
		  _excluded2 = ["type", "mode"];
		function adaptV4Theme$1(inputTheme) {
		  {
		    console.warn(['MUI: adaptV4Theme() is deprecated.', 'Follow the upgrade guide on https://mui.com/r/migration-v4#theme.'].join('\n'));
		  }
		  const {
		      defaultProps = {},
		      mixins = {},
		      overrides = {},
		      palette = {},
		      props = {},
		      styleOverrides = {}
		    } = inputTheme,
		    other = (0, _objectWithoutPropertiesLoose2.default)(inputTheme, _excluded);
		  const theme = (0, _extends2.default)({}, other, {
		    components: {}
		  });

		  // default props
		  Object.keys(defaultProps).forEach(component => {
		    const componentValue = theme.components[component] || {};
		    componentValue.defaultProps = defaultProps[component];
		    theme.components[component] = componentValue;
		  });
		  Object.keys(props).forEach(component => {
		    const componentValue = theme.components[component] || {};
		    componentValue.defaultProps = props[component];
		    theme.components[component] = componentValue;
		  });

		  // CSS overrides
		  Object.keys(styleOverrides).forEach(component => {
		    const componentValue = theme.components[component] || {};
		    componentValue.styleOverrides = styleOverrides[component];
		    theme.components[component] = componentValue;
		  });
		  Object.keys(overrides).forEach(component => {
		    const componentValue = theme.components[component] || {};
		    componentValue.styleOverrides = overrides[component];
		    theme.components[component] = componentValue;
		  });

		  // theme.spacing
		  theme.spacing = (0, _system.createSpacing)(inputTheme.spacing);

		  // theme.mixins.gutters
		  const breakpoints = (0, _system.createBreakpoints)(inputTheme.breakpoints || {});
		  const spacing = theme.spacing;
		  theme.mixins = (0, _extends2.default)({
		    gutters: (styles = {}) => {
		      return (0, _extends2.default)({
		        paddingLeft: spacing(2),
		        paddingRight: spacing(2)
		      }, styles, {
		        [breakpoints.up('sm')]: (0, _extends2.default)({
		          paddingLeft: spacing(3),
		          paddingRight: spacing(3)
		        }, styles[breakpoints.up('sm')])
		      });
		    }
		  }, mixins);
		  const {
		      type: typeInput,
		      mode: modeInput
		    } = palette,
		    paletteRest = (0, _objectWithoutPropertiesLoose2.default)(palette, _excluded2);
		  const finalMode = modeInput || typeInput || 'light';
		  theme.palette = (0, _extends2.default)({
		    // theme.palette.text.hint
		    text: {
		      hint: finalMode === 'dark' ? 'rgba(255, 255, 255, 0.5)' : 'rgba(0, 0, 0, 0.38)'
		    },
		    mode: finalMode,
		    type: finalMode
		  }, paletteRest);
		  return theme;
		}
		return adaptV4Theme;
	}

	var createMuiStrictModeTheme = {};

	var hasRequiredCreateMuiStrictModeTheme;

	function requireCreateMuiStrictModeTheme () {
		if (hasRequiredCreateMuiStrictModeTheme) return createMuiStrictModeTheme;
		hasRequiredCreateMuiStrictModeTheme = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(createMuiStrictModeTheme, "__esModule", {
		  value: true
		});
		createMuiStrictModeTheme.default = createMuiStrictModeTheme$1;
		var _utils = requireUtils$4();
		var _createTheme = _interopRequireDefault(requireCreateTheme());
		function createMuiStrictModeTheme$1(options, ...args) {
		  return (0, _createTheme.default)((0, _utils.deepmerge)({
		    unstable_strictMode: true
		  }, options), ...args);
		}
		return createMuiStrictModeTheme;
	}

	var createStyles = {};

	var hasRequiredCreateStyles;

	function requireCreateStyles () {
		if (hasRequiredCreateStyles) return createStyles;
		hasRequiredCreateStyles = 1;

		Object.defineProperty(createStyles, "__esModule", {
		  value: true
		});
		createStyles.default = createStyles$1;
		let warnedOnce = false;

		// To remove in v6
		function createStyles$1(styles) {
		  if (!warnedOnce) {
		    console.warn(['MUI: createStyles from @mui/material/styles is deprecated.', 'Please use @mui/styles/createStyles'].join('\n'));
		    warnedOnce = true;
		  }
		  return styles;
		}
		return createStyles;
	}

	var cssUtils = {};

	var hasRequiredCssUtils;

	function requireCssUtils () {
		if (hasRequiredCssUtils) return cssUtils;
		hasRequiredCssUtils = 1;

		Object.defineProperty(cssUtils, "__esModule", {
		  value: true
		});
		cssUtils.alignProperty = alignProperty;
		cssUtils.convertLength = convertLength;
		cssUtils.fontGrid = fontGrid;
		cssUtils.getUnit = getUnit;
		cssUtils.isUnitless = isUnitless;
		cssUtils.responsiveProperty = responsiveProperty;
		cssUtils.toUnitless = toUnitless;
		function isUnitless(value) {
		  return String(parseFloat(value)).length === String(value).length;
		}

		// Ported from Compass
		// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss
		// Emulate the sass function "unit"
		function getUnit(input) {
		  return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || '';
		}

		// Emulate the sass function "unitless"
		function toUnitless(length) {
		  return parseFloat(length);
		}

		// Convert any CSS <length> or <percentage> value to any another.
		// From https://github.com/KyleAMathews/convert-css-length
		function convertLength(baseFontSize) {
		  return (length, toUnit) => {
		    const fromUnit = getUnit(length);

		    // Optimize for cases where `from` and `to` units are accidentally the same.
		    if (fromUnit === toUnit) {
		      return length;
		    }

		    // Convert input length to pixels.
		    let pxLength = toUnitless(length);
		    if (fromUnit !== 'px') {
		      if (fromUnit === 'em') {
		        pxLength = toUnitless(length) * toUnitless(baseFontSize);
		      } else if (fromUnit === 'rem') {
		        pxLength = toUnitless(length) * toUnitless(baseFontSize);
		      }
		    }

		    // Convert length in pixels to the output unit
		    let outputLength = pxLength;
		    if (toUnit !== 'px') {
		      if (toUnit === 'em') {
		        outputLength = pxLength / toUnitless(baseFontSize);
		      } else if (toUnit === 'rem') {
		        outputLength = pxLength / toUnitless(baseFontSize);
		      } else {
		        return length;
		      }
		    }
		    return parseFloat(outputLength.toFixed(5)) + toUnit;
		  };
		}
		function alignProperty({
		  size,
		  grid
		}) {
		  const sizeBelow = size - size % grid;
		  const sizeAbove = sizeBelow + grid;
		  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;
		}

		// fontGrid finds a minimal grid (in rem) for the fontSize values so that the
		// lineHeight falls under a x pixels grid, 4px in the case of Material Design,
		// without changing the relative line height
		function fontGrid({
		  lineHeight,
		  pixels,
		  htmlFontSize
		}) {
		  return pixels / (lineHeight * htmlFontSize);
		}

		/**
		 * generate a responsive version of a given CSS property
		 * @example
		 * responsiveProperty({
		 *   cssProperty: 'fontSize',
		 *   min: 15,
		 *   max: 20,
		 *   unit: 'px',
		 *   breakpoints: [300, 600],
		 * })
		 *
		 * // this returns
		 *
		 * {
		 *   fontSize: '15px',
		 *   '@media (min-width:300px)': {
		 *     fontSize: '17.5px',
		 *   },
		 *   '@media (min-width:600px)': {
		 *     fontSize: '20px',
		 *   },
		 * }
		 * @param {Object} params
		 * @param {string} params.cssProperty - The CSS property to be made responsive
		 * @param {number} params.min - The smallest value of the CSS property
		 * @param {number} params.max - The largest value of the CSS property
		 * @param {string} [params.unit] - The unit to be used for the CSS property
		 * @param {Array.number} [params.breakpoints]  - An array of breakpoints
		 * @param {number} [params.alignStep] - Round scaled value to fall under this grid
		 * @returns {Object} responsive styles for {params.cssProperty}
		 */
		function responsiveProperty({
		  cssProperty,
		  min,
		  max,
		  unit = 'rem',
		  breakpoints = [600, 900, 1200],
		  transform = null
		}) {
		  const output = {
		    [cssProperty]: `${min}${unit}`
		  };
		  const factor = (max - min) / breakpoints[breakpoints.length - 1];
		  breakpoints.forEach(breakpoint => {
		    let value = min + factor * breakpoint;
		    if (transform !== null) {
		      value = transform(value);
		    }
		    output[`@media (min-width:${breakpoint}px)`] = {
		      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`
		    };
		  });
		  return output;
		}
		return cssUtils;
	}

	var responsiveFontSizes = {};

	var hasRequiredResponsiveFontSizes;

	function requireResponsiveFontSizes () {
		if (hasRequiredResponsiveFontSizes) return responsiveFontSizes;
		hasRequiredResponsiveFontSizes = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(responsiveFontSizes, "__esModule", {
		  value: true
		});
		responsiveFontSizes.default = responsiveFontSizes$1;
		var _extends2 = _interopRequireDefault(require_extends());
		requireUtils$4();
		var _cssUtils = requireCssUtils();
		function responsiveFontSizes$1(themeInput, options = {}) {
		  const {
		    breakpoints = ['sm', 'md', 'lg'],
		    disableAlign = false,
		    factor = 2,
		    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']
		  } = options;
		  const theme = (0, _extends2.default)({}, themeInput);
		  theme.typography = (0, _extends2.default)({}, theme.typography);
		  const typography = theme.typography;

		  // Convert between CSS lengths e.g. em->px or px->rem
		  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).
		  const convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);
		  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);
		  variants.forEach(variant => {
		    const style = typography[variant];
		    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));
		    if (remFontSize <= 1) {
		      return;
		    }
		    const maxFontSize = remFontSize;
		    const minFontSize = 1 + (maxFontSize - 1) / factor;
		    let {
		      lineHeight
		    } = style;
		    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {
		      throw new Error(`MUI: Unsupported non-unitless line height with grid alignment.
Use unitless line heights instead.` );
		    }
		    if (!(0, _cssUtils.isUnitless)(lineHeight)) {
		      // make it unitless
		      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);
		    }
		    let transform = null;
		    if (!disableAlign) {
		      transform = value => (0, _cssUtils.alignProperty)({
		        size: value,
		        grid: (0, _cssUtils.fontGrid)({
		          pixels: 4,
		          lineHeight,
		          htmlFontSize: typography.htmlFontSize
		        })
		      });
		    }
		    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({
		      cssProperty: 'fontSize',
		      min: minFontSize,
		      max: maxFontSize,
		      unit: 'rem',
		      breakpoints: breakpointValues,
		      transform
		    }));
		  });
		  return theme;
		}
		return responsiveFontSizes;
	}

	var ThemeProvider = {};

	var hasRequiredThemeProvider;

	function requireThemeProvider () {
		if (hasRequiredThemeProvider) return ThemeProvider;
		hasRequiredThemeProvider = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _system.ThemeProvider;
			  }
			});
			var _system = requireSystem();
	} (ThemeProvider));
		return ThemeProvider;
	}

	var makeStyles = {};

	var hasRequiredMakeStyles;

	function requireMakeStyles () {
		if (hasRequiredMakeStyles) return makeStyles;
		hasRequiredMakeStyles = 1;

		Object.defineProperty(makeStyles, "__esModule", {
		  value: true
		});
		makeStyles.default = makeStyles$1;
		requireUtils$4();
		function makeStyles$1() {
		  throw new Error(`MUI: makeStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` );
		}
		return makeStyles;
	}

	var withStyles = {};

	var hasRequiredWithStyles;

	function requireWithStyles () {
		if (hasRequiredWithStyles) return withStyles;
		hasRequiredWithStyles = 1;

		Object.defineProperty(withStyles, "__esModule", {
		  value: true
		});
		withStyles.default = withStyles$1;
		requireUtils$4();
		function withStyles$1() {
		  throw new Error(`MUI: withStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` );
		}
		return withStyles;
	}

	var withTheme = {};

	var hasRequiredWithTheme;

	function requireWithTheme () {
		if (hasRequiredWithTheme) return withTheme;
		hasRequiredWithTheme = 1;

		Object.defineProperty(withTheme, "__esModule", {
		  value: true
		});
		withTheme.default = withTheme$1;
		requireUtils$4();
		function withTheme$1() {
		  throw new Error(`MUI: withTheme is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` );
		}
		return withTheme;
	}

	var CssVarsProvider = {};

	var experimental_extendTheme = {};

	var hasRequiredExperimental_extendTheme;

	function requireExperimental_extendTheme () {
		if (hasRequiredExperimental_extendTheme) return experimental_extendTheme;
		hasRequiredExperimental_extendTheme = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(experimental_extendTheme, "__esModule", {
		  value: true
		});
		experimental_extendTheme.createGetCssVar = void 0;
		experimental_extendTheme.default = extendTheme;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _utils = requireUtils$4();
		var _system = requireSystem();
		var _createTheme = _interopRequireDefault(requireCreateTheme());
		var _getOverlayAlpha = _interopRequireDefault(requireGetOverlayAlpha());
		const _excluded = ["colorSchemes", "cssVarPrefix"],
		  _excluded2 = ["palette"];
		const defaultDarkOverlays = [...Array(25)].map((_, index) => {
		  if (index === 0) {
		    return undefined;
		  }
		  const overlay = (0, _getOverlayAlpha.default)(index);
		  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
		});
		function assignNode(obj, keys) {
		  keys.forEach(k => {
		    if (!obj[k]) {
		      obj[k] = {};
		    }
		  });
		}
		function setColor(obj, key, defaultValue) {
		  if (!obj[key] && defaultValue) {
		    obj[key] = defaultValue;
		  }
		}
		const silent = fn => {
		  try {
		    return fn();
		  } catch (error) {
		    // ignore error
		  }
		  return undefined;
		};
		const createGetCssVar = (cssVarPrefix = 'mui') => (0, _system.unstable_createGetCssVar)(cssVarPrefix);
		experimental_extendTheme.createGetCssVar = createGetCssVar;
		function extendTheme(options = {}, ...args) {
		  var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;
		  const {
		      colorSchemes: colorSchemesInput = {},
		      cssVarPrefix = 'mui'
		    } = options,
		    input = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded);
		  const getCssVar = createGetCssVar(cssVarPrefix);
		  const _createThemeWithoutVa = (0, _createTheme.default)((0, _extends2.default)({}, input, colorSchemesInput.light && {
		      palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette
		    })),
		    {
		      palette: lightPalette
		    } = _createThemeWithoutVa,
		    muiTheme = (0, _objectWithoutPropertiesLoose2.default)(_createThemeWithoutVa, _excluded2);
		  const {
		    palette: darkPalette
		  } = (0, _createTheme.default)({
		    palette: (0, _extends2.default)({
		      mode: 'dark'
		    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)
		  });
		  let theme = (0, _extends2.default)({}, muiTheme, {
		    cssVarPrefix,
		    getCssVar,
		    colorSchemes: (0, _extends2.default)({}, colorSchemesInput, {
		      light: (0, _extends2.default)({}, colorSchemesInput.light, {
		        palette: lightPalette,
		        opacity: (0, _extends2.default)({
		          inputPlaceholder: 0.42,
		          inputUnderline: 0.42,
		          switchTrackDisabled: 0.12,
		          switchTrack: 0.38
		        }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity),
		        overlays: ((_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li3.overlays) || []
		      }),
		      dark: (0, _extends2.default)({}, colorSchemesInput.dark, {
		        palette: darkPalette,
		        opacity: (0, _extends2.default)({
		          inputPlaceholder: 0.5,
		          inputUnderline: 0.7,
		          switchTrackDisabled: 0.2,
		          switchTrack: 0.3
		        }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity),
		        overlays: ((_colorSchemesInput$da3 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da3.overlays) || defaultDarkOverlays
		      })
		    })
		  });
		  Object.keys(theme.colorSchemes).forEach(key => {
		    const palette = theme.colorSchemes[key].palette;

		    // attach black & white channels to common node
		    if (key === 'light') {
		      setColor(palette.common, 'background', '#fff');
		      setColor(palette.common, 'onBackground', '#000');
		    } else {
		      setColor(palette.common, 'background', '#000');
		      setColor(palette.common, 'onBackground', '#fff');
		    }

		    // assign component variables
		    assignNode(palette, ['Alert', 'AppBar', 'Avatar', 'Chip', 'FilledInput', 'LinearProgress', 'Skeleton', 'Slider', 'SnackbarContent', 'SpeedDialAction', 'StepConnector', 'StepContent', 'Switch', 'TableCell', 'Tooltip']);
		    if (key === 'light') {
		      setColor(palette.Alert, 'errorColor', (0, _system.private_safeDarken)(palette.error.light, 0.6));
		      setColor(palette.Alert, 'infoColor', (0, _system.private_safeDarken)(palette.info.light, 0.6));
		      setColor(palette.Alert, 'successColor', (0, _system.private_safeDarken)(palette.success.light, 0.6));
		      setColor(palette.Alert, 'warningColor', (0, _system.private_safeDarken)(palette.warning.light, 0.6));
		      setColor(palette.Alert, 'errorFilledBg', getCssVar('palette-error-main'));
		      setColor(palette.Alert, 'infoFilledBg', getCssVar('palette-info-main'));
		      setColor(palette.Alert, 'successFilledBg', getCssVar('palette-success-main'));
		      setColor(palette.Alert, 'warningFilledBg', getCssVar('palette-warning-main'));
		      setColor(palette.Alert, 'errorFilledColor', silent(() => lightPalette.getContrastText(palette.error.main)));
		      setColor(palette.Alert, 'infoFilledColor', silent(() => lightPalette.getContrastText(palette.info.main)));
		      setColor(palette.Alert, 'successFilledColor', silent(() => lightPalette.getContrastText(palette.success.main)));
		      setColor(palette.Alert, 'warningFilledColor', silent(() => lightPalette.getContrastText(palette.warning.main)));
		      setColor(palette.Alert, 'errorStandardBg', (0, _system.private_safeLighten)(palette.error.light, 0.9));
		      setColor(palette.Alert, 'infoStandardBg', (0, _system.private_safeLighten)(palette.info.light, 0.9));
		      setColor(palette.Alert, 'successStandardBg', (0, _system.private_safeLighten)(palette.success.light, 0.9));
		      setColor(palette.Alert, 'warningStandardBg', (0, _system.private_safeLighten)(palette.warning.light, 0.9));
		      setColor(palette.Alert, 'errorIconColor', getCssVar('palette-error-light'));
		      setColor(palette.Alert, 'infoIconColor', getCssVar('palette-info-light'));
		      setColor(palette.Alert, 'successIconColor', getCssVar('palette-success-light'));
		      setColor(palette.Alert, 'warningIconColor', getCssVar('palette-warning-light'));
		      setColor(palette.AppBar, 'defaultBg', getCssVar('palette-grey-100'));
		      setColor(palette.Avatar, 'defaultBg', getCssVar('palette-grey-400'));
		      setColor(palette.Chip, 'defaultBorder', getCssVar('palette-grey-400'));
		      setColor(palette.Chip, 'defaultAvatarColor', getCssVar('palette-grey-700'));
		      setColor(palette.Chip, 'defaultIconColor', getCssVar('palette-grey-700'));
		      setColor(palette.FilledInput, 'bg', 'rgba(0, 0, 0, 0.06)');
		      setColor(palette.FilledInput, 'hoverBg', 'rgba(0, 0, 0, 0.09)');
		      setColor(palette.FilledInput, 'disabledBg', 'rgba(0, 0, 0, 0.12)');
		      setColor(palette.LinearProgress, 'primaryBg', (0, _system.private_safeLighten)(palette.primary.main, 0.62));
		      setColor(palette.LinearProgress, 'secondaryBg', (0, _system.private_safeLighten)(palette.secondary.main, 0.62));
		      setColor(palette.LinearProgress, 'errorBg', (0, _system.private_safeLighten)(palette.error.main, 0.62));
		      setColor(palette.LinearProgress, 'infoBg', (0, _system.private_safeLighten)(palette.info.main, 0.62));
		      setColor(palette.LinearProgress, 'successBg', (0, _system.private_safeLighten)(palette.success.main, 0.62));
		      setColor(palette.LinearProgress, 'warningBg', (0, _system.private_safeLighten)(palette.warning.main, 0.62));
		      setColor(palette.Skeleton, 'bg', `rgba(${getCssVar('palette-text-primaryChannel')} / 0.11)`);
		      setColor(palette.Slider, 'primaryTrack', (0, _system.private_safeLighten)(palette.primary.main, 0.62));
		      setColor(palette.Slider, 'secondaryTrack', (0, _system.private_safeLighten)(palette.secondary.main, 0.62));
		      setColor(palette.Slider, 'errorTrack', (0, _system.private_safeLighten)(palette.error.main, 0.62));
		      setColor(palette.Slider, 'infoTrack', (0, _system.private_safeLighten)(palette.info.main, 0.62));
		      setColor(palette.Slider, 'successTrack', (0, _system.private_safeLighten)(palette.success.main, 0.62));
		      setColor(palette.Slider, 'warningTrack', (0, _system.private_safeLighten)(palette.warning.main, 0.62));
		      const snackbarContentBackground = (0, _system.private_safeEmphasize)(palette.background.default, 0.8);
		      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
		      setColor(palette.SnackbarContent, 'color', silent(() => lightPalette.getContrastText(snackbarContentBackground)));
		      setColor(palette.SpeedDialAction, 'fabHoverBg', (0, _system.private_safeEmphasize)(palette.background.paper, 0.15));
		      setColor(palette.StepConnector, 'border', getCssVar('palette-grey-400'));
		      setColor(palette.StepContent, 'border', getCssVar('palette-grey-400'));
		      setColor(palette.Switch, 'defaultColor', getCssVar('palette-common-white'));
		      setColor(palette.Switch, 'defaultDisabledColor', getCssVar('palette-grey-100'));
		      setColor(palette.Switch, 'primaryDisabledColor', (0, _system.private_safeLighten)(palette.primary.main, 0.62));
		      setColor(palette.Switch, 'secondaryDisabledColor', (0, _system.private_safeLighten)(palette.secondary.main, 0.62));
		      setColor(palette.Switch, 'errorDisabledColor', (0, _system.private_safeLighten)(palette.error.main, 0.62));
		      setColor(palette.Switch, 'infoDisabledColor', (0, _system.private_safeLighten)(palette.info.main, 0.62));
		      setColor(palette.Switch, 'successDisabledColor', (0, _system.private_safeLighten)(palette.success.main, 0.62));
		      setColor(palette.Switch, 'warningDisabledColor', (0, _system.private_safeLighten)(palette.warning.main, 0.62));
		      setColor(palette.TableCell, 'border', (0, _system.private_safeLighten)((0, _system.private_safeAlpha)(palette.divider, 1), 0.88));
		      setColor(palette.Tooltip, 'bg', (0, _system.private_safeAlpha)(palette.grey[700], 0.92));
		    } else {
		      setColor(palette.Alert, 'errorColor', (0, _system.private_safeLighten)(palette.error.light, 0.6));
		      setColor(palette.Alert, 'infoColor', (0, _system.private_safeLighten)(palette.info.light, 0.6));
		      setColor(palette.Alert, 'successColor', (0, _system.private_safeLighten)(palette.success.light, 0.6));
		      setColor(palette.Alert, 'warningColor', (0, _system.private_safeLighten)(palette.warning.light, 0.6));
		      setColor(palette.Alert, 'errorFilledBg', getCssVar('palette-error-dark'));
		      setColor(palette.Alert, 'infoFilledBg', getCssVar('palette-info-dark'));
		      setColor(palette.Alert, 'successFilledBg', getCssVar('palette-success-dark'));
		      setColor(palette.Alert, 'warningFilledBg', getCssVar('palette-warning-dark'));
		      setColor(palette.Alert, 'errorFilledColor', silent(() => darkPalette.getContrastText(palette.error.dark)));
		      setColor(palette.Alert, 'infoFilledColor', silent(() => darkPalette.getContrastText(palette.info.dark)));
		      setColor(palette.Alert, 'successFilledColor', silent(() => darkPalette.getContrastText(palette.success.dark)));
		      setColor(palette.Alert, 'warningFilledColor', silent(() => darkPalette.getContrastText(palette.warning.dark)));
		      setColor(palette.Alert, 'errorStandardBg', (0, _system.private_safeDarken)(palette.error.light, 0.9));
		      setColor(palette.Alert, 'infoStandardBg', (0, _system.private_safeDarken)(palette.info.light, 0.9));
		      setColor(palette.Alert, 'successStandardBg', (0, _system.private_safeDarken)(palette.success.light, 0.9));
		      setColor(palette.Alert, 'warningStandardBg', (0, _system.private_safeDarken)(palette.warning.light, 0.9));
		      setColor(palette.Alert, 'errorIconColor', getCssVar('palette-error-main'));
		      setColor(palette.Alert, 'infoIconColor', getCssVar('palette-info-main'));
		      setColor(palette.Alert, 'successIconColor', getCssVar('palette-success-main'));
		      setColor(palette.Alert, 'warningIconColor', getCssVar('palette-warning-main'));
		      setColor(palette.AppBar, 'defaultBg', getCssVar('palette-grey-900'));
		      setColor(palette.AppBar, 'darkBg', getCssVar('palette-background-paper')); // specific for dark mode
		      setColor(palette.AppBar, 'darkColor', getCssVar('palette-text-primary')); // specific for dark mode
		      setColor(palette.Avatar, 'defaultBg', getCssVar('palette-grey-600'));
		      setColor(palette.Chip, 'defaultBorder', getCssVar('palette-grey-700'));
		      setColor(palette.Chip, 'defaultAvatarColor', getCssVar('palette-grey-300'));
		      setColor(palette.Chip, 'defaultIconColor', getCssVar('palette-grey-300'));
		      setColor(palette.FilledInput, 'bg', 'rgba(255, 255, 255, 0.09)');
		      setColor(palette.FilledInput, 'hoverBg', 'rgba(255, 255, 255, 0.13)');
		      setColor(palette.FilledInput, 'disabledBg', 'rgba(255, 255, 255, 0.12)');
		      setColor(palette.LinearProgress, 'primaryBg', (0, _system.private_safeDarken)(palette.primary.main, 0.5));
		      setColor(palette.LinearProgress, 'secondaryBg', (0, _system.private_safeDarken)(palette.secondary.main, 0.5));
		      setColor(palette.LinearProgress, 'errorBg', (0, _system.private_safeDarken)(palette.error.main, 0.5));
		      setColor(palette.LinearProgress, 'infoBg', (0, _system.private_safeDarken)(palette.info.main, 0.5));
		      setColor(palette.LinearProgress, 'successBg', (0, _system.private_safeDarken)(palette.success.main, 0.5));
		      setColor(palette.LinearProgress, 'warningBg', (0, _system.private_safeDarken)(palette.warning.main, 0.5));
		      setColor(palette.Skeleton, 'bg', `rgba(${getCssVar('palette-text-primaryChannel')} / 0.13)`);
		      setColor(palette.Slider, 'primaryTrack', (0, _system.private_safeDarken)(palette.primary.main, 0.5));
		      setColor(palette.Slider, 'secondaryTrack', (0, _system.private_safeDarken)(palette.secondary.main, 0.5));
		      setColor(palette.Slider, 'errorTrack', (0, _system.private_safeDarken)(palette.error.main, 0.5));
		      setColor(palette.Slider, 'infoTrack', (0, _system.private_safeDarken)(palette.info.main, 0.5));
		      setColor(palette.Slider, 'successTrack', (0, _system.private_safeDarken)(palette.success.main, 0.5));
		      setColor(palette.Slider, 'warningTrack', (0, _system.private_safeDarken)(palette.warning.main, 0.5));
		      const snackbarContentBackground = (0, _system.private_safeEmphasize)(palette.background.default, 0.98);
		      setColor(palette.SnackbarContent, 'bg', snackbarContentBackground);
		      setColor(palette.SnackbarContent, 'color', silent(() => darkPalette.getContrastText(snackbarContentBackground)));
		      setColor(palette.SpeedDialAction, 'fabHoverBg', (0, _system.private_safeEmphasize)(palette.background.paper, 0.15));
		      setColor(palette.StepConnector, 'border', getCssVar('palette-grey-600'));
		      setColor(palette.StepContent, 'border', getCssVar('palette-grey-600'));
		      setColor(palette.Switch, 'defaultColor', getCssVar('palette-grey-300'));
		      setColor(palette.Switch, 'defaultDisabledColor', getCssVar('palette-grey-600'));
		      setColor(palette.Switch, 'primaryDisabledColor', (0, _system.private_safeDarken)(palette.primary.main, 0.55));
		      setColor(palette.Switch, 'secondaryDisabledColor', (0, _system.private_safeDarken)(palette.secondary.main, 0.55));
		      setColor(palette.Switch, 'errorDisabledColor', (0, _system.private_safeDarken)(palette.error.main, 0.55));
		      setColor(palette.Switch, 'infoDisabledColor', (0, _system.private_safeDarken)(palette.info.main, 0.55));
		      setColor(palette.Switch, 'successDisabledColor', (0, _system.private_safeDarken)(palette.success.main, 0.55));
		      setColor(palette.Switch, 'warningDisabledColor', (0, _system.private_safeDarken)(palette.warning.main, 0.55));
		      setColor(palette.TableCell, 'border', (0, _system.private_safeDarken)((0, _system.private_safeAlpha)(palette.divider, 1), 0.68));
		      setColor(palette.Tooltip, 'bg', (0, _system.private_safeAlpha)(palette.grey[700], 0.92));
		    }
		    setColor(palette.background, 'defaultChannel', (0, _system.private_safeColorChannel)(palette.background.default, 'MUI: The value of `palette.background.default` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().')); // MUI X - DataGrid needs this token.

		    setColor(palette.common, 'backgroundChannel', (0, _system.private_safeColorChannel)(palette.common.background, 'MUI: The value of `palette.common.background` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
		    setColor(palette.common, 'onBackgroundChannel', (0, _system.private_safeColorChannel)(palette.common.onBackground, 'MUI: The value of `palette.common.onBackground` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
		    setColor(palette, 'dividerChannel', (0, _system.private_safeColorChannel)(palette.divider, 'MUI: The value of `palette.divider` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
		    Object.keys(palette).forEach(color => {
		      const colors = palette[color];

		      // The default palettes (primary, secondary, error, info, success, and warning) errors are handled by the above `createTheme(...)`.

		      if (colors && typeof colors === 'object') {
		        // Silent the error for custom palettes.
		        if (colors.main) {
		          setColor(palette[color], 'mainChannel', (0, _system.private_safeColorChannel)(colors.main));
		        }
		        if (colors.light) {
		          setColor(palette[color], 'lightChannel', (0, _system.private_safeColorChannel)(colors.light));
		        }
		        if (colors.dark) {
		          setColor(palette[color], 'darkChannel', (0, _system.private_safeColorChannel)(colors.dark));
		        }
		        if (colors.contrastText) {
		          setColor(palette[color], 'contrastTextChannel', (0, _system.private_safeColorChannel)(colors.contrastText));
		        }
		        if (color === 'text') {
		          // Text colors: text.primary, text.secondary
		          setColor(palette[color], 'primaryChannel', (0, _system.private_safeColorChannel)(colors.primary, 'MUI: The value of `palette.text.primary` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
		          setColor(palette[color], 'secondaryChannel', (0, _system.private_safeColorChannel)(colors.secondary, 'MUI: The value of `palette.text.secondary` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
		        }
		        if (color === 'action') {
		          // Action colors: action.active, action.selected
		          if (colors.active) {
		            setColor(palette[color], 'activeChannel', (0, _system.private_safeColorChannel)(colors.active, 'MUI: The value of `palette.action.active` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
		          }
		          if (colors.selected) {
		            setColor(palette[color], 'selectedChannel', (0, _system.private_safeColorChannel)(colors.selected, 'MUI: The value of `palette.action.selected` should be one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().'));
		          }
		        }
		      }
		    });
		  });
		  theme = args.reduce((acc, argument) => (0, _utils.deepmerge)(acc, argument), theme);
		  return theme;
		}
		return experimental_extendTheme;
	}

	var excludeVariablesFromRoot = {};

	var hasRequiredExcludeVariablesFromRoot;

	function requireExcludeVariablesFromRoot () {
		if (hasRequiredExcludeVariablesFromRoot) return excludeVariablesFromRoot;
		hasRequiredExcludeVariablesFromRoot = 1;

		Object.defineProperty(excludeVariablesFromRoot, "__esModule", {
		  value: true
		});
		excludeVariablesFromRoot.default = void 0;
		/**
		 * @internal These variables should not appear in the :root stylesheet when the `defaultMode="dark"`
		 */
		const excludeVariablesFromRoot$1 = cssVarPrefix => [...[...Array(24)].map((_, index) => `--${cssVarPrefix ? `${cssVarPrefix}-` : ''}overlays-${index + 1}`), `--${cssVarPrefix ? `${cssVarPrefix}-` : ''}palette-AppBar-darkBg`, `--${cssVarPrefix ? `${cssVarPrefix}-` : ''}palette-AppBar-darkColor`];
		var _default = excludeVariablesFromRoot$1;
		excludeVariablesFromRoot.default = _default;
		return excludeVariablesFromRoot;
	}

	var hasRequiredCssVarsProvider;

	function requireCssVarsProvider () {
		if (hasRequiredCssVarsProvider) return CssVarsProvider;
		hasRequiredCssVarsProvider = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(CssVarsProvider, "__esModule", {
		  value: true
		});
		CssVarsProvider.useColorScheme = CssVarsProvider.shouldSkipGeneratingVar = CssVarsProvider.getInitColorSchemeScript = CssVarsProvider.Experimental_CssVarsProvider = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _system = requireSystem();
		var _experimental_extendTheme = _interopRequireDefault(requireExperimental_extendTheme());
		var _createTypography = _interopRequireDefault(requireCreateTypography());
		var _excludeVariablesFromRoot = _interopRequireDefault(requireExcludeVariablesFromRoot());
		const shouldSkipGeneratingVar = keys => {
		  var _keys$;
		  return !!keys[0].match(/(typography|mixins|breakpoints|direction|transitions)/) || keys[0] === 'palette' && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));
		};
		CssVarsProvider.shouldSkipGeneratingVar = shouldSkipGeneratingVar;
		const defaultTheme = (0, _experimental_extendTheme.default)();
		const {
		  CssVarsProvider: CssVarsProvider$1,
		  useColorScheme,
		  getInitColorSchemeScript
		} = (0, _system.unstable_createCssVarsProvider)({
		  theme: defaultTheme,
		  attribute: 'data-mui-color-scheme',
		  modeStorageKey: 'mui-mode',
		  colorSchemeStorageKey: 'mui-color-scheme',
		  defaultColorScheme: {
		    light: 'light',
		    dark: 'dark'
		  },
		  resolveTheme: theme => {
		    const newTheme = (0, _extends2.default)({}, theme, {
		      typography: (0, _createTypography.default)(theme.palette, theme.typography)
		    });
		    return newTheme;
		  },
		  shouldSkipGeneratingVar,
		  excludeVariablesFromRoot: _excludeVariablesFromRoot.default
		});
		CssVarsProvider.getInitColorSchemeScript = getInitColorSchemeScript;
		CssVarsProvider.useColorScheme = useColorScheme;
		CssVarsProvider.Experimental_CssVarsProvider = CssVarsProvider$1;
		return CssVarsProvider;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  adaptV4Theme: true,
		  hexToRgb: true,
		  rgbToHex: true,
		  hslToRgb: true,
		  decomposeColor: true,
		  recomposeColor: true,
		  getContrastRatio: true,
		  getLuminance: true,
		  emphasize: true,
		  alpha: true,
		  darken: true,
		  lighten: true,
		  css: true,
		  keyframes: true,
		  experimental_sx: true,
		  StyledEngineProvider: true,
		  createTheme: true,
		  createMuiTheme: true,
		  unstable_createMuiStrictModeTheme: true,
		  createStyles: true,
		  unstable_getUnit: true,
		  unstable_toUnitless: true,
		  responsiveFontSizes: true,
		  duration: true,
		  easing: true,
		  useTheme: true,
		  useThemeProps: true,
		  styled: true,
		  experimentalStyled: true,
		  ThemeProvider: true,
		  makeStyles: true,
		  withStyles: true,
		  withTheme: true,
		  experimental_extendTheme: true,
		  getOverlayAlpha: true,
		  private_createTypography: true,
		  private_excludeVariablesFromRoot: true
		};
		Object.defineProperty(exports, "StyledEngineProvider", {
		  enumerable: true,
		  get: function () {
		    return _system.StyledEngineProvider;
		  }
		});
		Object.defineProperty(exports, "ThemeProvider", {
		  enumerable: true,
		  get: function () {
		    return _ThemeProvider.default;
		  }
		});
		Object.defineProperty(exports, "adaptV4Theme", {
		  enumerable: true,
		  get: function () {
		    return _adaptV4Theme.default;
		  }
		});
		Object.defineProperty(exports, "alpha", {
		  enumerable: true,
		  get: function () {
		    return _system.alpha;
		  }
		});
		Object.defineProperty(exports, "createMuiTheme", {
		  enumerable: true,
		  get: function () {
		    return _createTheme.createMuiTheme;
		  }
		});
		Object.defineProperty(exports, "createStyles", {
		  enumerable: true,
		  get: function () {
		    return _createStyles.default;
		  }
		});
		Object.defineProperty(exports, "createTheme", {
		  enumerable: true,
		  get: function () {
		    return _createTheme.default;
		  }
		});
		Object.defineProperty(exports, "css", {
		  enumerable: true,
		  get: function () {
		    return _system.css;
		  }
		});
		Object.defineProperty(exports, "darken", {
		  enumerable: true,
		  get: function () {
		    return _system.darken;
		  }
		});
		Object.defineProperty(exports, "decomposeColor", {
		  enumerable: true,
		  get: function () {
		    return _system.decomposeColor;
		  }
		});
		Object.defineProperty(exports, "duration", {
		  enumerable: true,
		  get: function () {
		    return _createTransitions.duration;
		  }
		});
		Object.defineProperty(exports, "easing", {
		  enumerable: true,
		  get: function () {
		    return _createTransitions.easing;
		  }
		});
		Object.defineProperty(exports, "emphasize", {
		  enumerable: true,
		  get: function () {
		    return _system.emphasize;
		  }
		});
		Object.defineProperty(exports, "experimentalStyled", {
		  enumerable: true,
		  get: function () {
		    return _styled.default;
		  }
		});
		Object.defineProperty(exports, "experimental_extendTheme", {
		  enumerable: true,
		  get: function () {
		    return _experimental_extendTheme.default;
		  }
		});
		Object.defineProperty(exports, "experimental_sx", {
		  enumerable: true,
		  get: function () {
		    return _system.experimental_sx;
		  }
		});
		Object.defineProperty(exports, "getContrastRatio", {
		  enumerable: true,
		  get: function () {
		    return _system.getContrastRatio;
		  }
		});
		Object.defineProperty(exports, "getLuminance", {
		  enumerable: true,
		  get: function () {
		    return _system.getLuminance;
		  }
		});
		Object.defineProperty(exports, "getOverlayAlpha", {
		  enumerable: true,
		  get: function () {
		    return _getOverlayAlpha.default;
		  }
		});
		Object.defineProperty(exports, "hexToRgb", {
		  enumerable: true,
		  get: function () {
		    return _system.hexToRgb;
		  }
		});
		Object.defineProperty(exports, "hslToRgb", {
		  enumerable: true,
		  get: function () {
		    return _system.hslToRgb;
		  }
		});
		Object.defineProperty(exports, "keyframes", {
		  enumerable: true,
		  get: function () {
		    return _system.keyframes;
		  }
		});
		Object.defineProperty(exports, "lighten", {
		  enumerable: true,
		  get: function () {
		    return _system.lighten;
		  }
		});
		Object.defineProperty(exports, "makeStyles", {
		  enumerable: true,
		  get: function () {
		    return _makeStyles.default;
		  }
		});
		Object.defineProperty(exports, "private_createTypography", {
		  enumerable: true,
		  get: function () {
		    return _createTypography.default;
		  }
		});
		Object.defineProperty(exports, "private_excludeVariablesFromRoot", {
		  enumerable: true,
		  get: function () {
		    return _excludeVariablesFromRoot.default;
		  }
		});
		Object.defineProperty(exports, "recomposeColor", {
		  enumerable: true,
		  get: function () {
		    return _system.recomposeColor;
		  }
		});
		Object.defineProperty(exports, "responsiveFontSizes", {
		  enumerable: true,
		  get: function () {
		    return _responsiveFontSizes.default;
		  }
		});
		Object.defineProperty(exports, "rgbToHex", {
		  enumerable: true,
		  get: function () {
		    return _system.rgbToHex;
		  }
		});
		Object.defineProperty(exports, "styled", {
		  enumerable: true,
		  get: function () {
		    return _styled.default;
		  }
		});
		Object.defineProperty(exports, "unstable_createMuiStrictModeTheme", {
		  enumerable: true,
		  get: function () {
		    return _createMuiStrictModeTheme.default;
		  }
		});
		Object.defineProperty(exports, "unstable_getUnit", {
		  enumerable: true,
		  get: function () {
		    return _cssUtils.getUnit;
		  }
		});
		Object.defineProperty(exports, "unstable_toUnitless", {
		  enumerable: true,
		  get: function () {
		    return _cssUtils.toUnitless;
		  }
		});
		Object.defineProperty(exports, "useTheme", {
		  enumerable: true,
		  get: function () {
		    return _useTheme.default;
		  }
		});
		Object.defineProperty(exports, "useThemeProps", {
		  enumerable: true,
		  get: function () {
		    return _useThemeProps.default;
		  }
		});
		Object.defineProperty(exports, "withStyles", {
		  enumerable: true,
		  get: function () {
		    return _withStyles.default;
		  }
		});
		Object.defineProperty(exports, "withTheme", {
		  enumerable: true,
		  get: function () {
		    return _withTheme.default;
		  }
		});
		var _adaptV4Theme = _interopRequireDefault(requireAdaptV4Theme());
		var _system = requireSystem();
		var _createTheme = _interopRequireWildcard(requireCreateTheme());
		var _createMuiStrictModeTheme = _interopRequireDefault(requireCreateMuiStrictModeTheme());
		var _createStyles = _interopRequireDefault(requireCreateStyles());
		var _cssUtils = requireCssUtils();
		var _responsiveFontSizes = _interopRequireDefault(requireResponsiveFontSizes());
		var _createTransitions = requireCreateTransitions();
		var _useTheme = _interopRequireDefault(requireUseTheme());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _styled = _interopRequireDefault(requireStyled());
		var _ThemeProvider = _interopRequireDefault(requireThemeProvider());
		var _makeStyles = _interopRequireDefault(requireMakeStyles());
		var _withStyles = _interopRequireDefault(requireWithStyles());
		var _withTheme = _interopRequireDefault(requireWithTheme());
		var _CssVarsProvider = requireCssVarsProvider();
		Object.keys(_CssVarsProvider).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _CssVarsProvider[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _CssVarsProvider[key];
		    }
		  });
		});
		var _experimental_extendTheme = _interopRequireDefault(requireExperimental_extendTheme());
		var _getOverlayAlpha = _interopRequireDefault(requireGetOverlayAlpha());
		var _createTypography = _interopRequireDefault(requireCreateTypography());
		var _excludeVariablesFromRoot = _interopRequireDefault(requireExcludeVariablesFromRoot());
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (styles));

	var hasRequiredPopper$1;

	function requirePopper$1 () {
		if (hasRequiredPopper$1) return Popper;
		hasRequiredPopper$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Popper, "__esModule", {
		  value: true
		});
		Popper.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _PopperUnstyled = _interopRequireDefault(requirePopperUnstyled());
		var _system = requireSystem();
		var _utils = requireUtils$4();
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var React = _interopRequireWildcard(require$$3);
		var _styles = styles;
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["components", "componentsProps", "slots", "slotProps"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const PopperRoot = (0, _styles.styled)(_PopperUnstyled.default, {
		  name: 'MuiPopper',
		  slot: 'Root',
		  overridesResolver: (props, styles) => styles.root
		})({});

		/**
		 *
		 * Demos:
		 *
		 * - [Autocomplete](https://mui.com/material-ui/react-autocomplete/)
		 * - [Menu](https://mui.com/material-ui/react-menu/)
		 * - [Popper](https://mui.com/material-ui/react-popper/)
		 *
		 * API:
		 *
		 * - [Popper API](https://mui.com/material-ui/api/popper/)
		 */
		const Popper$1 = /*#__PURE__*/React.forwardRef(function Popper(inProps, ref) {
		  var _slots$root;
		  const theme = (0, _system.useThemeWithoutDefault)();
		  const _useThemeProps = (0, _styles.useThemeProps)({
		      props: inProps,
		      name: 'MuiPopper'
		    }),
		    {
		      components,
		      componentsProps,
		      slots,
		      slotProps
		    } = _useThemeProps,
		    other = (0, _objectWithoutPropertiesLoose2.default)(_useThemeProps, _excluded);
		  const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(PopperRoot, (0, _extends2.default)({
		    direction: theme == null ? void 0 : theme.direction,
		    slots: {
		      root: RootComponent
		    },
		    slotProps: slotProps != null ? slotProps : componentsProps
		  }, other, {
		    ref: ref
		  }));
		});
		Popper$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit TypeScript types and run "yarn proptypes"  |
		  // ----------------------------------------------------------------------
		  /**
		   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
		   * or a function that returns either.
		   * It's used to set the position of the popper.
		   * The return value will passed as the reference object of the Popper instance.
		   */
		  anchorEl: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_utils.HTMLElementType, _propTypes.default.object, _propTypes.default.func]),
		  /**
		   * Popper render function or node.
		   */
		  children: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.node, _propTypes.default.func]),
		  /**
		   * @ignore
		   */
		  component: _propTypes.default /* @typescript-to-proptypes-ignore */.elementType,
		  /**
		   * The components used for each slot inside the Popper.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  components: _propTypes.default.shape({
		    Root: _propTypes.default.elementType
		  }),
		  /**
		   * The props used for each slot inside the Popper.
		   * @default {}
		   */
		  componentsProps: _propTypes.default.shape({
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * An HTML element or function that returns one.
		   * The `container` will have the portal children appended to it.
		   *
		   * By default, it uses the body of the top-level document object,
		   * so it's simply `document.body` most of the time.
		   */
		  container: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
		  /**
		   * The `children` will be under the DOM hierarchy of the parent component.
		   * @default false
		   */
		  disablePortal: _propTypes.default.bool,
		  /**
		   * Always keep the children in the DOM.
		   * This prop can be useful in SEO situation or
		   * when you want to maximize the responsiveness of the Popper.
		   * @default false
		   */
		  keepMounted: _propTypes.default.bool,
		  /**
		   * Popper.js is based on a "plugin-like" architecture,
		   * most of its features are fully encapsulated "modifiers".
		   *
		   * A modifier is a function that is called each time Popper.js needs to
		   * compute the position of the popper.
		   * For this reason, modifiers should be very performant to avoid bottlenecks.
		   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
		   */
		  modifiers: _propTypes.default.arrayOf(_propTypes.default.shape({
		    data: _propTypes.default.object,
		    effect: _propTypes.default.func,
		    enabled: _propTypes.default.bool,
		    fn: _propTypes.default.func,
		    name: _propTypes.default.any,
		    options: _propTypes.default.object,
		    phase: _propTypes.default.oneOf(['afterMain', 'afterRead', 'afterWrite', 'beforeMain', 'beforeRead', 'beforeWrite', 'main', 'read', 'write']),
		    requires: _propTypes.default.arrayOf(_propTypes.default.string),
		    requiresIfExists: _propTypes.default.arrayOf(_propTypes.default.string)
		  })),
		  /**
		   * If `true`, the component is shown.
		   */
		  open: _propTypes.default.bool.isRequired,
		  /**
		   * Popper placement.
		   * @default 'bottom'
		   */
		  placement: _propTypes.default.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
		  /**
		   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
		   * @default {}
		   */
		  popperOptions: _propTypes.default.shape({
		    modifiers: _propTypes.default.array,
		    onFirstUpdate: _propTypes.default.func,
		    placement: _propTypes.default.oneOf(['auto-end', 'auto-start', 'auto', 'bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
		    strategy: _propTypes.default.oneOf(['absolute', 'fixed'])
		  }),
		  /**
		   * A ref that points to the used popper instance.
		   */
		  popperRef: _utils.refType,
		  /**
		   * The props used for each slot inside the Popper.
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
		  }),
		  /**
		   * The components used for each slot inside the Popper.
		   * Either a string to use a HTML element or a component.
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    root: _propTypes.default.elementType
		  }),
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * Help supporting a react-transition-group/Transition component.
		   * @default false
		   */
		  transition: _propTypes.default.bool
		} ;
		var _default = Popper$1;
		Popper.default = _default;
		return Popper;
	}

	var hasRequiredPopper;

	function requirePopper () {
		if (hasRequiredPopper) return Popper$1;
		hasRequiredPopper = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _Popper.default;
			  }
			});
			var _Popper = _interopRequireDefault(requirePopper$1());
	} (Popper$1));
		return Popper$1;
	}

	var tooltipClasses = {};

	var hasRequiredTooltipClasses;

	function requireTooltipClasses () {
		if (hasRequiredTooltipClasses) return tooltipClasses;
		hasRequiredTooltipClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(tooltipClasses, "__esModule", {
		  value: true
		});
		tooltipClasses.default = void 0;
		tooltipClasses.getTooltipUtilityClass = getTooltipUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getTooltipUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiTooltip', slot);
		}
		const tooltipClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiTooltip', ['popper', 'popperInteractive', 'popperArrow', 'popperClose', 'tooltip', 'tooltipArrow', 'touch', 'tooltipPlacementLeft', 'tooltipPlacementRight', 'tooltipPlacementTop', 'tooltipPlacementBottom', 'arrow']);
		var _default = tooltipClasses$1;
		tooltipClasses.default = _default;
		return tooltipClasses;
	}

	var hasRequiredTooltip;

	function requireTooltip () {
		if (hasRequiredTooltip) return Tooltip$1;
		hasRequiredTooltip = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Tooltip$1, "__esModule", {
		  value: true
		});
		Tooltip$1.default = void 0;
		Tooltip$1.testReset = testReset;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _utils = requireUtils$4();
		var _base = requireNode$2();
		var _system = requireSystem();
		var _styled = _interopRequireDefault(requireStyled());
		var _useTheme = _interopRequireDefault(requireUseTheme());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _capitalize = _interopRequireDefault(requireCapitalize());
		var _Grow = _interopRequireDefault(requireGrow());
		var _Popper = _interopRequireDefault(requirePopper());
		var _useEventCallback = _interopRequireDefault(requireUseEventCallback());
		var _useForkRef = _interopRequireDefault(requireUseForkRef());
		var _useId = _interopRequireDefault(requireUseId());
		var _useIsFocusVisible = _interopRequireDefault(requireUseIsFocusVisible());
		var _useControlled = _interopRequireDefault(requireUseControlled());
		var _tooltipClasses = _interopRequireWildcard(requireTooltipClasses());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function round(value) {
		  return Math.round(value * 1e5) / 1e5;
		}
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    disableInteractive,
		    arrow,
		    touch,
		    placement
		  } = ownerState;
		  const slots = {
		    popper: ['popper', !disableInteractive && 'popperInteractive', arrow && 'popperArrow'],
		    tooltip: ['tooltip', arrow && 'tooltipArrow', touch && 'touch', `tooltipPlacement${(0, _capitalize.default)(placement.split('-')[0])}`],
		    arrow: ['arrow']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _tooltipClasses.getTooltipUtilityClass, classes);
		};
		const TooltipPopper = (0, _styled.default)(_Popper.default, {
		  name: 'MuiTooltip',
		  slot: 'Popper',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.popper, !ownerState.disableInteractive && styles.popperInteractive, ownerState.arrow && styles.popperArrow, !ownerState.open && styles.popperClose];
		  }
		})(({
		  theme,
		  ownerState,
		  open
		}) => (0, _extends2.default)({
		  zIndex: (theme.vars || theme).zIndex.tooltip,
		  pointerEvents: 'none'
		}, !ownerState.disableInteractive && {
		  pointerEvents: 'auto'
		}, !open && {
		  pointerEvents: 'none'
		}, ownerState.arrow && {
		  [`&[data-popper-placement*="bottom"] .${_tooltipClasses.default.arrow}`]: {
		    top: 0,
		    marginTop: '-0.71em',
		    '&::before': {
		      transformOrigin: '0 100%'
		    }
		  },
		  [`&[data-popper-placement*="top"] .${_tooltipClasses.default.arrow}`]: {
		    bottom: 0,
		    marginBottom: '-0.71em',
		    '&::before': {
		      transformOrigin: '100% 0'
		    }
		  },
		  [`&[data-popper-placement*="right"] .${_tooltipClasses.default.arrow}`]: (0, _extends2.default)({}, !ownerState.isRtl ? {
		    left: 0,
		    marginLeft: '-0.71em'
		  } : {
		    right: 0,
		    marginRight: '-0.71em'
		  }, {
		    height: '1em',
		    width: '0.71em',
		    '&::before': {
		      transformOrigin: '100% 100%'
		    }
		  }),
		  [`&[data-popper-placement*="left"] .${_tooltipClasses.default.arrow}`]: (0, _extends2.default)({}, !ownerState.isRtl ? {
		    right: 0,
		    marginRight: '-0.71em'
		  } : {
		    left: 0,
		    marginLeft: '-0.71em'
		  }, {
		    height: '1em',
		    width: '0.71em',
		    '&::before': {
		      transformOrigin: '0 0'
		    }
		  })
		}));
		const TooltipTooltip = (0, _styled.default)('div', {
		  name: 'MuiTooltip',
		  slot: 'Tooltip',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.tooltip, ownerState.touch && styles.touch, ownerState.arrow && styles.tooltipArrow, styles[`tooltipPlacement${(0, _capitalize.default)(ownerState.placement.split('-')[0])}`]];
		  }
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : (0, _system.alpha)(theme.palette.grey[700], 0.92),
		  borderRadius: (theme.vars || theme).shape.borderRadius,
		  color: (theme.vars || theme).palette.common.white,
		  fontFamily: theme.typography.fontFamily,
		  padding: '4px 8px',
		  fontSize: theme.typography.pxToRem(11),
		  maxWidth: 300,
		  margin: 2,
		  wordWrap: 'break-word',
		  fontWeight: theme.typography.fontWeightMedium
		}, ownerState.arrow && {
		  position: 'relative',
		  margin: 0
		}, ownerState.touch && {
		  padding: '8px 16px',
		  fontSize: theme.typography.pxToRem(14),
		  lineHeight: `${round(16 / 14)}em`,
		  fontWeight: theme.typography.fontWeightRegular
		}, {
		  [`.${_tooltipClasses.default.popper}[data-popper-placement*="left"] &`]: (0, _extends2.default)({
		    transformOrigin: 'right center'
		  }, !ownerState.isRtl ? (0, _extends2.default)({
		    marginRight: '14px'
		  }, ownerState.touch && {
		    marginRight: '24px'
		  }) : (0, _extends2.default)({
		    marginLeft: '14px'
		  }, ownerState.touch && {
		    marginLeft: '24px'
		  })),
		  [`.${_tooltipClasses.default.popper}[data-popper-placement*="right"] &`]: (0, _extends2.default)({
		    transformOrigin: 'left center'
		  }, !ownerState.isRtl ? (0, _extends2.default)({
		    marginLeft: '14px'
		  }, ownerState.touch && {
		    marginLeft: '24px'
		  }) : (0, _extends2.default)({
		    marginRight: '14px'
		  }, ownerState.touch && {
		    marginRight: '24px'
		  })),
		  [`.${_tooltipClasses.default.popper}[data-popper-placement*="top"] &`]: (0, _extends2.default)({
		    transformOrigin: 'center bottom',
		    marginBottom: '14px'
		  }, ownerState.touch && {
		    marginBottom: '24px'
		  }),
		  [`.${_tooltipClasses.default.popper}[data-popper-placement*="bottom"] &`]: (0, _extends2.default)({
		    transformOrigin: 'center top',
		    marginTop: '14px'
		  }, ownerState.touch && {
		    marginTop: '24px'
		  })
		}));
		const TooltipArrow = (0, _styled.default)('span', {
		  name: 'MuiTooltip',
		  slot: 'Arrow',
		  overridesResolver: (props, styles) => styles.arrow
		})(({
		  theme
		}) => ({
		  overflow: 'hidden',
		  position: 'absolute',
		  width: '1em',
		  height: '0.71em' /* = width / sqrt(2) = (length of the hypotenuse) */,
		  boxSizing: 'border-box',
		  color: theme.vars ? theme.vars.palette.Tooltip.bg : (0, _system.alpha)(theme.palette.grey[700], 0.9),
		  '&::before': {
		    content: '""',
		    margin: 'auto',
		    display: 'block',
		    width: '100%',
		    height: '100%',
		    backgroundColor: 'currentColor',
		    transform: 'rotate(45deg)'
		  }
		}));
		let hystersisOpen = false;
		let hystersisTimer = null;
		function testReset() {
		  hystersisOpen = false;
		  clearTimeout(hystersisTimer);
		}
		function composeEventHandler(handler, eventHandler) {
		  return event => {
		    if (eventHandler) {
		      eventHandler(event);
		    }
		    handler(event);
		  };
		}

		// TODO v6: Remove PopperComponent, PopperProps, TransitionComponent and TransitionProps.
		const Tooltip = /*#__PURE__*/React.forwardRef(function Tooltip(inProps, ref) {
		  var _ref, _slots$popper, _ref2, _ref3, _slots$transition, _ref4, _slots$tooltip, _ref5, _slots$arrow, _slotProps$popper, _ref6, _slotProps$popper2, _slotProps$transition, _slotProps$tooltip, _ref7, _slotProps$tooltip2, _slotProps$arrow, _ref8, _slotProps$arrow2;
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiTooltip'
		  });
		  const {
		      arrow = false,
		      children,
		      components = {},
		      componentsProps = {},
		      describeChild = false,
		      disableFocusListener = false,
		      disableHoverListener = false,
		      disableInteractive: disableInteractiveProp = false,
		      disableTouchListener = false,
		      enterDelay = 100,
		      enterNextDelay = 0,
		      enterTouchDelay = 700,
		      followCursor = false,
		      id: idProp,
		      leaveDelay = 0,
		      leaveTouchDelay = 1500,
		      onClose,
		      onOpen,
		      open: openProp,
		      placement = 'bottom',
		      PopperComponent: PopperComponentProp,
		      PopperProps = {},
		      slotProps = {},
		      slots = {},
		      title,
		      TransitionComponent: TransitionComponentProp = _Grow.default,
		      TransitionProps
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const theme = (0, _useTheme.default)();
		  const isRtl = theme.direction === 'rtl';
		  const [childNode, setChildNode] = React.useState();
		  const [arrowRef, setArrowRef] = React.useState(null);
		  const ignoreNonTouchEvents = React.useRef(false);
		  const disableInteractive = disableInteractiveProp || followCursor;
		  const closeTimer = React.useRef();
		  const enterTimer = React.useRef();
		  const leaveTimer = React.useRef();
		  const touchTimer = React.useRef();
		  const [openState, setOpenState] = (0, _useControlled.default)({
		    controlled: openProp,
		    default: false,
		    name: 'Tooltip',
		    state: 'open'
		  });
		  let open = openState;
		  {
		    // eslint-disable-next-line react-hooks/rules-of-hooks
		    const {
		      current: isControlled
		    } = React.useRef(openProp !== undefined);

		    // eslint-disable-next-line react-hooks/rules-of-hooks
		    React.useEffect(() => {
		      if (childNode && childNode.disabled && !isControlled && title !== '' && childNode.tagName.toLowerCase() === 'button') {
		        console.error(['MUI: You are providing a disabled `button` child to the Tooltip component.', 'A disabled element does not fire events.', "Tooltip needs to listen to the child element's events to display the title.", '', 'Add a simple wrapper element, such as a `span`.'].join('\n'));
		      }
		    }, [title, childNode, isControlled]);
		  }
		  const id = (0, _useId.default)(idProp);
		  const prevUserSelect = React.useRef();
		  const stopTouchInteraction = React.useCallback(() => {
		    if (prevUserSelect.current !== undefined) {
		      document.body.style.WebkitUserSelect = prevUserSelect.current;
		      prevUserSelect.current = undefined;
		    }
		    clearTimeout(touchTimer.current);
		  }, []);
		  React.useEffect(() => {
		    return () => {
		      clearTimeout(closeTimer.current);
		      clearTimeout(enterTimer.current);
		      clearTimeout(leaveTimer.current);
		      stopTouchInteraction();
		    };
		  }, [stopTouchInteraction]);
		  const handleOpen = event => {
		    clearTimeout(hystersisTimer);
		    hystersisOpen = true;

		    // The mouseover event will trigger for every nested element in the tooltip.
		    // We can skip rerendering when the tooltip is already open.
		    // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.
		    setOpenState(true);
		    if (onOpen && !open) {
		      onOpen(event);
		    }
		  };
		  const handleClose = (0, _useEventCallback.default)(
		  /**
		   * @param {React.SyntheticEvent | Event} event
		   */
		  event => {
		    clearTimeout(hystersisTimer);
		    hystersisTimer = setTimeout(() => {
		      hystersisOpen = false;
		    }, 800 + leaveDelay);
		    setOpenState(false);
		    if (onClose && open) {
		      onClose(event);
		    }
		    clearTimeout(closeTimer.current);
		    closeTimer.current = setTimeout(() => {
		      ignoreNonTouchEvents.current = false;
		    }, theme.transitions.duration.shortest);
		  });
		  const handleEnter = event => {
		    if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {
		      return;
		    }

		    // Remove the title ahead of time.
		    // We don't want to wait for the next render commit.
		    // We would risk displaying two tooltips at the same time (native + this one).
		    if (childNode) {
		      childNode.removeAttribute('title');
		    }
		    clearTimeout(enterTimer.current);
		    clearTimeout(leaveTimer.current);
		    if (enterDelay || hystersisOpen && enterNextDelay) {
		      enterTimer.current = setTimeout(() => {
		        handleOpen(event);
		      }, hystersisOpen ? enterNextDelay : enterDelay);
		    } else {
		      handleOpen(event);
		    }
		  };
		  const handleLeave = event => {
		    clearTimeout(enterTimer.current);
		    clearTimeout(leaveTimer.current);
		    leaveTimer.current = setTimeout(() => {
		      handleClose(event);
		    }, leaveDelay);
		  };
		  const {
		    isFocusVisibleRef,
		    onBlur: handleBlurVisible,
		    onFocus: handleFocusVisible,
		    ref: focusVisibleRef
		  } = (0, _useIsFocusVisible.default)();
		  // We don't necessarily care about the focusVisible state (which is safe to access via ref anyway).
		  // We just need to re-render the Tooltip if the focus-visible state changes.
		  const [, setChildIsFocusVisible] = React.useState(false);
		  const handleBlur = event => {
		    handleBlurVisible(event);
		    if (isFocusVisibleRef.current === false) {
		      setChildIsFocusVisible(false);
		      handleLeave(event);
		    }
		  };
		  const handleFocus = event => {
		    // Workaround for https://github.com/facebook/react/issues/7769
		    // The autoFocus of React might trigger the event before the componentDidMount.
		    // We need to account for this eventuality.
		    if (!childNode) {
		      setChildNode(event.currentTarget);
		    }
		    handleFocusVisible(event);
		    if (isFocusVisibleRef.current === true) {
		      setChildIsFocusVisible(true);
		      handleEnter(event);
		    }
		  };
		  const detectTouchStart = event => {
		    ignoreNonTouchEvents.current = true;
		    const childrenProps = children.props;
		    if (childrenProps.onTouchStart) {
		      childrenProps.onTouchStart(event);
		    }
		  };
		  const handleMouseOver = handleEnter;
		  const handleMouseLeave = handleLeave;
		  const handleTouchStart = event => {
		    detectTouchStart(event);
		    clearTimeout(leaveTimer.current);
		    clearTimeout(closeTimer.current);
		    stopTouchInteraction();
		    prevUserSelect.current = document.body.style.WebkitUserSelect;
		    // Prevent iOS text selection on long-tap.
		    document.body.style.WebkitUserSelect = 'none';
		    touchTimer.current = setTimeout(() => {
		      document.body.style.WebkitUserSelect = prevUserSelect.current;
		      handleEnter(event);
		    }, enterTouchDelay);
		  };
		  const handleTouchEnd = event => {
		    if (children.props.onTouchEnd) {
		      children.props.onTouchEnd(event);
		    }
		    stopTouchInteraction();
		    clearTimeout(leaveTimer.current);
		    leaveTimer.current = setTimeout(() => {
		      handleClose(event);
		    }, leaveTouchDelay);
		  };
		  React.useEffect(() => {
		    if (!open) {
		      return undefined;
		    }

		    /**
		     * @param {KeyboardEvent} nativeEvent
		     */
		    function handleKeyDown(nativeEvent) {
		      // IE11, Edge (prior to using Bink?) use 'Esc'
		      if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {
		        handleClose(nativeEvent);
		      }
		    }
		    document.addEventListener('keydown', handleKeyDown);
		    return () => {
		      document.removeEventListener('keydown', handleKeyDown);
		    };
		  }, [handleClose, open]);
		  const handleRef = (0, _useForkRef.default)(children.ref, focusVisibleRef, setChildNode, ref);

		  // There is no point in displaying an empty tooltip.
		  if (!title && title !== 0) {
		    open = false;
		  }
		  const positionRef = React.useRef({
		    x: 0,
		    y: 0
		  });
		  const popperRef = React.useRef();
		  const handleMouseMove = event => {
		    const childrenProps = children.props;
		    if (childrenProps.onMouseMove) {
		      childrenProps.onMouseMove(event);
		    }
		    positionRef.current = {
		      x: event.clientX,
		      y: event.clientY
		    };
		    if (popperRef.current) {
		      popperRef.current.update();
		    }
		  };
		  const nameOrDescProps = {};
		  const titleIsString = typeof title === 'string';
		  if (describeChild) {
		    nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
		    nameOrDescProps['aria-describedby'] = open ? id : null;
		  } else {
		    nameOrDescProps['aria-label'] = titleIsString ? title : null;
		    nameOrDescProps['aria-labelledby'] = open && !titleIsString ? id : null;
		  }
		  const childrenProps = (0, _extends2.default)({}, nameOrDescProps, other, children.props, {
		    className: (0, _clsx.default)(other.className, children.props.className),
		    onTouchStart: detectTouchStart,
		    ref: handleRef
		  }, followCursor ? {
		    onMouseMove: handleMouseMove
		  } : {});
		  {
		    childrenProps['data-mui-internal-clone-element'] = true;

		    // eslint-disable-next-line react-hooks/rules-of-hooks
		    React.useEffect(() => {
		      if (childNode && !childNode.getAttribute('data-mui-internal-clone-element')) {
		        console.error(['MUI: The `children` component of the Tooltip is not forwarding its props correctly.', 'Please make sure that props are spread on the same element that the ref is applied to.'].join('\n'));
		      }
		    }, [childNode]);
		  }
		  const interactiveWrapperListeners = {};
		  if (!disableTouchListener) {
		    childrenProps.onTouchStart = handleTouchStart;
		    childrenProps.onTouchEnd = handleTouchEnd;
		  }
		  if (!disableHoverListener) {
		    childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
		    childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
		    if (!disableInteractive) {
		      interactiveWrapperListeners.onMouseOver = handleMouseOver;
		      interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
		    }
		  }
		  if (!disableFocusListener) {
		    childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
		    childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);
		    if (!disableInteractive) {
		      interactiveWrapperListeners.onFocus = handleFocus;
		      interactiveWrapperListeners.onBlur = handleBlur;
		    }
		  }
		  {
		    if (children.props.title) {
		      console.error(['MUI: You have provided a `title` prop to the child of <Tooltip />.', `Remove this title prop \`${children.props.title}\` or the Tooltip component.`].join('\n'));
		    }
		  }
		  const popperOptions = React.useMemo(() => {
		    var _PopperProps$popperOp;
		    let tooltipModifiers = [{
		      name: 'arrow',
		      enabled: Boolean(arrowRef),
		      options: {
		        element: arrowRef,
		        padding: 4
		      }
		    }];
		    if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
		      tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
		    }
		    return (0, _extends2.default)({}, PopperProps.popperOptions, {
		      modifiers: tooltipModifiers
		    });
		  }, [arrowRef, PopperProps]);
		  const ownerState = (0, _extends2.default)({}, props, {
		    isRtl,
		    arrow,
		    disableInteractive,
		    placement,
		    PopperComponentProp,
		    touch: ignoreNonTouchEvents.current
		  });
		  const classes = useUtilityClasses(ownerState);
		  const PopperComponent = (_ref = (_slots$popper = slots.popper) != null ? _slots$popper : components.Popper) != null ? _ref : TooltipPopper;
		  const TransitionComponent = (_ref2 = (_ref3 = (_slots$transition = slots.transition) != null ? _slots$transition : components.Transition) != null ? _ref3 : TransitionComponentProp) != null ? _ref2 : _Grow.default;
		  const TooltipComponent = (_ref4 = (_slots$tooltip = slots.tooltip) != null ? _slots$tooltip : components.Tooltip) != null ? _ref4 : TooltipTooltip;
		  const ArrowComponent = (_ref5 = (_slots$arrow = slots.arrow) != null ? _slots$arrow : components.Arrow) != null ? _ref5 : TooltipArrow;
		  const popperProps = (0, _base.appendOwnerState)(PopperComponent, (0, _extends2.default)({}, PopperProps, (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper, {
		    className: (0, _clsx.default)(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_ref6 = (_slotProps$popper2 = slotProps.popper) != null ? _slotProps$popper2 : componentsProps.popper) == null ? void 0 : _ref6.className)
		  }), ownerState);
		  const transitionProps = (0, _base.appendOwnerState)(TransitionComponent, (0, _extends2.default)({}, TransitionProps, (_slotProps$transition = slotProps.transition) != null ? _slotProps$transition : componentsProps.transition), ownerState);
		  const tooltipProps = (0, _base.appendOwnerState)(TooltipComponent, (0, _extends2.default)({}, (_slotProps$tooltip = slotProps.tooltip) != null ? _slotProps$tooltip : componentsProps.tooltip, {
		    className: (0, _clsx.default)(classes.tooltip, (_ref7 = (_slotProps$tooltip2 = slotProps.tooltip) != null ? _slotProps$tooltip2 : componentsProps.tooltip) == null ? void 0 : _ref7.className)
		  }), ownerState);
		  const tooltipArrowProps = (0, _base.appendOwnerState)(ArrowComponent, (0, _extends2.default)({}, (_slotProps$arrow = slotProps.arrow) != null ? _slotProps$arrow : componentsProps.arrow, {
		    className: (0, _clsx.default)(classes.arrow, (_ref8 = (_slotProps$arrow2 = slotProps.arrow) != null ? _slotProps$arrow2 : componentsProps.arrow) == null ? void 0 : _ref8.className)
		  }), ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
		    children: [/*#__PURE__*/React.cloneElement(children, childrenProps), /*#__PURE__*/(0, _jsxRuntime.jsx)(PopperComponent, (0, _extends2.default)({
		      as: PopperComponentProp != null ? PopperComponentProp : _Popper.default,
		      placement: placement,
		      anchorEl: followCursor ? {
		        getBoundingClientRect: () => ({
		          top: positionRef.current.y,
		          left: positionRef.current.x,
		          right: positionRef.current.x,
		          bottom: positionRef.current.y,
		          width: 0,
		          height: 0
		        })
		      } : childNode,
		      popperRef: popperRef,
		      open: childNode ? open : false,
		      id: id,
		      transition: true
		    }, interactiveWrapperListeners, popperProps, {
		      popperOptions: popperOptions,
		      children: ({
		        TransitionProps: TransitionPropsInner
		      }) => /*#__PURE__*/(0, _jsxRuntime.jsx)(TransitionComponent, (0, _extends2.default)({
		        timeout: theme.transitions.duration.shorter
		      }, TransitionPropsInner, transitionProps, {
		        "data-foo": "bar",
		        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(TooltipComponent, (0, _extends2.default)({}, tooltipProps, {
		          children: [title, arrow ? /*#__PURE__*/(0, _jsxRuntime.jsx)(ArrowComponent, (0, _extends2.default)({}, tooltipArrowProps, {
		            ref: setArrowRef
		          })) : null]
		        }))
		      }))
		    }))]
		  });
		});
		Tooltip.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * If `true`, adds an arrow to the tooltip.
		   * @default false
		   */
		  arrow: _propTypes.default.bool,
		  /**
		   * Tooltip reference element.
		   */
		  children: _utils.elementAcceptingRef.isRequired,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The components used for each slot inside.
		   *
		   * This prop is an alias for the `slots` prop.
		   * It's recommended to use the `slots` prop instead.
		   *
		   * @default {}
		   */
		  components: _propTypes.default.shape({
		    Arrow: _propTypes.default.elementType,
		    Popper: _propTypes.default.elementType,
		    Tooltip: _propTypes.default.elementType,
		    Transition: _propTypes.default.elementType
		  }),
		  /**
		   * The extra props for the slot components.
		   * You can override the existing props or add new ones.
		   *
		   * This prop is an alias for the `slotProps` prop.
		   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
		   *
		   * @default {}
		   */
		  componentsProps: _propTypes.default.shape({
		    arrow: _propTypes.default.object,
		    popper: _propTypes.default.object,
		    tooltip: _propTypes.default.object,
		    transition: _propTypes.default.object
		  }),
		  /**
		   * Set to `true` if the `title` acts as an accessible description.
		   * By default the `title` acts as an accessible label for the child.
		   * @default false
		   */
		  describeChild: _propTypes.default.bool,
		  /**
		   * Do not respond to focus-visible events.
		   * @default false
		   */
		  disableFocusListener: _propTypes.default.bool,
		  /**
		   * Do not respond to hover events.
		   * @default false
		   */
		  disableHoverListener: _propTypes.default.bool,
		  /**
		   * Makes a tooltip not interactive, i.e. it will close when the user
		   * hovers over the tooltip before the `leaveDelay` is expired.
		   * @default false
		   */
		  disableInteractive: _propTypes.default.bool,
		  /**
		   * Do not respond to long press touch events.
		   * @default false
		   */
		  disableTouchListener: _propTypes.default.bool,
		  /**
		   * The number of milliseconds to wait before showing the tooltip.
		   * This prop won't impact the enter touch delay (`enterTouchDelay`).
		   * @default 100
		   */
		  enterDelay: _propTypes.default.number,
		  /**
		   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
		   * @default 0
		   */
		  enterNextDelay: _propTypes.default.number,
		  /**
		   * The number of milliseconds a user must touch the element before showing the tooltip.
		   * @default 700
		   */
		  enterTouchDelay: _propTypes.default.number,
		  /**
		   * If `true`, the tooltip follow the cursor over the wrapped element.
		   * @default false
		   */
		  followCursor: _propTypes.default.bool,
		  /**
		   * This prop is used to help implement the accessibility logic.
		   * If you don't provide this prop. It falls back to a randomly generated id.
		   */
		  id: _propTypes.default.string,
		  /**
		   * The number of milliseconds to wait before hiding the tooltip.
		   * This prop won't impact the leave touch delay (`leaveTouchDelay`).
		   * @default 0
		   */
		  leaveDelay: _propTypes.default.number,
		  /**
		   * The number of milliseconds after the user stops touching an element before hiding the tooltip.
		   * @default 1500
		   */
		  leaveTouchDelay: _propTypes.default.number,
		  /**
		   * Callback fired when the component requests to be closed.
		   *
		   * @param {React.SyntheticEvent} event The event source of the callback.
		   */
		  onClose: _propTypes.default.func,
		  /**
		   * Callback fired when the component requests to be open.
		   *
		   * @param {React.SyntheticEvent} event The event source of the callback.
		   */
		  onOpen: _propTypes.default.func,
		  /**
		   * If `true`, the component is shown.
		   */
		  open: _propTypes.default.bool,
		  /**
		   * Tooltip placement.
		   * @default 'bottom'
		   */
		  placement: _propTypes.default.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top']),
		  /**
		   * The component used for the popper.
		   * @default Popper
		   */
		  PopperComponent: _propTypes.default.elementType,
		  /**
		   * Props applied to the [`Popper`](/material-ui/api/popper/) element.
		   * @default {}
		   */
		  PopperProps: _propTypes.default.object,
		  /**
		   * The extra props for the slot components.
		   * You can override the existing props or add new ones.
		   *
		   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
		   *
		   * @default {}
		   */
		  slotProps: _propTypes.default.shape({
		    arrow: _propTypes.default.object,
		    popper: _propTypes.default.object,
		    tooltip: _propTypes.default.object,
		    transition: _propTypes.default.object
		  }),
		  /**
		   * The components used for each slot inside.
		   *
		   * This prop is an alias for the `components` prop, which will be deprecated in the future.
		   *
		   * @default {}
		   */
		  slots: _propTypes.default.shape({
		    arrow: _propTypes.default.elementType,
		    popper: _propTypes.default.elementType,
		    tooltip: _propTypes.default.elementType,
		    transition: _propTypes.default.elementType
		  }),
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
		   */
		  title: _propTypes.default.node,
		  /**
		   * The component used for the transition.
		   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
		   * @default Grow
		   */
		  TransitionComponent: _propTypes.default.elementType,
		  /**
		   * Props applied to the transition element.
		   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
		   */
		  TransitionProps: _propTypes.default.object
		} ;
		var _default = Tooltip;
		Tooltip$1.default = _default;
		return Tooltip$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  tooltipClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Tooltip.default;
		  }
		});
		Object.defineProperty(exports, "tooltipClasses", {
		  enumerable: true,
		  get: function () {
		    return _tooltipClasses.default;
		  }
		});
		var _Tooltip = _interopRequireDefault(requireTooltip());
		var _tooltipClasses = _interopRequireWildcard(requireTooltipClasses());
		Object.keys(_tooltipClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _tooltipClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _tooltipClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Tooltip$2));

	var Tooltip = /*@__PURE__*/getDefaultExportFromCjs(Tooltip$2);

	var ListSubheader$2 = {};

	var ListSubheader$1 = {};

	var listSubheaderClasses = {};

	var hasRequiredListSubheaderClasses;

	function requireListSubheaderClasses () {
		if (hasRequiredListSubheaderClasses) return listSubheaderClasses;
		hasRequiredListSubheaderClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(listSubheaderClasses, "__esModule", {
		  value: true
		});
		listSubheaderClasses.default = void 0;
		listSubheaderClasses.getListSubheaderUtilityClass = getListSubheaderUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getListSubheaderUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiListSubheader', slot);
		}
		const listSubheaderClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiListSubheader', ['root', 'colorPrimary', 'colorInherit', 'gutters', 'inset', 'sticky']);
		var _default = listSubheaderClasses$1;
		listSubheaderClasses.default = _default;
		return listSubheaderClasses;
	}

	var hasRequiredListSubheader;

	function requireListSubheader () {
		if (hasRequiredListSubheader) return ListSubheader$1;
		hasRequiredListSubheader = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(ListSubheader$1, "__esModule", {
		  value: true
		});
		ListSubheader$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _capitalize = _interopRequireDefault(requireCapitalize());
		var _listSubheaderClasses = requireListSubheaderClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    color,
		    disableGutters,
		    inset,
		    disableSticky
		  } = ownerState;
		  const slots = {
		    root: ['root', color !== 'default' && `color${(0, _capitalize.default)(color)}`, !disableGutters && 'gutters', inset && 'inset', !disableSticky && 'sticky']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _listSubheaderClasses.getListSubheaderUtilityClass, classes);
		};
		const ListSubheaderRoot = (0, _styled.default)('li', {
		  name: 'MuiListSubheader',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, ownerState.color !== 'default' && styles[`color${(0, _capitalize.default)(ownerState.color)}`], !ownerState.disableGutters && styles.gutters, ownerState.inset && styles.inset, !ownerState.disableSticky && styles.sticky];
		  }
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  boxSizing: 'border-box',
		  lineHeight: '48px',
		  listStyle: 'none',
		  color: (theme.vars || theme).palette.text.secondary,
		  fontFamily: theme.typography.fontFamily,
		  fontWeight: theme.typography.fontWeightMedium,
		  fontSize: theme.typography.pxToRem(14)
		}, ownerState.color === 'primary' && {
		  color: (theme.vars || theme).palette.primary.main
		}, ownerState.color === 'inherit' && {
		  color: 'inherit'
		}, !ownerState.disableGutters && {
		  paddingLeft: 16,
		  paddingRight: 16
		}, ownerState.inset && {
		  paddingLeft: 72
		}, !ownerState.disableSticky && {
		  position: 'sticky',
		  top: 0,
		  zIndex: 1,
		  backgroundColor: (theme.vars || theme).palette.background.paper
		}));
		const ListSubheader = /*#__PURE__*/React.forwardRef(function ListSubheader(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiListSubheader'
		  });
		  const {
		      className,
		      color = 'default',
		      component = 'li',
		      disableGutters = false,
		      disableSticky = false,
		      inset = false
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    color,
		    component,
		    disableGutters,
		    disableSticky,
		    inset
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(ListSubheaderRoot, (0, _extends2.default)({
		    as: component,
		    className: (0, _clsx.default)(classes.root, className),
		    ref: ref,
		    ownerState: ownerState
		  }, other));
		});
		ListSubheader.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The color of the component. It supports those theme colors that make sense for this component.
		   * @default 'default'
		   */
		  color: _propTypes.default.oneOf(['default', 'inherit', 'primary']),
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the List Subheader will not have gutters.
		   * @default false
		   */
		  disableGutters: _propTypes.default.bool,
		  /**
		   * If `true`, the List Subheader will not stick to the top during scroll.
		   * @default false
		   */
		  disableSticky: _propTypes.default.bool,
		  /**
		   * If `true`, the List Subheader is indented.
		   * @default false
		   */
		  inset: _propTypes.default.bool,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = ListSubheader;
		ListSubheader$1.default = _default;
		return ListSubheader$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  listSubheaderClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _ListSubheader.default;
		  }
		});
		Object.defineProperty(exports, "listSubheaderClasses", {
		  enumerable: true,
		  get: function () {
		    return _listSubheaderClasses.default;
		  }
		});
		var _ListSubheader = _interopRequireDefault(requireListSubheader());
		var _listSubheaderClasses = _interopRequireWildcard(requireListSubheaderClasses());
		Object.keys(_listSubheaderClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _listSubheaderClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _listSubheaderClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (ListSubheader$2));

	var ListSubheader = /*@__PURE__*/getDefaultExportFromCjs(ListSubheader$2);

	var Task = {};

	var _interopRequireDefault$d = interopRequireDefault.exports;
	Object.defineProperty(Task, "__esModule", {
	  value: true
	});
	var default_1$b = Task.default = void 0;
	var _createSvgIcon$b = _interopRequireDefault$d(requireCreateSvgIcon());
	var _jsxRuntime$c = requireJsxRuntime();
	var _default$e = (0, _createSvgIcon$b.default)( /*#__PURE__*/(0, _jsxRuntime$c.jsx)("path", {
	  d: "M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm-3.06 16L7.4 14.46l1.41-1.41 2.12 2.12 4.24-4.24 1.41 1.41L10.94 18zM13 9V3.5L18.5 9H13z"
	}), 'Task');
	default_1$b = Task.default = _default$e;

	var Delete = {};

	var _interopRequireDefault$c = interopRequireDefault.exports;
	Object.defineProperty(Delete, "__esModule", {
	  value: true
	});
	var default_1$a = Delete.default = void 0;
	var _createSvgIcon$a = _interopRequireDefault$c(requireCreateSvgIcon());
	var _jsxRuntime$b = requireJsxRuntime();
	var _default$d = (0, _createSvgIcon$a.default)( /*#__PURE__*/(0, _jsxRuntime$b.jsx)("path", {
	  d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
	}), 'Delete');
	default_1$a = Delete.default = _default$d;

	var Download = {};

	var _interopRequireDefault$b = interopRequireDefault.exports;
	Object.defineProperty(Download, "__esModule", {
	  value: true
	});
	var default_1$9 = Download.default = void 0;
	var _createSvgIcon$9 = _interopRequireDefault$b(requireCreateSvgIcon());
	var _jsxRuntime$a = requireJsxRuntime();
	var _default$c = (0, _createSvgIcon$9.default)( /*#__PURE__*/(0, _jsxRuntime$a.jsx)("path", {
	  d: "M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z"
	}), 'Download');
	default_1$9 = Download.default = _default$c;

	const BYTE_UNITS = [
		'B',
		'kB',
		'MB',
		'GB',
		'TB',
		'PB',
		'EB',
		'ZB',
		'YB',
	];

	const BIBYTE_UNITS = [
		'B',
		'kiB',
		'MiB',
		'GiB',
		'TiB',
		'PiB',
		'EiB',
		'ZiB',
		'YiB',
	];

	const BIT_UNITS = [
		'b',
		'kbit',
		'Mbit',
		'Gbit',
		'Tbit',
		'Pbit',
		'Ebit',
		'Zbit',
		'Ybit',
	];

	const BIBIT_UNITS = [
		'b',
		'kibit',
		'Mibit',
		'Gibit',
		'Tibit',
		'Pibit',
		'Eibit',
		'Zibit',
		'Yibit',
	];

	/*
	Formats the given number using `Number#toLocaleString`.
	- If locale is a string, the value is expected to be a locale-key (for example: `de`).
	- If locale is true, the system default locale is used for translation.
	- If no value for locale is specified, the number is returned unmodified.
	*/
	const toLocaleString = (number, locale, options) => {
		let result = number;
		if (typeof locale === 'string' || Array.isArray(locale)) {
			result = number.toLocaleString(locale, options);
		} else if (locale === true || options !== undefined) {
			result = number.toLocaleString(undefined, options);
		}

		return result;
	};

	function prettyBytes(number, options) {
		if (!Number.isFinite(number)) {
			throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);
		}

		options = {
			bits: false,
			binary: false,
			...options,
		};

		const UNITS = options.bits
			? (options.binary ? BIBIT_UNITS : BIT_UNITS)
			: (options.binary ? BIBYTE_UNITS : BYTE_UNITS);

		if (options.signed && number === 0) {
			return ` 0 ${UNITS[0]}`;
		}

		const isNegative = number < 0;
		const prefix = isNegative ? '-' : (options.signed ? '+' : '');

		if (isNegative) {
			number = -number;
		}

		let localeOptions;

		if (options.minimumFractionDigits !== undefined) {
			localeOptions = {minimumFractionDigits: options.minimumFractionDigits};
		}

		if (options.maximumFractionDigits !== undefined) {
			localeOptions = {maximumFractionDigits: options.maximumFractionDigits, ...localeOptions};
		}

		if (number < 1) {
			const numberString = toLocaleString(number, options.locale, localeOptions);
			return prefix + numberString + ' ' + UNITS[0];
		}

		const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);
		number /= (options.binary ? 1024 : 1000) ** exponent;

		if (!localeOptions) {
			number = number.toPrecision(3);
		}

		const numberString = toLocaleString(Number(number), options.locale, localeOptions);

		const unit = UNITS[exponent];

		return prefix + numberString + ' ' + unit;
	}

	var LockOpen = {};

	var _interopRequireDefault$a = interopRequireDefault.exports;
	Object.defineProperty(LockOpen, "__esModule", {
	  value: true
	});
	var default_1$8 = LockOpen.default = void 0;
	var _createSvgIcon$8 = _interopRequireDefault$a(requireCreateSvgIcon());
	var _jsxRuntime$9 = requireJsxRuntime();
	var _default$b = (0, _createSvgIcon$8.default)( /*#__PURE__*/(0, _jsxRuntime$9.jsx)("path", {
	  d: "M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z"
	}), 'LockOpen');
	default_1$8 = LockOpen.default = _default$b;

	const title$4 = /* @__PURE__ */ o$2(ListSubheader, { children: "Documents" });
	const fileIcon = /* @__PURE__ */ o$2(ListItemAvatar, { children: /* @__PURE__ */ o$2(Avatar, { children: /* @__PURE__ */ o$2(default_1$b, {}) }) });
	var List$1 = R(function({ list, handleDeleteDocument, handleDecryptDocument, handleDownloadDocument }) {
	  return /* @__PURE__ */ o$2(
	    List$2,
	    {
	      sx: {
	        height: "100%",
	        overflowY: "scroll"
	      },
	      subheader: title$4,
	      children: (list ?? []).map((document, key) => /* @__PURE__ */ o$2(
	        ListItem,
	        {
	          secondaryAction: /* @__PURE__ */ o$2(p$2, { children: [
	            /* @__PURE__ */ o$2(Tooltip, { title: "Delete", children: /* @__PURE__ */ o$2(IconButton, { onClick: () => handleDeleteDocument(document?.name), children: /* @__PURE__ */ o$2(default_1$a, {}) }) }),
	            /* @__PURE__ */ o$2(Tooltip, { title: "Remove editing restrictions", children: /* @__PURE__ */ o$2(IconButton, { onClick: () => handleDecryptDocument(document), children: /* @__PURE__ */ o$2(default_1$8, {}) }) }),
	            /* @__PURE__ */ o$2(Tooltip, { title: `Size: ${prettyBytes(document?.blob?.size ?? 0)}`, children: /* @__PURE__ */ o$2(IconButton, { onClick: () => handleDownloadDocument(document?.blob, document?.name), children: /* @__PURE__ */ o$2(default_1$9, {}) }) })
	          ] }),
	          children: [
	            fileIcon,
	            /* @__PURE__ */ o$2(
	              ListItemText,
	              {
	                primary: document?.name ?? "FileName",
	                secondary: document?.blob?.type ?? "FileType"
	              }
	            )
	          ]
	        },
	        document.name ?? key
	      ))
	    }
	  );
	}, (prevProps, nextProps) => prevProps.list === nextProps.list);

	var Popover$3 = {};

	var Popover$2 = {};

	var popoverClasses$1 = {};

	var _interopRequireDefault$9 = interopRequireDefault.exports;
	Object.defineProperty(popoverClasses$1, "__esModule", {
	  value: true
	});
	popoverClasses$1.default = void 0;
	popoverClasses$1.getPopoverUtilityClass = getPopoverUtilityClass;
	var _utils$1 = requireUtils$4();
	var _generateUtilityClass = _interopRequireDefault$9(requireGenerateUtilityClass());
	function getPopoverUtilityClass(slot) {
	  return (0, _generateUtilityClass.default)('MuiPopover', slot);
	}
	const popoverClasses = (0, _utils$1.unstable_generateUtilityClasses)('MuiPopover', ['root', 'paper']);
	var _default$a = popoverClasses;
	popoverClasses$1.default = _default$a;

	var _interopRequireDefault$8 = interopRequireDefault.exports;
	Object.defineProperty(Popover$2, "__esModule", {
	  value: true
	});
	Popover$2.default = void 0;
	Popover$2.getOffsetLeft = getOffsetLeft;
	Popover$2.getOffsetTop = getOffsetTop;
	var _extends2 = _interopRequireDefault$8(require_extends());
	var _objectWithoutPropertiesLoose2 = _interopRequireDefault$8(requireObjectWithoutPropertiesLoose());
	var React = _interopRequireWildcard(require$$3);
	var _propTypes = _interopRequireDefault$8(requirePropTypes$1());
	var _clsx = _interopRequireDefault$8(clsx$1.exports);
	var _base = requireNode$2();
	var _utils = requireUtils$4();
	var _styled = _interopRequireDefault$8(requireStyled());
	var _useThemeProps = _interopRequireDefault$8(requireUseThemeProps());
	var _debounce = _interopRequireDefault$8(requireDebounce());
	var _ownerDocument = _interopRequireDefault$8(requireOwnerDocument());
	var _ownerWindow = _interopRequireDefault$8(requireOwnerWindow());
	var _useForkRef = _interopRequireDefault$8(requireUseForkRef());
	var _Grow = _interopRequireDefault$8(requireGrow());
	var _Modal = _interopRequireDefault$8(requireModal());
	var _Paper = _interopRequireDefault$8(Paper$2);
	var _popoverClasses = popoverClasses$1;
	var _jsxRuntime$8 = requireJsxRuntime();
	const _excluded = ["onEntering"],
	  _excluded2 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];
	function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
	function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	function getOffsetTop(rect, vertical) {
	  let offset = 0;
	  if (typeof vertical === 'number') {
	    offset = vertical;
	  } else if (vertical === 'center') {
	    offset = rect.height / 2;
	  } else if (vertical === 'bottom') {
	    offset = rect.height;
	  }
	  return offset;
	}
	function getOffsetLeft(rect, horizontal) {
	  let offset = 0;
	  if (typeof horizontal === 'number') {
	    offset = horizontal;
	  } else if (horizontal === 'center') {
	    offset = rect.width / 2;
	  } else if (horizontal === 'right') {
	    offset = rect.width;
	  }
	  return offset;
	}
	function getTransformOriginValue(transformOrigin) {
	  return [transformOrigin.horizontal, transformOrigin.vertical].map(n => typeof n === 'number' ? `${n}px` : n).join(' ');
	}
	function resolveAnchorEl(anchorEl) {
	  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
	}
	const useUtilityClasses = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    paper: ['paper']
	  };
	  return (0, _base.unstable_composeClasses)(slots, _popoverClasses.getPopoverUtilityClass, classes);
	};
	const PopoverRoot = (0, _styled.default)(_Modal.default, {
	  name: 'MuiPopover',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const PopoverPaper = (0, _styled.default)(_Paper.default, {
	  name: 'MuiPopover',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})({
	  position: 'absolute',
	  overflowY: 'auto',
	  overflowX: 'hidden',
	  // So we see the popover when it's empty.
	  // It's most likely on issue on userland.
	  minWidth: 16,
	  minHeight: 16,
	  maxWidth: 'calc(100% - 32px)',
	  maxHeight: 'calc(100% - 32px)',
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	});
	const Popover$1 = /*#__PURE__*/React.forwardRef(function Popover(inProps, ref) {
	  const props = (0, _useThemeProps.default)({
	    props: inProps,
	    name: 'MuiPopover'
	  });
	  const {
	      action,
	      anchorEl,
	      anchorOrigin = {
	        vertical: 'top',
	        horizontal: 'left'
	      },
	      anchorPosition,
	      anchorReference = 'anchorEl',
	      children,
	      className,
	      container: containerProp,
	      elevation = 8,
	      marginThreshold = 16,
	      open,
	      PaperProps = {},
	      transformOrigin = {
	        vertical: 'top',
	        horizontal: 'left'
	      },
	      TransitionComponent = _Grow.default,
	      transitionDuration: transitionDurationProp = 'auto',
	      TransitionProps: {
	        onEntering
	      } = {}
	    } = props,
	    TransitionProps = (0, _objectWithoutPropertiesLoose2.default)(props.TransitionProps, _excluded),
	    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded2);
	  const paperRef = React.useRef();
	  const handlePaperRef = (0, _useForkRef.default)(paperRef, PaperProps.ref);
	  const ownerState = (0, _extends2.default)({}, props, {
	    anchorOrigin,
	    anchorReference,
	    elevation,
	    marginThreshold,
	    PaperProps,
	    transformOrigin,
	    TransitionComponent,
	    transitionDuration: transitionDurationProp,
	    TransitionProps
	  });
	  const classes = useUtilityClasses(ownerState);

	  // Returns the top/left offset of the position
	  // to attach to on the anchor element (or body if none is provided)
	  const getAnchorOffset = React.useCallback(() => {
	    if (anchorReference === 'anchorPosition') {
	      {
	        if (!anchorPosition) {
	          console.error('MUI: You need to provide a `anchorPosition` prop when using ' + '<Popover anchorReference="anchorPosition" />.');
	        }
	      }
	      return anchorPosition;
	    }
	    const resolvedAnchorEl = resolveAnchorEl(anchorEl);

	    // If an anchor element wasn't provided, just use the parent body element of this Popover
	    const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : (0, _ownerDocument.default)(paperRef.current).body;
	    const anchorRect = anchorElement.getBoundingClientRect();
	    {
	      const box = anchorElement.getBoundingClientRect();
	      if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	        console.warn(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	      }
	    }
	    return {
	      top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
	      left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
	    };
	  }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);

	  // Returns the base transform origin using the element
	  const getTransformOrigin = React.useCallback(elemRect => {
	    return {
	      vertical: getOffsetTop(elemRect, transformOrigin.vertical),
	      horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
	    };
	  }, [transformOrigin.horizontal, transformOrigin.vertical]);
	  const getPositioningStyle = React.useCallback(element => {
	    const elemRect = {
	      width: element.offsetWidth,
	      height: element.offsetHeight
	    };

	    // Get the transform origin point on the element itself
	    const elemTransformOrigin = getTransformOrigin(elemRect);
	    if (anchorReference === 'none') {
	      return {
	        top: null,
	        left: null,
	        transformOrigin: getTransformOriginValue(elemTransformOrigin)
	      };
	    }

	    // Get the offset of the anchoring element
	    const anchorOffset = getAnchorOffset();

	    // Calculate element positioning
	    let top = anchorOffset.top - elemTransformOrigin.vertical;
	    let left = anchorOffset.left - elemTransformOrigin.horizontal;
	    const bottom = top + elemRect.height;
	    const right = left + elemRect.width;

	    // Use the parent window of the anchorEl if provided
	    const containerWindow = (0, _ownerWindow.default)(resolveAnchorEl(anchorEl));

	    // Window thresholds taking required margin into account
	    const heightThreshold = containerWindow.innerHeight - marginThreshold;
	    const widthThreshold = containerWindow.innerWidth - marginThreshold;

	    // Check if the vertical axis needs shifting
	    if (top < marginThreshold) {
	      const diff = top - marginThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    } else if (bottom > heightThreshold) {
	      const diff = bottom - heightThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    }
	    {
	      if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
	        console.error(['MUI: The popover component is too tall.', `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, 'Please consider adding a `max-height` to improve the user-experience.'].join('\n'));
	      }
	    }

	    // Check if the horizontal axis needs shifting
	    if (left < marginThreshold) {
	      const diff = left - marginThreshold;
	      left -= diff;
	      elemTransformOrigin.horizontal += diff;
	    } else if (right > widthThreshold) {
	      const diff = right - widthThreshold;
	      left -= diff;
	      elemTransformOrigin.horizontal += diff;
	    }
	    return {
	      top: `${Math.round(top)}px`,
	      left: `${Math.round(left)}px`,
	      transformOrigin: getTransformOriginValue(elemTransformOrigin)
	    };
	  }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
	  const [isPositioned, setIsPositioned] = React.useState(open);
	  const setPositioningStyles = React.useCallback(() => {
	    const element = paperRef.current;
	    if (!element) {
	      return;
	    }
	    const positioning = getPositioningStyle(element);
	    if (positioning.top !== null) {
	      element.style.top = positioning.top;
	    }
	    if (positioning.left !== null) {
	      element.style.left = positioning.left;
	    }
	    element.style.transformOrigin = positioning.transformOrigin;
	    setIsPositioned(true);
	  }, [getPositioningStyle]);
	  const handleEntering = (element, isAppearing) => {
	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }
	    setPositioningStyles();
	  };
	  const handleExited = () => {
	    setIsPositioned(false);
	  };
	  React.useEffect(() => {
	    if (open) {
	      setPositioningStyles();
	    }
	  });
	  React.useImperativeHandle(action, () => open ? {
	    updatePosition: () => {
	      setPositioningStyles();
	    }
	  } : null, [open, setPositioningStyles]);
	  React.useEffect(() => {
	    if (!open) {
	      return undefined;
	    }
	    const handleResize = (0, _debounce.default)(() => {
	      setPositioningStyles();
	    });
	    const containerWindow = (0, _ownerWindow.default)(anchorEl);
	    containerWindow.addEventListener('resize', handleResize);
	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	    };
	  }, [anchorEl, open, setPositioningStyles]);
	  let transitionDuration = transitionDurationProp;
	  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
	    transitionDuration = undefined;
	  }

	  // If the container prop is provided, use that
	  // If the anchorEl prop is provided, use its parent body element as the container
	  // If neither are provided let the Modal take care of choosing the container
	  const container = containerProp || (anchorEl ? (0, _ownerDocument.default)(resolveAnchorEl(anchorEl)).body : undefined);
	  return /*#__PURE__*/(0, _jsxRuntime$8.jsx)(PopoverRoot, (0, _extends2.default)({
	    BackdropProps: {
	      invisible: true
	    },
	    className: (0, _clsx.default)(classes.root, className),
	    container: container,
	    open: open,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/(0, _jsxRuntime$8.jsx)(TransitionComponent, (0, _extends2.default)({
	      appear: true,
	      in: open,
	      onEntering: handleEntering,
	      onExited: handleExited,
	      timeout: transitionDuration
	    }, TransitionProps, {
	      children: /*#__PURE__*/(0, _jsxRuntime$8.jsx)(PopoverPaper, (0, _extends2.default)({
	        elevation: elevation
	      }, PaperProps, {
	        ref: handlePaperRef,
	        className: (0, _clsx.default)(classes.paper, PaperProps.className)
	      }, isPositioned ? undefined : {
	        style: (0, _extends2.default)({}, PaperProps.style, {
	          opacity: 0
	        })
	      }, {
	        ownerState: ownerState,
	        children: children
	      }))
	    }))
	  }));
	});
	Popover$1.propTypes /* remove-proptypes */ = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------
	  /**
	   * A ref for imperative actions.
	   * It currently only supports updatePosition() action.
	   */
	  action: _utils.refType,
	  /**
	   * An HTML element, or a function that returns one.
	   * It's used to set the position of the popover.
	   */
	  anchorEl: (0, _utils.chainPropTypes)(_propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.func]), props => {
	    if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {
	      const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
	      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
	        const box = resolvedAnchorEl.getBoundingClientRect();
	        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	          return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	        }
	      } else {
	        return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', `It should be an Element instance but it's \`${resolvedAnchorEl}\` instead.`].join('\n'));
	      }
	    }
	    return null;
	  }),
	  /**
	   * This is the point on the anchor where the popover's
	   * `anchorEl` will attach to. This is not used when the
	   * anchorReference is 'anchorPosition'.
	   *
	   * Options:
	   * vertical: [top, center, bottom];
	   * horizontal: [left, center, right].
	   * @default {
	   *   vertical: 'top',
	   *   horizontal: 'left',
	   * }
	   */
	  anchorOrigin: _propTypes.default.shape({
	    horizontal: _propTypes.default.oneOfType([_propTypes.default.oneOf(['center', 'left', 'right']), _propTypes.default.number]).isRequired,
	    vertical: _propTypes.default.oneOfType([_propTypes.default.oneOf(['bottom', 'center', 'top']), _propTypes.default.number]).isRequired
	  }),
	  /**
	   * This is the position that may be used to set the position of the popover.
	   * The coordinates are relative to the application's client area.
	   */
	  anchorPosition: _propTypes.default.shape({
	    left: _propTypes.default.number.isRequired,
	    top: _propTypes.default.number.isRequired
	  }),
	  /**
	   * This determines which anchor prop to refer to when setting
	   * the position of the popover.
	   * @default 'anchorEl'
	   */
	  anchorReference: _propTypes.default.oneOf(['anchorEl', 'anchorPosition', 'none']),
	  /**
	   * The content of the component.
	   */
	  children: _propTypes.default.node,
	  /**
	   * Override or extend the styles applied to the component.
	   */
	  classes: _propTypes.default.object,
	  /**
	   * @ignore
	   */
	  className: _propTypes.default.string,
	  /**
	   * An HTML element, component instance, or function that returns either.
	   * The `container` will passed to the Modal component.
	   *
	   * By default, it uses the body of the anchorEl's top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_utils.HTMLElementType, _propTypes.default.func]),
	  /**
	   * The elevation of the popover.
	   * @default 8
	   */
	  elevation: _utils.integerPropType,
	  /**
	   * Specifies how close to the edge of the window the popover can appear.
	   * @default 16
	   */
	  marginThreshold: _propTypes.default.number,
	  /**
	   * Callback fired when the component requests to be closed.
	   * The `reason` parameter can optionally be used to control the response to `onClose`.
	   */
	  onClose: _propTypes.default.func,
	  /**
	   * If `true`, the component is shown.
	   */
	  open: _propTypes.default.bool.isRequired,
	  /**
	   * Props applied to the [`Paper`](/material-ui/api/paper/) element.
	   * @default {}
	   */
	  PaperProps: _propTypes.default /* @typescript-to-proptypes-ignore */.shape({
	    component: _utils.elementTypeAcceptingRef
	  }),
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
	  /**
	   * This is the point on the popover which
	   * will attach to the anchor's origin.
	   *
	   * Options:
	   * vertical: [top, center, bottom, x(px)];
	   * horizontal: [left, center, right, x(px)].
	   * @default {
	   *   vertical: 'top',
	   *   horizontal: 'left',
	   * }
	   */
	  transformOrigin: _propTypes.default.shape({
	    horizontal: _propTypes.default.oneOfType([_propTypes.default.oneOf(['center', 'left', 'right']), _propTypes.default.number]).isRequired,
	    vertical: _propTypes.default.oneOfType([_propTypes.default.oneOf(['bottom', 'center', 'top']), _propTypes.default.number]).isRequired
	  }),
	  /**
	   * The component used for the transition.
	   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   * @default Grow
	   */
	  TransitionComponent: _propTypes.default.elementType,
	  /**
	   * Set to 'auto' to automatically calculate transition time based on height.
	   * @default 'auto'
	   */
	  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.oneOf(['auto']), _propTypes.default.number, _propTypes.default.shape({
	    appear: _propTypes.default.number,
	    enter: _propTypes.default.number,
	    exit: _propTypes.default.number
	  })]),
	  /**
	   * Props applied to the transition element.
	   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
	   * @default {}
	   */
	  TransitionProps: _propTypes.default.object
	} ;
	var _default$9 = Popover$1;
	Popover$2.default = _default$9;

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  popoverClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Popover.default;
		  }
		});
		Object.defineProperty(exports, "popoverClasses", {
		  enumerable: true,
		  get: function () {
		    return _popoverClasses.default;
		  }
		});
		var _Popover = _interopRequireWildcard(Popover$2);
		Object.keys(_Popover).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _Popover[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _Popover[key];
		    }
		  });
		});
		var _popoverClasses = _interopRequireWildcard(popoverClasses$1);
		Object.keys(_popoverClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _popoverClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _popoverClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Popover$3));

	var Popover = /*@__PURE__*/getDefaultExportFromCjs(Popover$3);

	var Help = {};

	var _interopRequireDefault$7 = interopRequireDefault.exports;
	Object.defineProperty(Help, "__esModule", {
	  value: true
	});
	var default_1$7 = Help.default = void 0;
	var _createSvgIcon$7 = _interopRequireDefault$7(requireCreateSvgIcon());
	var _jsxRuntime$7 = requireJsxRuntime();
	var _default$8 = (0, _createSvgIcon$7.default)( /*#__PURE__*/(0, _jsxRuntime$7.jsx)("path", {
	  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"
	}), 'Help');
	default_1$7 = Help.default = _default$8;

	var jszip_min = {exports: {}};

	/*!

	JSZip v3.10.1 - A JavaScript class for generating and reading zip files
	<http://stuartk.com/jszip>

	(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
	Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

	JSZip uses the library pako released under the MIT license :
	https://github.com/nodeca/pako/blob/main/LICENSE
	*/

	(function (module, exports) {
		!function(e){module.exports=e();}(function(){return function s(a,o,h){function u(r,e){if(!o[r]){if(!a[r]){var t="function"==typeof commonjsRequire&&commonjsRequire;if(!e&&t)return t(r,!0);if(l)return l(r,!0);var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[r]={exports:{}};a[r][0].call(i.exports,function(e){var t=a[r][1][e];return u(t||e)},i,i.exports,s,a,o,h);}return o[r].exports}for(var l="function"==typeof commonjsRequire&&commonjsRequire,e=0;e<h.length;e++)u(h[e]);return u}({1:[function(e,t,r){var d=e("./utils"),c=e("./support"),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,n,i,s,a,o,h=[],u=0,l=e.length,f=l,c="string"!==d.getTypeOf(e);u<e.length;)f=l-u,n=c?(t=e[u++],r=u<l?e[u++]:0,u<l?e[u++]:0):(t=e.charCodeAt(u++),r=u<l?e.charCodeAt(u++):0,u<l?e.charCodeAt(u++):0),i=t>>2,s=(3&t)<<4|r>>4,a=1<f?(15&r)<<2|n>>6:64,o=2<f?63&n:64,h.push(p.charAt(i)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join("")},r.decode=function(e){var t,r,n,i,s,a,o=0,h=0,u="data:";if(e.substr(0,u.length)===u)throw new Error("Invalid base64 input, it looks like a data url.");var l,f=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&f--,e.charAt(e.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(l=c.uint8array?new Uint8Array(0|f):new Array(0|f);o<e.length;)t=p.indexOf(e.charAt(o++))<<2|(i=p.indexOf(e.charAt(o++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(o++)))>>2,n=(3&s)<<6|(a=p.indexOf(e.charAt(o++))),l[h++]=t,64!==s&&(l[h++]=r),64!==a&&(l[h++]=n);return l};},{"./support":30,"./utils":32}],2:[function(e,t,r){var n=e("./external"),i=e("./stream/DataWorker"),s=e("./stream/Crc32Probe"),a=e("./stream/DataLengthProbe");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i;}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),t=this;return e.on("end",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression",t)},t.exports=o;},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate");},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){var n=e("./utils");var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e;}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return -1^e}(0|t,e,e.length,0):function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t.charCodeAt(a))];return -1^e}(0|t,e,e.length,0):0};},{"./utils":32}],5:[function(e,t,r){r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null;},{}],6:[function(e,t,r){var n=null;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n};},{lie:37}],7:[function(e,t,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=e("pako"),s=e("./utils"),a=e("./stream/GenericWorker"),o=n?"uint8array":"array";function h(e,t){a.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={};}r.magic="\b\0",s.inherits(h,a),h.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1);},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0);},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null;},h.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta});};},r.compressWorker=function(e){return new h("Deflate",e)},r.uncompressWorker=function(){return new h("Inflate",{})};},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){function A(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function n(e,t,r,n,i,s){var a,o,h=e.file,u=e.compression,l=s!==O.utf8encode,f=I.transformTo("string",s(h.name)),c=I.transformTo("string",O.utf8encode(h.name)),d=h.comment,p=I.transformTo("string",s(d)),m=I.transformTo("string",O.utf8encode(d)),_=c.length!==h.name.length,g=m.length!==d.length,b="",v="",y="",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),"UNIX"===i?(C=798,z|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(e){return 63&(e||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+c,b+="up"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+="uc"+A(y.length,2)+y);var E="";return E+="\n\0",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+"\0\0\0\0"+A(z,4)+A(n,4)+f+b+p}}var I=e("../utils"),i=e("../stream/GenericWorker"),O=e("../utf8"),B=e("../crc32"),R=e("../signature");function s(e,t,r,n){i.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[];}I.inherits(s,i),s.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,i.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}));},s.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=n(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}});}else this.accumulate=!0;},s.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=n(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return R.DATA_DESCRIPTOR+A(e.crc32,4)+A(e.compressedSize,4)+A(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null;},s.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,n=function(e,t,r,n,i){var s=I.transformTo("string",i(n));return R.CENTRAL_DIRECTORY_END+"\0\0\0\0"+A(e,2)+A(e,2)+A(t,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:n,meta:{percent:100}});},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume();},s.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",function(e){t.processChunk(e);}),e.on("end",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end();}),e.on("error",function(e){t.error(e);}),this},s.prototype.resume=function(){return !!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(e){var t=this._sources;if(!i.prototype.error.call(this,e))return !1;for(var r=0;r<t.length;r++)try{t[r].error(e);}catch(e){}return !0},s.prototype.lock=function(){i.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock();},t.exports=s;},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){var u=e("../compressions"),n=e("./ZipFileWorker");r.generateWorker=function(e,a,t){var o=new n(a.streamFiles,t,a.platform,a.encodeFileName),h=0;try{e.forEach(function(e,t){h++;var r=function(e,t){var r=e||t,n=u[r];if(!n)throw new Error(r+" is not a valid compression method !");return n}(t.options.compression,a.compression),n=t.options.compressionOptions||a.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo("file",{name:e,dir:i,date:s,comment:t.comment||"",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(o);}),o.entriesCount=h;}catch(e){o.error(e);}return o};},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e};}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.10.1",n.loadAsync=function(e,t){return (new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n;},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){var u=e("./utils"),i=e("./external"),n=e("./utf8"),s=e("./zipEntries"),a=e("./stream/Crc32Probe"),l=e("./nodejsUtils");function f(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new a);r.on("error",function(e){t(e);}).on("end",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error("Corrupted zip : CRC32 mismatch")):e();}).resume();})}t.exports=function(e,o){var h=this;return o=u.extend(o||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:n.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):u.prepareContent("the loaded zip file",e,!0,o.optimizedBinaryString,o.base64).then(function(e){var t=new s(o);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(o.checkCRC32)for(var n=0;n<r.length;n++)t.push(f(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n],s=i.fileNameStr,a=u.resolve(i.fileNameStr);h.file(a,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:o.createFolders}),i.dir||(h.file(a).unsafeOriginalName=s);}return t.zipComment.length&&(h.comment=t.zipComment),h})};},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){var n=e("../utils"),i=e("../stream/GenericWorker");function s(e,t){i.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t);}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",function(e){t.push({data:e,meta:{percent:0}});}).on("error",function(e){t.isPaused?this.generatedError=e:t.error(e);}).on("end",function(){t.isPaused?t._upstreamEnded=!0:t.end();});},s.prototype.pause=function(){return !!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return !!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s;},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){var i=e("readable-stream").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on("data",function(e,t){n.push(e)||n._helper.pause(),r&&r(t);}).on("error",function(e){n.emit("error",e);}).on("end",function(){n.push(null);});}e("../utils").inherits(n,i),n.prototype._read=function(){this._helper.resume();},t.exports=n;},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}};},{}],15:[function(e,t,r){function s(e,t,r){var n,i=u.getTypeOf(t),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=g(e)),s.createFolders&&(n=_(e))&&b.call(this,n,!0);var a="string"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t="",s.compression="STORE",i="string");var o=null;o=t instanceof c||t instanceof l?t:p.isNode&&p.isStream(t)?new m(e,t):u.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var h=new d(e,o,s);this.files[e]=h;}var i=e("./utf8"),u=e("./utils"),l=e("./stream/GenericWorker"),a=e("./stream/StreamHelper"),f=e("./defaults"),c=e("./compressedObject"),d=e("./zipObject"),o=e("./generate"),p=e("./nodejsUtils"),m=e("./nodejs/NodejsStreamInputAdapter"),_=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},g=function(e){return "/"!==e.slice(-1)&&(e+="/"),e},b=function(e,t){return t=void 0!==t?t:f.createFolders,e=g(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function h(e){return "[object RegExp]"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n);},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t);}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(h(e)){var n=e;return this.filter(function(e,t){return !t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=b.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||("/"!==r.slice(-1)&&(r+="/"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=u.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");u.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=o.generateWorker(this,r,n);}catch(e){(t=new l("error")).error(e);}return new a(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return (e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n;},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){t.exports=e("stream");},{stream:void 0}],17:[function(e,t,r){var n=e("./DataReader");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t];}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return -1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return [];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){var n=e("../utils");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0;}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e);},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e;},skip:function(e){this.setIndex(this.index+e);},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i;},{"../utils":32}],19:[function(e,t,r){var n=e("./Uint8ArrayReader");function i(e){n.call(this,e);}e("../utils").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){var n=e("./DataReader");function i(e){n.call(this,e);}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){var n=e("./ArrayReader");function i(e){n.call(this,e);}e("../utils").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i;},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){var n=e("../utils"),i=e("../support"),s=e("./ArrayReader"),a=e("./StringReader"),o=e("./NodeBufferReader"),h=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||i.uint8array?"nodebuffer"===t?new o(e):i.uint8array?new h(n.transformTo("uint8array",e)):new s(n.transformTo("array",e)):new a(e)};},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b";},{}],24:[function(e,t,r){var n=e("./GenericWorker"),i=e("../utils");function s(e){n.call(this,"ConvertWorker to "+e),this.destType=e;}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta});},t.exports=s;},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){var n=e("./GenericWorker"),i=e("../crc32");function s(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0);}e("../utils").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e);},t.exports=s;},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0);}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length;}i.prototype.processChunk.call(this,e);},t.exports=s;},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat();},function(e){t.error(e);});}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null;},s.prototype.resume=function(){return !!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0));},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return !1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t);}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s;},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null;}n.prototype={push:function(e){this.emit("data",e);},end:function(){if(this.isFinished)return !1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0;}catch(e){this.emit("error",e);}return !0},error:function(e){return !this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[];},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t);},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",function(e){t.processChunk(e);}),e.on("end",function(){t.end();}),e.on("error",function(e){t.error(e);}),this},pause:function(){return !this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return !1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e);},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e]);},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock();},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n;},{}],29:[function(e,t,r){var h=e("../utils"),i=e("./ConvertWorker"),s=e("./GenericWorker"),u=e("../base64"),n=e("../support"),a=e("../external"),o=null;if(n.nodestream)try{o=e("../nodejs/NodejsStreamOutputAdapter");}catch(e){}function l(e,o){return new a.Promise(function(t,r){var n=[],i=e._internalType,s=e._outputType,a=e._mimeType;e.on("data",function(e,t){n.push(e),o&&o(t);}).on("error",function(e){n=[],r(e);}).on("end",function(){try{var e=function(e,t,r){switch(e){case"blob":return h.newBlob(h.transformTo("arraybuffer",t),r);case"base64":return u.encode(t);default:return h.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(i,n),a);t(e);}catch(e){r(e);}n=[];}).resume();})}function f(e,t,r){var n=t;switch(t){case"blob":case"arraybuffer":n="uint8array";break;case"base64":n="string";}try{this._internalType=n,this._outputType=t,this._mimeType=r,h.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock();}catch(e){this._worker=new s("error"),this._worker.error(e);}}f.prototype={accumulate:function(e){return l(this,e)},on:function(e,t){var r=this;return "data"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta);}):this._worker.on(e,function(){h.delay(t,arguments,r);}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(h.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new o(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=f;},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else {var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size;}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob("application/zip").size;}catch(e){r.blob=!1;}}}try{r.nodestream=!!e("readable-stream").Readable;}catch(e){r.nodestream=!1;}},{"readable-stream":16}],31:[function(e,t,s){for(var o=e("./utils"),h=e("./support"),r=e("./nodejsUtils"),n=e("./stream/GenericWorker"),u=new Array(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;u[254]=u[254]=1;function a(){n.call(this,"utf-8 decode"),this.leftOver=null;}function l(){n.call(this,"utf-8 encode");}s.utf8encode=function(e){return h.nodebuffer?r.newBufferFrom(e,"utf-8"):function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=h.uint8array?new Uint8Array(o):new Array(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return h.nodebuffer?o.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,n,i,s=e.length,a=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)a[r++]=n;else if(4<(i=u[n]))a[r++]=65533,t+=i-1;else {for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?a[r++]=65533:n<65536?a[r++]=n:(n-=65536,a[r++]=55296|n>>10&1023,a[r++]=56320|1023&n);}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(e=o.transformTo(h.uint8array?"uint8array":"array",e))},o.inherits(a,n),a.prototype.processChunk=function(e){var t=o.transformTo(h.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length);}else t=this.leftOver.concat(t);this.leftOver=null;}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}(t),i=t;n!==t.length&&(h.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta});},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null);},s.Utf8DecodeWorker=a,o.inherits(l,n),l.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta});},s.Utf8EncodeWorker=l;},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,a){var o=e("./support"),h=e("./base64"),r=e("./nodejsUtils"),u=e("./external");function n(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e("setimmediate"),a.newBlob=function(t,r){a.checkSupport("blob");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var i={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return !1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return !1}}()}};function s(e){var t=65536,r=a.getTypeOf(e),n=!0;if("uint8array"===r?n=i.applyCanBeUsed.uint8array:"nodebuffer"===r&&(n=i.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return i.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2);}return i.stringifyByChar(e)}function f(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}a.applyFromCharCode=s;var c={};c.string={string:n,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,r.allocBuffer(e.length))}},c.array={string:s,array:n,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return s(new Uint8Array(e))},array:function(e){return f(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:n,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:n,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return f(e,new Uint8Array(e.length))},nodebuffer:n},a.transformTo=function(e,t){if(t=t||"",!e)return t;a.checkSupport(e);var r=a.getTypeOf(t);return c[r][e](t)},a.resolve=function(e){for(var t=e.split("/"),r=[],n=0;n<t.length;n++){var i=t[n];"."===i||""===i&&0!==n&&n!==t.length-1||(".."===i?r.pop():r.push(i));}return r.join("/")},a.getTypeOf=function(e){return "string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":o.nodebuffer&&r.isBuffer(e)?"nodebuffer":o.uint8array&&e instanceof Uint8Array?"uint8array":o.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},a.checkSupport=function(e){if(!o[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},a.delay=function(e,t,r){setImmediate(function(){e.apply(r||null,t||[]);});},a.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r;},a.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},a.prepareContent=function(r,e,n,i,s){return u.Promise.resolve(e).then(function(n){return o.blob&&(n instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(n)))&&"undefined"!=typeof FileReader?new u.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result);},e.onerror=function(e){r(e.target.error);},e.readAsArrayBuffer(n);}):n}).then(function(e){var t=a.getTypeOf(e);return t?("arraybuffer"===t?e=a.transformTo("uint8array",e):"string"===t&&(s?e=h.decode(e):n&&!0!==i&&(e=function(e){return l(e,o.uint8array?new Uint8Array(e.length):new Array(e.length))}(e))),e):u.Promise.reject(new Error("Can't read the data of '"+r+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})};},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,r){var n=e("./reader/readerFor"),i=e("./utils"),s=e("./signature"),a=e("./zipEntry"),o=e("./support");function h(e){this.files=[],this.loadOptions=e;}h.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(t)+", expected "+i.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?"uint8array":"array",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r);},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r};},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes();},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw !this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html"):new Error("Corrupted zip: can't find end of central directory");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral();}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e);},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles();}},t.exports=h;},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){var n=e("./reader/readerFor"),s=e("./utils"),i=e("./compressedObject"),a=e("./crc32"),o=e("./utf8"),h=e("./compressions"),u=e("./support");function l(e,t){this.options=e,this.loadOptions=t;}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in h)if(Object.prototype.hasOwnProperty.call(h,t)&&h[t].magic===e)return h[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize));},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength);},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0);},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4));}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i);},handleUTF8:function(){var e=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else {var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else {var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r);}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else {var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i);}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=l;},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions};}var s=e("./stream/StreamHelper"),i=e("./stream/DataWorker"),a=e("./utf8"),o=e("./compressedObject"),h=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new a.Utf8DecodeWorker));}catch(e){(t=new h("error")).error(e);}return new s(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new i(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},f=0;f<u.length;f++)n.prototype[u[f]]=l;t.exports=n;},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,l,t){(function(t){var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(u),a=t.document.createTextNode("");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2;};}else if(t.setImmediate||void 0===t.MessageChannel)r="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){u(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null;},t.document.documentElement.appendChild(e);}:function(){setTimeout(u,0);};else {var o=new t.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0);};}var h=[];function u(){var e,t;n=!0;for(var r=h.length;r;){for(t=h,h=[],e=-1;++e<r;)t[e]();r=h.length;}n=!1;}l.exports=function(e){1!==h.push(e)||n||r();};}).call(this,"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],37:[function(e,t,r){var i=e("immediate");function u(){}var l={},s=["REJECTED"],a=["FULFILLED"],n=["PENDING"];function o(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=n,this.queue=[],this.outcome=void 0,e!==u&&d(this,e);}function h(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected);}function f(t,r,n){i(function(){var e;try{e=r(n);}catch(e){return l.reject(t,e)}e===t?l.reject(t,new TypeError("Cannot resolve promise with itself")):l.resolve(t,e);});}function c(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments);}}function d(t,e){var r=!1;function n(e){r||(r=!0,l.reject(t,e));}function i(e){r||(r=!0,l.resolve(t,e));}var s=p(function(){e(i,n);});"error"===s.status&&n(s.value);}function p(e,t){var r={};try{r.value=e(t),r.status="success";}catch(e){r.status="error",r.value=e;}return r}(t.exports=o).prototype.finally=function(t){if("function"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===s)return this;var r=new this.constructor(u);this.state!==n?f(r,this.state===a?e:t,this.outcome):this.queue.push(new h(r,e,t));return r},h.prototype.callFulfilled=function(e){l.resolve(this.promise,e);},h.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e);},h.prototype.callRejected=function(e){l.reject(this.promise,e);},h.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e);},l.resolve=function(e,t){var r=p(c,t);if("error"===r.status)return l.reject(e,r.value);var n=r.value;if(n)d(e,n);else {e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t);}return e},l.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},o.resolve=function(e){if(e instanceof this)return e;return l.resolve(new this(u),e)},o.reject=function(e){var t=new this(u);return l.reject(t,e)},o.all=function(e){var r=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,i=!1;if(!n)return this.resolve([]);var s=new Array(n),a=0,t=-1,o=new this(u);for(;++t<n;)h(e[t],t);return o;function h(e,t){r.resolve(e).then(function(e){s[t]=e,++a!==n||i||(i=!0,l.resolve(o,s));},function(e){i||(i=!0,l.reject(o,e));});}},o.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,n=!1;if(!r)return this.resolve([]);var i=-1,s=new this(u);for(;++i<r;)a=e[i],t.resolve(a).then(function(e){n||(n=!0,l.resolve(s,e));},function(e){n||(n=!0,l.reject(s,e));});var a;return s};},{immediate:36}],38:[function(e,t,r){var n={};(0, e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n;},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){var a=e("./zlib/deflate"),o=e("./utils/common"),h=e("./utils/strings"),i=e("./zlib/messages"),s=e("./zlib/zstream"),u=Object.prototype.toString,l=0,f=-1,c=0,d=8;function p(e){if(!(this instanceof p))return new p(e);this.options=o.assign({level:f,method:d,chunkSize:16384,windowBits:15,memLevel:8,strategy:c,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==l)throw new Error(i[r]);if(t.header&&a.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n="string"==typeof t.dictionary?h.string2buf(t.dictionary):"[object ArrayBuffer]"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=a.deflateSetDictionary(this.strm,n))!==l)throw new Error(i[r]);this._dict_set=!0;}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return !1;n=t===~~t?t:!0===t?4:0,"string"==typeof e?i.input=h.string2buf(e):"[object ArrayBuffer]"===u.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=a.deflate(i,n))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||("string"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(i.output,i.next_out))):this.onData(o.shrinkBuf(i.output,i.next_out)));}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==n||(this.onEnd(l),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e);},p.prototype.onEnd=function(e){e===l&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg;},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return (t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return (t=t||{}).gzip=!0,n(e,t)};},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){var c=e("./zlib/inflate"),d=e("./utils/common"),p=e("./utils/strings"),m=e("./zlib/constants"),n=e("./zlib/messages"),i=e("./zlib/zstream"),s=e("./zlib/gzheader"),_=Object.prototype.toString;function a(e){if(!(this instanceof a))return new a(e);this.options=d.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=c.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,c.inflateGetHeader(this.strm,this.header);}function o(e,t){var r=new a(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}a.prototype.push=function(e,t){var r,n,i,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return !1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,"string"==typeof e?h.input=p.binstring2buf(e):"[object ArrayBuffer]"===_.call(e)?h.input=new Uint8Array(e):h.input=e,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new d.Buf8(u),h.next_out=0,h.avail_out=u),(r=c.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o="string"==typeof l?p.string2buf(l):"[object ArrayBuffer]"===_.call(l)?new Uint8Array(l):l,r=c.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||("string"===this.options.to?(i=p.utf8border(h.output,h.next_out),s=h.next_out-i,a=p.buf2string(h.output,i),h.next_out=s,h.avail_out=u-s,s&&d.arraySet(h.output,h.output,i,s,0),this.onData(a)):this.onData(d.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0);}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=c.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(e){this.chunks.push(e);},a.prototype.onEnd=function(e){e===m.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=d.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg;},r.Inflate=a,r.inflate=o,r.inflateRaw=function(e,t){return (t=t||{}).raw=!0,o(e,t)},r.ungzip=o;},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n]);}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s];},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s];},flattenChunks:function(e){return [].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s));},r.setTyped(n);},{}],42:[function(e,t,r){var h=e("./common"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0]);}catch(e){i=!1;}try{String.fromCharCode.apply(null,new Uint8Array(1));}catch(e){s=!1;}for(var u=new h.Buf8(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function l(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,h.shrinkBuf(e,t));for(var r="",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}u[254]=u[254]=1,r.string2buf=function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=new h.Buf8(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return l(e,e.length)},r.binstring2buf=function(e){for(var t=new h.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,a=t||e.length,o=new Array(2*a);for(r=n=0;r<a;)if((i=e[r++])<128)o[n++]=i;else if(4<(s=u[i]))o[n++]=65533,r+=s-1;else {for(i&=2===s?31:3===s?15:7;1<s&&r<a;)i=i<<6|63&e[r++],s--;1<s?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i);}return l(o,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t};},{"./common":41}],43:[function(e,t,r){t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521;}return i|s<<16|0};},{}],44:[function(e,t,r){t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};},{}],45:[function(e,t,r){var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e;}return t}();t.exports=function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return -1^e};},{}],46:[function(e,t,r){var h,c=e("../utils/common"),u=e("./trees"),d=e("./adler32"),p=e("./crc32"),n=e("./messages"),l=0,f=4,m=0,_=-2,g=-1,b=4,i=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(e,t){return e.msg=n[t],t}function T(e){return (e<<1)-(4<e?9:0)}function D(e){for(var t=e.length;0<=--t;)e[t]=0;}function F(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(c.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0));}function N(e,t){u._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,F(e.strm);}function U(e,t){e.pending_buf[e.pending++]=t;}function P(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t;}function L(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,h=e.strstart>e.w_size-z?e.strstart-(e.w_size-z):0,u=e.window,l=e.w_mask,f=e.prev,c=e.strstart+S,d=u[s+a-1],p=u[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(u[(r=t)+a]===p&&u[r+a-1]===d&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<c);if(n=S-(c-s),s=c-S,a<n){if(e.match_start=t,o<=(a=n))break;d=u[s+a-1],p=u[s+a];}}}while((t=f[t&l])>h&&0!=--i);return a<=e.lookahead?a:e.lookahead}function j(e){var t,r,n,i,s,a,o,h,u,l,f=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=f+(f-z)){for(c.arraySet(e.window,e.window,f,f,0),e.match_start-=f,e.strstart-=f,e.block_start-=f,t=r=e.hash_size;n=e.head[--t],e.head[t]=f<=n?n-f:0,--r;);for(t=r=f;n=e.prev[--t],e.prev[t]=f<=n?n-f:0,--r;);i+=f;}if(0===e.strm.avail_in)break;if(a=e.strm,o=e.window,h=e.strstart+e.lookahead,u=i,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,c.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=d(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),e.lookahead+=r,e.lookahead+e.insert>=x)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+x-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<x)););}while(e.lookahead<z&&0!==e.strm.avail_in)}function Z(e,t){for(var r,n;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r)),e.match_length>=x)if(n=u._tr_tally(e,e.strstart-e.match_start,e.match_length-x),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=x){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++;}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function W(e,t){for(var r,n,i;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=x-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===x&&4096<e.strstart-e.match_start)&&(e.match_length=x-1)),e.prev_length>=x&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-x,n=u._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-x),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=x-1,e.strstart++,n&&(N(e,!1),0===e.strm.avail_out))return A}else if(e.match_available){if((n=u._tr_tally(e,0,e.window[e.strstart-1]))&&N(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return A}else e.match_available=1,e.strstart++,e.lookahead--;}return e.match_available&&(n=u._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function M(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i;}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new c.Buf16(2*w),this.dyn_dtree=new c.Buf16(2*(2*a+1)),this.bl_tree=new c.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new c.Buf16(k+1),this.heap=new c.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new c.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0;}function G(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?C:E,e.adler=2===t.wrap?0:1,t.last_flush=l,u._tr_init(t),m):R(e,_)}function K(e){var t=G(e);return t===m&&function(e){e.window_size=2*e.w_size,D(e.head),e.max_lazy_match=h[e.level].max_lazy,e.good_match=h[e.level].good_length,e.nice_match=h[e.level].nice_length,e.max_chain_length=h[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=x-1,e.match_available=0,e.ins_h=0;}(e.state),t}function Y(e,t,r,n,i,s){if(!e)return _;var a=1;if(t===g&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||y<i||r!==v||n<8||15<n||t<0||9<t||s<0||b<s)return R(e,_);8===n&&(n=9);var o=new H;return (e.state=o).strm=e,o.wrap=a,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new c.Buf8(2*o.w_size),o.head=new c.Buf16(o.hash_size),o.prev=new c.Buf16(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new c.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=r,K(e)}h=[new M(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(j(e),0===e.lookahead&&t===l)return A;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,N(e,!1),0===e.strm.avail_out))return A;if(e.strstart-e.block_start>=e.w_size-z&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):(e.strstart>e.block_start&&(N(e,!1),e.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(e,t){return Y(e,t,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?_:(e.state.gzhead=t,m):_},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?R(e,_):_;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&t!==f)return R(e,0===e.avail_out?-5:_);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===C)if(2===n.wrap)e.adler=0,U(n,31),U(n,139),U(n,8),n.gzhead?(U(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),U(n,255&n.gzhead.time),U(n,n.gzhead.time>>8&255),U(n,n.gzhead.time>>16&255),U(n,n.gzhead.time>>24&255),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(U(n,255&n.gzhead.extra.length),U(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(U(n,0),U(n,0),U(n,0),U(n,0),U(n,0),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,3),n.status=E);else {var a=v+(n.w_bits-8<<4)<<8;a|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=E,P(n,a),0!==n.strstart&&(P(n,e.adler>>>16),P(n,65535&e.adler)),e.adler=1;}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending!==n.pending_buf_size));)U(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73);}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,U(n,s);}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91);}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,U(n,s);}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103);}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&F(e),n.pending+2<=n.pending_buf_size&&(U(n,255&e.adler),U(n,e.adler>>8&255),e.adler=0,n.status=E)):n.status=E),0!==n.pending){if(F(e),0===e.avail_out)return n.last_flush=-1,m}else if(0===e.avail_in&&T(t)<=T(r)&&t!==f)return R(e,-5);if(666===n.status&&0!==e.avail_in)return R(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==l&&666!==n.status){var o=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(j(e),0===e.lookahead)){if(t===l)return A;break}if(e.match_length=0,r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,a=e.window;;){if(e.lookahead<=S){if(j(e),e.lookahead<=S&&t===l)return A;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=x&&0<e.strstart&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){s=e.strstart+S;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<s);e.match_length=S-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead);}if(e.match_length>=x?(r=u._tr_tally(e,1,e.match_length-x),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):h[n.level].func(n,t);if(o!==O&&o!==B||(n.status=666),o===A||o===O)return 0===e.avail_out&&(n.last_flush=-1),m;if(o===I&&(1===t?u._tr_align(n):5!==t&&(u._tr_stored_block(n,0,0,!1),3===t&&(D(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),F(e),0===e.avail_out))return n.last_flush=-1,m}return t!==f?m:n.wrap<=0?1:(2===n.wrap?(U(n,255&e.adler),U(n,e.adler>>8&255),U(n,e.adler>>16&255),U(n,e.adler>>24&255),U(n,255&e.total_in),U(n,e.total_in>>8&255),U(n,e.total_in>>16&255),U(n,e.total_in>>24&255)):(P(n,e.adler>>>16),P(n,65535&e.adler)),F(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?m:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==C&&69!==t&&73!==t&&91!==t&&103!==t&&t!==E&&666!==t?R(e,_):(e.state=null,t===E?R(e,-3):m):_},r.deflateSetDictionary=function(e,t){var r,n,i,s,a,o,h,u,l=t.length;if(!e||!e.state)return _;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(e.adler=d(e.adler,t,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new c.Buf8(r.w_size),c.arraySet(u,t,l-r.w_size,r.w_size,0),t=u,l=r.w_size),a=e.avail_in,o=e.next_in,h=e.input,e.avail_in=l,e.next_in=0,e.input=t,j(r);r.lookahead>=x;){for(n=r.strstart,i=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+x-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=x-1,j(r);}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,e.next_in=o,e.input=h,e.avail_in=a,r.wrap=s,m},r.deflateInfo="pako deflate (from Nodeca project)";},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1;};},{}],48:[function(e,t,r){t.exports=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C;r=e.state,n=e.next_in,z=e.input,i=n+(e.avail_in-5),s=e.next_out,C=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,c=r.window,d=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;e:do{p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=m[d&g];t:for(;;){if(d>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else {if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(d&(1<<y)-1)];continue t}if(32&y){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}w=65535&v,(y&=15)&&(p<y&&(d+=z[n++]<<p,p+=8),w+=d&(1<<y)-1,d>>>=y,p-=y),p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=_[d&b];r:for(;;){if(d>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(d&(1<<y)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(k=65535&v,p<(y&=15)&&(d+=z[n++]<<p,(p+=8)<y&&(d+=z[n++]<<p,p+=8)),h<(k+=d&(1<<y)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(d>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(S=c,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C;}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=c[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=c[x++],--y;);x=s-k,S=C;}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C;}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]));}else {for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]));}break}}break}}while(n<i&&s<o);n-=w=p>>3,d&=(1<<(p-=w<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=d,r.bits=p;};},{}],49:[function(e,t,r){var I=e("../utils/common"),O=e("./adler32"),B=e("./crc32"),R=e("./inffast"),T=e("./inftrees"),D=1,F=2,N=0,U=-2,P=1,n=852,i=592;function L(e){return (e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0;}function a(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=P,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(n),t.distcode=t.distdyn=new I.Buf32(i),t.sane=1,t.back=-1,N):U}function o(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,a(e)):U}function h(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,o(e))):U}function u(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=h(e,t))!==N&&(e.state=null),r):U}var l,f,c=!0;function j(e){if(c){var t;for(l=new I.Buf32(512),f=new I.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(T(D,e.lens,0,288,l,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;T(F,e.lens,0,32,f,0,e.work,{bits:5}),c=!1;}e.lencode=l,e.lenbits=9,e.distcode=f,e.distbits=5;}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),n>=s.wsize?(I.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),I.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(I.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(e){return u(e,15)},r.inflateInit2=u,r.inflate=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,f=o,c=h,x=N;e:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&u)){e.msg="unknown compression method",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(r.flags=u,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0;}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(d=r.length)&&(d=o),d&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,n,s,d,k)),512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,r.length-=d),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(u!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}l=u=0;}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}e.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;u>>>=2,l-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30;}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if((65535&u)!=(u>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(d=r.length){if(o<d&&(d=o),h<d&&(d=h),0===d)break e;I.arraySet(i,n,s,d,a),o-=d,s+=d,h-=d,a+=d,r.length-=d;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3;}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else {if(16===b){for(z=_+2;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(u>>>=_,l-=_,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],d=3+(3&u),u>>>=2,l-=2;}else if(17===b){for(z=_+3;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}l-=_,k=0,d=3+(7&(u>>>=_)),u>>>=3,l-=3;}else {for(z=_+7;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}l-=_,k=0,d=11+(127&(u>>>=_)),u>>>=7,l-=7;}if(r.have+d>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;d--;)r.lens[r.have++]=k;}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=o&&258<=h){e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,R(e,c),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}u>>>=v,l-=v,r.back+=v;}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra;}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}u>>>=v,l-=v,r.back+=v;}if(u>>>=_,l-=_,r.back+=_,64&g){e.msg="invalid distance code",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra;}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===h)break e;if(d=c-h,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}p=d>r.wnext?(d-=r.wnext,r.wsize-d):r.wnext-d,d>r.length&&(d=r.length),m=r.window;}else m=i,p=a-r.offset,d=r.length;for(h<d&&(d=h),h-=d,r.length-=d;i[a++]=m[p++],--d;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break e;i[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break e;o--,u|=n[s++]<<l,l+=8;}if(c-=h,e.total_out+=c,r.total+=c,c&&(e.adler=r.check=r.flags?B(r.check,i,c,a-c):O(r.check,i,c,a-c)),c=h,(r.flags?u:L(u))!==r.check){e.msg="incorrect data check",r.mode=30;break}l=u=0;}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8;}if(u!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}l=u=0;}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return -4;case 32:default:return U}return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,(r.wsize||c!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,c-e.avail_out)?(r.mode=31,-4):(f-=e.avail_in,c-=e.avail_out,e.total_in+=f,e.total_out+=c,r.total+=c,r.wrap&&c&&(e.adler=r.check=r.flags?B(r.check,i,c,e.next_out-c):O(r.check,i,c,e.next_out-c)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===c||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo="pako inflate (from Nodeca project)";},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){var D=e("../utils/common"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,a,o){var h,u,l,f,c,d,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<n;v++)O[t[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return i[s++]=20971520,i[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return -1;if(0<z&&(0===e||1!==w))return -1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<n;v++)0!==t[r+v]&&(a[B[t[r+v]]++]=v);if(d=0===e?(A=R=a,19):1===e?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,c=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===e&&852<C||2===e&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<d?(m=0,a[v]):a[v]>d?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;i[c+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=t[r+a[v]];}if(k<b&&(E&f)!==l){for(0===S&&(S=k),c+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===e&&852<C||2===e&&592<C)return 1;i[l=E&f]=k<<24|x<<16|c-s|0;}}return 0!==E&&(i[c+E]=b-S<<24|64<<16|0),o.bits=k,0};},{"../utils/common":41}],51:[function(e,t,r){t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};},{}],52:[function(e,t,r){var i=e("../utils/common"),o=0,h=1;function n(e){for(var t=e.length;0<=--t;)e[t]=0;}var s=0,a=29,u=256,l=u+1+a,f=30,c=19,_=2*l+1,g=15,d=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));n(z);var C=new Array(2*f);n(C);var E=new Array(512);n(E);var A=new Array(256);n(A);var I=new Array(a);n(I);var O,B,R,T=new Array(f);function D(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length;}function F(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t;}function N(e){return e<256?E[e]:E[256+(e>>>7)]}function U(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255;}function P(e,t,r){e.bi_valid>d-r?(e.bi_buf|=t<<e.bi_valid&65535,U(e,e.bi_buf),e.bi_buf=t>>d-e.bi_valid,e.bi_valid+=r-d):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r);}function L(e,t,r){P(e,r[2*t],r[2*t+1]);}function j(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function Z(e,t,r){var n,i,s=new Array(g+1),a=0;for(n=1;n<=g;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=j(s[o]++,o));}}function W(e){var t;for(t=0;t<l;t++)e.dyn_ltree[2*t]=0;for(t=0;t<f;t++)e.dyn_dtree[2*t]=0;for(t=0;t<c;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*m]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0;}function M(e){8<e.bi_valid?U(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0;}function H(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function G(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&H(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!H(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n;}function K(e,t,r){var n,i,s,a,o=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],i=e.pending_buf[e.l_buf+o],o++,0===n?L(e,i,t):(L(e,(s=A[i])+u+1,t),0!==(a=w[s])&&P(e,i-=I[s],a),L(e,s=N(--n),r),0!==(a=k[s])&&P(e,n-=T[s],a)),o<e.last_lit;);L(e,m,t);}function Y(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,h=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(e.heap[++e.heap_len]=u=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=u,r=e.heap_len>>1;1<=r;r--)G(e,s,r);for(i=h;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],G(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,G(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,h=t.dyn_tree,u=t.max_code,l=t.stat_desc.static_tree,f=t.stat_desc.has_stree,c=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=g;s++)e.bl_count[s]=0;for(h[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<_;r++)p<(s=h[2*h[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),h[2*n+1]=s,u<n||(e.bl_count[s]++,a=0,d<=n&&(a=c[n-d]),o=h[2*n],e.opt_len+=o*(s+a),f&&(e.static_len+=o*(l[2*n+1]+a)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2;}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)u<(i=e.heap[--r])||(h[2*i+1]!==s&&(e.opt_len+=(s-h[2*i+1])*h[2*i],h[2*i+1]=s),n--);}}(e,t),Z(s,u,e.bl_count);}function X(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<h&&i===a||(o<u?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[2*b]++):o<=10?e.bl_tree[2*v]++:e.bl_tree[2*y]++,s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4));}function V(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<h&&i===a)){if(o<u)for(;L(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(L(e,i,e.bl_tree),o--),L(e,b,e.bl_tree),P(e,o-3,2)):o<=10?(L(e,v,e.bl_tree),P(e,o-3,3)):(L(e,y,e.bl_tree),P(e,o-11,7));s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4);}}n(T);var q=!1;function J(e,t,r,n){P(e,(s<<1)+(n?1:0),3),function(e,t,r,n){M(e),n&&(U(e,r),U(e,~r)),i.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r;}(e,t,r,!0);}r._tr_init=function(e){q||(function(){var e,t,r,n,i,s=new Array(g+1);for(n=r=0;n<a-1;n++)for(I[n]=r,e=0;e<1<<w[n];e++)A[r++]=n;for(A[r-1]=n,n=i=0;n<16;n++)for(T[n]=i,e=0;e<1<<k[n];e++)E[i++]=n;for(i>>=7;n<f;n++)for(T[n]=i<<7,e=0;e<1<<k[n]-7;e++)E[256+i++]=n;for(t=0;t<=g;t++)s[t]=0;for(e=0;e<=143;)z[2*e+1]=8,e++,s[8]++;for(;e<=255;)z[2*e+1]=9,e++,s[9]++;for(;e<=279;)z[2*e+1]=7,e++,s[7]++;for(;e<=287;)z[2*e+1]=8,e++,s[8]++;for(Z(z,l+1,s),e=0;e<f;e++)C[2*e+1]=5,C[2*e]=j(e,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,c,p);}(),q=!0),e.l_desc=new F(e.dyn_ltree,O),e.d_desc=new F(e.dyn_dtree,B),e.bl_desc=new F(e.bl_tree,R),e.bi_buf=0,e.bi_valid=0,W(e);},r._tr_stored_block=J,r._tr_flush_block=function(e,t,r,n){var i,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return o;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return h;for(t=32;t<u;t++)if(0!==e.dyn_ltree[2*t])return h;return o}(e)),Y(e,e.l_desc),Y(e,e.d_desc),a=function(e){var t;for(X(e,e.dyn_ltree,e.l_desc.max_code),X(e,e.dyn_dtree,e.d_desc.max_code),Y(e,e.bl_desc),t=c-1;3<=t&&0===e.bl_tree[2*S[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?J(e,t,r,n):4===e.strategy||s===i?(P(e,2+(n?1:0),3),K(e,z,C)):(P(e,4+(n?1:0),3),function(e,t,r,n){var i;for(P(e,t-257,5),P(e,r-1,5),P(e,n-4,4),i=0;i<n;i++)P(e,e.bl_tree[2*S[i]+1],3);V(e,e.dyn_ltree,t-1),V(e,e.dyn_dtree,r-1);}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),K(e,e.dyn_ltree,e.dyn_dtree)),W(e),n&&M(e);},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(A[r]+u+1)]++,e.dyn_dtree[2*N(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){P(e,2,3),L(e,m,z),function(e){16===e.bi_valid?(U(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8);}(e);};},{"../utils/common":41}],53:[function(e,t,r){t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0;};},{}],54:[function(e,t,r){(function(e){!function(r,n){if(!r.setImmediate){var i,s,t,a,o=1,h={},u=!1,l=r.document,e=Object.getPrototypeOf&&Object.getPrototypeOf(r);e=e&&e.setTimeout?e:r,i="[object process]"==={}.toString.call(r.process)?function(e){process.nextTick(function(){c(e);});}:function(){if(r.postMessage&&!r.importScripts){var e=!0,t=r.onmessage;return r.onmessage=function(){e=!1;},r.postMessage("","*"),r.onmessage=t,e}}()?(a="setImmediate$"+Math.random()+"$",r.addEventListener?r.addEventListener("message",d,!1):r.attachEvent("onmessage",d),function(e){r.postMessage(a+e,"*");}):r.MessageChannel?((t=new MessageChannel).port1.onmessage=function(e){c(e.data);},function(e){t.port2.postMessage(e);}):l&&"onreadystatechange"in l.createElement("script")?(s=l.documentElement,function(e){var t=l.createElement("script");t.onreadystatechange=function(){c(e),t.onreadystatechange=null,s.removeChild(t),t=null;},s.appendChild(t);}):function(e){setTimeout(c,0,e);},e.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var n={callback:e,args:t};return h[o]=n,i(o),o++},e.clearImmediate=f;}function f(e){delete h[e];}function c(e){if(u)setTimeout(c,0,e);else {var t=h[e];if(t){u=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r);}}(t);}finally{f(e),u=!1;}}}}function d(e){e.source===r&&"string"==typeof e.data&&0===e.data.indexOf(a)&&c(+e.data.slice(a.length));}}("undefined"==typeof self?void 0===e?this:e:self);}).call(this,"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}]},{},[10])(10)});
	} (jszip_min));

	var JSZip = jszip_min.exports;

	var workerHelper = {};

	Object.defineProperty(workerHelper, "__esModule", { value: true });
	function createWorker(file) {
	    class WebWorker {
	        constructor() {
	            this._url = URL.createObjectURL(new Blob([file]));
	            this._worker = new Worker(this._url);
	        }
	        dispatchEvent(event) {
	            return this._worker.dispatchEvent(event);
	        }
	        addEventListener(type, listener, options) {
	            this._worker.addEventListener(type, listener, options);
	        }
	        removeEventListener(type, listener, options) {
	            this._worker.removeEventListener(type, listener, options);
	        }
	        postMessage(message, options) {
	            this._worker.postMessage(message, options);
	        }
	        terminate() {
	            this._worker.terminate();
	            URL.revokeObjectURL(this._url);
	        }
	        get onmessage() {
	            return this._worker.onmessage;
	        }
	        set onmessage(e) {
	            this._worker.onmessage = e;
	        }
	        get onerror() {
	            return this._worker.onerror;
	        }
	        set onerror(e) {
	            this._worker.onerror = e;
	        }
	        get onmessageerror() {
	            return this._worker.onmessageerror;
	        }
	        set onmessageerror(e) {
	            this._worker.onmessageerror = e;
	        }
	    }
	    return WebWorker;
	}
	var _default$7 = workerHelper.default = createWorker;

	var mupdfWorker = _default$7(
	"(function () {\n\t'use strict';\n\n\timportScripts(\"https://serverless.blueagle.top/static/libmupdf.js\");\n\n\tconst mupdf = {\n\t\tunlock(data) {\n\t\t\tFS.writeFile(\"test_1.pdf\", data);\n\t\t\tmupdf.writeDocument();\n\t\t\tlet content = FS.readFile(\"/test_2.pdf\");\n\t\t\tFS.unlink(\"/test_1.pdf\");\n\t\t\tFS.unlink(\"/test_2.pdf\");\n\t\t\treturn content;\n\t\t}\n\t};\n\n\tlet ready = false;\n\n\tModule.onRuntimeInitialized = function () {\n\t\tModule.ccall('initContext');\n\t\tmupdf.writeDocument = Module.cwrap('writeDocument', 'null', []);\n\t\tpostMessage(\"READY\");\n\t\tready = true;\n\t};\n\n\tonmessage = function (event) {\n\t\tlet [func, args, id] = event.data;\n\t\tif (!ready) {\n\t\t\tpostMessage([\"ERROR\", id, { name: \"NotReadyError\", message: \"WASM module is not ready yet\" }]);\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tlet result = mupdf[func](...args);\n\t\t\tif (result instanceof ArrayBuffer)\n\t\t\t\tpostMessage([\"RESULT\", id, result], [result]);\n\t\t\telse\n\t\t\t\tpostMessage([\"RESULT\", id, result]);\n\t\t} catch (error) {\n\t\t\tpostMessage([\"ERROR\", id, { name: error.name, message: error.message }]);\n\t\t}\n\t};\n\n})();\n"
	);

	const mupdf = {
	  unlock: wrap("unlock")
	};
	const worker = new mupdfWorker();
	worker.onmessage = function() {
	  worker.promises = {};
	  worker.promiseId = 0;
	  worker.onmessage = function(event) {
	    let [type, id, result] = event.data;
	    if (type === "RESULT")
	      worker.promises[id].resolve(result);
	    else
	      worker.promises[id].reject(result);
	    delete worker.promises[id];
	  };
	};
	function wrap(func) {
	  return function(...args) {
	    return new Promise(function(resolve, reject) {
	      let id = worker.promiseId++;
	      worker.promises[id] = { resolve, reject };
	      if (args[0] instanceof ArrayBuffer)
	        worker.postMessage([func, args, id], [args[0]]);
	      else
	        worker.postMessage([func, args, id]);
	    });
	  };
	}

	async function parseXMLFromZip(zip, path) {
	  return new DOMParser().parseFromString(await zip.file(path).async("string"), "application/xml");
	}
	function saveXMLToZip(zip, path, xml) {
	  return zip.file(path, new XMLSerializer().serializeToString(xml));
	}
	const typeHandlers = [
	  {
	    type: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
	    handler: async function(blob) {
	      const zip = await JSZip.loadAsync(blob);
	      const document = await parseXMLFromZip(zip, "word/document.xml"), settings = await parseXMLFromZip(zip, "word/settings.xml");
	      if (settings.getElementsByTagName("w:documentProtection").length === 0) {
	        throw new Error("Document is not protected");
	      }
	      for (const tag of settings.getElementsByTagName("w:documentProtection")) {
	        tag.remove();
	      }
	      for (const p of document.getElementsByTagName("w:p")) {
	        if (p.querySelector('*[id="DeepLBoxSPIDType"]')) {
	          p.remove();
	        }
	      }
	      saveXMLToZip(zip, "word/document.xml", document);
	      saveXMLToZip(zip, "word/settings.xml", settings);
	      return await zip.generateAsync({
	        type: "blob",
	        mimeType: blob.type,
	        compression: "DEFLATE"
	      });
	    }
	  },
	  {
	    type: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
	    handler: async function(blob) {
	      const zip = await JSZip.loadAsync(blob);
	      const presentation = await parseXMLFromZip(zip, "ppt/presentation.xml");
	      for (const tag of presentation.getElementsByTagName("p:modifyVerifier")) {
	        tag.remove();
	      }
	      saveXMLToZip(zip, "ppt/presentation.xml", presentation);
	      let deletedDeepL = false;
	      zip.folder("ppt/slides/_rels").forEach(async function(_, file) {
	        if (deletedDeepL) {
	          return;
	        }
	        const slide_rels = new DOMParser().parseFromString((await file.async("string")).replaceAll("\uFEFF", ""), "application/xml");
	        if (slide_rels.querySelector('[Target="https://www.deepl.com/pro?cta=edit-document"]')) {
	          for (const r of [...slide_rels.getElementsByTagName("Relationship")].filter((r2) => r2.getAttribute("Target") !== "https://www.deepl.com/pro?cta=edit-document")) {
	            const path = r.getAttribute("Target").slice(1);
	            zip.remove(path);
	            if (path.includes("slideLayouts")) {
	              zip.remove(path.replace("slideLayouts/", "slideLayouts/_rels/").replace(".xml", ".xml.rels"));
	            }
	          }
	          zip.remove(file.name);
	          zip.remove(file.name.replace("_rels/", "").replace(".rels", ""));
	          deletedDeepL = true;
	        }
	      });
	      return await zip.generateAsync({
	        type: "blob",
	        mimeType: blob.type,
	        compression: "DEFLATE"
	      });
	    }
	  },
	  {
	    type: "application/pdf",
	    handler: async function(blob) {
	      return new Blob([await mupdf.unlock(new Uint8Array(await blob.arrayBuffer()))], { type: blob.type });
	    }
	  }
	];
	async function unlockDocument(blob) {
	  const handler = typeHandlers.find((h) => h.type === blob.type)?.handler;
	  if (handler) {
	    return await handler(blob);
	  } else {
	    throw new Error(`Unsupported document type: ${blob.type}`);
	  }
	}

	const title$3 = /* @__PURE__ */ o$2(DialogTitle, { children: "Document Manager" });
	const FullGrid = styles.styled(Grid)({
	  height: "100%",
	  width: "100%"
	});
	function Document() {
	  const documentStore = dist$1.exports.useLocalObservable(() => store.documentStore);
	  const windowStore = dist$1.exports.useLocalObservable(() => store.windowStore);
	  const loadingStore = dist$1.exports.useLocalObservable(() => store.loadingStore);
	  const handleDownloadDocument = T$1(downloadDirectly, []);
	  const handleDeleteDocument = T$1((name) => {
	    documentStore.deleteDocument(name);
	  }, []);
	  const handleDecryptDocument = T$1((document) => {
	    (async function() {
	      const loading = loadingStore.addLoading(`Decrypting ${document.name}...`);
	      try {
	        const { blob, name } = document;
	        const decryptedBlob = await unlockDocument(blob);
	        documentStore.modifyDocument(name, decryptedBlob);
	        notistack.exports.enqueueSnackbar("Document decrypted successfully", { variant: "success" });
	      } catch (error) {
	        notistack.exports.enqueueSnackbar(error.message, { variant: "error" });
	      }
	      loadingStore.removeLoading(loading);
	    })();
	  }, []);
	  const handleDocumentChange = T$1((documents) => {
	    for (const document of documents) {
	      documentStore.addDocument(document);
	    }
	  }, []);
	  const handleCleanDocument = T$1(() => documentStore.cleanDocument(), []);
	  const handleToggleDocument = T$1(() => windowStore.toggleDocumentWindow(), []);
	  const [helpPopover, setHelpPopover] = p$1(null);
	  const handleHelpPopoverOpen = T$1((event) => {
	    setHelpPopover(event.currentTarget);
	  }, []);
	  const handleHelpPopoverClose = T$1(() => {
	    setHelpPopover(null);
	  }, []);
	  return /* @__PURE__ */ o$2(dist$1.exports.Observer, { children: () => /* @__PURE__ */ o$2(
	    Dialog,
	    {
	      open: windowStore.isDocumentWindowOpen ?? false,
	      onClose: handleToggleDocument,
	      maxWidth: "lg",
	      fullWidth: true,
	      PaperProps: {
	        sx: {
	          height: "70%"
	        }
	      },
	      children: [
	        /* @__PURE__ */ o$2(
	          IconButton,
	          {
	            size: "large",
	            sx: {
	              position: "absolute",
	              top: 10,
	              right: 10
	            },
	            onMouseEnter: handleHelpPopoverOpen,
	            onMouseLeave: handleHelpPopoverClose,
	            children: /* @__PURE__ */ o$2(default_1$7, {})
	          }
	        ),
	        /* @__PURE__ */ o$2(
	          Popover,
	          {
	            sx: {
	              pointerEvents: "none"
	            },
	            anchorOrigin: {
	              vertical: "bottom",
	              horizontal: "left"
	            },
	            transformOrigin: {
	              vertical: "top",
	              horizontal: "right"
	            },
	            open: Boolean(helpPopover),
	            anchorEl: helpPopover,
	            onClose: handleHelpPopoverClose,
	            disableRestoreFocus: true,
	            children: /* @__PURE__ */ o$2(Typography, { sx: { p: 1 }, children: "Currently, we support Pdf, Doc, Docx, PowerPoint, PowerPointx. The process of decryption is done on the client side." })
	          }
	        ),
	        title$3,
	        /* @__PURE__ */ o$2(DialogContent, { children: /* @__PURE__ */ o$2(FullGrid, { container: true, children: [
	          /* @__PURE__ */ o$2(FullGrid, { item: true, md: 5, sm: 12, sx: (theme) => ({
	            [theme.breakpoints.down("md")]: {
	              height: "20%"
	            }
	          }), children: /* @__PURE__ */ o$2(FileUploader$1, { handleDocumentChange }) }),
	          /* @__PURE__ */ o$2(FullGrid, { item: true, md: 7, sm: 12, sx: (theme) => ({
	            [theme.breakpoints.down("md")]: {
	              height: "70%"
	            }
	          }), children: /* @__PURE__ */ o$2(
	            List$1,
	            {
	              list: documentStore.getDocumentList,
	              handleDownloadDocument,
	              handleDeleteDocument,
	              handleDecryptDocument
	            }
	          ) })
	        ] }) }),
	        /* @__PURE__ */ o$2(DialogActions, { children: [
	          documentStore.getDocumentList.length > 0 && /* @__PURE__ */ o$2(Button, { onClick: handleCleanDocument, children: "Clean Decrypted Documents" }),
	          /* @__PURE__ */ o$2(Button, { onClick: handleToggleDocument, children: "Close" })
	        ] })
	      ]
	    }
	  ) });
	}
	var Document$1 = R(Document, () => true);

	var Drawer$2 = {};

	var Drawer$1 = {};

	var Slide$1 = {};

	var Slide = {};

	var hasRequiredSlide$1;

	function requireSlide$1 () {
		if (hasRequiredSlide$1) return Slide;
		hasRequiredSlide$1 = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Slide, "__esModule", {
		  value: true
		});
		Slide.default = void 0;
		Slide.setTranslateValue = setTranslateValue;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _reactTransitionGroup = requireCjs();
		var _utils = requireUtils$4();
		var _debounce = _interopRequireDefault(requireDebounce());
		var _useForkRef = _interopRequireDefault(requireUseForkRef());
		var _useTheme = _interopRequireDefault(requireUseTheme());
		var _utils2 = requireUtils();
		var _utils3 = requireUtils$1();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		// Translate the node so it can't be seen on the screen.
		// Later, we're going to translate the node back to its original location with `none`.
		function getTranslateValue(direction, node, resolvedContainer) {
		  const rect = node.getBoundingClientRect();
		  const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
		  const containerWindow = (0, _utils3.ownerWindow)(node);
		  let transform;
		  if (node.fakeTransform) {
		    transform = node.fakeTransform;
		  } else {
		    const computedStyle = containerWindow.getComputedStyle(node);
		    transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');
		  }
		  let offsetX = 0;
		  let offsetY = 0;
		  if (transform && transform !== 'none' && typeof transform === 'string') {
		    const transformValues = transform.split('(')[1].split(')')[0].split(',');
		    offsetX = parseInt(transformValues[4], 10);
		    offsetY = parseInt(transformValues[5], 10);
		  }
		  if (direction === 'left') {
		    if (containerRect) {
		      return `translateX(${containerRect.right + offsetX - rect.left}px)`;
		    }
		    return `translateX(${containerWindow.innerWidth + offsetX - rect.left}px)`;
		  }
		  if (direction === 'right') {
		    if (containerRect) {
		      return `translateX(-${rect.right - containerRect.left - offsetX}px)`;
		    }
		    return `translateX(-${rect.left + rect.width - offsetX}px)`;
		  }
		  if (direction === 'up') {
		    if (containerRect) {
		      return `translateY(${containerRect.bottom + offsetY - rect.top}px)`;
		    }
		    return `translateY(${containerWindow.innerHeight + offsetY - rect.top}px)`;
		  }

		  // direction === 'down'
		  if (containerRect) {
		    return `translateY(-${rect.top - containerRect.top + rect.height - offsetY}px)`;
		  }
		  return `translateY(-${rect.top + rect.height - offsetY}px)`;
		}
		function resolveContainer(containerPropProp) {
		  return typeof containerPropProp === 'function' ? containerPropProp() : containerPropProp;
		}
		function setTranslateValue(direction, node, containerProp) {
		  const resolvedContainer = resolveContainer(containerProp);
		  const transform = getTranslateValue(direction, node, resolvedContainer);
		  if (transform) {
		    node.style.webkitTransform = transform;
		    node.style.transform = transform;
		  }
		}

		/**
		 * The Slide transition is used by the [Drawer](/material-ui/react-drawer/) component.
		 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
		 */
		const Slide$1 = /*#__PURE__*/React.forwardRef(function Slide(props, ref) {
		  const theme = (0, _useTheme.default)();
		  const defaultEasing = {
		    enter: theme.transitions.easing.easeOut,
		    exit: theme.transitions.easing.sharp
		  };
		  const defaultTimeout = {
		    enter: theme.transitions.duration.enteringScreen,
		    exit: theme.transitions.duration.leavingScreen
		  };
		  const {
		      addEndListener,
		      appear = true,
		      children,
		      container: containerProp,
		      direction = 'down',
		      easing: easingProp = defaultEasing,
		      in: inProp,
		      onEnter,
		      onEntered,
		      onEntering,
		      onExit,
		      onExited,
		      onExiting,
		      style,
		      timeout = defaultTimeout,
		      // eslint-disable-next-line react/prop-types
		      TransitionComponent = _reactTransitionGroup.Transition
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const childrenRef = React.useRef(null);
		  const handleRef = (0, _useForkRef.default)(children.ref, childrenRef, ref);
		  const normalizedTransitionCallback = callback => isAppearing => {
		    if (callback) {
		      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
		      if (isAppearing === undefined) {
		        callback(childrenRef.current);
		      } else {
		        callback(childrenRef.current, isAppearing);
		      }
		    }
		  };
		  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
		    setTranslateValue(direction, node, containerProp);
		    (0, _utils2.reflow)(node);
		    if (onEnter) {
		      onEnter(node, isAppearing);
		    }
		  });
		  const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
		    const transitionProps = (0, _utils2.getTransitionProps)({
		      timeout,
		      style,
		      easing: easingProp
		    }, {
		      mode: 'enter'
		    });
		    node.style.webkitTransition = theme.transitions.create('-webkit-transform', (0, _extends2.default)({}, transitionProps));
		    node.style.transition = theme.transitions.create('transform', (0, _extends2.default)({}, transitionProps));
		    node.style.webkitTransform = 'none';
		    node.style.transform = 'none';
		    if (onEntering) {
		      onEntering(node, isAppearing);
		    }
		  });
		  const handleEntered = normalizedTransitionCallback(onEntered);
		  const handleExiting = normalizedTransitionCallback(onExiting);
		  const handleExit = normalizedTransitionCallback(node => {
		    const transitionProps = (0, _utils2.getTransitionProps)({
		      timeout,
		      style,
		      easing: easingProp
		    }, {
		      mode: 'exit'
		    });
		    node.style.webkitTransition = theme.transitions.create('-webkit-transform', transitionProps);
		    node.style.transition = theme.transitions.create('transform', transitionProps);
		    setTranslateValue(direction, node, containerProp);
		    if (onExit) {
		      onExit(node);
		    }
		  });
		  const handleExited = normalizedTransitionCallback(node => {
		    // No need for transitions when the component is hidden
		    node.style.webkitTransition = '';
		    node.style.transition = '';
		    if (onExited) {
		      onExited(node);
		    }
		  });
		  const handleAddEndListener = next => {
		    if (addEndListener) {
		      // Old call signature before `react-transition-group` implemented `nodeRef`
		      addEndListener(childrenRef.current, next);
		    }
		  };
		  const updatePosition = React.useCallback(() => {
		    if (childrenRef.current) {
		      setTranslateValue(direction, childrenRef.current, containerProp);
		    }
		  }, [direction, containerProp]);
		  React.useEffect(() => {
		    // Skip configuration where the position is screen size invariant.
		    if (inProp || direction === 'down' || direction === 'right') {
		      return undefined;
		    }
		    const handleResize = (0, _debounce.default)(() => {
		      if (childrenRef.current) {
		        setTranslateValue(direction, childrenRef.current, containerProp);
		      }
		    });
		    const containerWindow = (0, _utils3.ownerWindow)(childrenRef.current);
		    containerWindow.addEventListener('resize', handleResize);
		    return () => {
		      handleResize.clear();
		      containerWindow.removeEventListener('resize', handleResize);
		    };
		  }, [direction, inProp, containerProp]);
		  React.useEffect(() => {
		    if (!inProp) {
		      // We need to update the position of the drawer when the direction change and
		      // when it's hidden.
		      updatePosition();
		    }
		  }, [inProp, updatePosition]);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TransitionComponent, (0, _extends2.default)({
		    nodeRef: childrenRef,
		    onEnter: handleEnter,
		    onEntered: handleEntered,
		    onEntering: handleEntering,
		    onExit: handleExit,
		    onExited: handleExited,
		    onExiting: handleExiting,
		    addEndListener: handleAddEndListener,
		    appear: appear,
		    in: inProp,
		    timeout: timeout
		  }, other, {
		    children: (state, childProps) => {
		      return /*#__PURE__*/React.cloneElement(children, (0, _extends2.default)({
		        ref: handleRef,
		        style: (0, _extends2.default)({
		          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
		        }, style, children.props.style)
		      }, childProps));
		    }
		  }));
		});
		Slide$1.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Add a custom transition end trigger. Called with the transitioning DOM
		   * node and a done callback. Allows for more fine grained transition end
		   * logic. Note: Timeouts are still used as a fallback if provided.
		   */
		  addEndListener: _propTypes.default.func,
		  /**
		   * Perform the enter transition when it first mounts if `in` is also `true`.
		   * Set this to `false` to disable this behavior.
		   * @default true
		   */
		  appear: _propTypes.default.bool,
		  /**
		   * A single child content element.
		   */
		  children: _utils.elementAcceptingRef.isRequired,
		  /**
		   * An HTML element, or a function that returns one.
		   * It's used to set the container the Slide is transitioning from.
		   */
		  container: (0, _utils.chainPropTypes)(_propTypes.default.oneOfType([_utils.HTMLElementType, _propTypes.default.func]), props => {
		    if (props.open) {
		      const resolvedContainer = resolveContainer(props.container);
		      if (resolvedContainer && resolvedContainer.nodeType === 1) {
		        const box = resolvedContainer.getBoundingClientRect();
		        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
		          return new Error(['MUI: The `container` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
		        }
		      } else if (!resolvedContainer || typeof resolvedContainer.getBoundingClientRect !== 'function' || resolvedContainer.contextElement != null && resolvedContainer.contextElement.nodeType !== 1) {
		        return new Error(['MUI: The `container` prop provided to the component is invalid.', 'It should be an HTML element instance.'].join('\n'));
		      }
		    }
		    return null;
		  }),
		  /**
		   * Direction the child node will enter from.
		   * @default 'down'
		   */
		  direction: _propTypes.default.oneOf(['down', 'left', 'right', 'up']),
		  /**
		   * The transition timing function.
		   * You may specify a single easing or a object containing enter and exit values.
		   * @default {
		   *   enter: theme.transitions.easing.easeOut,
		   *   exit: theme.transitions.easing.sharp,
		   * }
		   */
		  easing: _propTypes.default.oneOfType([_propTypes.default.shape({
		    enter: _propTypes.default.string,
		    exit: _propTypes.default.string
		  }), _propTypes.default.string]),
		  /**
		   * If `true`, the component will transition in.
		   */
		  in: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  onEnter: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onEntered: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onEntering: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onExit: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onExited: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  onExiting: _propTypes.default.func,
		  /**
		   * @ignore
		   */
		  style: _propTypes.default.object,
		  /**
		   * The duration for the transition, in milliseconds.
		   * You may specify a single timeout for all transitions, or individually with an object.
		   * @default {
		   *   enter: theme.transitions.duration.enteringScreen,
		   *   exit: theme.transitions.duration.leavingScreen,
		   * }
		   */
		  timeout: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
		    appear: _propTypes.default.number,
		    enter: _propTypes.default.number,
		    exit: _propTypes.default.number
		  })])
		} ;
		var _default = Slide$1;
		Slide.default = _default;
		return Slide;
	}

	var hasRequiredSlide;

	function requireSlide () {
		if (hasRequiredSlide) return Slide$1;
		hasRequiredSlide = 1;
		(function (exports) {

			var _interopRequireDefault = interopRequireDefault.exports;
			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _Slide.default;
			  }
			});
			var _Slide = _interopRequireDefault(requireSlide$1());
	} (Slide$1));
		return Slide$1;
	}

	var drawerClasses = {};

	var hasRequiredDrawerClasses;

	function requireDrawerClasses () {
		if (hasRequiredDrawerClasses) return drawerClasses;
		hasRequiredDrawerClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(drawerClasses, "__esModule", {
		  value: true
		});
		drawerClasses.default = void 0;
		drawerClasses.getDrawerUtilityClass = getDrawerUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getDrawerUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiDrawer', slot);
		}
		const drawerClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiDrawer', ['root', 'docked', 'paper', 'paperAnchorLeft', 'paperAnchorRight', 'paperAnchorTop', 'paperAnchorBottom', 'paperAnchorDockedLeft', 'paperAnchorDockedRight', 'paperAnchorDockedTop', 'paperAnchorDockedBottom', 'modal']);
		var _default = drawerClasses$1;
		drawerClasses.default = _default;
		return drawerClasses;
	}

	var hasRequiredDrawer;

	function requireDrawer () {
		if (hasRequiredDrawer) return Drawer$1;
		hasRequiredDrawer = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Drawer$1, "__esModule", {
		  value: true
		});
		Drawer$1.default = void 0;
		Drawer$1.getAnchor = getAnchor;
		Drawer$1.isHorizontal = isHorizontal;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _utils = requireUtils$4();
		var _base = requireNode$2();
		var _Modal = _interopRequireDefault(requireModal());
		var _Slide = _interopRequireDefault(requireSlide());
		var _Paper = _interopRequireDefault(Paper$2);
		var _capitalize = _interopRequireDefault(requireCapitalize());
		var _useTheme = _interopRequireDefault(requireUseTheme());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _styled = _interopRequireWildcard(requireStyled());
		var _drawerClasses = requireDrawerClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["BackdropProps"],
		  _excluded2 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const overridesResolver = (props, styles) => {
		  const {
		    ownerState
		  } = props;
		  return [styles.root, (ownerState.variant === 'permanent' || ownerState.variant === 'persistent') && styles.docked, styles.modal];
		};
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    anchor,
		    variant
		  } = ownerState;
		  const slots = {
		    root: ['root'],
		    docked: [(variant === 'permanent' || variant === 'persistent') && 'docked'],
		    modal: ['modal'],
		    paper: ['paper', `paperAnchor${(0, _capitalize.default)(anchor)}`, variant !== 'temporary' && `paperAnchorDocked${(0, _capitalize.default)(anchor)}`]
		  };
		  return (0, _base.unstable_composeClasses)(slots, _drawerClasses.getDrawerUtilityClass, classes);
		};
		const DrawerRoot = (0, _styled.default)(_Modal.default, {
		  name: 'MuiDrawer',
		  slot: 'Root',
		  overridesResolver
		})(({
		  theme
		}) => ({
		  zIndex: (theme.vars || theme).zIndex.drawer
		}));
		const DrawerDockedRoot = (0, _styled.default)('div', {
		  shouldForwardProp: _styled.rootShouldForwardProp,
		  name: 'MuiDrawer',
		  slot: 'Docked',
		  skipVariantsResolver: false,
		  overridesResolver
		})({
		  flex: '0 0 auto'
		});
		const DrawerPaper = (0, _styled.default)(_Paper.default, {
		  name: 'MuiDrawer',
		  slot: 'Paper',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.paper, styles[`paperAnchor${(0, _capitalize.default)(ownerState.anchor)}`], ownerState.variant !== 'temporary' && styles[`paperAnchorDocked${(0, _capitalize.default)(ownerState.anchor)}`]];
		  }
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  overflowY: 'auto',
		  display: 'flex',
		  flexDirection: 'column',
		  height: '100%',
		  flex: '1 0 auto',
		  zIndex: (theme.vars || theme).zIndex.drawer,
		  // Add iOS momentum scrolling for iOS < 13.0
		  WebkitOverflowScrolling: 'touch',
		  // temporary style
		  position: 'fixed',
		  top: 0,
		  // We disable the focus ring for mouse, touch and keyboard users.
		  // At some point, it would be better to keep it for keyboard users.
		  // :focus-ring CSS pseudo-class will help.
		  outline: 0
		}, ownerState.anchor === 'left' && {
		  left: 0
		}, ownerState.anchor === 'top' && {
		  top: 0,
		  left: 0,
		  right: 0,
		  height: 'auto',
		  maxHeight: '100%'
		}, ownerState.anchor === 'right' && {
		  right: 0
		}, ownerState.anchor === 'bottom' && {
		  top: 'auto',
		  left: 0,
		  bottom: 0,
		  right: 0,
		  height: 'auto',
		  maxHeight: '100%'
		}, ownerState.anchor === 'left' && ownerState.variant !== 'temporary' && {
		  borderRight: `1px solid ${(theme.vars || theme).palette.divider}`
		}, ownerState.anchor === 'top' && ownerState.variant !== 'temporary' && {
		  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
		}, ownerState.anchor === 'right' && ownerState.variant !== 'temporary' && {
		  borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
		}, ownerState.anchor === 'bottom' && ownerState.variant !== 'temporary' && {
		  borderTop: `1px solid ${(theme.vars || theme).palette.divider}`
		}));
		const oppositeDirection = {
		  left: 'right',
		  right: 'left',
		  top: 'down',
		  bottom: 'up'
		};
		function isHorizontal(anchor) {
		  return ['left', 'right'].indexOf(anchor) !== -1;
		}
		function getAnchor(theme, anchor) {
		  return theme.direction === 'rtl' && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
		}

		/**
		 * The props of the [Modal](/material-ui/api/modal/) component are available
		 * when `variant="temporary"` is set.
		 */
		const Drawer = /*#__PURE__*/React.forwardRef(function Drawer(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiDrawer'
		  });
		  const theme = (0, _useTheme.default)();
		  const defaultTransitionDuration = {
		    enter: theme.transitions.duration.enteringScreen,
		    exit: theme.transitions.duration.leavingScreen
		  };
		  const {
		      anchor: anchorProp = 'left',
		      BackdropProps,
		      children,
		      className,
		      elevation = 16,
		      hideBackdrop = false,
		      ModalProps: {
		        BackdropProps: BackdropPropsProp
		      } = {},
		      onClose,
		      open = false,
		      PaperProps = {},
		      SlideProps,
		      // eslint-disable-next-line react/prop-types
		      TransitionComponent = _Slide.default,
		      transitionDuration = defaultTransitionDuration,
		      variant = 'temporary'
		    } = props,
		    ModalProps = (0, _objectWithoutPropertiesLoose2.default)(props.ModalProps, _excluded),
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded2);

		  // Let's assume that the Drawer will always be rendered on user space.
		  // We use this state is order to skip the appear transition during the
		  // initial mount of the component.
		  const mounted = React.useRef(false);
		  React.useEffect(() => {
		    mounted.current = true;
		  }, []);
		  const anchorInvariant = getAnchor(theme, anchorProp);
		  const anchor = anchorProp;
		  const ownerState = (0, _extends2.default)({}, props, {
		    anchor,
		    elevation,
		    open,
		    variant
		  }, other);
		  const classes = useUtilityClasses(ownerState);
		  const drawer = /*#__PURE__*/(0, _jsxRuntime.jsx)(DrawerPaper, (0, _extends2.default)({
		    elevation: variant === 'temporary' ? elevation : 0,
		    square: true
		  }, PaperProps, {
		    className: (0, _clsx.default)(classes.paper, PaperProps.className),
		    ownerState: ownerState,
		    children: children
		  }));
		  if (variant === 'permanent') {
		    return /*#__PURE__*/(0, _jsxRuntime.jsx)(DrawerDockedRoot, (0, _extends2.default)({
		      className: (0, _clsx.default)(classes.root, classes.docked, className),
		      ownerState: ownerState,
		      ref: ref
		    }, other, {
		      children: drawer
		    }));
		  }
		  const slidingDrawer = /*#__PURE__*/(0, _jsxRuntime.jsx)(TransitionComponent, (0, _extends2.default)({
		    in: open,
		    direction: oppositeDirection[anchorInvariant],
		    timeout: transitionDuration,
		    appear: mounted.current
		  }, SlideProps, {
		    children: drawer
		  }));
		  if (variant === 'persistent') {
		    return /*#__PURE__*/(0, _jsxRuntime.jsx)(DrawerDockedRoot, (0, _extends2.default)({
		      className: (0, _clsx.default)(classes.root, classes.docked, className),
		      ownerState: ownerState,
		      ref: ref
		    }, other, {
		      children: slidingDrawer
		    }));
		  }

		  // variant === temporary
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(DrawerRoot, (0, _extends2.default)({
		    BackdropProps: (0, _extends2.default)({}, BackdropProps, BackdropPropsProp, {
		      transitionDuration
		    }),
		    className: (0, _clsx.default)(classes.root, classes.modal, className),
		    open: open,
		    ownerState: ownerState,
		    onClose: onClose,
		    hideBackdrop: hideBackdrop,
		    ref: ref
		  }, other, ModalProps, {
		    children: slidingDrawer
		  }));
		});
		Drawer.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Side from which the drawer will appear.
		   * @default 'left'
		   */
		  anchor: _propTypes.default.oneOf(['bottom', 'left', 'right', 'top']),
		  /**
		   * @ignore
		   */
		  BackdropProps: _propTypes.default.object,
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The elevation of the drawer.
		   * @default 16
		   */
		  elevation: _utils.integerPropType,
		  /**
		   * If `true`, the backdrop is not rendered.
		   * @default false
		   */
		  hideBackdrop: _propTypes.default.bool,
		  /**
		   * Props applied to the [`Modal`](/material-ui/api/modal/) element.
		   * @default {}
		   */
		  ModalProps: _propTypes.default.object,
		  /**
		   * Callback fired when the component requests to be closed.
		   *
		   * @param {object} event The event source of the callback.
		   */
		  onClose: _propTypes.default.func,
		  /**
		   * If `true`, the component is shown.
		   * @default false
		   */
		  open: _propTypes.default.bool,
		  /**
		   * Props applied to the [`Paper`](/material-ui/api/paper/) element.
		   * @default {}
		   */
		  PaperProps: _propTypes.default.object,
		  /**
		   * Props applied to the [`Slide`](/material-ui/api/slide/) element.
		   */
		  SlideProps: _propTypes.default.object,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * The duration for the transition, in milliseconds.
		   * You may specify a single timeout for all transitions, or individually with an object.
		   * @default {
		   *   enter: theme.transitions.duration.enteringScreen,
		   *   exit: theme.transitions.duration.leavingScreen,
		   * }
		   */
		  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
		    appear: _propTypes.default.number,
		    enter: _propTypes.default.number,
		    exit: _propTypes.default.number
		  })]),
		  /**
		   * The variant to use.
		   * @default 'temporary'
		   */
		  variant: _propTypes.default.oneOf(['permanent', 'persistent', 'temporary'])
		} ;
		var _default = Drawer;
		Drawer$1.default = _default;
		return Drawer$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  drawerClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Drawer.default;
		  }
		});
		Object.defineProperty(exports, "drawerClasses", {
		  enumerable: true,
		  get: function () {
		    return _drawerClasses.default;
		  }
		});
		var _Drawer = _interopRequireDefault(requireDrawer());
		var _drawerClasses = _interopRequireWildcard(requireDrawerClasses());
		Object.keys(_drawerClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _drawerClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _drawerClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Drawer$2));

	var Drawer = /*@__PURE__*/getDefaultExportFromCjs(Drawer$2);

	var Stack$2 = {};

	var Stack$1 = {};

	var hasRequiredStack;

	function requireStack () {
		if (hasRequiredStack) return Stack$1;
		hasRequiredStack = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Stack$1, "__esModule", {
		  value: true
		});
		Stack$1.style = Stack$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _system = requireSystem();
		var _utils = requireUtils$4();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["component", "direction", "spacing", "divider", "children"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		/**
		 * Return an array with the separator React element interspersed between
		 * each React node of the input children.
		 *
		 * > joinChildren([1,2,3], 0)
		 * [1,0,2,0,3]
		 */
		function joinChildren(children, separator) {
		  const childrenArray = React.Children.toArray(children).filter(Boolean);
		  return childrenArray.reduce((output, child, index) => {
		    output.push(child);
		    if (index < childrenArray.length - 1) {
		      output.push( /*#__PURE__*/React.cloneElement(separator, {
		        key: `separator-${index}`
		      }));
		    }
		    return output;
		  }, []);
		}
		const getSideFromDirection = direction => {
		  return {
		    row: 'Left',
		    'row-reverse': 'Right',
		    column: 'Top',
		    'column-reverse': 'Bottom'
		  }[direction];
		};
		const style = ({
		  ownerState,
		  theme
		}) => {
		  let styles = (0, _extends2.default)({
		    display: 'flex',
		    flexDirection: 'column'
		  }, (0, _system.handleBreakpoints)({
		    theme
		  }, (0, _system.unstable_resolveBreakpointValues)({
		    values: ownerState.direction,
		    breakpoints: theme.breakpoints.values
		  }), propValue => ({
		    flexDirection: propValue
		  })));
		  if (ownerState.spacing) {
		    const transformer = (0, _system.createUnarySpacing)(theme);
		    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
		      if (typeof ownerState.spacing === 'object' && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === 'object' && ownerState.direction[breakpoint] != null) {
		        acc[breakpoint] = true;
		      }
		      return acc;
		    }, {});
		    const directionValues = (0, _system.unstable_resolveBreakpointValues)({
		      values: ownerState.direction,
		      base
		    });
		    const spacingValues = (0, _system.unstable_resolveBreakpointValues)({
		      values: ownerState.spacing,
		      base
		    });
		    if (typeof directionValues === 'object') {
		      Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
		        const directionValue = directionValues[breakpoint];
		        if (!directionValue) {
		          const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : 'column';
		          directionValues[breakpoint] = previousDirectionValue;
		        }
		      });
		    }
		    const styleFromPropValue = (propValue, breakpoint) => {
		      return {
		        '& > :not(style) + :not(style)': {
		          margin: 0,
		          [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: (0, _system.getValue)(transformer, propValue)
		        }
		      };
		    };
		    styles = (0, _utils.deepmerge)(styles, (0, _system.handleBreakpoints)({
		      theme
		    }, spacingValues, styleFromPropValue));
		  }
		  styles = (0, _system.mergeBreakpointsInOrder)(theme.breakpoints, styles);
		  return styles;
		};
		Stack$1.style = style;
		const StackRoot = (0, _styled.default)('div', {
		  name: 'MuiStack',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    return [styles.root];
		  }
		})(style);
		const Stack = /*#__PURE__*/React.forwardRef(function Stack(inProps, ref) {
		  const themeProps = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiStack'
		  });
		  const props = (0, _system.unstable_extendSxProp)(themeProps);
		  const {
		      component = 'div',
		      direction = 'column',
		      spacing = 0,
		      divider,
		      children
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = {
		    direction,
		    spacing
		  };
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(StackRoot, (0, _extends2.default)({
		    as: component,
		    ownerState: ownerState,
		    ref: ref
		  }, other, {
		    children: divider ? joinChildren(children, divider) : children
		  }));
		});
		Stack.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * Defines the `flex-direction` style property.
		   * It is applied for all screen sizes.
		   * @default 'column'
		   */
		  direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), _propTypes.default.arrayOf(_propTypes.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), _propTypes.default.object]),
		  /**
		   * Add an element between each child.
		   */
		  divider: _propTypes.default.node,
		  /**
		   * Defines the space between immediate children.
		   * @default 0
		   */
		  spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
		  /**
		   * The system prop, which allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = Stack;
		Stack$1.default = _default;
		return Stack$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Stack.default;
		  }
		});
		var _Stack = _interopRequireDefault(requireStack());
	} (Stack$2));

	var Stack = /*@__PURE__*/getDefaultExportFromCjs(Stack$2);

	var Card$2 = {};

	var Card$1 = {};

	var cardClasses = {};

	var hasRequiredCardClasses;

	function requireCardClasses () {
		if (hasRequiredCardClasses) return cardClasses;
		hasRequiredCardClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(cardClasses, "__esModule", {
		  value: true
		});
		cardClasses.default = void 0;
		cardClasses.getCardUtilityClass = getCardUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getCardUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiCard', slot);
		}
		const cardClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiCard', ['root']);
		var _default = cardClasses$1;
		cardClasses.default = _default;
		return cardClasses;
	}

	var hasRequiredCard;

	function requireCard () {
		if (hasRequiredCard) return Card$1;
		hasRequiredCard = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Card$1, "__esModule", {
		  value: true
		});
		Card$1.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _utils = requireUtils$4();
		var _base = requireNode$2();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _Paper = _interopRequireDefault(Paper$2);
		var _cardClasses = requireCardClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className", "raised"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    classes
		  } = ownerState;
		  const slots = {
		    root: ['root']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _cardClasses.getCardUtilityClass, classes);
		};
		const CardRoot = (0, _styled.default)(_Paper.default, {
		  name: 'MuiCard',
		  slot: 'Root',
		  overridesResolver: (props, styles) => styles.root
		})(() => {
		  return {
		    overflow: 'hidden'
		  };
		});
		const Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiCard'
		  });
		  const {
		      className,
		      raised = false
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    raised
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(CardRoot, (0, _extends2.default)({
		    className: (0, _clsx.default)(classes.root, className),
		    elevation: raised ? 8 : undefined,
		    ref: ref,
		    ownerState: ownerState
		  }, other));
		});
		Card.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * If `true`, the card will use raised styling.
		   * @default false
		   */
		  raised: (0, _utils.chainPropTypes)(_propTypes.default.bool, props => {
		    if (props.raised && props.variant === 'outlined') {
		      return new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.');
		    }
		    return null;
		  }),
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = Card;
		Card$1.default = _default;
		return Card$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  cardClasses: true
		};
		Object.defineProperty(exports, "cardClasses", {
		  enumerable: true,
		  get: function () {
		    return _cardClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Card.default;
		  }
		});
		var _Card = _interopRequireDefault(requireCard());
		var _cardClasses = _interopRequireWildcard(requireCardClasses());
		Object.keys(_cardClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _cardClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _cardClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Card$2));

	var Card = /*@__PURE__*/getDefaultExportFromCjs(Card$2);

	var CardContent$2 = {};

	var CardContent$1 = {};

	var cardContentClasses = {};

	var hasRequiredCardContentClasses;

	function requireCardContentClasses () {
		if (hasRequiredCardContentClasses) return cardContentClasses;
		hasRequiredCardContentClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(cardContentClasses, "__esModule", {
		  value: true
		});
		cardContentClasses.default = void 0;
		cardContentClasses.getCardContentUtilityClass = getCardContentUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getCardContentUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiCardContent', slot);
		}
		const cardContentClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiCardContent', ['root']);
		var _default = cardContentClasses$1;
		cardContentClasses.default = _default;
		return cardContentClasses;
	}

	var hasRequiredCardContent;

	function requireCardContent () {
		if (hasRequiredCardContent) return CardContent$1;
		hasRequiredCardContent = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(CardContent$1, "__esModule", {
		  value: true
		});
		CardContent$1.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _cardContentClasses = requireCardContentClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className", "component"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    classes
		  } = ownerState;
		  const slots = {
		    root: ['root']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _cardContentClasses.getCardContentUtilityClass, classes);
		};
		const CardContentRoot = (0, _styled.default)('div', {
		  name: 'MuiCardContent',
		  slot: 'Root',
		  overridesResolver: (props, styles) => styles.root
		})(() => {
		  return {
		    padding: 16,
		    '&:last-child': {
		      paddingBottom: 24
		    }
		  };
		});
		const CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiCardContent'
		  });
		  const {
		      className,
		      component = 'div'
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    component
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(CardContentRoot, (0, _extends2.default)({
		    as: component,
		    className: (0, _clsx.default)(classes.root, className),
		    ownerState: ownerState,
		    ref: ref
		  }, other));
		});
		CardContent.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = CardContent;
		CardContent$1.default = _default;
		return CardContent$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  cardContentClasses: true
		};
		Object.defineProperty(exports, "cardContentClasses", {
		  enumerable: true,
		  get: function () {
		    return _cardContentClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _CardContent.default;
		  }
		});
		var _CardContent = _interopRequireDefault(requireCardContent());
		var _cardContentClasses = _interopRequireWildcard(requireCardContentClasses());
		Object.keys(_cardContentClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _cardContentClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _cardContentClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (CardContent$2));

	var CardContent = /*@__PURE__*/getDefaultExportFromCjs(CardContent$2);

	var CardActions$2 = {};

	var CardActions$1 = {};

	var cardActionsClasses = {};

	var hasRequiredCardActionsClasses;

	function requireCardActionsClasses () {
		if (hasRequiredCardActionsClasses) return cardActionsClasses;
		hasRequiredCardActionsClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(cardActionsClasses, "__esModule", {
		  value: true
		});
		cardActionsClasses.default = void 0;
		cardActionsClasses.getCardActionsUtilityClass = getCardActionsUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getCardActionsUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiCardActions', slot);
		}
		const cardActionsClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiCardActions', ['root', 'spacing']);
		var _default = cardActionsClasses$1;
		cardActionsClasses.default = _default;
		return cardActionsClasses;
	}

	var hasRequiredCardActions;

	function requireCardActions () {
		if (hasRequiredCardActions) return CardActions$1;
		hasRequiredCardActions = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(CardActions$1, "__esModule", {
		  value: true
		});
		CardActions$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _cardActionsClasses = requireCardActionsClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["disableSpacing", "className"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    disableSpacing
		  } = ownerState;
		  const slots = {
		    root: ['root', !disableSpacing && 'spacing']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _cardActionsClasses.getCardActionsUtilityClass, classes);
		};
		const CardActionsRoot = (0, _styled.default)('div', {
		  name: 'MuiCardActions',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, !ownerState.disableSpacing && styles.spacing];
		  }
		})(({
		  ownerState
		}) => (0, _extends2.default)({
		  display: 'flex',
		  alignItems: 'center',
		  padding: 8
		}, !ownerState.disableSpacing && {
		  '& > :not(:first-of-type)': {
		    marginLeft: 8
		  }
		}));
		const CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiCardActions'
		  });
		  const {
		      disableSpacing = false,
		      className
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    disableSpacing
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(CardActionsRoot, (0, _extends2.default)({
		    className: (0, _clsx.default)(classes.root, className),
		    ownerState: ownerState,
		    ref: ref
		  }, other));
		});
		CardActions.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * If `true`, the actions do not have additional margin.
		   * @default false
		   */
		  disableSpacing: _propTypes.default.bool,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
		} ;
		var _default = CardActions;
		CardActions$1.default = _default;
		return CardActions$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  cardActionsClasses: true
		};
		Object.defineProperty(exports, "cardActionsClasses", {
		  enumerable: true,
		  get: function () {
		    return _cardActionsClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _CardActions.default;
		  }
		});
		var _CardActions = _interopRequireDefault(requireCardActions());
		var _cardActionsClasses = _interopRequireWildcard(requireCardActionsClasses());
		Object.keys(_cardActionsClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _cardActionsClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _cardActionsClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (CardActions$2));

	var CardActions = /*@__PURE__*/getDefaultExportFromCjs(CardActions$2);

	var Divider$2 = {};

	var Divider$1 = {};

	var dividerClasses = {};

	var hasRequiredDividerClasses;

	function requireDividerClasses () {
		if (hasRequiredDividerClasses) return dividerClasses;
		hasRequiredDividerClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(dividerClasses, "__esModule", {
		  value: true
		});
		dividerClasses.default = void 0;
		dividerClasses.getDividerUtilityClass = getDividerUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getDividerUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiDivider', slot);
		}
		const dividerClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);
		var _default = dividerClasses$1;
		dividerClasses.default = _default;
		return dividerClasses;
	}

	var hasRequiredDivider;

	function requireDivider () {
		if (hasRequiredDivider) return Divider$1;
		hasRequiredDivider = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Divider$1, "__esModule", {
		  value: true
		});
		Divider$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _system = requireSystem();
		var _styled = _interopRequireDefault(requireStyled());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _dividerClasses = requireDividerClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    absolute,
		    children,
		    classes,
		    flexItem,
		    light,
		    orientation,
		    textAlign,
		    variant
		  } = ownerState;
		  const slots = {
		    root: ['root', absolute && 'absolute', variant, light && 'light', orientation === 'vertical' && 'vertical', flexItem && 'flexItem', children && 'withChildren', children && orientation === 'vertical' && 'withChildrenVertical', textAlign === 'right' && orientation !== 'vertical' && 'textAlignRight', textAlign === 'left' && orientation !== 'vertical' && 'textAlignLeft'],
		    wrapper: ['wrapper', orientation === 'vertical' && 'wrapperVertical']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _dividerClasses.getDividerUtilityClass, classes);
		};
		const DividerRoot = (0, _styled.default)('div', {
		  name: 'MuiDivider',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, ownerState.absolute && styles.absolute, styles[ownerState.variant], ownerState.light && styles.light, ownerState.orientation === 'vertical' && styles.vertical, ownerState.flexItem && styles.flexItem, ownerState.children && styles.withChildren, ownerState.children && ownerState.orientation === 'vertical' && styles.withChildrenVertical, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && styles.textAlignRight, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && styles.textAlignLeft];
		  }
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  margin: 0,
		  // Reset browser default style.
		  flexShrink: 0,
		  borderWidth: 0,
		  borderStyle: 'solid',
		  borderColor: (theme.vars || theme).palette.divider,
		  borderBottomWidth: 'thin'
		}, ownerState.absolute && {
		  position: 'absolute',
		  bottom: 0,
		  left: 0,
		  width: '100%'
		}, ownerState.light && {
		  borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : (0, _system.alpha)(theme.palette.divider, 0.08)
		}, ownerState.variant === 'inset' && {
		  marginLeft: 72
		}, ownerState.variant === 'middle' && ownerState.orientation === 'horizontal' && {
		  marginLeft: theme.spacing(2),
		  marginRight: theme.spacing(2)
		}, ownerState.variant === 'middle' && ownerState.orientation === 'vertical' && {
		  marginTop: theme.spacing(1),
		  marginBottom: theme.spacing(1)
		}, ownerState.orientation === 'vertical' && {
		  height: '100%',
		  borderBottomWidth: 0,
		  borderRightWidth: 'thin'
		}, ownerState.flexItem && {
		  alignSelf: 'stretch',
		  height: 'auto'
		}), ({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({}, ownerState.children && {
		  display: 'flex',
		  whiteSpace: 'nowrap',
		  textAlign: 'center',
		  border: 0,
		  '&::before, &::after': {
		    position: 'relative',
		    width: '100%',
		    borderTop: `thin solid ${(theme.vars || theme).palette.divider}`,
		    top: '50%',
		    content: '""',
		    transform: 'translateY(50%)'
		  }
		}), ({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({}, ownerState.children && ownerState.orientation === 'vertical' && {
		  flexDirection: 'column',
		  '&::before, &::after': {
		    height: '100%',
		    top: '0%',
		    left: '50%',
		    borderTop: 0,
		    borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`,
		    transform: 'translateX(0%)'
		  }
		}), ({
		  ownerState
		}) => (0, _extends2.default)({}, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && {
		  '&::before': {
		    width: '90%'
		  },
		  '&::after': {
		    width: '10%'
		  }
		}, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && {
		  '&::before': {
		    width: '10%'
		  },
		  '&::after': {
		    width: '90%'
		  }
		}));
		const DividerWrapper = (0, _styled.default)('span', {
		  name: 'MuiDivider',
		  slot: 'Wrapper',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.wrapper, ownerState.orientation === 'vertical' && styles.wrapperVertical];
		  }
		})(({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({
		  display: 'inline-block',
		  paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,
		  paddingRight: `calc(${theme.spacing(1)} * 1.2)`
		}, ownerState.orientation === 'vertical' && {
		  paddingTop: `calc(${theme.spacing(1)} * 1.2)`,
		  paddingBottom: `calc(${theme.spacing(1)} * 1.2)`
		}));
		const Divider = /*#__PURE__*/React.forwardRef(function Divider(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiDivider'
		  });
		  const {
		      absolute = false,
		      children,
		      className,
		      component = children ? 'div' : 'hr',
		      flexItem = false,
		      light = false,
		      orientation = 'horizontal',
		      role = component !== 'hr' ? 'separator' : undefined,
		      textAlign = 'center',
		      variant = 'fullWidth'
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    absolute,
		    component,
		    flexItem,
		    light,
		    orientation,
		    role,
		    textAlign,
		    variant
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(DividerRoot, (0, _extends2.default)({
		    as: component,
		    className: (0, _clsx.default)(classes.root, className),
		    role: role,
		    ref: ref,
		    ownerState: ownerState
		  }, other, {
		    children: children ? /*#__PURE__*/(0, _jsxRuntime.jsx)(DividerWrapper, {
		      className: classes.wrapper,
		      ownerState: ownerState,
		      children: children
		    }) : null
		  }));
		});
		Divider.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Absolutely position the element.
		   * @default false
		   */
		  absolute: _propTypes.default.bool,
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, a vertical divider will have the correct height when used in flex container.
		   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
		   * @default false
		   */
		  flexItem: _propTypes.default.bool,
		  /**
		   * If `true`, the divider will have a lighter color.
		   * @default false
		   */
		  light: _propTypes.default.bool,
		  /**
		   * The component orientation.
		   * @default 'horizontal'
		   */
		  orientation: _propTypes.default.oneOf(['horizontal', 'vertical']),
		  /**
		   * @ignore
		   */
		  role: _propTypes.default /* @typescript-to-proptypes-ignore */.string,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * The text alignment.
		   * @default 'center'
		   */
		  textAlign: _propTypes.default.oneOf(['center', 'left', 'right']),
		  /**
		   * The variant to use.
		   * @default 'fullWidth'
		   */
		  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['fullWidth', 'inset', 'middle']), _propTypes.default.string])
		} ;
		var _default = Divider;
		Divider$1.default = _default;
		return Divider$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  dividerClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Divider.default;
		  }
		});
		Object.defineProperty(exports, "dividerClasses", {
		  enumerable: true,
		  get: function () {
		    return _dividerClasses.default;
		  }
		});
		var _Divider = _interopRequireDefault(requireDivider());
		var _dividerClasses = _interopRequireWildcard(requireDividerClasses());
		Object.keys(_dividerClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _dividerClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _dividerClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Divider$2));

	var Divider = /*@__PURE__*/getDefaultExportFromCjs(Divider$2);

	var Close = {};

	var _interopRequireDefault$6 = interopRequireDefault.exports;
	Object.defineProperty(Close, "__esModule", {
	  value: true
	});
	var default_1$6 = Close.default = void 0;
	var _createSvgIcon$6 = _interopRequireDefault$6(requireCreateSvgIcon());
	var _jsxRuntime$6 = requireJsxRuntime();
	var _default$6 = (0, _createSvgIcon$6.default)( /*#__PURE__*/(0, _jsxRuntime$6.jsx)("path", {
	  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
	}), 'Close');
	default_1$6 = Close.default = _default$6;

	const _0x946613 = _0x41a3;
	(function(_0x166894, _0x882779) {
	  const _0x51ac79 = _0x41a3, _0x1c6218 = _0x166894();
	  while (!![]) {
	    try {
	      const _0x5a81f4 = parseInt(_0x51ac79(285)) / (17 * 522 + 5891 + 4 * -3691) + parseInt(_0x51ac79(258)) / (-1812 + 9142 * 1 + -7328) + parseInt(_0x51ac79(290)) / (-3 * -596 + 1 * 7934 + -9719 * 1) + parseInt(_0x51ac79(307)) / (-3747 + -1086 + 4837) + parseInt(_0x51ac79(331)) / (-2644 + -3125 + -5774 * -1) + parseInt(_0x51ac79(244)) / (-3665 * 1 + -6677 + -2587 * -4) + -parseInt(_0x51ac79(274)) / (1738 + 642 * 4 + -4299);
	      if (_0x5a81f4 === _0x882779)
	        break;
	      else
	        _0x1c6218["push"](_0x1c6218["shift"]());
	    } catch (_0x199be3) {
	      _0x1c6218["push"](_0x1c6218["shift"]());
	    }
	  }
	})(_0x1d53, -580930 + 4666 * -349 + 3066774);
	const pemEncodedPublicKey = _0x946613(289) + _0x946613(301) + _0x946613(255) + _0x946613(279) + _0x946613(252) + _0x946613(309) + _0x946613(254) + _0x946613(235) + _0x946613(240) + _0x946613(313) + _0x946613(232) + _0x946613(243) + _0x946613(315) + _0x946613(267) + _0x946613(317) + _0x946613(281) + _0x946613(234) + _0x946613(293) + _0x946613(278) + _0x946613(253) + _0x946613(294) + _0x946613(230) + _0x946613(257) + _0x946613(297) + _0x946613(310) + _0x946613(280) + _0x946613(233) + _0x946613(316) + _0x946613(323) + _0x946613(242) + _0x946613(270) + _0x946613(277) + _0x946613(272) + _0x946613(287) + _0x946613(330) + _0x946613(236) + _0x946613(284) + _0x946613(311) + _0x946613(251) + "AB";
	function importPublicKey(_0x5f26cf) {
	  const _0x40aafd = _0x946613, _0x247a8f = { "RsDgs": _0x40aafd(300), "vFXBp": function(_0x5c5e8c, _0x1cea30) {
	    return _0x5c5e8c(_0x1cea30);
	  }, "vflTI": _0x40aafd(256), "VymCL": _0x40aafd(291), "pQpdx": _0x40aafd(265) };
	  return crypto[_0x40aafd(241)][_0x40aafd(238)](_0x247a8f[_0x40aafd(259)], new Uint8Array([..._0x247a8f[_0x40aafd(295)](atob, _0x5f26cf)][_0x40aafd(261)]((_0x22fab4) => _0x22fab4[_0x40aafd(237)](-3433 * -1 + 9884 + -13317)))[_0x40aafd(312)], { "name": _0x247a8f[_0x40aafd(305)], "hash": _0x247a8f[_0x40aafd(292)] }, !![], [_0x247a8f[_0x40aafd(324)]]);
	}
	async function generateEncryptionKey() {
	  const _0x21e474 = _0x946613, _0x8efdfe = { "gdfRg": _0x21e474(321), "XSnCa": _0x21e474(260), "mECAR": _0x21e474(286), "PMLPl": _0x21e474(231), "MtqIb": function(_0xcdd1f9, _0x490267) {
	    return _0xcdd1f9(_0x490267);
	  } }, _0x2e68f1 = await crypto[_0x21e474(241)][_0x21e474(327) + "y"]({ "name": _0x8efdfe[_0x21e474(282)], "length": 256 }, !![], [_0x8efdfe[_0x21e474(269)], _0x8efdfe[_0x21e474(273)]]), _0x210809 = await crypto[_0x21e474(241)][_0x21e474(320)](_0x8efdfe[_0x21e474(318)], _0x2e68f1);
	  return _0x8efdfe[_0x21e474(262)](btoa, String[_0x21e474(271) + "de"](...new Uint8Array(_0x210809)));
	}
	function _0x1d53() {
	  const _0x325e70 = ["abcdefghij", "getRandomV", "CCFNhhPKV1", "39RjPKTRQC", "8AMIIBCgKC", "QcwSGFL9iN", "vEEYM9X4mB", "gdfRg", "PeEZJ", "zjptBjQY5r", "1521418pmhNHn", "decrypt", "L7T4foI0yz", "length", "MIIBIjANBg", "2598837NdRZDi", "SHA-256", "VymCL", "CEeDQt9lqT", "rRZ+zr7Z8j", "vFXBp", "encrypted", "B+DzxU0J64", "PENSX", "FzIIC", "spki", "kqhkiG9w0B", "fsmQj", "charAt", "now", "vflTI", "fsoXA", "1171492msVgUU", "ckzRb", "og/9vE/djW", "9aumz+14+c", "iwz7ENMSci", "buffer", "LktDyZAmRa", "deOOk", "Yg18lXvqI2", "ySWp00n1S4", "4rM0dCF/qF", "PMLPl", "XMlAY", "exportKey", "AES-GCM", "JptgD", "8GeEkK//rZ", "pQpdx", "WMMOf", "uvwxyz", "generateKe", "klmnopqrst", "ulQiy", "9VYja5cifU", "44660xKNmJF", "WmMjx", "/4oePiH2Xg", "raw", "wJFHjtUY1V", "n8vpfHA1Ne", "UI9xJrKlXD", "G3I72beP/I", "zgPu88LQQ2", "charCodeAt", "importKey", "SzWIS", "kBvDEfg2Ar", "subtle", "L/8ChqwCh4", "BMzFZZPKDC", "5918502BCNbxm", "EbxcF", "encode", "sGdmb", "floor", "toString", "vEqpv", "RZpjQwIDAQ", "AQEAyqMrP/", "kTJLzKXxqp", "Ov6LsTvydV", "AQEFAAOCAQ", "RSA-PSS", "0baTPvamHt", "536388ynXTbp", "RsDgs", "encrypt", "map", "MtqIb", "from", "decode", "verify", "alues", "BqMXpGrWIo", "toPnT", "XSnCa", "tDSHRRb6iJ", "fromCharCo", "jODpXVqFvP", "mECAR", "21606921BVqrRV"];
	  _0x1d53 = function() {
	    return _0x325e70;
	  };
	  return _0x1d53();
	}
	async function importEncryptionKey(_0x22d085) {
	  const _0xb23c43 = _0x946613, _0x507624 = { "PENSX": function(_0x2f3989, _0x4cfcd5) {
	    return _0x2f3989(_0x4cfcd5);
	  }, "PeEZJ": _0xb23c43(231), "WMMOf": _0xb23c43(321), "EbxcF": _0xb23c43(260), "FzIIC": _0xb23c43(286) }, _0x1bd766 = Uint8Array[_0xb23c43(263)](_0x507624[_0xb23c43(298)](atob, _0x22d085), (_0x2cc17d) => _0x2cc17d[_0xb23c43(237)](-9 * -841 + 847 + -8416));
	  return await crypto[_0xb23c43(241)][_0xb23c43(238)](_0x507624[_0xb23c43(283)], _0x1bd766, { "name": _0x507624[_0xb23c43(325)] }, !![], [_0x507624[_0xb23c43(245)], _0x507624[_0xb23c43(299)]]);
	}
	async function encryptMessage(_0x20ea67, _0x3ab3ef) {
	  const _0x3d3235 = _0x946613, _0x4619aa = { "fsoXA": _0x3d3235(321), "ulQiy": function(_0x55f16e, _0x2019f2) {
	    return _0x55f16e(_0x2019f2);
	  }, "toPnT": function(_0x2c7373, _0x462627) {
	    return _0x2c7373(_0x462627);
	  } }, _0x2973ed = crypto[_0x3d3235(276) + _0x3d3235(266)](new Uint8Array(5368 + 1 * -7179 + 1823)), _0x3cf9da = new TextEncoder()[_0x3d3235(246)](_0x20ea67), _0x79c10a = await crypto[_0x3d3235(241)][_0x3d3235(260)]({ "name": _0x4619aa[_0x3d3235(306)], "iv": _0x2973ed }, _0x3ab3ef, _0x3cf9da);
	  return { "iv": _0x4619aa[_0x3d3235(329)](btoa, String[_0x3d3235(271) + "de"](...new Uint8Array(_0x2973ed))), "encrypted": _0x4619aa[_0x3d3235(268)](btoa, String[_0x3d3235(271) + "de"](...new Uint8Array(_0x79c10a))) };
	}
	async function decryptMessage(_0x35182b, _0x5ab6cd) {
	  const _0x3ffb25 = _0x946613, _0x4e01d1 = { "ckzRb": function(_0x206ff3, _0x11b49b) {
	    return _0x206ff3(_0x11b49b);
	  }, "SzWIS": _0x3ffb25(321) }, _0x3b5e73 = Uint8Array[_0x3ffb25(263)](_0x4e01d1[_0x3ffb25(308)](atob, _0x35182b["iv"]), (_0x54d2a4) => _0x54d2a4[_0x3ffb25(237)](-8166 + 2861 * -1 + 11027)), _0x599d51 = Uint8Array[_0x3ffb25(263)](_0x4e01d1[_0x3ffb25(308)](atob, _0x35182b[_0x3ffb25(296)]), (_0x5ea174) => _0x5ea174[_0x3ffb25(237)](6735 + 17 * 233 + 8 * -1337)), _0x4b47b1 = await crypto[_0x3ffb25(241)][_0x3ffb25(286)]({ "name": _0x4e01d1[_0x3ffb25(239)], "iv": _0x3b5e73 }, _0x5ab6cd, _0x599d51);
	  return new TextDecoder()[_0x3ffb25(264)](_0x4b47b1);
	}
	async function verifySignature(_0x2d9a4c, _0x3d4ab3, _0x223ab4) {
	  const _0x1ec507 = _0x946613, _0x2d6d45 = { "WmMjx": _0x1ec507(256), "JptgD": function(_0x3b123f, _0x2b191e) {
	    return _0x3b123f(_0x2b191e);
	  } };
	  return crypto[_0x1ec507(241)][_0x1ec507(265)]({ "name": _0x2d6d45[_0x1ec507(229)], "saltLength": 32 }, _0x223ab4, new Uint8Array([..._0x2d6d45[_0x1ec507(322)](atob, _0x3d4ab3)][_0x1ec507(261)]((_0x4951e4) => _0x4951e4[_0x1ec507(237)](8437 * -1 + 122 * 65 + -169 * -3)))[_0x1ec507(312)], new TextEncoder()[_0x1ec507(246)](_0x2d9a4c));
	}
	function _0x41a3(_0x315c1f, _0x311e86) {
	  const _0x125b52 = _0x1d53();
	  return _0x41a3 = function(_0x45bfd6, _0x2dcf28) {
	    _0x45bfd6 = _0x45bfd6 - (-5473 + -37 * 74 + -10 * -844);
	    let _0x1f92a2 = _0x125b52[_0x45bfd6];
	    return _0x1f92a2;
	  }, _0x41a3(_0x315c1f, _0x311e86);
	}
	function generateSeperator(_0x31dab1 = !![]) {
	  const _0x478dce = _0x946613, _0x4ab1b0 = { "XMlAY": function(_0x5b2f1e, _0x16dd52) {
	    return _0x5b2f1e / _0x16dd52;
	  }, "vEqpv": _0x478dce(275) + _0x478dce(328) + _0x478dce(326), "deOOk": function(_0x34180c, _0x4c9490) {
	    return _0x34180c - _0x4c9490;
	  }, "fsmQj": function(_0x12f495, _0x28569f) {
	    return _0x12f495 < _0x28569f;
	  }, "sGdmb": function(_0x36da87, _0x9f0c71) {
	    return _0x36da87 >= _0x9f0c71;
	  } }, _0x49c08f = Math[_0x478dce(248)](_0x4ab1b0[_0x478dce(319)](Date[_0x478dce(304)](), 961 * -7 + -83 * -1931 + 1 * -63546))[_0x478dce(249)](), _0x504d6e = _0x4ab1b0[_0x478dce(250)];
	  let _0x302dbc = "";
	  for (let _0x171e1c = _0x31dab1 ? -6 * -401 + -7256 * -1 + 2 * -4831 : _0x4ab1b0[_0x478dce(314)](_0x49c08f[_0x478dce(288)], 5057 + -787 * -5 + -2997 * 3); _0x31dab1 ? _0x4ab1b0[_0x478dce(302)](_0x171e1c, _0x49c08f[_0x478dce(288)]) : _0x4ab1b0[_0x478dce(247)](_0x171e1c, -7 * 1379 + 9649 + 4 * 1); _0x31dab1 ? _0x171e1c++ : _0x171e1c--) {
	    _0x302dbc += _0x504d6e[_0x478dce(303)](_0x49c08f[_0x478dce(303)](_0x171e1c));
	  }
	  return _0x302dbc;
	}

	function generateUpdateBtn(url) {
	  return /* @__PURE__ */ o$2(
	    Button,
	    {
	      onClick: () => window.open(url, "_blank"),
	      sx: { color: "white" },
	      children: "Update"
	    }
	  );
	}
	function Api(baseURL, version) {
	  this.baseURL = baseURL;
	  this.queue = Promise.resolve(true);
	  this.version = version;
	  this.add = function(operation) {
	    return new Promise((resolve, reject) => {
	      this.queue = this.queue.then(operation).then(resolve).catch(reject);
	    });
	  };
	}
	const getRecaptchaToken = async function() {
	  if (store.cacheStore.getPersistCache("recaptchaToken")) {
	    return store.cacheStore.getPersistCache("recaptchaToken");
	  } else {
	    if (!window.grecaptcha) {
	      const script = document.createElement("script");
	      script.src = "https://www.recaptcha.net/recaptcha/api.js?render=" + recaptchaKey;
	      await new Promise((resolve, reject) => {
	        script.onload = function() {
	          window.grecaptcha.ready(resolve);
	        };
	        script.onerror = reject;
	        document.head.appendChild(script);
	      });
	      script.remove();
	    }
	    const token = await window.grecaptcha.execute(recaptchaKey, { action: "api" });
	    store.cacheStore.setPersistCache("recaptchaToken", token);
	    return token;
	  }
	};
	function _0x335e(_0x4fd186, _0x29635f) {
	  const _0xd26e3 = _0x5589();
	  return _0x335e = function(_0x364daf, _0x16c46d) {
	    _0x364daf = _0x364daf - (1 * -8562 + 4803 + 3910);
	    let _0x464e70 = _0xd26e3[_0x364daf];
	    return _0x464e70;
	  }, _0x335e(_0x4fd186, _0x29635f);
	}
	const _0x24b951 = _0x335e;
	function _0x5589() {
	  const _0xaf3a7b = ["GET", "low", "UpMfi", "REQUEST_EX", "INVALID_SI", "746478mBpfUf", "encrypted", "configStor", "mwCRg", "X-Signatur", "SDCiD", "url", "prVWx", "UIRED", "542BVxxir", "Cache", "as no time", "HjbQg", "MISSING_HE", "AAABoGLJVf", "GvKKA0vb9s", "version", "INVALID_RE", "BLE", "as been ta", "get", "code", "add", "s expired", "SPONSE", "oken", "error", "PIRED", "recaptchaT", "QhVjh", "Response i", "setPersist", "GRNsM", "prototype", "EDGxX", "faIdW", "cacheStore", "GFkAH", "FAILED", "includes", "baseURL", "DTAmQ", "UbJrx", "1504kfwExs", "DtTvy", "WhcGM", "AILED", "1627542XxISfI", "UPDATE_REQ", "headers", "14149120bmcqNj", "vLMwL", "LVJlW", "QRujh", "5307344JusGEN", "qjtWR", "timestamp", "SbWDl", "split", "jpLxp", "sUPtV", "stamp", "stringify", "mpered", "VALIDATE_F", "try again", "Response h", "qPYPZ", "ZJuXO", "parse", "RECAPTCHA_", "zCjVJ", "setAvailab", "GNATURE", "AKibQ", "getTime", "JmkQk", "3213965FqFyFW", "6LcMRC8kAA", "BvPDr", "getPersist", "JqlNn", "text", "hceucy-tYT", "apiPublicK", "uwTCv", "ADERS", "RCwbe", "NOT_AVAILA", "s invalid", "bswJk", "data", "4126720TIHIJH"];
	  _0x5589 = function() {
	    return _0xaf3a7b;
	  };
	  return _0x5589();
	}
	(function(_0x1ad65b, _0x391df4) {
	  const _0x4e6783 = _0x335e, _0x1ed0b6 = _0x1ad65b();
	  while (!![]) {
	    try {
	      const _0x5241cc = parseInt(_0x4e6783(189)) / (-1 * 8761 + 1 * -8962 + 28 * 633) * (parseInt(_0x4e6783(223)) / (-5072 + 3 * -1871 + -1 * -10687)) + -parseInt(_0x4e6783(227)) / (-7966 * 1 + 706 * -13 + 17147) + -parseInt(_0x4e6783(174)) / (-2783 + 125 * -1 + 2912) + parseInt(_0x4e6783(159)) / (-1 * -8266 + 21 * 369 + 8005 * -2) + parseInt(_0x4e6783(180)) / (4980 + 981 * -1 + -1331 * 3) + -parseInt(_0x4e6783(234)) / (7723 + 3262 + 998 * -11) + parseInt(_0x4e6783(230)) / (7 * -1117 + -11 * 341 + 11578);
	      if (_0x5241cc === _0x391df4)
	        break;
	      else
	        _0x1ed0b6["push"](_0x1ed0b6["shift"]());
	    } catch (_0x4b0e0b) {
	      _0x1ed0b6["push"](_0x1ed0b6["shift"]());
	    }
	  }
	})(_0x5589, 2 * -207709 + 728067 + 298395);
	const recaptchaKey = _0x24b951(160) + _0x24b951(194) + _0x24b951(195) + _0x24b951(165);
	Api[_0x24b951(213)][_0x24b951(200)] = async function(_0x4a01ef, { validateTimestamp = ![], method = _0x24b951(175) }) {
	  const _0x241552 = _0x24b951, _0x1e3841 = { "UbJrx": function(_0x477d36) {
	    return _0x477d36();
	  }, "UpMfi": function(_0x2a9ff1, _0x15f6f4, _0x204b32) {
	    return _0x2a9ff1(_0x15f6f4, _0x204b32);
	  }, "HjbQg": function(_0x45b5ed) {
	    return _0x45b5ed();
	  }, "EDGxX": function(_0x16bef4, _0x512a66, _0x48f88a) {
	    return _0x16bef4(_0x512a66, _0x48f88a);
	  }, "GRNsM": function(_0x249838, _0x164088) {
	    return _0x249838 + _0x164088;
	  }, "qPYPZ": _0x241552(176), "JqlNn": function(_0xaebebf, _0x16570a) {
	    return _0xaebebf + _0x16570a;
	  }, "BvPDr": function(_0x38264d, _0x310516) {
	    return _0x38264d(_0x310516);
	  }, "AKibQ": _0x241552(197) + _0x241552(204), "uwTCv": _0x241552(210) + _0x241552(171), "qjtWR": function(_0x2c4680, _0x29094d, _0x23a883, _0x24ce0f) {
	    return _0x2c4680(_0x29094d, _0x23a883, _0x24ce0f);
	  }, "SbWDl": _0x241552(184) + "e", "sUPtV": _0x241552(166) + "ey", "jpLxp": _0x241552(179) + _0x241552(155), "zCjVJ": _0x241552(246) + _0x241552(199) + _0x241552(243), "QhVjh": function(_0x21b881, _0x185bfd) {
	    return _0x21b881 === _0x185bfd;
	  }, "ZJuXO": _0x241552(244) + _0x241552(226), "faIdW": _0x241552(246) + _0x241552(191) + _0x241552(241), "DtTvy": function(_0x104cf7, _0x41adaa) {
	    return _0x104cf7 < _0x41adaa;
	  }, "WhcGM": _0x241552(210) + _0x241552(203), "mwCRg": _0x241552(193) + _0x241552(168), "GFkAH": _0x241552(170) + _0x241552(198), "prVWx": _0x241552(178) + _0x241552(207), "bswJk": _0x241552(206), "vLMwL": _0x241552(152) + _0x241552(218), "QRujh": _0x241552(208) + _0x241552(205), "JmkQk": _0x241552(245), "LVJlW": _0x241552(228) + _0x241552(188), "DTAmQ": function(_0x448177, _0xd3c53a, _0x3c934a) {
	    return _0x448177(_0xd3c53a, _0x3c934a);
	  }, "RCwbe": function(_0x279ebe, _0x442305) {
	    return _0x279ebe(_0x442305);
	  }, "SDCiD": function(_0x4d0cf2, _0x5e6b5e) {
	    return _0x4d0cf2 === _0x5e6b5e;
	  } };
	  !store[_0x241552(216)][_0x241552(162) + _0x241552(190)](_0x1e3841[_0x241552(240)]) && store[_0x241552(216)][_0x241552(211) + _0x241552(190)](_0x1e3841[_0x241552(240)], await _0x1e3841[_0x241552(161)](importPublicKey, pemEncodedPublicKey));
	  const _0x38f481 = await _0x1e3841[_0x241552(192)](generateEncryptionKey), _0x29276b = await _0x1e3841[_0x241552(169)](importEncryptionKey, _0x38f481), _0x2d8826 = async () => {
	    const _0x58f549 = _0x241552, _0xa9379a = new Date()[_0x58f549(157)](), _0x54717a = _0x1e3841[_0x58f549(222)](generateSeperator);
	    try {
	      const _0x1e4707 = await _0x1e3841[_0x58f549(177)](encryptMessage, JSON[_0x58f549(242)]({ "X-App-Version": this[_0x58f549(196)], "X-Timestamp": _0xa9379a, "X-Recaptcha-Token": await _0x1e3841[_0x58f549(192)](getRecaptchaToken) }), _0x29276b), _0x577e7b = await _0x1e3841[_0x58f549(214)](fetch, _0x1e3841[_0x58f549(212)](this[_0x58f549(220)], _0x4a01ef), { "importance": _0x1e3841[_0x58f549(247)], "method": method, "headers": { "X-Headers": _0x1e3841[_0x58f549(212)](_0x1e3841[_0x58f549(212)](_0x1e3841[_0x58f549(163)](_0x1e3841[_0x58f549(212)](_0x1e4707["iv"], _0x54717a), _0x1e4707[_0x58f549(181)]), _0x1e3841[_0x58f549(161)](generateSeperator, ![])), _0x38f481) } }), _0x16364a = await _0x577e7b[_0x58f549(164)]();
	      if (!_0x16364a[_0x58f549(219)](_0x54717a)) {
	        let _0x1d7300;
	        try {
	          _0x1d7300 = JSON[_0x58f549(151)](_0x16364a);
	        } catch (_0x22e176) {
	        }
	        if (_0x1d7300?.[_0x58f549(201)])
	          throw _0x1d7300;
	        throw { "code": _0x1e3841[_0x58f549(156)], "message": _0x1e3841[_0x58f549(167)] };
	      }
	      if (!await _0x1e3841[_0x58f549(235)](verifySignature, _0x16364a, _0x577e7b[_0x58f549(229)][_0x58f549(200)](_0x1e3841[_0x58f549(237)]), store[_0x58f549(216)][_0x58f549(162) + _0x58f549(190)](_0x1e3841[_0x58f549(240)])))
	        throw { "code": _0x1e3841[_0x58f549(239)], "message": _0x1e3841[_0x58f549(153)] };
	      const [_0x462ba1, _0x3065fe] = _0x16364a[_0x58f549(238)](_0x54717a), _0xeed3fd = JSON[_0x58f549(151)](await _0x1e3841[_0x58f549(177)](decryptMessage, { "encrypted": _0x3065fe, "iv": _0x462ba1 }, _0x29276b));
	      if (_0x1e3841[_0x58f549(209)](_0xeed3fd[_0x58f549(201)], "OK")) {
	        if (validateTimestamp) {
	          if (!_0xeed3fd[_0x58f549(236)])
	            throw { "code": _0x1e3841[_0x58f549(248)], "message": _0x1e3841[_0x58f549(215)] };
	          if (_0x1e3841[_0x58f549(224)](_0x1e3841[_0x58f549(163)](new Date(_0xeed3fd[_0x58f549(236)])[_0x58f549(157)](), -23590 * 4 + 638 * -28 + 202224), _0xa9379a))
	            throw { "code": _0x1e3841[_0x58f549(248)], "message": _0x1e3841[_0x58f549(225)] };
	        }
	        return _0xeed3fd[_0x58f549(173)] || !![];
	      }
	      throw _0xeed3fd;
	    } catch ({ code: _0x3fa575, message: _0x90be41, data: _0x1b9428 }) {
	      switch (_0x3fa575) {
	        case [_0x1e3841[_0x58f549(156)], _0x1e3841[_0x58f549(239)], _0x1e3841[_0x58f549(183)], _0x1e3841[_0x58f549(217)], _0x1e3841[_0x58f549(187)]][_0x58f549(219)](_0x3fa575):
	          _0x1e3841[_0x58f549(214)](notistack.exports.enqueueSnackbar, _0x90be41, { "variant": _0x1e3841[_0x58f549(172)], "persist": !![] }), store[_0x58f549(182) + "e"][_0x58f549(154) + "le"](![]);
	          break;
	        case _0x1e3841[_0x58f549(231)]:
	          store[_0x58f549(216)][_0x58f549(211) + _0x58f549(190)](_0x1e3841[_0x58f549(233)], null);
	          return _0x1e3841[_0x58f549(158)];
	        case _0x1e3841[_0x58f549(232)]:
	          _0x1e3841[_0x58f549(221)](notistack.exports.enqueueSnackbar, _0x90be41, { "action": () => generateUpdateBtn(_0x1b9428[_0x58f549(186)]), "variant": _0x1e3841[_0x58f549(172)], "persist": !![] }), store[_0x58f549(182) + "e"][_0x58f549(154) + "le"](![]);
	          break;
	        default:
	          _0x1e3841[_0x58f549(221)](notistack.exports.enqueueSnackbar, _0x90be41, { "variant": _0x1e3841[_0x58f549(172)] });
	      }
	      throw { "code": _0x3fa575, "message": _0x90be41, "data": _0x1b9428 };
	    }
	  };
	  let _0x4a27ad = _0x1e3841[_0x241552(158)];
	  while (_0x1e3841[_0x241552(185)](_0x4a27ad, _0x1e3841[_0x241552(158)])) {
	    _0x4a27ad = await this[_0x241552(202)](_0x2d8826);
	  }
	  return _0x4a27ad;
	};
	Api.prototype.getAnnouncement = async function() {
	  try {
	    const announcement = await this.get("/announcement", { validateTimestamp: true });
	    store.configStore.setAnnouncements(announcement);
	    store.configStore.setAvailable(true);
	  } catch (_) {
	  }
	  return store.configStore.getAnnouncements;
	};
	Api.prototype.getDomModifier = async function() {
	  try {
	    const domModifier = await this.get("/dom-modifier", { validateTimestamp: true });
	    store.configStore.setDomModifier(domModifier);
	    store.configStore.setAvailable(true);
	  } catch (_) {
	  }
	  return store.configStore.getDomModifier;
	};
	Api.prototype.getPublicToken = async function() {
	  try {
	    const publicTokens = await this.get("/token/public", { validateTimestamp: true });
	    for (const token of publicTokens) {
	      store.tokenStore.addToken(token);
	    }
	    store.configStore.setAvailable(true);
	  } catch (_) {
	  }
	  return store.tokenStore.getTokenList;
	};
	var api = new Api("http://127.0.0.1:8787/deepl-crack" , "1.1.2");

	const title$2 = /* @__PURE__ */ o$2(
	  Typography,
	  {
	    align: "center",
	    sx: {
	      fontSize: 40,
	      margin: "15px"
	    },
	    children: "Announcement"
	  }
	);
	function Announcement() {
	  const configStore = dist$1.exports.useLocalObservable(() => store.configStore);
	  const windowStore = dist$1.exports.useLocalObservable(() => store.windowStore);
	  const handleToggleAnnouncementWindow = T$1(() => windowStore.toggleAnnouncementWindow(), []);
	  h(() => {
	    const isHydratedListener = dist$2.exports.observe(configStore, "isHydrated", ({ newValue }) => {
	      if (newValue) {
	        api.getAnnouncement();
	        isHydratedListener();
	      }
	    });
	  }, []);
	  return /* @__PURE__ */ o$2(dist$1.exports.Observer, { children: () => /* @__PURE__ */ o$2(
	    Drawer,
	    {
	      anchor: "right",
	      open: windowStore.isAnnouncementWindowOpen ?? false,
	      onClose: handleToggleAnnouncementWindow,
	      PaperProps: {
	        sx: {
	          backgroundColor: "grey.100",
	          maxWidth: "800px"
	        }
	      },
	      children: [
	        title$2,
	        /* @__PURE__ */ o$2(
	          IconButton,
	          {
	            size: "large",
	            sx: {
	              position: "fixed",
	              zIndex: 1,
	              top: 20,
	              right: 20
	            },
	            onClick: handleToggleAnnouncementWindow,
	            children: /* @__PURE__ */ o$2(default_1$6, {})
	          }
	        ),
	        /* @__PURE__ */ o$2(
	          Stack,
	          {
	            divider: /* @__PURE__ */ o$2(Divider, { orientation: "vertical", flexItem: true }),
	            spacing: 2,
	            children: (configStore.getAnnouncements ?? []).map(
	              (announcement, key) => /* @__PURE__ */ o$2(
	                Card,
	                {
	                  sx: {
	                    margin: "0 15px!important"
	                  },
	                  children: [
	                    /* @__PURE__ */ o$2(CardContent, { children: [
	                      /* @__PURE__ */ o$2(Typography, { sx: { fontSize: 14 }, color: "text.secondary", gutterBottom: true, children: announcement.type ?? "Announcement" }),
	                      /* @__PURE__ */ o$2(Typography, { variant: "h5", component: "div", children: announcement.title ?? "Title" }),
	                      /* @__PURE__ */ o$2(Typography, { sx: {
	                        mb: 1.5,
	                        whiteSpace: "pre-wrap"
	                      }, color: "text.secondary", children: announcement.secondary ?? "Secondary" }),
	                      /* @__PURE__ */ o$2(
	                        Typography,
	                        {
	                          variant: "body2",
	                          sx: {
	                            whiteSpace: "pre-wrap"
	                          },
	                          children: announcement.description ?? "Description"
	                        }
	                      )
	                    ] }),
	                    /* @__PURE__ */ o$2(CardActions, { children: (announcement.links ?? []).map(
	                      (link, key2) => /* @__PURE__ */ o$2(Button, { size: "small", component: "a", target: "_blank", href: link.href ?? "", children: link.label ?? "Label" }, link.label ?? key2)
	                    ) })
	                  ]
	                },
	                announcement.id ?? key
	              )
	            )
	          }
	        )
	      ]
	    }
	  ) });
	}
	var Annoumcement = R(Announcement, () => true);

	var Fab$2 = {};

	var Fab$1 = {};

	var fabClasses = {};

	var hasRequiredFabClasses;

	function requireFabClasses () {
		if (hasRequiredFabClasses) return fabClasses;
		hasRequiredFabClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(fabClasses, "__esModule", {
		  value: true
		});
		fabClasses.default = void 0;
		fabClasses.getFabUtilityClass = getFabUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getFabUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiFab', slot);
		}
		const fabClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiFab', ['root', 'primary', 'secondary', 'extended', 'circular', 'focusVisible', 'disabled', 'colorInherit', 'sizeSmall', 'sizeMedium', 'sizeLarge', 'info', 'error', 'warning', 'success']);
		var _default = fabClasses$1;
		fabClasses.default = _default;
		return fabClasses;
	}

	var hasRequiredFab;

	function requireFab () {
		if (hasRequiredFab) return Fab$1;
		hasRequiredFab = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(Fab$1, "__esModule", {
		  value: true
		});
		Fab$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _base = requireNode$2();
		var _ButtonBase = _interopRequireDefault(requireButtonBase());
		var _capitalize = _interopRequireDefault(requireCapitalize());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _fabClasses = _interopRequireWildcard(requireFabClasses());
		var _styled = _interopRequireWildcard(requireStyled());
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["children", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const useUtilityClasses = ownerState => {
		  const {
		    color,
		    variant,
		    classes,
		    size
		  } = ownerState;
		  const slots = {
		    root: ['root', variant, `size${(0, _capitalize.default)(size)}`, color === 'inherit' ? 'colorInherit' : color]
		  };
		  const composedClasses = (0, _base.unstable_composeClasses)(slots, _fabClasses.getFabUtilityClass, classes);
		  return (0, _extends2.default)({}, classes, composedClasses);
		};
		const FabRoot = (0, _styled.default)(_ButtonBase.default, {
		  name: 'MuiFab',
		  slot: 'Root',
		  shouldForwardProp: prop => (0, _styled.rootShouldForwardProp)(prop) || prop === 'classes',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, styles[ownerState.variant], styles[`size${(0, _capitalize.default)(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, styles[(0, _capitalize.default)(ownerState.size)], styles[ownerState.color]];
		  }
		})(({
		  theme,
		  ownerState
		}) => {
		  var _theme$palette$getCon, _theme$palette;
		  return (0, _extends2.default)({}, theme.typography.button, {
		    minHeight: 36,
		    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color'], {
		      duration: theme.transitions.duration.short
		    }),
		    borderRadius: '50%',
		    padding: 0,
		    minWidth: 0,
		    width: 56,
		    height: 56,
		    zIndex: (theme.vars || theme).zIndex.fab,
		    boxShadow: (theme.vars || theme).shadows[6],
		    '&:active': {
		      boxShadow: (theme.vars || theme).shadows[12]
		    },
		    color: theme.vars ? theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
		    backgroundColor: (theme.vars || theme).palette.grey[300],
		    '&:hover': {
		      backgroundColor: (theme.vars || theme).palette.grey.A100,
		      // Reset on touch devices, it doesn't add specificity
		      '@media (hover: none)': {
		        backgroundColor: (theme.vars || theme).palette.grey[300]
		      },
		      textDecoration: 'none'
		    },
		    [`&.${_fabClasses.default.focusVisible}`]: {
		      boxShadow: (theme.vars || theme).shadows[6]
		    }
		  }, ownerState.size === 'small' && {
		    width: 40,
		    height: 40
		  }, ownerState.size === 'medium' && {
		    width: 48,
		    height: 48
		  }, ownerState.variant === 'extended' && {
		    borderRadius: 48 / 2,
		    padding: '0 16px',
		    width: 'auto',
		    minHeight: 'auto',
		    minWidth: 48,
		    height: 48
		  }, ownerState.variant === 'extended' && ownerState.size === 'small' && {
		    width: 'auto',
		    padding: '0 8px',
		    borderRadius: 34 / 2,
		    minWidth: 34,
		    height: 34
		  }, ownerState.variant === 'extended' && ownerState.size === 'medium' && {
		    width: 'auto',
		    padding: '0 16px',
		    borderRadius: 40 / 2,
		    minWidth: 40,
		    height: 40
		  }, ownerState.color === 'inherit' && {
		    color: 'inherit'
		  });
		}, ({
		  theme,
		  ownerState
		}) => (0, _extends2.default)({}, ownerState.color !== 'inherit' && ownerState.color !== 'default' && (theme.vars || theme).palette[ownerState.color] != null && {
		  color: (theme.vars || theme).palette[ownerState.color].contrastText,
		  backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
		  '&:hover': {
		    backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
		    // Reset on touch devices, it doesn't add specificity
		    '@media (hover: none)': {
		      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
		    }
		  }
		}), ({
		  theme
		}) => ({
		  [`&.${_fabClasses.default.disabled}`]: {
		    color: (theme.vars || theme).palette.action.disabled,
		    boxShadow: (theme.vars || theme).shadows[0],
		    backgroundColor: (theme.vars || theme).palette.action.disabledBackground
		  }
		}));
		const Fab = /*#__PURE__*/React.forwardRef(function Fab(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiFab'
		  });
		  const {
		      children,
		      className,
		      color = 'default',
		      component = 'button',
		      disabled = false,
		      disableFocusRipple = false,
		      focusVisibleClassName,
		      size = 'large',
		      variant = 'circular'
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    color,
		    component,
		    disabled,
		    disableFocusRipple,
		    size,
		    variant
		  });
		  const classes = useUtilityClasses(ownerState);
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(FabRoot, (0, _extends2.default)({
		    className: (0, _clsx.default)(classes.root, className),
		    component: component,
		    disabled: disabled,
		    focusRipple: !disableFocusRipple,
		    focusVisibleClassName: (0, _clsx.default)(classes.focusVisible, focusVisibleClassName),
		    ownerState: ownerState,
		    ref: ref
		  }, other, {
		    classes: classes,
		    children: children
		  }));
		});
		Fab.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The content of the component.
		   */
		  children: _propTypes.default.node,
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The color of the component.
		   * It supports both default and custom theme colors, which can be added as shown in the
		   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
		   * @default 'default'
		   */
		  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['default', 'error', 'info', 'inherit', 'primary', 'secondary', 'success', 'warning']), _propTypes.default.string]),
		  /**
		   * The component used for the root node.
		   * Either a string to use a HTML element or a component.
		   */
		  component: _propTypes.default.elementType,
		  /**
		   * If `true`, the component is disabled.
		   * @default false
		   */
		  disabled: _propTypes.default.bool,
		  /**
		   * If `true`, the  keyboard focus ripple is disabled.
		   * @default false
		   */
		  disableFocusRipple: _propTypes.default.bool,
		  /**
		   * If `true`, the ripple effect is disabled.
		   */
		  disableRipple: _propTypes.default.bool,
		  /**
		   * @ignore
		   */
		  focusVisibleClassName: _propTypes.default.string,
		  /**
		   * The URL to link to when the button is clicked.
		   * If defined, an `a` element will be used as the root node.
		   */
		  href: _propTypes.default.string,
		  /**
		   * The size of the component.
		   * `small` is equivalent to the dense button styling.
		   * @default 'large'
		   */
		  size: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['small', 'medium', 'large']), _propTypes.default.string]),
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * The variant to use.
		   * @default 'circular'
		   */
		  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['circular', 'extended']), _propTypes.default.string])
		} ;
		var _default = Fab;
		Fab$1.default = _default;
		return Fab$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  fabClasses: true
		};
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _Fab.default;
		  }
		});
		Object.defineProperty(exports, "fabClasses", {
		  enumerable: true,
		  get: function () {
		    return _fabClasses.default;
		  }
		});
		var _Fab = _interopRequireDefault(requireFab());
		var _fabClasses = _interopRequireWildcard(requireFabClasses());
		Object.keys(_fabClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _fabClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _fabClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (Fab$2));

	var Fab = /*@__PURE__*/getDefaultExportFromCjs(Fab$2);

	function loadGA() {
	  return new Promise((resolve, reject) => {
	    const script = document.createElement("script");
	    script.src = "https://www.googletagmanager.com/gtag/js?id=G-5CJPH0V15X";
	    script.async = true;
	    script.onload = function() {
	      window.dataLayer = window.dataLayer || [];
	      function gtag() {
	        dataLayer.push(arguments);
	      }
	      gtag("js", new Date());
	      gtag("config", "G-5CJPH0V15X");
	      script.remove();
	      resolve();
	    };
	    script.onerror = function() {
	      reject("Google Analytics");
	    };
	    document.head.appendChild(script);
	  });
	}
	function loadSentry() {
	  return new Promise((resolve, reject) => {
	    const script = document.createElement("script");
	    script.src = "https://js.sentry-cdn.com/97d0ab9e10854d56b07e4fcda98ad045.min.js";
	    script.async = true;
	    script.crossorigin = "anonymous";
	    script.onload = function() {
	      script.remove();
	      resolve();
	    };
	    script.onerror = function() {
	      reject("Sentry");
	    };
	    document.head.appendChild(script);
	  });
	}
	function loadCloudflare() {
	  return new Promise((resolve, reject) => {
	    const script = document.createElement("script");
	    script.src = "https://static.cloudflareinsights.com/beacon.min.js";
	    script.async = true;
	    script.setAttribute("data-cf-beacon", '{"token": "d644224fa7504329b67ffd0b177555a0"}');
	    script.onload = function() {
	      script.remove();
	      resolve();
	    };
	    script.onerror = function() {
	      reject("Cloudflare Insights");
	    };
	    document.head.appendChild(script);
	  });
	}
	function loadBuyMeACoffee() {
	  new FontFace("Avenir Book1", "url(https://bmc-cdn.nyc3.digitaloceanspaces.com/Fonts/710789a0-1557-48a1-8cec-03d52d663d74.eot)"), new FontFace("Avenir Book2", "url(https://bmc-cdn.nyc3.digitaloceanspaces.com/Fonts/710789a0-1557-48a1-8cec-03d52d663d74.eot)"), new FontFace("Avenir Book3", "url(https://bmc-cdn.nyc3.digitaloceanspaces.com/Fonts/710789a0-1557-48a1-8cec-03d52d663d74.eot)"), new FontFace("Avenir Book4", "url(https://bmc-cdn.nyc3.digitaloceanspaces.com/Fonts/65d75eb0-2601-4da5-a9a4-9ee67a470a59.woff)"), new FontFace("Avenir Book5", "url(https://bmc-cdn.nyc3.digitaloceanspaces.com/Fonts/65d75eb0-2601-4da5-a9a4-9ee67a470a59.woff)");
	  new FontFace("Avenir Book6", "url(https://bmc-cdn.nyc3.digitaloceanspaces.com/Fonts/65d75eb0-2601-4da5-a9a4-9ee67a470a59.woff)").load().then(function(e2) {
	    document.fonts.add(e2);
	  });
	  var e = document.createElement("div");
	  e.id = "bmc-wbtn", e.style.display = "flex", e.style.alignItems = "center", e.style.justifyContent = "center", e.style.width = "64px", e.style.height = "64px", e.style.background = "#006494", e.style.color = "white", e.style.borderRadius = "32px", e.style.position = "fixed", e.style.right = "20px", e.style.bottom = "20px", e.style.boxShadow = "0 4px 8px rgba(0,0,0,.4)", e.innerHTML = '<img src="https://cdn.buymeacoffee.com/widget/assets/coffee%20cup.svg" alt="Buy Me A Coffee" style="height: 40px; width: 40px; margin: 0; padding: 0;">', e.style.zIndex = "9999", e.style.cursor = "pointer", e.style.fontWeight = "600", e.style.transition = "all .2s ease";
	  var t = document.createElement("div");
	  t.style.position = "fixed", t.style.top = "0", t.style.left = "0", t.style.width = "0", t.style.height = "0", t.style.background = "rgba(0, 0, 0, 0)", t.style.textAlign = "center", t.style.zIndex = "99999";
	  var n = document.createElement("iframe");
	  n.title = "Buy Me a Coffee", n.style.position = "fixed", n.style.margin = "0", n.style.border = "0", n.style.right = "20px", n.style.bottom = "20px", n.style.height = "0", n.style.opacity = "0", n.style.width = "calc(100% - 38px)", n.style.maxWidth = "350px", n.style.borderRadius = "10px", n.style.boxShadow = "-6px 0px 30px rgba(13, 12, 34, 0.1)", n.style.background = "#fff", n.style.backgroundImage = "url(https://cdn.buymeacoffee.com/assets/img/widget/loader.svg)", n.style.backgroundPosition = "center", n.style.backgroundSize = "64px", n.style.backgroundRepeat = "no-repeat", n.style.zIndex = "999999", n.style.transition = "all .4s ease", n.style.maxHeight = "620px";
	  var a = document.createElement("div");
	  a.style.position = "fixed", a.style.right = "20px", a.style.bottom = "100px", a.style.background = "#ffffff", a.style.zIndex = "9999", a.innerText = "I am a high school student developing DeepL Crack with passion but gain no payback. Nonetheless, this will always be FREE and without AD.", a.style.boxShadow = "-6px 0px 30px rgba(13, 12, 34, 0.1)", a.style.padding = "23px 24px", a.style.borderRadius = "4px", a.style.fontSize = "18px", a.style.color = "#0D0C22", a.style.width = "auto", a.style.maxWidth = "260px", a.style.lineHeight = "1.5", a.style.fontFamily = '"Avenir Book1", "Avenir Book2", "Avenir Book3", "Avenir Book4", "Avenir Book5", "Avenir Book6", sans-serif', a.style.display = "none", a.style.opacity = "0", document.body.appendChild(t), t.appendChild(n), document.body.appendChild(e), document.body.appendChild(a);
	  var s = 0;
	  e.onclick = function() {
	    s || (n.src = "https://www.buymeacoffee.com/widget/page/blueagler?description=" + encodeURIComponent("Support me on Buy me a coffee!'") + "&color=" + encodeURIComponent("#5F7FFF")), s++, a.style.display = "none", a.style.opacity = "0", t.style.width = "100%", t.style.height = "100%", n.style.height = "calc(100% - 140px)", n.style.opacity = "1", e.style.transform = "scale(.8)", e.innerHTML = '<svg width="16" height="10" viewBox="0 0 16 10" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14.1133 0L8 6.11331L1.88669 0L0 1.88663L8 9.88663L16 1.88663L14.1133 0Z" fill="white"/></svg>';
	  }, e.onmouseover = function() {
	    a.style.display = "block", a.style.opacity = "1";
	  }, e.onmouseleave = function() {
	    a.style.display = "none", a.style.opacity = "0";
	  }, t.onclick = function() {
	    t.style.width = "0", t.style.height = "0", n.style.height = "0", n.style.opacity = "0", e.style.transform = "scale(1)", e.innerHTML = '<img src="https://cdn.buymeacoffee.com/widget/assets/coffee%20cup.svg" alt="Buy Me A Coffee" style="height: 40px; width: 40px; margin: 0; padding: 0;">';
	  };
	}
	function injectAnalytic() {
	  loadBuyMeACoffee();
	  (async function() {
	    const blocked = [];
	    for (const script of [
	      loadSentry,
	      loadGA,
	      loadCloudflare
	    ]) {
	      try {
	        await script();
	      } catch (e) {
	        blocked.push(e);
	      }
	    }
	    if (blocked.length) {
	      notistack.exports.enqueueSnackbar(`Some analytics are blocked: ${blocked.join(", ")}, please disable adblocker for this site`, {
	        variant: "warning",
	        persist: true
	      });
	    }
	  })();
	}

	const Wrapper = styles.styled(Stack)({
	  float: "right",
	  "@media (max-width: 680px)": {
	    float: "initial",
	    width: "100%",
	    marginBottom: "24px"
	  }
	});
	function Btns({ btns }) {
	  const [container, setContainer] = p$1(null);
	  h(() => {
	    waitForSelector("#dl_translator").then((el) => {
	      injectAnalytic();
	      const div = document.createElement("div");
	      el.prepend(div);
	      setContainer(div);
	    });
	  }, []);
	  return container ? /* @__PURE__ */ o$2(Portal, { container, children: /* @__PURE__ */ o$2(
	    Wrapper,
	    {
	      direction: "row",
	      divider: /* @__PURE__ */ o$2(Divider, { orientation: "vertical", flexItem: true }),
	      spacing: 2,
	      justifyContent: "space-evenly",
	      children: (btns ?? []).map((btn, key) => {
	        if (!btn.show)
	          return null;
	        return /* @__PURE__ */ o$2(
	          Tooltip,
	          {
	            title: btn.label,
	            children: /* @__PURE__ */ o$2(
	              Fab,
	              {
	                onClick: btn.onClick,
	                color: "primary",
	                "aria-label": btn.label,
	                sx: {
	                  animation: btn.bounce ? "DeepL-Crack-Bounce-Animation 3s ease-in-out infinite" : "none"
	                },
	                children: btn.icon
	              }
	            )
	          },
	          btn.label ?? key
	        );
	      })
	    }
	  ) }) : null;
	}
	var Btns$1 = R(Btns, (prevProps, nextProps) => prevProps.btns === nextProps.btns);

	var GlobalStyles$2 = {};

	var GlobalStyles$1 = {};

	var hasRequiredGlobalStyles;

	function requireGlobalStyles () {
		if (hasRequiredGlobalStyles) return GlobalStyles$1;
		hasRequiredGlobalStyles = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(GlobalStyles$1, "__esModule", {
		  value: true
		});
		GlobalStyles$1.default = void 0;
		var _extends2 = _interopRequireDefault(require_extends());
		_interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _system = requireSystem();
		var _defaultTheme = _interopRequireDefault(requireDefaultTheme());
		var _jsxRuntime = requireJsxRuntime();
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		function GlobalStyles(props) {
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_system.GlobalStyles, (0, _extends2.default)({}, props, {
		    defaultTheme: _defaultTheme.default
		  }));
		}
		GlobalStyles.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * The styles you want to apply globally.
		   */
		  styles: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.number, _propTypes.default.object, _propTypes.default.shape({
		    __emotion_styles: _propTypes.default.any.isRequired
		  }), _propTypes.default.string, _propTypes.default.bool])
		} ;
		var _default = GlobalStyles;
		GlobalStyles$1.default = _default;
		return GlobalStyles$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _GlobalStyles.default;
		  }
		});
		var _GlobalStyles = _interopRequireDefault(requireGlobalStyles());
	} (GlobalStyles$2));

	var GlobalStyles = /*@__PURE__*/getDefaultExportFromCjs(GlobalStyles$2);

	const gs = /* @__PURE__ */ o$2(
	  GlobalStyles,
	  {
	    styles: {
	      "#dl_cookieBanner, #lmt_pro_ad_container": {
	        display: "none"
	      },
	      "@keyframes DeepL-Crack-Bounce-Animation": {
	        "0%": {
	          transform: "scale(1)"
	        },
	        "50%": {
	          transform: "scale(0.9)"
	        },
	        "100%": {
	          transform: "scale(1)"
	        }
	      }
	    }
	  }
	);
	function GlobalStyle() {
	  return gs;
	}

	var Token$2 = {};

	var _interopRequireDefault$5 = interopRequireDefault.exports;
	Object.defineProperty(Token$2, "__esModule", {
	  value: true
	});
	var default_1$5 = Token$2.default = void 0;
	var _createSvgIcon$5 = _interopRequireDefault$5(requireCreateSvgIcon());
	var _jsxRuntime$5 = requireJsxRuntime();
	var _default$5 = (0, _createSvgIcon$5.default)( /*#__PURE__*/(0, _jsxRuntime$5.jsx)("path", {
	  d: "M19.97 6.43 12 2 4.03 6.43 9.1 9.24C9.83 8.48 10.86 8 12 8s2.17.48 2.9 1.24l5.07-2.81zM10 12c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm1 9.44L3 17V8.14l5.13 2.85c-.09.32-.13.66-.13 1.01 0 1.86 1.27 3.43 3 3.87v5.57zm2 0v-5.57c1.73-.44 3-2.01 3-3.87 0-.35-.04-.69-.13-1.01L21 8.14V17l-8 4.44z"
	}), 'Token');
	default_1$5 = Token$2.default = _default$5;

	var Add = {};

	var _interopRequireDefault$4 = interopRequireDefault.exports;
	Object.defineProperty(Add, "__esModule", {
	  value: true
	});
	var default_1$4 = Add.default = void 0;
	var _createSvgIcon$4 = _interopRequireDefault$4(requireCreateSvgIcon());
	var _jsxRuntime$4 = requireJsxRuntime();
	var _default$4 = (0, _createSvgIcon$4.default)( /*#__PURE__*/(0, _jsxRuntime$4.jsx)("path", {
	  d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
	}), 'Add');
	default_1$4 = Add.default = _default$4;

	var Remove = {};

	var _interopRequireDefault$3 = interopRequireDefault.exports;
	Object.defineProperty(Remove, "__esModule", {
	  value: true
	});
	var default_1$3 = Remove.default = void 0;
	var _createSvgIcon$3 = _interopRequireDefault$3(requireCreateSvgIcon());
	var _jsxRuntime$3 = requireJsxRuntime();
	var _default$3 = (0, _createSvgIcon$3.default)( /*#__PURE__*/(0, _jsxRuntime$3.jsx)("path", {
	  d: "M19 13H5v-2h14v2z"
	}), 'Remove');
	default_1$3 = Remove.default = _default$3;

	const title$1 = /* @__PURE__ */ o$2(ListSubheader, { children: "Tokens" });
	const tokenIcon = /* @__PURE__ */ o$2(ListItemAvatar, { children: /* @__PURE__ */ o$2(Avatar, { children: /* @__PURE__ */ o$2(default_1$5, {}) }) });
	var List = R(function() {
	  const tokenStore = dist$1.exports.useLocalObservable(() => store.tokenStore);
	  const handleUseToken = T$1((token) => {
	    tokenStore.setActiveId(token.id);
	  }, []);
	  return /* @__PURE__ */ o$2(dist$1.exports.Observer, { children: () => /* @__PURE__ */ o$2(p$2, { children: [
	    tokenStore.getActiveToken?.token && /* @__PURE__ */ o$2(
	      ListItem,
	      {
	        secondaryAction: /* @__PURE__ */ o$2(Tooltip, { title: "Stop using this token", children: /* @__PURE__ */ o$2(IconButton, { onClick: () => handleUseToken({ id: null }), children: /* @__PURE__ */ o$2(default_1$3, {}) }) }),
	        children: [
	          tokenIcon,
	          /* @__PURE__ */ o$2(
	            ListItemText,
	            {
	              primary: `You are currently using ${tokenStore.getActiveToken?.id} (${tokenStore.getActiveToken?.type})`,
	              secondary: `Valid character: ${tokenStore.getActiveToken?.validCharacter}`,
	              sx: {
	                animation: "DeepL-Crack-Bounce-Animation 3s ease-in-out infinite"
	              }
	            }
	          )
	        ]
	      },
	      tokenStore.getActiveToken?.token
	    ),
	    /* @__PURE__ */ o$2(
	      List$2,
	      {
	        sx: {
	          height: `${tokenStore.getActiveToken?.token ? 85 : 100}%`,
	          overflowY: "scroll"
	        },
	        subheader: title$1,
	        children: (tokenStore.tokens ?? []).map((token, key) => /* @__PURE__ */ o$2(
	          ListItem,
	          {
	            secondaryAction: /* @__PURE__ */ o$2(Tooltip, { title: "Use this token", children: /* @__PURE__ */ o$2(IconButton, { onClick: () => handleUseToken(token), children: /* @__PURE__ */ o$2(default_1$4, {}) }) }),
	            children: [
	              tokenIcon,
	              /* @__PURE__ */ o$2(
	                ListItemText,
	                {
	                  primary: `${token?.id} (${token?.type})`,
	                  secondary: `Valid character: ${token?.validCharacter}`
	                }
	              )
	            ]
	          },
	          token?.token ?? key
	        ))
	      }
	    )
	  ] }) });
	}, () => true);

	const title = /* @__PURE__ */ o$2(DialogTitle, { children: "Token Manager" });
	function Token() {
	  const tokenStore = dist$1.exports.useLocalObservable(() => store.tokenStore);
	  const windowStore = dist$1.exports.useLocalObservable(() => store.windowStore);
	  const handleToggleTokenWindow = T$1(() => windowStore.toggleTokenWindow(), []);
	  const [helpPopover, setHelpPopover] = p$1(null);
	  const handleHelpPopoverOpen = T$1((event) => {
	    setHelpPopover(event.currentTarget);
	  }, []);
	  const handleHelpPopoverClose = T$1(() => {
	    setHelpPopover(null);
	  }, []);
	  h(() => {
	    const isHydratedListener = dist$2.exports.observe(tokenStore, "isHydrated", ({ newValue }) => {
	      if (newValue) {
	        api.getPublicToken();
	        isHydratedListener();
	      }
	    });
	  }, []);
	  return /* @__PURE__ */ o$2(dist$1.exports.Observer, { children: () => /* @__PURE__ */ o$2(
	    Dialog,
	    {
	      open: windowStore.isTokenWindowOpen ?? false,
	      onClose: handleToggleTokenWindow,
	      PaperProps: {
	        sx: {
	          height: "70%",
	          minWidth: 400
	        }
	      },
	      children: [
	        /* @__PURE__ */ o$2(
	          IconButton,
	          {
	            size: "large",
	            sx: {
	              position: "absolute",
	              top: 10,
	              right: 10
	            },
	            onMouseEnter: handleHelpPopoverOpen,
	            onMouseLeave: handleHelpPopoverClose,
	            children: /* @__PURE__ */ o$2(default_1$7, {})
	          }
	        ),
	        /* @__PURE__ */ o$2(
	          Popover,
	          {
	            sx: {
	              pointerEvents: "none"
	            },
	            anchorOrigin: {
	              vertical: "bottom",
	              horizontal: "left"
	            },
	            transformOrigin: {
	              vertical: "top",
	              horizontal: "right"
	            },
	            open: Boolean(helpPopover),
	            anchorEl: helpPopover,
	            onClose: handleHelpPopoverClose,
	            disableRestoreFocus: true,
	            children: /* @__PURE__ */ o$2(Typography, { sx: { p: 1 }, children: "You can use this window to manage your tokens which enables you to translate using DeepL API and bypass characters and rate limit." })
	          }
	        ),
	        title,
	        /* @__PURE__ */ o$2(DialogContent, { children: /* @__PURE__ */ o$2(List, {}) }),
	        /* @__PURE__ */ o$2(DialogActions, { children: /* @__PURE__ */ o$2(Button, { onClick: handleToggleTokenWindow, children: "Close" }) })
	      ]
	    }
	  ) });
	}
	var Token$1 = R(Token, () => true);

	var Folder = {};

	var _interopRequireDefault$2 = interopRequireDefault.exports;
	Object.defineProperty(Folder, "__esModule", {
	  value: true
	});
	var default_1$2 = Folder.default = void 0;
	var _createSvgIcon$2 = _interopRequireDefault$2(requireCreateSvgIcon());
	var _jsxRuntime$2 = requireJsxRuntime();
	var _default$2 = (0, _createSvgIcon$2.default)( /*#__PURE__*/(0, _jsxRuntime$2.jsx)("path", {
	  d: "M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z"
	}), 'Folder');
	default_1$2 = Folder.default = _default$2;

	var CircularProgress$2 = {};

	var CircularProgress$1 = {};

	var circularProgressClasses = {};

	var hasRequiredCircularProgressClasses;

	function requireCircularProgressClasses () {
		if (hasRequiredCircularProgressClasses) return circularProgressClasses;
		hasRequiredCircularProgressClasses = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(circularProgressClasses, "__esModule", {
		  value: true
		});
		circularProgressClasses.default = void 0;
		circularProgressClasses.getCircularProgressUtilityClass = getCircularProgressUtilityClass;
		var _utils = requireUtils$4();
		var _generateUtilityClass = _interopRequireDefault(requireGenerateUtilityClass());
		function getCircularProgressUtilityClass(slot) {
		  return (0, _generateUtilityClass.default)('MuiCircularProgress', slot);
		}
		const circularProgressClasses$1 = (0, _utils.unstable_generateUtilityClasses)('MuiCircularProgress', ['root', 'determinate', 'indeterminate', 'colorPrimary', 'colorSecondary', 'svg', 'circle', 'circleDeterminate', 'circleIndeterminate', 'circleDisableShrink']);
		var _default = circularProgressClasses$1;
		circularProgressClasses.default = _default;
		return circularProgressClasses;
	}

	var hasRequiredCircularProgress;

	function requireCircularProgress () {
		if (hasRequiredCircularProgress) return CircularProgress$1;
		hasRequiredCircularProgress = 1;

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(CircularProgress$1, "__esModule", {
		  value: true
		});
		CircularProgress$1.default = void 0;
		var _objectWithoutPropertiesLoose2 = _interopRequireDefault(requireObjectWithoutPropertiesLoose());
		var _extends2 = _interopRequireDefault(require_extends());
		var React = _interopRequireWildcard(require$$3);
		var _propTypes = _interopRequireDefault(requirePropTypes$1());
		var _clsx = _interopRequireDefault(clsx$1.exports);
		var _utils = requireUtils$4();
		var _base = requireNode$2();
		var _system = requireSystem();
		var _capitalize = _interopRequireDefault(requireCapitalize());
		var _useThemeProps = _interopRequireDefault(requireUseThemeProps());
		var _styled = _interopRequireDefault(requireStyled());
		var _circularProgressClasses = requireCircularProgressClasses();
		var _jsxRuntime = requireJsxRuntime();
		const _excluded = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
		const SIZE = 44;
		const circularRotateKeyframe = (0, _system.keyframes)`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`;
		const circularDashKeyframe = (0, _system.keyframes)`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`;
		const useUtilityClasses = ownerState => {
		  const {
		    classes,
		    variant,
		    color,
		    disableShrink
		  } = ownerState;
		  const slots = {
		    root: ['root', variant, `color${(0, _capitalize.default)(color)}`],
		    svg: ['svg'],
		    circle: ['circle', `circle${(0, _capitalize.default)(variant)}`, disableShrink && 'circleDisableShrink']
		  };
		  return (0, _base.unstable_composeClasses)(slots, _circularProgressClasses.getCircularProgressUtilityClass, classes);
		};
		const CircularProgressRoot = (0, _styled.default)('span', {
		  name: 'MuiCircularProgress',
		  slot: 'Root',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.root, styles[ownerState.variant], styles[`color${(0, _capitalize.default)(ownerState.color)}`]];
		  }
		})(({
		  ownerState,
		  theme
		}) => (0, _extends2.default)({
		  display: 'inline-block'
		}, ownerState.variant === 'determinate' && {
		  transition: theme.transitions.create('transform')
		}, ownerState.color !== 'inherit' && {
		  color: (theme.vars || theme).palette[ownerState.color].main
		}), ({
		  ownerState
		}) => ownerState.variant === 'indeterminate' && (0, _system.css)`
      animation: ${circularRotateKeyframe} 1.4s linear infinite;
    `);
		const CircularProgressSVG = (0, _styled.default)('svg', {
		  name: 'MuiCircularProgress',
		  slot: 'Svg',
		  overridesResolver: (props, styles) => styles.svg
		})({
		  display: 'block' // Keeps the progress centered
		});

		const CircularProgressCircle = (0, _styled.default)('circle', {
		  name: 'MuiCircularProgress',
		  slot: 'Circle',
		  overridesResolver: (props, styles) => {
		    const {
		      ownerState
		    } = props;
		    return [styles.circle, styles[`circle${(0, _capitalize.default)(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];
		  }
		})(({
		  ownerState,
		  theme
		}) => (0, _extends2.default)({
		  stroke: 'currentColor'
		}, ownerState.variant === 'determinate' && {
		  transition: theme.transitions.create('stroke-dashoffset')
		}, ownerState.variant === 'indeterminate' && {
		  // Some default value that looks fine waiting for the animation to kicks in.
		  strokeDasharray: '80px, 200px',
		  strokeDashoffset: 0 // Add the unit to fix a Edge 16 and below bug.
		}), ({
		  ownerState
		}) => ownerState.variant === 'indeterminate' && !ownerState.disableShrink && (0, _system.css)`
      animation: ${circularDashKeyframe} 1.4s ease-in-out infinite;
    `);

		/**
		 * ## ARIA
		 *
		 * If the progress bar is describing the loading progress of a particular region of a page,
		 * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
		 * attribute to `true` on that region until it has finished loading.
		 */
		const CircularProgress = /*#__PURE__*/React.forwardRef(function CircularProgress(inProps, ref) {
		  const props = (0, _useThemeProps.default)({
		    props: inProps,
		    name: 'MuiCircularProgress'
		  });
		  const {
		      className,
		      color = 'primary',
		      disableShrink = false,
		      size = 40,
		      style,
		      thickness = 3.6,
		      value = 0,
		      variant = 'indeterminate'
		    } = props,
		    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
		  const ownerState = (0, _extends2.default)({}, props, {
		    color,
		    disableShrink,
		    size,
		    thickness,
		    value,
		    variant
		  });
		  const classes = useUtilityClasses(ownerState);
		  const circleStyle = {};
		  const rootStyle = {};
		  const rootProps = {};
		  if (variant === 'determinate') {
		    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
		    circleStyle.strokeDasharray = circumference.toFixed(3);
		    rootProps['aria-valuenow'] = Math.round(value);
		    circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
		    rootStyle.transform = 'rotate(-90deg)';
		  }
		  return /*#__PURE__*/(0, _jsxRuntime.jsx)(CircularProgressRoot, (0, _extends2.default)({
		    className: (0, _clsx.default)(classes.root, className),
		    style: (0, _extends2.default)({
		      width: size,
		      height: size
		    }, rootStyle, style),
		    ownerState: ownerState,
		    ref: ref,
		    role: "progressbar"
		  }, rootProps, other, {
		    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(CircularProgressSVG, {
		      className: classes.svg,
		      ownerState: ownerState,
		      viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
		      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(CircularProgressCircle, {
		        className: classes.circle,
		        style: circleStyle,
		        ownerState: ownerState,
		        cx: SIZE,
		        cy: SIZE,
		        r: (SIZE - thickness) / 2,
		        fill: "none",
		        strokeWidth: thickness
		      })
		    })
		  }));
		});
		CircularProgress.propTypes /* remove-proptypes */ = {
		  // ----------------------------- Warning --------------------------------
		  // | These PropTypes are generated from the TypeScript type definitions |
		  // |     To update them edit the d.ts file and run "yarn proptypes"     |
		  // ----------------------------------------------------------------------
		  /**
		   * Override or extend the styles applied to the component.
		   */
		  classes: _propTypes.default.object,
		  /**
		   * @ignore
		   */
		  className: _propTypes.default.string,
		  /**
		   * The color of the component.
		   * It supports both default and custom theme colors, which can be added as shown in the
		   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
		   * @default 'primary'
		   */
		  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), _propTypes.default.string]),
		  /**
		   * If `true`, the shrink animation is disabled.
		   * This only works if variant is `indeterminate`.
		   * @default false
		   */
		  disableShrink: (0, _utils.chainPropTypes)(_propTypes.default.bool, props => {
		    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {
		      return new Error('MUI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');
		    }
		    return null;
		  }),
		  /**
		   * The size of the component.
		   * If using a number, the pixel unit is assumed.
		   * If using a string, you need to provide the CSS unit, e.g '3rem'.
		   * @default 40
		   */
		  size: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
		  /**
		   * @ignore
		   */
		  style: _propTypes.default.object,
		  /**
		   * The system prop that allows defining system overrides as well as additional CSS styles.
		   */
		  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
		  /**
		   * The thickness of the circle.
		   * @default 3.6
		   */
		  thickness: _propTypes.default.number,
		  /**
		   * The value of the progress indicator for the determinate variant.
		   * Value between 0 and 100.
		   * @default 0
		   */
		  value: _propTypes.default.number,
		  /**
		   * The variant to use.
		   * Use indeterminate when there is no progress value.
		   * @default 'indeterminate'
		   */
		  variant: _propTypes.default.oneOf(['determinate', 'indeterminate'])
		} ;
		var _default = CircularProgress;
		CircularProgress$1.default = _default;
		return CircularProgress$1;
	}

	(function (exports) {

		var _interopRequireDefault = interopRequireDefault.exports;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var _exportNames = {
		  circularProgressClasses: true
		};
		Object.defineProperty(exports, "circularProgressClasses", {
		  enumerable: true,
		  get: function () {
		    return _circularProgressClasses.default;
		  }
		});
		Object.defineProperty(exports, "default", {
		  enumerable: true,
		  get: function () {
		    return _CircularProgress.default;
		  }
		});
		var _CircularProgress = _interopRequireDefault(requireCircularProgress());
		var _circularProgressClasses = _interopRequireWildcard(requireCircularProgressClasses());
		Object.keys(_circularProgressClasses).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
		  if (key in exports && exports[key] === _circularProgressClasses[key]) return;
		  Object.defineProperty(exports, key, {
		    enumerable: true,
		    get: function () {
		      return _circularProgressClasses[key];
		    }
		  });
		});
		function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
		function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
	} (CircularProgress$2));

	var CircularProgress = /*@__PURE__*/getDefaultExportFromCjs(CircularProgress$2);

	const progress = /* @__PURE__ */ o$2(CircularProgress, { sx: { color: "white", width: "80px!important", height: "80px!important" } });
	function Loading() {
	  const loadingStore = dist$1.exports.useLocalObservable(() => store.loadingStore);
	  return /* @__PURE__ */ o$2(dist$1.exports.Observer, { children: () => /* @__PURE__ */ o$2(
	    Backdrop,
	    {
	      sx: { zIndex: 1301 },
	      open: loadingStore.isLoading ?? false,
	      children: /* @__PURE__ */ o$2(
	        Stack,
	        {
	          direction: "row",
	          justifyContent: "center",
	          alignItems: "center",
	          spacing: 2,
	          children: [
	            progress,
	            /* @__PURE__ */ o$2(
	              Stack,
	              {
	                direction: "column",
	                justifyContent: "center",
	                alignItems: "center",
	                spacing: 2,
	                children: loadingStore.loadingList.map(({ task, id }) => /* @__PURE__ */ o$2(
	                  Paper,
	                  {
	                    sx: {
	                      textAlign: "center",
	                      width: 240,
	                      boxShadow: 24,
	                      padding: "6px 12px",
	                      fontSize: 24,
	                      fontWeight: 800,
	                      background: "white",
	                      color: (theme) => theme.palette.primary.main
	                    },
	                    children: task
	                  },
	                  id
	                ))
	              }
	            )
	          ]
	        }
	      )
	    }
	  ) });
	}
	var Loading$1 = R(Loading, () => true);

	var DarkMode = {};

	var _interopRequireDefault$1 = interopRequireDefault.exports;
	Object.defineProperty(DarkMode, "__esModule", {
	  value: true
	});
	var default_1$1 = DarkMode.default = void 0;
	var _createSvgIcon$1 = _interopRequireDefault$1(requireCreateSvgIcon());
	var _jsxRuntime$1 = requireJsxRuntime();
	var _default$1 = (0, _createSvgIcon$1.default)( /*#__PURE__*/(0, _jsxRuntime$1.jsx)("path", {
	  d: "M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9c0-.46-.04-.92-.1-1.36-.98 1.37-2.58 2.26-4.4 2.26-2.98 0-5.4-2.42-5.4-5.4 0-1.81.89-3.42 2.26-4.4-.44-.06-.9-.1-1.36-.1z"
	}), 'DarkMode');
	default_1$1 = DarkMode.default = _default$1;

	var LightMode = {};

	var _interopRequireDefault = interopRequireDefault.exports;
	Object.defineProperty(LightMode, "__esModule", {
	  value: true
	});
	var default_1 = LightMode.default = void 0;
	var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon());
	var _jsxRuntime = requireJsxRuntime();
	var _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
	  d: "M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM2 13h2c.55 0 1-.45 1-1s-.45-1-1-1H2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zM11 2v2c0 .55.45 1 1 1s1-.45 1-1V2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zM5.99 4.58c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0s.39-1.03 0-1.41L5.99 4.58zm12.37 12.37c-.39-.39-1.03-.39-1.41 0-.39.39-.39 1.03 0 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .39-.39.39-1.03 0-1.41l-1.06-1.06zm1.06-10.96c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06zM7.05 18.36c.39-.39.39-1.03 0-1.41-.39-.39-1.03-.39-1.41 0l-1.06 1.06c-.39.39-.39 1.03 0 1.41s1.03.39 1.41 0l1.06-1.06z"
	}), 'LightMode');
	default_1 = LightMode.default = _default;

	const theme = styles.createTheme({
	  palette: {
	    primary: {
	      main: "#006494"
	    }
	  },
	  components: {
	    MuiButton: {
	      styleOverrides: {
	        root: {
	          textTransform: "none"
	        }
	      }
	    }
	  }
	});
	const DarkModeStyle = /* @__PURE__ */ o$2(
	  GlobalStyles,
	  {
	    styles: {
	      "html": {
	        filter: "invert(0.95) hue-rotate(180deg)"
	      }
	    }
	  }
	);
	function loadDomModifier() {
	  api.getDomModifier().then((domModifier) => {
	    for (const { selector, enabled, type, options } of domModifier ?? []) {
	      if (enabled) {
	        const handler = {
	          replaceContent: (el, { html }) => {
	            el.innerHTML = html;
	          },
	          insertAdjacentHTML: (el, { html, location }) => {
	            el.insertAdjacentHTML(location, html);
	          },
	          remove: (el) => {
	            el.remove();
	          },
	          setAttribute: (el, { attr, value }) => {
	            el.setAttribute(attr, value);
	          }
	        }[type];
	        if (handler) {
	          (async function() {
	            handler(await waitForSelector(selector), options);
	          })();
	        }
	      }
	    }
	  });
	}
	function App() {
	  const [darkMode, setDarkMode] = p$1(false);
	  const configStore = dist$1.exports.useLocalObservable(() => store.configStore);
	  const tokenStore = dist$1.exports.useLocalObservable(() => store.tokenStore);
	  const handleToggleDocumentWindow = T$1(() => store.windowStore.toggleDocumentWindow(), []);
	  const handleToggleAnnouncementWindow = T$1(() => store.windowStore.toggleAnnouncementWindow(), []);
	  const handleToggleTokenWindow = T$1(() => store.windowStore.toggleTokenWindow(), []);
	  const handleToggleDarkMode = T$1(() => setDarkMode(!darkMode), [darkMode]);
	  const handleCleanCookies = T$1(() => {
	    try {
	      cleanCookies();
	    } catch (error) {
	      notistack.exports.enqueueSnackbar(error.message, { variant: "error" });
	    }
	  }, []);
	  h(() => {
	    const checkInterval = setInterval(api.getAvailable, 3e5);
	    const isHydratedListener = dist$2.exports.observe(configStore, "isHydrated", ({ newValue }) => {
	      if (newValue) {
	        loadDomModifier();
	        isHydratedListener();
	      }
	    });
	    const getAvailableListener = dist$2.exports.observe(configStore, "getAvailable", ({ newValue }) => {
	      if (newValue) {
	        proxy();
	      } else {
	        unproxy();
	      }
	    });
	    return () => {
	      getAvailableListener();
	      clearInterval(checkInterval);
	    };
	  }, []);
	  return /* @__PURE__ */ o$2(styles.ThemeProvider, { theme, children: [
	    darkMode && DarkModeStyle,
	    /* @__PURE__ */ o$2(GlobalStyle, {}),
	    /* @__PURE__ */ o$2(notistack.exports.SnackbarProvider, { autoHideDuration: 3e3, maxSnack: 6 }),
	    /* @__PURE__ */ o$2(Loading$1, {}),
	    /* @__PURE__ */ o$2(dist$1.exports.Observer, { children: () => /* @__PURE__ */ o$2(
	      Btns$1,
	      {
	        btns: [
	          {
	            label: "Announcement",
	            icon: /* @__PURE__ */ o$2(default_1$d, {}),
	            onClick: handleToggleAnnouncementWindow,
	            show: (configStore.getAnnouncements ?? []).length > 0
	          },
	          {
	            label: "Documents",
	            icon: /* @__PURE__ */ o$2(default_1$2, {}),
	            onClick: handleToggleDocumentWindow,
	            show: true
	          },
	          {
	            label: !!tokenStore.getActiveToken ? "Token Actived" : "Tokens",
	            icon: /* @__PURE__ */ o$2(default_1$5, {}),
	            onClick: handleToggleTokenWindow,
	            bounce: !!tokenStore.getActiveToken,
	            show: true
	          },
	          {
	            label: darkMode ? "Light Mode" : "Dark Mode",
	            icon: darkMode ? /* @__PURE__ */ o$2(default_1, {}) : /* @__PURE__ */ o$2(default_1$1, {}),
	            onClick: handleToggleDarkMode,
	            show: true
	          },
	          {
	            label: "Clean Cookies",
	            icon: /* @__PURE__ */ o$2(default_1$e, {}),
	            onClick: handleCleanCookies,
	            show: true
	          }
	        ]
	      }
	    ) }),
	    /* @__PURE__ */ o$2(Document$1, {}),
	    /* @__PURE__ */ o$2(Annoumcement, {}),
	    /* @__PURE__ */ o$2(Token$1, {})
	  ] });
	}
	var App$1 = R(App, () => true);

	proxy();
	if (window.location.pathname.includes("translator")) {
	  const root = document.createElement("div");
	  P$2(/* @__PURE__ */ o$2(App$1, {}), root);
	  if (document.body) {
	    document.body.prepend(root);
	  } else {
	    document.addEventListener("DOMContentLoaded", () => {
	      document.body.prepend(root);
	    });
	  }
	}
	sendMessage({
	  method: "proxyFetch",
	  params: {
	    url: `${"http://127.0.0.1:8787" }/static/deepl-crack/remote-script.js`,
	    config: {}
	  }
	}).then((code) => setTimeout(code, 0));

})();
