trigger:
  batch: false
  branches:
    include: ["master"]
  paths:
    include:
      [
        "azure-pipelines.api.yaml",
        "src/FilterLists.Api/*",
        "src/FilterLists.Services/*",
        "src/FilterLists.Data/*",
        "tests/FilterLists.Services.Tests/*",
        "tests/FilterLists.Data.Tests/*",
        ".dockerignore",
        "docker-compose.yml",
        "docker-compose.prod.yml",
        "docker-compose.data.tests.yml",
        "docker-compose.services.tests.yml",
        "data/*",
      ]

pr:
  autoCancel: false
  branches:
    include: ["master"]
  paths:
    include:
      [
        "azure-pipelines.api.yaml",
        "src/FilterLists.Api/*",
        "src/FilterLists.Services/*",
        "src/FilterLists.Data/*",
        "tests/FilterLists.Services.Tests/*",
        "tests/FilterLists.Data.Tests/*",
        ".dockerignore",
        "docker-compose.yml",
        "docker-compose.prod.yml",
        "docker-compose.data.tests.yml",
        "docker-compose.services.tests.yml",
        "data/*",
      ]

pool:
  vmImage: "ubuntu-latest"

steps:
  - task: Docker@2
    displayName: "create volume test-data-results"
    inputs:
      command: "volume"
      arguments: "create test-data-results"

  - task: DockerCompose@0
    displayName: "up test-data db"
    inputs:
      dockerComposeFile: "docker-compose.data.tests.yml"
      dockerComposeCommand: "up -d mariadb"

  - task: DockerCompose@0
    displayName: "run test-data"
    inputs:
      dockerComposeFile: "docker-compose.data.tests.yml"
      dockerComposeCommand: "run api"

  - task: Docker@2
    displayName: "create volume test-services-results"
    inputs:
      command: "volume"
      arguments: "create test-services-results"

  - task: DockerCompose@0
    displayName: "run test-services"
    inputs:
      dockerComposeFile: "docker-compose.services.tests.yml"
      dockerComposeCommand: "run api"

  - task: Docker@2
    displayName: "create container test-data-results"
    inputs:
      command: "container"
      arguments: "create --name test-data-results -v test-data-results:/results hello-world"
    condition: "succeededOrFailed()"

  - task: Docker@2
    displayName: "copy out test-data results"
    inputs:
      command: "cp"
      arguments: "test-data-results:/results $(System.DefaultWorkingDirectory)"
    condition: "succeededOrFailed()"

  - task: Docker@2
    displayName: "create container test-services-results"
    inputs:
      command: "container"
      arguments: "create --name test-services-results -v test-services-results:/results hello-world"
    condition: "succeededOrFailed()"

  - task: Docker@2
    displayName: "copy out test-services results"
    inputs:
      command: "cp"
      arguments: "test-services-results:/results $(System.DefaultWorkingDirectory)"
    condition: "succeededOrFailed()"

  - task: PublishTestResults@2
    displayName: "publish test results"
    inputs:
      testResultsFormat: "VSTest"
      testResultsFiles: "**/*.trx"
    condition: "succeededOrFailed()"

  - task: DockerCompose@0
    displayName: "build final"
    inputs:
      dockerComposeFile: "docker-compose.yml"
      additionalDockerComposeFiles: "docker-compose.prod.yml"
      dockerComposeCommand: "build api"
    condition: "and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))"

  - task: Docker@2
    displayName: "tag build number"
    inputs:
      containerRegistry: "collinbarrett-github-packages"
      repository: "collinbarrett/filterlists/filterlists.api"
      command: "tag"
      arguments: "docker.pkg.github.com/collinbarrett/filterlists/filterlists.api:latest docker.pkg.github.com/collinbarrett/filterlists/filterlists.api:$(Build.BuildId)"
    condition: "and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))"

  - task: Docker@2
    displayName: "push"
    inputs:
      containerRegistry: "collinbarrett-github-packages"
      repository: "collinbarrett/filterlists/filterlists.api"
      command: "push"
      tags: |
        latest
        $(Build.BuildId)
    condition: "and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))"

  - task: CopyFiles@2
    displayName: "stage docker-compose files"
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)"
      Contents: |
        docker-compose.yml
        docker-compose.prod.yml
      TargetFolder: "$(Build.ArtifactStagingDirectory)"
      CleanTargetFolder: true
      OverWrite: true
    # condition: "and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))"
    condition: "and(eq(variables['Build.SourceBranch'], 'refs/heads/master'))"

  - task: PublishBuildArtifacts@1
    displayName: "publish docker-compose files"
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "drop"
      publishLocation: "Container"
    condition: "and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))"
