proxy-providers:
  HK:
    type: http
    path: ./Server/hk.yaml
    url: "这里填写你的订阅链接，注意保留双引号和双引号前面的空格"
    interval: 3600
    filter: '香港|HK|Hong Kong|🇭🇰'
    health-check: 
      enable: true
      url: http://www.gstatic.com/generate_204
      interval: 600
  SG:
    type: http
    path: ./Server/sg.yaml
    url: "这里填写你的订阅链接，注意保留双引号和双引号前面的空格"
    interval: 3600
    filter: '新加坡|狮城|SG|Singapore|🇸🇬'
    health-check: 
      enable: true
      url: http://www.gstatic.com/generate_204
      interval: 600
  KR:
    type: http
    path: ./Server/kr.yaml
    url: "这里填写你的订阅链接，注意保留双引号和双引号前面的空格"
    interval: 3600
    filter: '韩国|韓國|南朝鲜|KR|Korean|🇰🇷'
    health-check: 
      enable: true
      url: http://www.gstatic.com/generate_204
      interval: 600
  US:
    type: http
    path: ./Server/US.yaml
    url: "这里填写你的订阅链接，注意保留双引号和双引号前面的空格"
    interval: 3600
    filter: '美国|US|USA|America|United States|🇺🇸'
    health-check: 
      enable: true
      url: http://www.gstatic.com/generate_204
      interval: 600
  JP:
    type: http
    path: ./Server/JP.yaml
    url: "这里填写你的订阅链接，注意保留双引号和双引号前面的空格"
    interval: 3600
    filter: '日本|JP|Japan|🇯🇵'
    health-check: 
      enable: true
      url: http://www.gstatic.com/generate_204
      interval: 600
mixed-port: 7890
allow-lan: false
mode: rule
log-level: debug
ipv6: false

proxy-groups:
  - name: 全球加速
    type: select
    proxies:
      - 香港节点
      - 狮城节点
      - 韩国节点
      - 日本节点
      - 美国节点
  - name: 电报信息
    type: select
    proxies:
      - 香港节点
      - 狮城节点
      - 韩国节点
      - 日本节点
      - 美国节点
  - name: 微软服务
    type: select
    proxies:
      - 香港节点
      - 狮城节点
      - 韩国节点
      - 日本节点
      - 美国节点
      - DIRECT
  - name: Emby
    type: select
    proxies:
      - 香港节点
      - 狮城节点
      - 韩国节点
      - 日本节点
      - 美国节点
      - DIRECT
  - name: 国际媒体
    type: select
    proxies:
      - 香港节点
      - 狮城节点
      - 韩国节点
      - 日本节点
      - 美国节点
  - name: 漏网之鱼
    type: select
    proxies:
      - 香港节点
      - 狮城节点
      - 韩国节点
      - 日本节点
      - 美国节点
      - DIRECT
  - name: "香港节点"
    type: url-test
    use:
      - HK
  - name: "狮城节点"
    type: url-test
    use:
      - SG
  - name: "韩国节点"
    type: url-test
    use:
      - KR
  - name: "日本节点"
    type: url-test
    use:
      - JP
  - name: "美国节点"
    type: url-test
    use:
      - US

rule-providers:
   Unbreak:
    type: http
    behavior: domain
    path: ./RuleSet/DivineEngine/Unbreak.yaml
    url: https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Clash/RuleSet/Unbreak.yaml
    interval: 86400

   BanAD:
    type: http
    behavior: domain
    path: ./RuleSet/ACL4SSR/BanAD.yaml
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/Providers/BanAD.yaml
    interval: 86400

   BanProgramAD:
    type: http
    behavior: classical
    path: ./RuleSet/ACL4SSR/BanProgramAD.list
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/Providers/BanProgramAD.yaml
    interval: 86400

   Microsoft:
    type: http
    behavior: classical
    path: ./RuleSet/ACL4SSR/Microsoft.yaml
    url: https://cdn.jsdelivr.net/gh/ACL4SSR/ACL4SSR@master/Clash/Providers/Ruleset/Microsoft.yaml
    interval: 86400

   Emby:
    type: http
    behavior: classical
    path: ./RuleSet/Emby.yaml
    url: https://cdn.jsdelivr.net/gh/iEwha/Profiles@master/Clash/Ruleset/Emby.yaml
    interval: 86400

   Telegram:
    type: http
    behavior: classical
    path: ./RuleSet/DivineEngine/Telegram.yaml
    url: https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Clash/RuleSet/Extra/Telegram/Telegram.yaml
    interval: 86400

   Streaming:
    type: http
    behavior: classical
    path: ./RuleSet/DivineEngine/Streaming.yaml
    url: https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Clash/RuleSet/StreamingMedia/Streaming.yaml
    interval: 86400

   Proxy:
    type: http
    behavior: classical
    path: ./RuleSet/DivineEngine/Global.yaml
    url: https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Clash/RuleSet/Global.yaml
    interval: 86400

   China:
    type: http
    behavior: classical
    path: ./RuleSet/DivineEngine/China.yaml
    url: https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Clash/RuleSet/China.yaml
    interval: 86400

rules:
  - RULE-SET,Unbreak,DIRECT
  - RULE-SET,BanAD,REJECT
  - RULE-SET,BanProgramAD,REJECT
  - RULE-SET,Microsoft,微软服务
  - RULE-SET,Emby,Emby
  - RULE-SET,Telegram,电报信息
  - RULE-SET,Streaming,国际媒体
  - RULE-SET,Proxy,全球加速
  - RULE-SET,China,DIRECT
  - GEOIP,CN,DIRECT,no-resolve
  - MATCH,漏网之鱼

script:
  code: |
    def main(ctx, metadata):
        ruleset_action = {
            "BanAD": "REJECT",
            "BanProgramAD": "REJECT",
            "Unbreak": "DIRECT",           
            "Microsoft": "微软服务",
            "Emby": "Emby",
            "Telegram": "电报信息",
            "Streaming": "国际媒体",
            "Proxy": "全球加速",
            "China": "DIRECT",
            
          }
        port = int(metadata["dst_port"])
        if metadata["network"] == "UDP":
            if port == 443:
                ctx.log('[Script] matched QUIC traffic use reject')
                return "REJECT"
        port_list = [21, 22, 23, 53, 80, 123, 143, 194, 443, 465, 587, 853, 993, 995, 998, 2052, 2053, 2082, 2083, 2086, 2095, 2096, 5222, 5228, 5229, 5230, 8080, 8443, 8880, 8888, 8889]
        if port not in port_list:
            ctx.log('[Script] not common port use direct')
            return "DIRECT"
        if metadata["dst_ip"] == "":
            metadata["dst_ip"] = ctx.resolve_ip(metadata["host"])
            
        for ruleset in ruleset_action:
            if ctx.rule_providers[ruleset].match(metadata):
                return ruleset_action[ruleset]

        if metadata["dst_ip"] == "":
            return "DIRECT"

        code = ctx.geoip(metadata["dst_ip"])
        if code == "CN":
            ctx.log('[Script] Geoip CN')
            return "DIRECT"

        ctx.log('[Script] MATCH')
        return "漏网之鱼"
   
