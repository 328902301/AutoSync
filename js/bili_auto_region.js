let $=nobyda(),run=EnvInfo();function EnvInfo(){const e=$request.url;if("undefined"!=typeof $response){const t=JSON.parse($response.body||"{}"),i=t.data||t.result||{},n=[i.title,i.series&&i.series.series_title,i.season_title].filter((e=>/\u5340\uff09/.test(e)))[0]||i.title,o=-404===t.code?-404:null;SwitchRegion(n||o).then((i=>i?$done({status:$.isQuanX?"HTTP/1.1 307":307,headers:{Location:e},body:"{}"}):$done({body:JSON.stringify(t)})))}else{const t={url:e.replace(/%20(%E6%B8%AF|%E5%8F%B0|%E4%B8%AD)&/g,"&")};SwitchRegion(e).then((()=>$done(t)))}}async function SwitchRegion(e){const t=$.read("BiliArea_Policy")||"Bilibili",i=$.read("BiliArea_CN")||"DIRECT",n=$.read("BiliArea_TW")||"台湾节点",o=$.read("BiliArea_HK")||"香港节点",s=$.read("BiliArea_DF")||"FALLBACK",r=$.read("BiliArea_disabled")||"",u=await $.getPolicy(t),d=(()=>{let t;if(/\u6e2f[\u4e00-\u9fa5]+\u5340|%20%E6%B8%AF&/.test(e)){const i=/\u53f0[\u4e00-\u9fa5]+\u5340/.test(e);u==o||u==n&&i||(t=o)}else/\u53f0[\u4e00-\u9fa5]+\u5340|%20%E5%8F%B0&/.test(e)?u!=n&&(t=n):-404===e?u!=s&&(t=s):u!=i&&(t=i);return $.isQuanX&&"direct"===u&&"DIRECT"===t&&(t=null),t})();if(d&&!r.includes($.ssid||void 0)){const i=await $.setPolicy(t,d),n="true"===$.read("BiliAreaNotify"),o=SwitchStatus(i,u,d);if(n?console.log(`${/^(http|-404)/.test(e)||!e?"":e}\n${o}`):$.notify(/^(http|-404)/.test(e)||!e?"":e,"",o),i)return!0}return!1}function SwitchStatus(e,t,i){return e&&"number"!=typeof t?`${t}  =>  ${i}  =>  🟢`:2===t?"切换失败, 策略组名未填写或填写有误 ⚠️":3===t?"切换失败, 不支持您的VPN应用版本 ⚠️":0===e?"切换失败, 子策略名未填写或填写有误 ⚠️":"策略切换失败, 未知错误 ⚠️"}function nobyda(){const e="undefined"!=typeof $httpClient,t="undefined"!=typeof $task,i="undefined"!=typeof $network&&"undefined"!=typeof $script,n=t&&"undefined"!=typeof $environment?$environment.ssid:i&&$network.wifi?$network.wifi.ssid:void 0;return{getPolicy:e=>i?"undefined"==typeof $httpAPI?3:new Promise((t=>{$httpAPI("GET","v1/policy_groups/select",{group_name:encodeURIComponent(e)},(e=>t(e.policy||2)))})):t?"undefined"==typeof $configuration?3:new Promise((t=>{$configuration.sendMessage({action:"get_policy_state"}).then((i=>{i.ret&&i.ret[e]?t(i.ret[e][1]):t(2)}),(()=>t()))})):void 0,setPolicy:(e,n)=>i&&"undefined"!=typeof $httpAPI?new Promise((t=>{$httpAPI("POST","v1/policy_groups/select",{group_name:e,policy:n},(e=>t(!e.error||0)))})):t&&"undefined"!=typeof $configuration?new Promise((t=>{$configuration.sendMessage({action:"set_policy_state",content:{[e]:n}}).then((e=>t(!e.error||0)),(()=>t()))})):void 0,isSurge:i,isQuanX:t,notify:(i,n,o)=>{console.log(`${i}\n${n}\n${o}`),t&&$notify(i,n,o),e&&$notification.post(i,n,o)},read:i=>t?$prefs.valueForKey(i):e?$persistentStore.read(i):void 0,ssid:n}}